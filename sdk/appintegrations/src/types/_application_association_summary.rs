// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about the Application Association.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationAssociationSummary {
    /// <p>The Amazon Resource Name (ARN) of the Application Association.</p>
    pub application_association_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the client that is associated with the Application Association.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
}
impl ApplicationAssociationSummary {
    /// <p>The Amazon Resource Name (ARN) of the Application Association.</p>
    pub fn application_association_arn(&self) -> ::std::option::Option<&str> {
        self.application_association_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The identifier for the client that is associated with the Application Association.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
}
impl ApplicationAssociationSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationAssociationSummary`](crate::types::ApplicationAssociationSummary).
    pub fn builder() -> crate::types::builders::ApplicationAssociationSummaryBuilder {
        crate::types::builders::ApplicationAssociationSummaryBuilder::default()
    }
}

/// A builder for [`ApplicationAssociationSummary`](crate::types::ApplicationAssociationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationAssociationSummaryBuilder {
    pub(crate) application_association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
}
impl ApplicationAssociationSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Application Association.</p>
    pub fn application_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Application Association.</p>
    pub fn set_application_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Application Association.</p>
    pub fn get_application_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_association_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The identifier for the client that is associated with the Application Association.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the client that is associated with the Application Association.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The identifier for the client that is associated with the Application Association.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// Consumes the builder and constructs a [`ApplicationAssociationSummary`](crate::types::ApplicationAssociationSummary).
    pub fn build(self) -> crate::types::ApplicationAssociationSummary {
        crate::types::ApplicationAssociationSummary {
            application_association_arn: self.application_association_arn,
            application_arn: self.application_arn,
            client_id: self.client_id,
        }
    }
}
