// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSyncConfigurationInput {
    /// <p>The branch for the sync configuration to be updated.</p>
    pub branch: ::std::option::Option<::std::string::String>,
    /// <p>The configuration file for the sync configuration to be updated.</p>
    pub config_file: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the repository link for the sync configuration to be updated.</p>
    pub repository_link_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon Web Services resource for the sync configuration to be updated.</p>
    pub resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role for the sync configuration to be updated.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The sync type for the sync configuration to be updated.</p>
    pub sync_type: ::std::option::Option<crate::types::SyncConfigurationType>,
}
impl UpdateSyncConfigurationInput {
    /// <p>The branch for the sync configuration to be updated.</p>
    pub fn branch(&self) -> ::std::option::Option<&str> {
        self.branch.as_deref()
    }
    /// <p>The configuration file for the sync configuration to be updated.</p>
    pub fn config_file(&self) -> ::std::option::Option<&str> {
        self.config_file.as_deref()
    }
    /// <p>The ID of the repository link for the sync configuration to be updated.</p>
    pub fn repository_link_id(&self) -> ::std::option::Option<&str> {
        self.repository_link_id.as_deref()
    }
    /// <p>The name of the Amazon Web Services resource for the sync configuration to be updated.</p>
    pub fn resource_name(&self) -> ::std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The ARN of the IAM role for the sync configuration to be updated.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The sync type for the sync configuration to be updated.</p>
    pub fn sync_type(&self) -> ::std::option::Option<&crate::types::SyncConfigurationType> {
        self.sync_type.as_ref()
    }
}
impl UpdateSyncConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateSyncConfigurationInput`](crate::operation::update_sync_configuration::UpdateSyncConfigurationInput).
    pub fn builder() -> crate::operation::update_sync_configuration::builders::UpdateSyncConfigurationInputBuilder {
        crate::operation::update_sync_configuration::builders::UpdateSyncConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateSyncConfigurationInput`](crate::operation::update_sync_configuration::UpdateSyncConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSyncConfigurationInputBuilder {
    pub(crate) branch: ::std::option::Option<::std::string::String>,
    pub(crate) config_file: ::std::option::Option<::std::string::String>,
    pub(crate) repository_link_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sync_type: ::std::option::Option<crate::types::SyncConfigurationType>,
}
impl UpdateSyncConfigurationInputBuilder {
    /// <p>The branch for the sync configuration to be updated.</p>
    pub fn branch(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.branch = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The branch for the sync configuration to be updated.</p>
    pub fn set_branch(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p>The branch for the sync configuration to be updated.</p>
    pub fn get_branch(&self) -> &::std::option::Option<::std::string::String> {
        &self.branch
    }
    /// <p>The configuration file for the sync configuration to be updated.</p>
    pub fn config_file(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.config_file = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration file for the sync configuration to be updated.</p>
    pub fn set_config_file(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.config_file = input;
        self
    }
    /// <p>The configuration file for the sync configuration to be updated.</p>
    pub fn get_config_file(&self) -> &::std::option::Option<::std::string::String> {
        &self.config_file
    }
    /// <p>The ID of the repository link for the sync configuration to be updated.</p>
    pub fn repository_link_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_link_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the repository link for the sync configuration to be updated.</p>
    pub fn set_repository_link_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_link_id = input;
        self
    }
    /// <p>The ID of the repository link for the sync configuration to be updated.</p>
    pub fn get_repository_link_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_link_id
    }
    /// <p>The name of the Amazon Web Services resource for the sync configuration to be updated.</p>
    /// This field is required.
    pub fn resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Web Services resource for the sync configuration to be updated.</p>
    pub fn set_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The name of the Amazon Web Services resource for the sync configuration to be updated.</p>
    pub fn get_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_name
    }
    /// <p>The ARN of the IAM role for the sync configuration to be updated.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role for the sync configuration to be updated.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role for the sync configuration to be updated.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The sync type for the sync configuration to be updated.</p>
    /// This field is required.
    pub fn sync_type(mut self, input: crate::types::SyncConfigurationType) -> Self {
        self.sync_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sync type for the sync configuration to be updated.</p>
    pub fn set_sync_type(mut self, input: ::std::option::Option<crate::types::SyncConfigurationType>) -> Self {
        self.sync_type = input;
        self
    }
    /// <p>The sync type for the sync configuration to be updated.</p>
    pub fn get_sync_type(&self) -> &::std::option::Option<crate::types::SyncConfigurationType> {
        &self.sync_type
    }
    /// Consumes the builder and constructs a [`UpdateSyncConfigurationInput`](crate::operation::update_sync_configuration::UpdateSyncConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_sync_configuration::UpdateSyncConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_sync_configuration::UpdateSyncConfigurationInput {
            branch: self.branch,
            config_file: self.config_file,
            repository_link_id: self.repository_link_id,
            resource_name: self.resource_name,
            role_arn: self.role_arn,
            sync_type: self.sync_type,
        })
    }
}
