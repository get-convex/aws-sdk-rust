// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRepositoryLinkInput {
    /// <p>The Amazon Resource Name (ARN) of the connection to be associated with the repository link.</p>
    pub connection_arn: ::std::option::Option<::std::string::String>,
    /// <p>The owner ID for the repository associated with a specific sync configuration, such as the owner ID in GitHub.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the repository to be associated with the repository link.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) encryption key for the repository to be associated with the repository link.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags for the repository to be associated with the repository link.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateRepositoryLinkInput {
    /// <p>The Amazon Resource Name (ARN) of the connection to be associated with the repository link.</p>
    pub fn connection_arn(&self) -> ::std::option::Option<&str> {
        self.connection_arn.as_deref()
    }
    /// <p>The owner ID for the repository associated with a specific sync configuration, such as the owner ID in GitHub.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The name of the repository to be associated with the repository link.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) encryption key for the repository to be associated with the repository link.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>The tags for the repository to be associated with the repository link.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateRepositoryLinkInput {
    /// Creates a new builder-style object to manufacture [`CreateRepositoryLinkInput`](crate::operation::create_repository_link::CreateRepositoryLinkInput).
    pub fn builder() -> crate::operation::create_repository_link::builders::CreateRepositoryLinkInputBuilder {
        crate::operation::create_repository_link::builders::CreateRepositoryLinkInputBuilder::default()
    }
}

/// A builder for [`CreateRepositoryLinkInput`](crate::operation::create_repository_link::CreateRepositoryLinkInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateRepositoryLinkInputBuilder {
    pub(crate) connection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateRepositoryLinkInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the connection to be associated with the repository link.</p>
    /// This field is required.
    pub fn connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection to be associated with the repository link.</p>
    pub fn set_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection to be associated with the repository link.</p>
    pub fn get_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_arn
    }
    /// <p>The owner ID for the repository associated with a specific sync configuration, such as the owner ID in GitHub.</p>
    /// This field is required.
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner ID for the repository associated with a specific sync configuration, such as the owner ID in GitHub.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The owner ID for the repository associated with a specific sync configuration, such as the owner ID in GitHub.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The name of the repository to be associated with the repository link.</p>
    /// This field is required.
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository to be associated with the repository link.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository to be associated with the repository link.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The Amazon Resource Name (ARN) encryption key for the repository to be associated with the repository link.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) encryption key for the repository to be associated with the repository link.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) encryption key for the repository to be associated with the repository link.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the repository to be associated with the repository link.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags for the repository to be associated with the repository link.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the repository to be associated with the repository link.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateRepositoryLinkInput`](crate::operation::create_repository_link::CreateRepositoryLinkInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_repository_link::CreateRepositoryLinkInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_repository_link::CreateRepositoryLinkInput {
            connection_arn: self.connection_arn,
            owner_id: self.owner_id,
            repository_name: self.repository_name,
            encryption_key_arn: self.encryption_key_arn,
            tags: self.tags,
        })
    }
}
