// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the repository link resource, such as the repository link ARN, the associated connection ARN, encryption key ARN, and owner ID.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RepositoryLinkInfo {
    /// <p>The Amazon Resource Name (ARN) of the connection associated with the repository link.</p>
    pub connection_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the encryption key for the repository associated with the repository link.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The owner ID for the repository associated with the repository link, such as the owner ID in GitHub.</p>
    pub owner_id: ::std::string::String,
    /// <p>The provider type for the connection, such as GitHub, associated with the repository link.</p>
    pub provider_type: crate::types::ProviderType,
    /// <p>The Amazon Resource Name (ARN) of the repository link.</p>
    pub repository_link_arn: ::std::string::String,
    /// <p>The ID of the repository link.</p>
    pub repository_link_id: ::std::string::String,
    /// <p>The name of the repository associated with the repository link.</p>
    pub repository_name: ::std::string::String,
}
impl RepositoryLinkInfo {
    /// <p>The Amazon Resource Name (ARN) of the connection associated with the repository link.</p>
    pub fn connection_arn(&self) -> &str {
        use std::ops::Deref;
        self.connection_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key for the repository associated with the repository link.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>The owner ID for the repository associated with the repository link, such as the owner ID in GitHub.</p>
    pub fn owner_id(&self) -> &str {
        use std::ops::Deref;
        self.owner_id.deref()
    }
    /// <p>The provider type for the connection, such as GitHub, associated with the repository link.</p>
    pub fn provider_type(&self) -> &crate::types::ProviderType {
        &self.provider_type
    }
    /// <p>The Amazon Resource Name (ARN) of the repository link.</p>
    pub fn repository_link_arn(&self) -> &str {
        use std::ops::Deref;
        self.repository_link_arn.deref()
    }
    /// <p>The ID of the repository link.</p>
    pub fn repository_link_id(&self) -> &str {
        use std::ops::Deref;
        self.repository_link_id.deref()
    }
    /// <p>The name of the repository associated with the repository link.</p>
    pub fn repository_name(&self) -> &str {
        use std::ops::Deref;
        self.repository_name.deref()
    }
}
impl RepositoryLinkInfo {
    /// Creates a new builder-style object to manufacture [`RepositoryLinkInfo`](crate::types::RepositoryLinkInfo).
    pub fn builder() -> crate::types::builders::RepositoryLinkInfoBuilder {
        crate::types::builders::RepositoryLinkInfoBuilder::default()
    }
}

/// A builder for [`RepositoryLinkInfo`](crate::types::RepositoryLinkInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RepositoryLinkInfoBuilder {
    pub(crate) connection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) provider_type: ::std::option::Option<crate::types::ProviderType>,
    pub(crate) repository_link_arn: ::std::option::Option<::std::string::String>,
    pub(crate) repository_link_id: ::std::option::Option<::std::string::String>,
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
}
impl RepositoryLinkInfoBuilder {
    /// <p>The Amazon Resource Name (ARN) of the connection associated with the repository link.</p>
    /// This field is required.
    pub fn connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection associated with the repository link.</p>
    pub fn set_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection associated with the repository link.</p>
    pub fn get_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key for the repository associated with the repository link.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key for the repository associated with the repository link.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key for the repository associated with the repository link.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// <p>The owner ID for the repository associated with the repository link, such as the owner ID in GitHub.</p>
    /// This field is required.
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner ID for the repository associated with the repository link, such as the owner ID in GitHub.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The owner ID for the repository associated with the repository link, such as the owner ID in GitHub.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The provider type for the connection, such as GitHub, associated with the repository link.</p>
    /// This field is required.
    pub fn provider_type(mut self, input: crate::types::ProviderType) -> Self {
        self.provider_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The provider type for the connection, such as GitHub, associated with the repository link.</p>
    pub fn set_provider_type(mut self, input: ::std::option::Option<crate::types::ProviderType>) -> Self {
        self.provider_type = input;
        self
    }
    /// <p>The provider type for the connection, such as GitHub, associated with the repository link.</p>
    pub fn get_provider_type(&self) -> &::std::option::Option<crate::types::ProviderType> {
        &self.provider_type
    }
    /// <p>The Amazon Resource Name (ARN) of the repository link.</p>
    /// This field is required.
    pub fn repository_link_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_link_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the repository link.</p>
    pub fn set_repository_link_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_link_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the repository link.</p>
    pub fn get_repository_link_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_link_arn
    }
    /// <p>The ID of the repository link.</p>
    /// This field is required.
    pub fn repository_link_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_link_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the repository link.</p>
    pub fn set_repository_link_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_link_id = input;
        self
    }
    /// <p>The ID of the repository link.</p>
    pub fn get_repository_link_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_link_id
    }
    /// <p>The name of the repository associated with the repository link.</p>
    /// This field is required.
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository associated with the repository link.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository associated with the repository link.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// Consumes the builder and constructs a [`RepositoryLinkInfo`](crate::types::RepositoryLinkInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`connection_arn`](crate::types::builders::RepositoryLinkInfoBuilder::connection_arn)
    /// - [`owner_id`](crate::types::builders::RepositoryLinkInfoBuilder::owner_id)
    /// - [`provider_type`](crate::types::builders::RepositoryLinkInfoBuilder::provider_type)
    /// - [`repository_link_arn`](crate::types::builders::RepositoryLinkInfoBuilder::repository_link_arn)
    /// - [`repository_link_id`](crate::types::builders::RepositoryLinkInfoBuilder::repository_link_id)
    /// - [`repository_name`](crate::types::builders::RepositoryLinkInfoBuilder::repository_name)
    pub fn build(self) -> ::std::result::Result<crate::types::RepositoryLinkInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RepositoryLinkInfo {
            connection_arn: self.connection_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_arn",
                    "connection_arn was not specified but it is required when building RepositoryLinkInfo",
                )
            })?,
            encryption_key_arn: self.encryption_key_arn,
            owner_id: self.owner_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_id",
                    "owner_id was not specified but it is required when building RepositoryLinkInfo",
                )
            })?,
            provider_type: self.provider_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider_type",
                    "provider_type was not specified but it is required when building RepositoryLinkInfo",
                )
            })?,
            repository_link_arn: self.repository_link_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "repository_link_arn",
                    "repository_link_arn was not specified but it is required when building RepositoryLinkInfo",
                )
            })?,
            repository_link_id: self.repository_link_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "repository_link_id",
                    "repository_link_id was not specified but it is required when building RepositoryLinkInfo",
                )
            })?,
            repository_name: self.repository_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "repository_name",
                    "repository_name was not specified but it is required when building RepositoryLinkInfo",
                )
            })?,
        })
    }
}
