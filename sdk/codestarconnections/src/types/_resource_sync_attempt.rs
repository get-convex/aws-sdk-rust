// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a resource sync attempt.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceSyncAttempt {
    /// <p>The events related to a resource sync attempt.</p>
    pub events: ::std::vec::Vec<crate::types::ResourceSyncEvent>,
    /// <p>The current state of the resource as defined in the resource's <code>config-file</code> in the linked repository.</p>
    pub initial_revision: ::std::option::Option<crate::types::Revision>,
    /// <p>The start time for a resource sync attempt.</p>
    pub started_at: ::aws_smithy_types::DateTime,
    /// <p>The status for a resource sync attempt. The follow are valid statuses:</p>
    /// <ul>
    /// <li>
    /// <p>SYNC-INITIATED - A resource sync attempt has been created and will begin soon.</p></li>
    /// <li>
    /// <p>SYNCING - Syncing has started and work is being done to reconcile state.</p></li>
    /// <li>
    /// <p>SYNCED - Syncing has completed successfully.</p></li>
    /// <li>
    /// <p>SYNC_FAILED - A resource sync attempt has failed.</p></li>
    /// </ul>
    pub status: crate::types::ResourceSyncStatus,
    /// <p>The desired state of the resource as defined in the resource's <code>config-file</code> in the linked repository. Git sync attempts to update the resource to this state.</p>
    pub target_revision: ::std::option::Option<crate::types::Revision>,
    /// <p>The name of the Amazon Web Services resource that is attempted to be synchronized.</p>
    pub target: ::std::string::String,
}
impl ResourceSyncAttempt {
    /// <p>The events related to a resource sync attempt.</p>
    pub fn events(&self) -> &[crate::types::ResourceSyncEvent] {
        use std::ops::Deref;
        self.events.deref()
    }
    /// <p>The current state of the resource as defined in the resource's <code>config-file</code> in the linked repository.</p>
    pub fn initial_revision(&self) -> ::std::option::Option<&crate::types::Revision> {
        self.initial_revision.as_ref()
    }
    /// <p>The start time for a resource sync attempt.</p>
    pub fn started_at(&self) -> &::aws_smithy_types::DateTime {
        &self.started_at
    }
    /// <p>The status for a resource sync attempt. The follow are valid statuses:</p>
    /// <ul>
    /// <li>
    /// <p>SYNC-INITIATED - A resource sync attempt has been created and will begin soon.</p></li>
    /// <li>
    /// <p>SYNCING - Syncing has started and work is being done to reconcile state.</p></li>
    /// <li>
    /// <p>SYNCED - Syncing has completed successfully.</p></li>
    /// <li>
    /// <p>SYNC_FAILED - A resource sync attempt has failed.</p></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::ResourceSyncStatus {
        &self.status
    }
    /// <p>The desired state of the resource as defined in the resource's <code>config-file</code> in the linked repository. Git sync attempts to update the resource to this state.</p>
    pub fn target_revision(&self) -> ::std::option::Option<&crate::types::Revision> {
        self.target_revision.as_ref()
    }
    /// <p>The name of the Amazon Web Services resource that is attempted to be synchronized.</p>
    pub fn target(&self) -> &str {
        use std::ops::Deref;
        self.target.deref()
    }
}
impl ResourceSyncAttempt {
    /// Creates a new builder-style object to manufacture [`ResourceSyncAttempt`](crate::types::ResourceSyncAttempt).
    pub fn builder() -> crate::types::builders::ResourceSyncAttemptBuilder {
        crate::types::builders::ResourceSyncAttemptBuilder::default()
    }
}

/// A builder for [`ResourceSyncAttempt`](crate::types::ResourceSyncAttempt).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceSyncAttemptBuilder {
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::ResourceSyncEvent>>,
    pub(crate) initial_revision: ::std::option::Option<crate::types::Revision>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceSyncStatus>,
    pub(crate) target_revision: ::std::option::Option<crate::types::Revision>,
    pub(crate) target: ::std::option::Option<::std::string::String>,
}
impl ResourceSyncAttemptBuilder {
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The events related to a resource sync attempt.</p>
    pub fn events(mut self, input: crate::types::ResourceSyncEvent) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The events related to a resource sync attempt.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceSyncEvent>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The events related to a resource sync attempt.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceSyncEvent>> {
        &self.events
    }
    /// <p>The current state of the resource as defined in the resource's <code>config-file</code> in the linked repository.</p>
    /// This field is required.
    pub fn initial_revision(mut self, input: crate::types::Revision) -> Self {
        self.initial_revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the resource as defined in the resource's <code>config-file</code> in the linked repository.</p>
    pub fn set_initial_revision(mut self, input: ::std::option::Option<crate::types::Revision>) -> Self {
        self.initial_revision = input;
        self
    }
    /// <p>The current state of the resource as defined in the resource's <code>config-file</code> in the linked repository.</p>
    pub fn get_initial_revision(&self) -> &::std::option::Option<crate::types::Revision> {
        &self.initial_revision
    }
    /// <p>The start time for a resource sync attempt.</p>
    /// This field is required.
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time for a resource sync attempt.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The start time for a resource sync attempt.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The status for a resource sync attempt. The follow are valid statuses:</p>
    /// <ul>
    /// <li>
    /// <p>SYNC-INITIATED - A resource sync attempt has been created and will begin soon.</p></li>
    /// <li>
    /// <p>SYNCING - Syncing has started and work is being done to reconcile state.</p></li>
    /// <li>
    /// <p>SYNCED - Syncing has completed successfully.</p></li>
    /// <li>
    /// <p>SYNC_FAILED - A resource sync attempt has failed.</p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ResourceSyncStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status for a resource sync attempt. The follow are valid statuses:</p>
    /// <ul>
    /// <li>
    /// <p>SYNC-INITIATED - A resource sync attempt has been created and will begin soon.</p></li>
    /// <li>
    /// <p>SYNCING - Syncing has started and work is being done to reconcile state.</p></li>
    /// <li>
    /// <p>SYNCED - Syncing has completed successfully.</p></li>
    /// <li>
    /// <p>SYNC_FAILED - A resource sync attempt has failed.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceSyncStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status for a resource sync attempt. The follow are valid statuses:</p>
    /// <ul>
    /// <li>
    /// <p>SYNC-INITIATED - A resource sync attempt has been created and will begin soon.</p></li>
    /// <li>
    /// <p>SYNCING - Syncing has started and work is being done to reconcile state.</p></li>
    /// <li>
    /// <p>SYNCED - Syncing has completed successfully.</p></li>
    /// <li>
    /// <p>SYNC_FAILED - A resource sync attempt has failed.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceSyncStatus> {
        &self.status
    }
    /// <p>The desired state of the resource as defined in the resource's <code>config-file</code> in the linked repository. Git sync attempts to update the resource to this state.</p>
    /// This field is required.
    pub fn target_revision(mut self, input: crate::types::Revision) -> Self {
        self.target_revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired state of the resource as defined in the resource's <code>config-file</code> in the linked repository. Git sync attempts to update the resource to this state.</p>
    pub fn set_target_revision(mut self, input: ::std::option::Option<crate::types::Revision>) -> Self {
        self.target_revision = input;
        self
    }
    /// <p>The desired state of the resource as defined in the resource's <code>config-file</code> in the linked repository. Git sync attempts to update the resource to this state.</p>
    pub fn get_target_revision(&self) -> &::std::option::Option<crate::types::Revision> {
        &self.target_revision
    }
    /// <p>The name of the Amazon Web Services resource that is attempted to be synchronized.</p>
    /// This field is required.
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Web Services resource that is attempted to be synchronized.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The name of the Amazon Web Services resource that is attempted to be synchronized.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.target
    }
    /// Consumes the builder and constructs a [`ResourceSyncAttempt`](crate::types::ResourceSyncAttempt).
    /// This method will fail if any of the following fields are not set:
    /// - [`events`](crate::types::builders::ResourceSyncAttemptBuilder::events)
    /// - [`started_at`](crate::types::builders::ResourceSyncAttemptBuilder::started_at)
    /// - [`status`](crate::types::builders::ResourceSyncAttemptBuilder::status)
    /// - [`target`](crate::types::builders::ResourceSyncAttemptBuilder::target)
    pub fn build(self) -> ::std::result::Result<crate::types::ResourceSyncAttempt, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResourceSyncAttempt {
            events: self.events.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "events",
                    "events was not specified but it is required when building ResourceSyncAttempt",
                )
            })?,
            initial_revision: self.initial_revision,
            started_at: self.started_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "started_at",
                    "started_at was not specified but it is required when building ResourceSyncAttempt",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ResourceSyncAttempt",
                )
            })?,
            target_revision: self.target_revision,
            target: self.target.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target",
                    "target was not specified but it is required when building ResourceSyncAttempt",
                )
            })?,
        })
    }
}
