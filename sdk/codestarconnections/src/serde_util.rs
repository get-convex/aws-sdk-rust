// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_connection_output_output_correct_errors(
    mut builder: crate::operation::create_connection::builders::CreateConnectionOutputBuilder,
) -> crate::operation::create_connection::builders::CreateConnectionOutputBuilder {
    if builder.connection_arn.is_none() {
        builder.connection_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_repository_link_output_output_correct_errors(
    mut builder: crate::operation::create_repository_link::builders::CreateRepositoryLinkOutputBuilder,
) -> crate::operation::create_repository_link::builders::CreateRepositoryLinkOutputBuilder {
    if builder.repository_link_info.is_none() {
        builder.repository_link_info = {
            let builder = crate::types::builders::RepositoryLinkInfoBuilder::default();
            crate::serde_util::repository_link_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_sync_configuration_output_output_correct_errors(
    mut builder: crate::operation::create_sync_configuration::builders::CreateSyncConfigurationOutputBuilder,
) -> crate::operation::create_sync_configuration::builders::CreateSyncConfigurationOutputBuilder {
    if builder.sync_configuration.is_none() {
        builder.sync_configuration = {
            let builder = crate::types::builders::SyncConfigurationBuilder::default();
            crate::serde_util::sync_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_repository_link_output_output_correct_errors(
    mut builder: crate::operation::get_repository_link::builders::GetRepositoryLinkOutputBuilder,
) -> crate::operation::get_repository_link::builders::GetRepositoryLinkOutputBuilder {
    if builder.repository_link_info.is_none() {
        builder.repository_link_info = {
            let builder = crate::types::builders::RepositoryLinkInfoBuilder::default();
            crate::serde_util::repository_link_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_repository_sync_status_output_output_correct_errors(
    mut builder: crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusOutputBuilder,
) -> crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusOutputBuilder {
    if builder.latest_sync.is_none() {
        builder.latest_sync = {
            let builder = crate::types::builders::RepositorySyncAttemptBuilder::default();
            crate::serde_util::repository_sync_attempt_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_resource_sync_status_output_output_correct_errors(
    mut builder: crate::operation::get_resource_sync_status::builders::GetResourceSyncStatusOutputBuilder,
) -> crate::operation::get_resource_sync_status::builders::GetResourceSyncStatusOutputBuilder {
    if builder.latest_sync.is_none() {
        builder.latest_sync = {
            let builder = crate::types::builders::ResourceSyncAttemptBuilder::default();
            crate::serde_util::resource_sync_attempt_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_sync_blocker_summary_output_output_correct_errors(
    mut builder: crate::operation::get_sync_blocker_summary::builders::GetSyncBlockerSummaryOutputBuilder,
) -> crate::operation::get_sync_blocker_summary::builders::GetSyncBlockerSummaryOutputBuilder {
    if builder.sync_blocker_summary.is_none() {
        builder.sync_blocker_summary = {
            let builder = crate::types::builders::SyncBlockerSummaryBuilder::default();
            crate::serde_util::sync_blocker_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_sync_configuration_output_output_correct_errors(
    mut builder: crate::operation::get_sync_configuration::builders::GetSyncConfigurationOutputBuilder,
) -> crate::operation::get_sync_configuration::builders::GetSyncConfigurationOutputBuilder {
    if builder.sync_configuration.is_none() {
        builder.sync_configuration = {
            let builder = crate::types::builders::SyncConfigurationBuilder::default();
            crate::serde_util::sync_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_repository_links_output_output_correct_errors(
    mut builder: crate::operation::list_repository_links::builders::ListRepositoryLinksOutputBuilder,
) -> crate::operation::list_repository_links::builders::ListRepositoryLinksOutputBuilder {
    if builder.repository_links.is_none() {
        builder.repository_links = Some(Default::default())
    }
    builder
}

pub(crate) fn list_repository_sync_definitions_output_output_correct_errors(
    mut builder: crate::operation::list_repository_sync_definitions::builders::ListRepositorySyncDefinitionsOutputBuilder,
) -> crate::operation::list_repository_sync_definitions::builders::ListRepositorySyncDefinitionsOutputBuilder {
    if builder.repository_sync_definitions.is_none() {
        builder.repository_sync_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sync_configurations_output_output_correct_errors(
    mut builder: crate::operation::list_sync_configurations::builders::ListSyncConfigurationsOutputBuilder,
) -> crate::operation::list_sync_configurations::builders::ListSyncConfigurationsOutputBuilder {
    if builder.sync_configurations.is_none() {
        builder.sync_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn update_repository_link_output_output_correct_errors(
    mut builder: crate::operation::update_repository_link::builders::UpdateRepositoryLinkOutputBuilder,
) -> crate::operation::update_repository_link::builders::UpdateRepositoryLinkOutputBuilder {
    if builder.repository_link_info.is_none() {
        builder.repository_link_info = {
            let builder = crate::types::builders::RepositoryLinkInfoBuilder::default();
            crate::serde_util::repository_link_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_sync_blocker_output_output_correct_errors(
    mut builder: crate::operation::update_sync_blocker::builders::UpdateSyncBlockerOutputBuilder,
) -> crate::operation::update_sync_blocker::builders::UpdateSyncBlockerOutputBuilder {
    if builder.resource_name.is_none() {
        builder.resource_name = Some(Default::default())
    }
    if builder.sync_blocker.is_none() {
        builder.sync_blocker = {
            let builder = crate::types::builders::SyncBlockerBuilder::default();
            crate::serde_util::sync_blocker_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_sync_configuration_output_output_correct_errors(
    mut builder: crate::operation::update_sync_configuration::builders::UpdateSyncConfigurationOutputBuilder,
) -> crate::operation::update_sync_configuration::builders::UpdateSyncConfigurationOutputBuilder {
    if builder.sync_configuration.is_none() {
        builder.sync_configuration = {
            let builder = crate::types::builders::SyncConfigurationBuilder::default();
            crate::serde_util::sync_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn repository_link_info_correct_errors(
    mut builder: crate::types::builders::RepositoryLinkInfoBuilder,
) -> crate::types::builders::RepositoryLinkInfoBuilder {
    if builder.connection_arn.is_none() {
        builder.connection_arn = Some(Default::default())
    }
    if builder.owner_id.is_none() {
        builder.owner_id = Some(Default::default())
    }
    if builder.provider_type.is_none() {
        builder.provider_type = "no value was set".parse::<crate::types::ProviderType>().ok()
    }
    if builder.repository_link_arn.is_none() {
        builder.repository_link_arn = Some(Default::default())
    }
    if builder.repository_link_id.is_none() {
        builder.repository_link_id = Some(Default::default())
    }
    if builder.repository_name.is_none() {
        builder.repository_name = Some(Default::default())
    }
    builder
}

pub(crate) fn sync_configuration_correct_errors(
    mut builder: crate::types::builders::SyncConfigurationBuilder,
) -> crate::types::builders::SyncConfigurationBuilder {
    if builder.branch.is_none() {
        builder.branch = Some(Default::default())
    }
    if builder.owner_id.is_none() {
        builder.owner_id = Some(Default::default())
    }
    if builder.provider_type.is_none() {
        builder.provider_type = "no value was set".parse::<crate::types::ProviderType>().ok()
    }
    if builder.repository_link_id.is_none() {
        builder.repository_link_id = Some(Default::default())
    }
    if builder.repository_name.is_none() {
        builder.repository_name = Some(Default::default())
    }
    if builder.resource_name.is_none() {
        builder.resource_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.sync_type.is_none() {
        builder.sync_type = "no value was set".parse::<crate::types::SyncConfigurationType>().ok()
    }
    builder
}

pub(crate) fn repository_sync_attempt_correct_errors(
    mut builder: crate::types::builders::RepositorySyncAttemptBuilder,
) -> crate::types::builders::RepositorySyncAttemptBuilder {
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RepositorySyncStatus>().ok()
    }
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_sync_attempt_correct_errors(
    mut builder: crate::types::builders::ResourceSyncAttemptBuilder,
) -> crate::types::builders::ResourceSyncAttemptBuilder {
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    if builder.initial_revision.is_none() {
        builder.initial_revision = {
            let builder = crate::types::builders::RevisionBuilder::default();
            crate::serde_util::revision_correct_errors(builder).build().ok()
        }
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceSyncStatus>().ok()
    }
    if builder.target_revision.is_none() {
        builder.target_revision = {
            let builder = crate::types::builders::RevisionBuilder::default();
            crate::serde_util::revision_correct_errors(builder).build().ok()
        }
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn sync_blocker_summary_correct_errors(
    mut builder: crate::types::builders::SyncBlockerSummaryBuilder,
) -> crate::types::builders::SyncBlockerSummaryBuilder {
    if builder.resource_name.is_none() {
        builder.resource_name = Some(Default::default())
    }
    builder
}

pub(crate) fn sync_blocker_correct_errors(mut builder: crate::types::builders::SyncBlockerBuilder) -> crate::types::builders::SyncBlockerBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::BlockerType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BlockerStatus>().ok()
    }
    if builder.created_reason.is_none() {
        builder.created_reason = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn revision_correct_errors(mut builder: crate::types::builders::RevisionBuilder) -> crate::types::builders::RevisionBuilder {
    if builder.branch.is_none() {
        builder.branch = Some(Default::default())
    }
    if builder.directory.is_none() {
        builder.directory = Some(Default::default())
    }
    if builder.owner_id.is_none() {
        builder.owner_id = Some(Default::default())
    }
    if builder.repository_name.is_none() {
        builder.repository_name = Some(Default::default())
    }
    if builder.provider_type.is_none() {
        builder.provider_type = "no value was set".parse::<crate::types::ProviderType>().ok()
    }
    if builder.sha.is_none() {
        builder.sha = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_configuration_correct_errors(
    mut builder: crate::types::builders::VpcConfigurationBuilder,
) -> crate::types::builders::VpcConfigurationBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn repository_sync_definition_correct_errors(
    mut builder: crate::types::builders::RepositorySyncDefinitionBuilder,
) -> crate::types::builders::RepositorySyncDefinitionBuilder {
    if builder.branch.is_none() {
        builder.branch = Some(Default::default())
    }
    if builder.directory.is_none() {
        builder.directory = Some(Default::default())
    }
    if builder.parent.is_none() {
        builder.parent = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn repository_sync_event_correct_errors(
    mut builder: crate::types::builders::RepositorySyncEventBuilder,
) -> crate::types::builders::RepositorySyncEventBuilder {
    if builder.event.is_none() {
        builder.event = Some(Default::default())
    }
    if builder.time.is_none() {
        builder.time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_sync_event_correct_errors(
    mut builder: crate::types::builders::ResourceSyncEventBuilder,
) -> crate::types::builders::ResourceSyncEventBuilder {
    if builder.event.is_none() {
        builder.event = Some(Default::default())
    }
    if builder.time.is_none() {
        builder.time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn sync_blocker_context_correct_errors(
    mut builder: crate::types::builders::SyncBlockerContextBuilder,
) -> crate::types::builders::SyncBlockerContextBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
