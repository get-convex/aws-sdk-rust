// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_medical_scribe_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_medical_scribe_job::StartMedicalScribeJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.medical_scribe_job_name {
        object.key("MedicalScribeJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.media {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Media").start_object();
        crate::protocol_serde::shape_media::ser_media(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.kms_encryption_context {
        #[allow(unused_mut)]
        let mut object_7 = object.key("KMSEncryptionContext").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.settings {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Settings").start_object();
        crate::protocol_serde::shape_medical_scribe_settings::ser_medical_scribe_settings(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.channel_definitions {
        let mut array_14 = object.key("ChannelDefinitions").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_medical_scribe_channel_definition::ser_medical_scribe_channel_definition(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.tags {
        let mut array_18 = object.key("Tags").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    Ok(())
}
