// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListComponentsInput {
    /// <p>The workspace ID.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID for the entity whose metadata (component/properties) is returned by the operation.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub component_path: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results returned at one time. The default is 25.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The string that specifies the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListComponentsInput {
    /// <p>The workspace ID.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The ID for the entity whose metadata (component/properties) is returned by the operation.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub fn component_path(&self) -> ::std::option::Option<&str> {
        self.component_path.as_deref()
    }
    /// <p>The maximum number of results returned at one time. The default is 25.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListComponentsInput {
    /// Creates a new builder-style object to manufacture [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
    pub fn builder() -> crate::operation::list_components::builders::ListComponentsInputBuilder {
        crate::operation::list_components::builders::ListComponentsInputBuilder::default()
    }
}

/// A builder for [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListComponentsInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) component_path: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListComponentsInputBuilder {
    /// <p>The workspace ID.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workspace ID.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The workspace ID.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// <p>The ID for the entity whose metadata (component/properties) is returned by the operation.</p>
    /// This field is required.
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the entity whose metadata (component/properties) is returned by the operation.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The ID for the entity whose metadata (component/properties) is returned by the operation.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub fn component_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub fn set_component_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_path = input;
        self
    }
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub fn get_component_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_path
    }
    /// <p>The maximum number of results returned at one time. The default is 25.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results returned at one time. The default is 25.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results returned at one time. The default is 25.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_components::ListComponentsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_components::ListComponentsInput {
            workspace_id: self.workspace_id,
            entity_id: self.entity_id,
            component_path: self.component_path,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
