// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata transfer job's progress.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetadataTransferJobProgress {
    /// <p>The total count. [of what]</p>
    pub total_count: ::std::option::Option<i32>,
    /// <p>The succeeded count.</p>
    pub succeeded_count: ::std::option::Option<i32>,
    /// <p>The skipped count.</p>
    pub skipped_count: ::std::option::Option<i32>,
    /// <p>The failed count.</p>
    pub failed_count: ::std::option::Option<i32>,
}
impl MetadataTransferJobProgress {
    /// <p>The total count. [of what]</p>
    pub fn total_count(&self) -> ::std::option::Option<i32> {
        self.total_count
    }
    /// <p>The succeeded count.</p>
    pub fn succeeded_count(&self) -> ::std::option::Option<i32> {
        self.succeeded_count
    }
    /// <p>The skipped count.</p>
    pub fn skipped_count(&self) -> ::std::option::Option<i32> {
        self.skipped_count
    }
    /// <p>The failed count.</p>
    pub fn failed_count(&self) -> ::std::option::Option<i32> {
        self.failed_count
    }
}
impl MetadataTransferJobProgress {
    /// Creates a new builder-style object to manufacture [`MetadataTransferJobProgress`](crate::types::MetadataTransferJobProgress).
    pub fn builder() -> crate::types::builders::MetadataTransferJobProgressBuilder {
        crate::types::builders::MetadataTransferJobProgressBuilder::default()
    }
}

/// A builder for [`MetadataTransferJobProgress`](crate::types::MetadataTransferJobProgress).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetadataTransferJobProgressBuilder {
    pub(crate) total_count: ::std::option::Option<i32>,
    pub(crate) succeeded_count: ::std::option::Option<i32>,
    pub(crate) skipped_count: ::std::option::Option<i32>,
    pub(crate) failed_count: ::std::option::Option<i32>,
}
impl MetadataTransferJobProgressBuilder {
    /// <p>The total count. [of what]</p>
    pub fn total_count(mut self, input: i32) -> Self {
        self.total_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total count. [of what]</p>
    pub fn set_total_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_count = input;
        self
    }
    /// <p>The total count. [of what]</p>
    pub fn get_total_count(&self) -> &::std::option::Option<i32> {
        &self.total_count
    }
    /// <p>The succeeded count.</p>
    pub fn succeeded_count(mut self, input: i32) -> Self {
        self.succeeded_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The succeeded count.</p>
    pub fn set_succeeded_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.succeeded_count = input;
        self
    }
    /// <p>The succeeded count.</p>
    pub fn get_succeeded_count(&self) -> &::std::option::Option<i32> {
        &self.succeeded_count
    }
    /// <p>The skipped count.</p>
    pub fn skipped_count(mut self, input: i32) -> Self {
        self.skipped_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The skipped count.</p>
    pub fn set_skipped_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.skipped_count = input;
        self
    }
    /// <p>The skipped count.</p>
    pub fn get_skipped_count(&self) -> &::std::option::Option<i32> {
        &self.skipped_count
    }
    /// <p>The failed count.</p>
    pub fn failed_count(mut self, input: i32) -> Self {
        self.failed_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failed count.</p>
    pub fn set_failed_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed_count = input;
        self
    }
    /// <p>The failed count.</p>
    pub fn get_failed_count(&self) -> &::std::option::Option<i32> {
        &self.failed_count
    }
    /// Consumes the builder and constructs a [`MetadataTransferJobProgress`](crate::types::MetadataTransferJobProgress).
    pub fn build(self) -> crate::types::MetadataTransferJobProgress {
        crate::types::MetadataTransferJobProgress {
            total_count: self.total_count,
            succeeded_count: self.succeeded_count,
            skipped_count: self.skipped_count,
            failed_count: self.failed_count,
        }
    }
}
