// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter by asset. [TwinMaker asset]</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterByAsset {
    /// <p>Filter by asset Id.</p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p>The external-Id property of an asset.</p>
    pub asset_external_id: ::std::option::Option<::std::string::String>,
    /// <p>Includes sub-assets.[need description hekp for this]</p>
    pub include_offspring: ::std::option::Option<bool>,
    /// <p>Boolean to include the asset model.</p>
    pub include_asset_model: ::std::option::Option<bool>,
}
impl FilterByAsset {
    /// <p>Filter by asset Id.</p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The external-Id property of an asset.</p>
    pub fn asset_external_id(&self) -> ::std::option::Option<&str> {
        self.asset_external_id.as_deref()
    }
    /// <p>Includes sub-assets.[need description hekp for this]</p>
    pub fn include_offspring(&self) -> ::std::option::Option<bool> {
        self.include_offspring
    }
    /// <p>Boolean to include the asset model.</p>
    pub fn include_asset_model(&self) -> ::std::option::Option<bool> {
        self.include_asset_model
    }
}
impl FilterByAsset {
    /// Creates a new builder-style object to manufacture [`FilterByAsset`](crate::types::FilterByAsset).
    pub fn builder() -> crate::types::builders::FilterByAssetBuilder {
        crate::types::builders::FilterByAssetBuilder::default()
    }
}

/// A builder for [`FilterByAsset`](crate::types::FilterByAsset).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterByAssetBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_external_id: ::std::option::Option<::std::string::String>,
    pub(crate) include_offspring: ::std::option::Option<bool>,
    pub(crate) include_asset_model: ::std::option::Option<bool>,
}
impl FilterByAssetBuilder {
    /// <p>Filter by asset Id.</p>
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter by asset Id.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>Filter by asset Id.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The external-Id property of an asset.</p>
    pub fn asset_external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external-Id property of an asset.</p>
    pub fn set_asset_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_external_id = input;
        self
    }
    /// <p>The external-Id property of an asset.</p>
    pub fn get_asset_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_external_id
    }
    /// <p>Includes sub-assets.[need description hekp for this]</p>
    pub fn include_offspring(mut self, input: bool) -> Self {
        self.include_offspring = ::std::option::Option::Some(input);
        self
    }
    /// <p>Includes sub-assets.[need description hekp for this]</p>
    pub fn set_include_offspring(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_offspring = input;
        self
    }
    /// <p>Includes sub-assets.[need description hekp for this]</p>
    pub fn get_include_offspring(&self) -> &::std::option::Option<bool> {
        &self.include_offspring
    }
    /// <p>Boolean to include the asset model.</p>
    pub fn include_asset_model(mut self, input: bool) -> Self {
        self.include_asset_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean to include the asset model.</p>
    pub fn set_include_asset_model(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_asset_model = input;
        self
    }
    /// <p>Boolean to include the asset model.</p>
    pub fn get_include_asset_model(&self) -> &::std::option::Option<bool> {
        &self.include_asset_model
    }
    /// Consumes the builder and constructs a [`FilterByAsset`](crate::types::FilterByAsset).
    pub fn build(self) -> crate::types::FilterByAsset {
        crate::types::FilterByAsset {
            asset_id: self.asset_id,
            asset_external_id: self.asset_external_id,
            include_offspring: self.include_offspring,
            include_asset_model: self.include_asset_model,
        }
    }
}
