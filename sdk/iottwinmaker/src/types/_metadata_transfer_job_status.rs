// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata transfer job status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetadataTransferJobStatus {
    /// <p>The metadata transfer job state.</p>
    pub state: ::std::option::Option<crate::types::MetadataTransferJobState>,
    /// <p>The metadata transfer job error.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetails>,
    /// <p>The queued position.</p>
    pub queued_position: ::std::option::Option<i32>,
}
impl MetadataTransferJobStatus {
    /// <p>The metadata transfer job state.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::MetadataTransferJobState> {
        self.state.as_ref()
    }
    /// <p>The metadata transfer job error.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error.as_ref()
    }
    /// <p>The queued position.</p>
    pub fn queued_position(&self) -> ::std::option::Option<i32> {
        self.queued_position
    }
}
impl MetadataTransferJobStatus {
    /// Creates a new builder-style object to manufacture [`MetadataTransferJobStatus`](crate::types::MetadataTransferJobStatus).
    pub fn builder() -> crate::types::builders::MetadataTransferJobStatusBuilder {
        crate::types::builders::MetadataTransferJobStatusBuilder::default()
    }
}

/// A builder for [`MetadataTransferJobStatus`](crate::types::MetadataTransferJobStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetadataTransferJobStatusBuilder {
    pub(crate) state: ::std::option::Option<crate::types::MetadataTransferJobState>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetails>,
    pub(crate) queued_position: ::std::option::Option<i32>,
}
impl MetadataTransferJobStatusBuilder {
    /// <p>The metadata transfer job state.</p>
    pub fn state(mut self, input: crate::types::MetadataTransferJobState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata transfer job state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::MetadataTransferJobState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The metadata transfer job state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::MetadataTransferJobState> {
        &self.state
    }
    /// <p>The metadata transfer job error.</p>
    pub fn error(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata transfer job error.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error = input;
        self
    }
    /// <p>The metadata transfer job error.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error
    }
    /// <p>The queued position.</p>
    pub fn queued_position(mut self, input: i32) -> Self {
        self.queued_position = ::std::option::Option::Some(input);
        self
    }
    /// <p>The queued position.</p>
    pub fn set_queued_position(mut self, input: ::std::option::Option<i32>) -> Self {
        self.queued_position = input;
        self
    }
    /// <p>The queued position.</p>
    pub fn get_queued_position(&self) -> &::std::option::Option<i32> {
        &self.queued_position
    }
    /// Consumes the builder and constructs a [`MetadataTransferJobStatus`](crate::types::MetadataTransferJobStatus).
    pub fn build(self) -> crate::types::MetadataTransferJobStatus {
        crate::types::MetadataTransferJobStatus {
            state: self.state,
            error: self.error,
            queued_position: self.queued_position,
        }
    }
}
