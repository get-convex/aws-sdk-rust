// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that returns information about the composite component types of a component type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompositeComponentTypeResponse {
    /// <p>This is the <code>componentTypeId</code> that this <code>compositeComponentType</code> refers to.</p>
    pub component_type_id: ::std::option::Option<::std::string::String>,
    /// <p>This boolean indicates whether this <code>compositeComponentType</code> is inherited from its parent.</p>
    pub is_inherited: ::std::option::Option<bool>,
}
impl CompositeComponentTypeResponse {
    /// <p>This is the <code>componentTypeId</code> that this <code>compositeComponentType</code> refers to.</p>
    pub fn component_type_id(&self) -> ::std::option::Option<&str> {
        self.component_type_id.as_deref()
    }
    /// <p>This boolean indicates whether this <code>compositeComponentType</code> is inherited from its parent.</p>
    pub fn is_inherited(&self) -> ::std::option::Option<bool> {
        self.is_inherited
    }
}
impl CompositeComponentTypeResponse {
    /// Creates a new builder-style object to manufacture [`CompositeComponentTypeResponse`](crate::types::CompositeComponentTypeResponse).
    pub fn builder() -> crate::types::builders::CompositeComponentTypeResponseBuilder {
        crate::types::builders::CompositeComponentTypeResponseBuilder::default()
    }
}

/// A builder for [`CompositeComponentTypeResponse`](crate::types::CompositeComponentTypeResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CompositeComponentTypeResponseBuilder {
    pub(crate) component_type_id: ::std::option::Option<::std::string::String>,
    pub(crate) is_inherited: ::std::option::Option<bool>,
}
impl CompositeComponentTypeResponseBuilder {
    /// <p>This is the <code>componentTypeId</code> that this <code>compositeComponentType</code> refers to.</p>
    pub fn component_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This is the <code>componentTypeId</code> that this <code>compositeComponentType</code> refers to.</p>
    pub fn set_component_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type_id = input;
        self
    }
    /// <p>This is the <code>componentTypeId</code> that this <code>compositeComponentType</code> refers to.</p>
    pub fn get_component_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type_id
    }
    /// <p>This boolean indicates whether this <code>compositeComponentType</code> is inherited from its parent.</p>
    pub fn is_inherited(mut self, input: bool) -> Self {
        self.is_inherited = ::std::option::Option::Some(input);
        self
    }
    /// <p>This boolean indicates whether this <code>compositeComponentType</code> is inherited from its parent.</p>
    pub fn set_is_inherited(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_inherited = input;
        self
    }
    /// <p>This boolean indicates whether this <code>compositeComponentType</code> is inherited from its parent.</p>
    pub fn get_is_inherited(&self) -> &::std::option::Option<bool> {
        &self.is_inherited
    }
    /// Consumes the builder and constructs a [`CompositeComponentTypeResponse`](crate::types::CompositeComponentTypeResponse).
    pub fn build(self) -> crate::types::CompositeComponentTypeResponse {
        crate::types::CompositeComponentTypeResponse {
            component_type_id: self.component_type_id,
            is_inherited: self.is_inherited,
        }
    }
}
