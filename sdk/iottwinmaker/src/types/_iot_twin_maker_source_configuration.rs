// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata transfer job AWS IoT TwinMaker source configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IotTwinMakerSourceConfiguration {
    /// <p>The IoT TwinMaker workspace.</p>
    pub workspace: ::std::string::String,
    /// <p>The metadata transfer job AWS IoT TwinMaker source configuration filters.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::IotTwinMakerSourceConfigurationFilter>>,
}
impl IotTwinMakerSourceConfiguration {
    /// <p>The IoT TwinMaker workspace.</p>
    pub fn workspace(&self) -> &str {
        use std::ops::Deref;
        self.workspace.deref()
    }
    /// <p>The metadata transfer job AWS IoT TwinMaker source configuration filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::IotTwinMakerSourceConfigurationFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
}
impl IotTwinMakerSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`IotTwinMakerSourceConfiguration`](crate::types::IotTwinMakerSourceConfiguration).
    pub fn builder() -> crate::types::builders::IotTwinMakerSourceConfigurationBuilder {
        crate::types::builders::IotTwinMakerSourceConfigurationBuilder::default()
    }
}

/// A builder for [`IotTwinMakerSourceConfiguration`](crate::types::IotTwinMakerSourceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IotTwinMakerSourceConfigurationBuilder {
    pub(crate) workspace: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::IotTwinMakerSourceConfigurationFilter>>,
}
impl IotTwinMakerSourceConfigurationBuilder {
    /// <p>The IoT TwinMaker workspace.</p>
    /// This field is required.
    pub fn workspace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IoT TwinMaker workspace.</p>
    pub fn set_workspace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace = input;
        self
    }
    /// <p>The IoT TwinMaker workspace.</p>
    pub fn get_workspace(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The metadata transfer job AWS IoT TwinMaker source configuration filters.</p>
    pub fn filters(mut self, input: crate::types::IotTwinMakerSourceConfigurationFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metadata transfer job AWS IoT TwinMaker source configuration filters.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IotTwinMakerSourceConfigurationFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The metadata transfer job AWS IoT TwinMaker source configuration filters.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IotTwinMakerSourceConfigurationFilter>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`IotTwinMakerSourceConfiguration`](crate::types::IotTwinMakerSourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`workspace`](crate::types::builders::IotTwinMakerSourceConfigurationBuilder::workspace)
    pub fn build(self) -> ::std::result::Result<crate::types::IotTwinMakerSourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IotTwinMakerSourceConfiguration {
            workspace: self.workspace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workspace",
                    "workspace was not specified but it is required when building IotTwinMakerSourceConfiguration",
                )
            })?,
            filters: self.filters,
        })
    }
}
