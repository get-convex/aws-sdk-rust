// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter by asset model.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterByAssetModel {
    /// <p>The asset model Id.</p>
    pub asset_model_id: ::std::option::Option<::std::string::String>,
    /// <p>The external-Id property of an asset model.</p>
    pub asset_model_external_id: ::std::option::Option<::std::string::String>,
    /// <p>Include asset offspring. [need desc.]</p>
    pub include_offspring: ::std::option::Option<bool>,
    /// <p>Bolean to include assets.</p>
    pub include_assets: ::std::option::Option<bool>,
}
impl FilterByAssetModel {
    /// <p>The asset model Id.</p>
    pub fn asset_model_id(&self) -> ::std::option::Option<&str> {
        self.asset_model_id.as_deref()
    }
    /// <p>The external-Id property of an asset model.</p>
    pub fn asset_model_external_id(&self) -> ::std::option::Option<&str> {
        self.asset_model_external_id.as_deref()
    }
    /// <p>Include asset offspring. [need desc.]</p>
    pub fn include_offspring(&self) -> ::std::option::Option<bool> {
        self.include_offspring
    }
    /// <p>Bolean to include assets.</p>
    pub fn include_assets(&self) -> ::std::option::Option<bool> {
        self.include_assets
    }
}
impl FilterByAssetModel {
    /// Creates a new builder-style object to manufacture [`FilterByAssetModel`](crate::types::FilterByAssetModel).
    pub fn builder() -> crate::types::builders::FilterByAssetModelBuilder {
        crate::types::builders::FilterByAssetModelBuilder::default()
    }
}

/// A builder for [`FilterByAssetModel`](crate::types::FilterByAssetModel).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterByAssetModelBuilder {
    pub(crate) asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_model_external_id: ::std::option::Option<::std::string::String>,
    pub(crate) include_offspring: ::std::option::Option<bool>,
    pub(crate) include_assets: ::std::option::Option<bool>,
}
impl FilterByAssetModelBuilder {
    /// <p>The asset model Id.</p>
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The asset model Id.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_id = input;
        self
    }
    /// <p>The asset model Id.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_id
    }
    /// <p>The external-Id property of an asset model.</p>
    pub fn asset_model_external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external-Id property of an asset model.</p>
    pub fn set_asset_model_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_external_id = input;
        self
    }
    /// <p>The external-Id property of an asset model.</p>
    pub fn get_asset_model_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_external_id
    }
    /// <p>Include asset offspring. [need desc.]</p>
    pub fn include_offspring(mut self, input: bool) -> Self {
        self.include_offspring = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include asset offspring. [need desc.]</p>
    pub fn set_include_offspring(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_offspring = input;
        self
    }
    /// <p>Include asset offspring. [need desc.]</p>
    pub fn get_include_offspring(&self) -> &::std::option::Option<bool> {
        &self.include_offspring
    }
    /// <p>Bolean to include assets.</p>
    pub fn include_assets(mut self, input: bool) -> Self {
        self.include_assets = ::std::option::Option::Some(input);
        self
    }
    /// <p>Bolean to include assets.</p>
    pub fn set_include_assets(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_assets = input;
        self
    }
    /// <p>Bolean to include assets.</p>
    pub fn get_include_assets(&self) -> &::std::option::Option<bool> {
        &self.include_assets
    }
    /// Consumes the builder and constructs a [`FilterByAssetModel`](crate::types::FilterByAssetModel).
    pub fn build(self) -> crate::types::FilterByAssetModel {
        crate::types::FilterByAssetModel {
            asset_model_id: self.asset_model_id,
            asset_model_external_id: self.asset_model_external_id,
            include_offspring: self.include_offspring,
            include_assets: self.include_assets,
        }
    }
}
