// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that returns information about a component summary.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComponentSummary {
    /// <p>The name of the component.</p>
    pub component_name: ::std::string::String,
    /// <p>The ID of the component type.</p>
    pub component_type_id: ::std::string::String,
    /// <p>The name of the property definition set in the request.</p>
    pub defined_in: ::std::option::Option<::std::string::String>,
    /// <p>The description of the component request.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The property groups.</p>
    pub property_groups: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupResponse>>,
    /// <p>The status of the component type.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The <code>syncSource</code> of the sync job, if this entity was created by a sync job.</p>
    pub sync_source: ::std::option::Option<::std::string::String>,
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub component_path: ::std::option::Option<::std::string::String>,
}
impl ComponentSummary {
    /// <p>The name of the component.</p>
    pub fn component_name(&self) -> &str {
        use std::ops::Deref;
        self.component_name.deref()
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(&self) -> &str {
        use std::ops::Deref;
        self.component_type_id.deref()
    }
    /// <p>The name of the property definition set in the request.</p>
    pub fn defined_in(&self) -> ::std::option::Option<&str> {
        self.defined_in.as_deref()
    }
    /// <p>The description of the component request.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The property groups.</p>
    pub fn property_groups(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupResponse>> {
        self.property_groups.as_ref()
    }
    /// <p>The status of the component type.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The <code>syncSource</code> of the sync job, if this entity was created by a sync job.</p>
    pub fn sync_source(&self) -> ::std::option::Option<&str> {
        self.sync_source.as_deref()
    }
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub fn component_path(&self) -> ::std::option::Option<&str> {
        self.component_path.as_deref()
    }
}
impl ComponentSummary {
    /// Creates a new builder-style object to manufacture [`ComponentSummary`](crate::types::ComponentSummary).
    pub fn builder() -> crate::types::builders::ComponentSummaryBuilder {
        crate::types::builders::ComponentSummaryBuilder::default()
    }
}

/// A builder for [`ComponentSummary`](crate::types::ComponentSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComponentSummaryBuilder {
    pub(crate) component_name: ::std::option::Option<::std::string::String>,
    pub(crate) component_type_id: ::std::option::Option<::std::string::String>,
    pub(crate) defined_in: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) property_groups:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupResponse>>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) sync_source: ::std::option::Option<::std::string::String>,
    pub(crate) component_path: ::std::option::Option<::std::string::String>,
}
impl ComponentSummaryBuilder {
    /// <p>The name of the component.</p>
    /// This field is required.
    pub fn component_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the component.</p>
    pub fn set_component_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>The name of the component.</p>
    pub fn get_component_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_name
    }
    /// <p>The ID of the component type.</p>
    /// This field is required.
    pub fn component_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn set_component_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type_id = input;
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn get_component_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type_id
    }
    /// <p>The name of the property definition set in the request.</p>
    pub fn defined_in(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.defined_in = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the property definition set in the request.</p>
    pub fn set_defined_in(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.defined_in = input;
        self
    }
    /// <p>The name of the property definition set in the request.</p>
    pub fn get_defined_in(&self) -> &::std::option::Option<::std::string::String> {
        &self.defined_in
    }
    /// <p>The description of the component request.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the component request.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the component request.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `property_groups`.
    ///
    /// To override the contents of this collection use [`set_property_groups`](Self::set_property_groups).
    ///
    /// <p>The property groups.</p>
    pub fn property_groups(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ComponentPropertyGroupResponse) -> Self {
        let mut hash_map = self.property_groups.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.property_groups = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The property groups.</p>
    pub fn set_property_groups(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupResponse>>,
    ) -> Self {
        self.property_groups = input;
        self
    }
    /// <p>The property groups.</p>
    pub fn get_property_groups(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupResponse>> {
        &self.property_groups
    }
    /// <p>The status of the component type.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the component type.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the component type.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The <code>syncSource</code> of the sync job, if this entity was created by a sync job.</p>
    pub fn sync_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sync_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>syncSource</code> of the sync job, if this entity was created by a sync job.</p>
    pub fn set_sync_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sync_source = input;
        self
    }
    /// <p>The <code>syncSource</code> of the sync job, if this entity was created by a sync job.</p>
    pub fn get_sync_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.sync_source
    }
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub fn component_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub fn set_component_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_path = input;
        self
    }
    /// <p>This string specifies the path to the composite component, starting from the top-level component.</p>
    pub fn get_component_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_path
    }
    /// Consumes the builder and constructs a [`ComponentSummary`](crate::types::ComponentSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`component_name`](crate::types::builders::ComponentSummaryBuilder::component_name)
    /// - [`component_type_id`](crate::types::builders::ComponentSummaryBuilder::component_type_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ComponentSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ComponentSummary {
            component_name: self.component_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_name",
                    "component_name was not specified but it is required when building ComponentSummary",
                )
            })?,
            component_type_id: self.component_type_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_type_id",
                    "component_type_id was not specified but it is required when building ComponentSummary",
                )
            })?,
            defined_in: self.defined_in,
            description: self.description,
            property_groups: self.property_groups,
            status: self.status,
            sync_source: self.sync_source,
            component_path: self.component_path,
        })
    }
}
