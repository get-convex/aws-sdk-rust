// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that sets information about the composite component update request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompositeComponentUpdateRequest {
    /// <p>The update type of the component update request.</p>
    pub update_type: ::std::option::Option<crate::types::ComponentUpdateType>,
    /// <p>The description of the component type.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>An object that maps strings to the properties to set in the component type update. Each string in the mapping must be unique to this object.</p>
    pub property_updates: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PropertyRequest>>,
    /// <p>The property group updates.</p>
    pub property_group_updates:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupRequest>>,
}
impl CompositeComponentUpdateRequest {
    /// <p>The update type of the component update request.</p>
    pub fn update_type(&self) -> ::std::option::Option<&crate::types::ComponentUpdateType> {
        self.update_type.as_ref()
    }
    /// <p>The description of the component type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An object that maps strings to the properties to set in the component type update. Each string in the mapping must be unique to this object.</p>
    pub fn property_updates(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::PropertyRequest>> {
        self.property_updates.as_ref()
    }
    /// <p>The property group updates.</p>
    pub fn property_group_updates(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupRequest>> {
        self.property_group_updates.as_ref()
    }
}
impl CompositeComponentUpdateRequest {
    /// Creates a new builder-style object to manufacture [`CompositeComponentUpdateRequest`](crate::types::CompositeComponentUpdateRequest).
    pub fn builder() -> crate::types::builders::CompositeComponentUpdateRequestBuilder {
        crate::types::builders::CompositeComponentUpdateRequestBuilder::default()
    }
}

/// A builder for [`CompositeComponentUpdateRequest`](crate::types::CompositeComponentUpdateRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CompositeComponentUpdateRequestBuilder {
    pub(crate) update_type: ::std::option::Option<crate::types::ComponentUpdateType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) property_updates: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PropertyRequest>>,
    pub(crate) property_group_updates:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupRequest>>,
}
impl CompositeComponentUpdateRequestBuilder {
    /// <p>The update type of the component update request.</p>
    pub fn update_type(mut self, input: crate::types::ComponentUpdateType) -> Self {
        self.update_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The update type of the component update request.</p>
    pub fn set_update_type(mut self, input: ::std::option::Option<crate::types::ComponentUpdateType>) -> Self {
        self.update_type = input;
        self
    }
    /// <p>The update type of the component update request.</p>
    pub fn get_update_type(&self) -> &::std::option::Option<crate::types::ComponentUpdateType> {
        &self.update_type
    }
    /// <p>The description of the component type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the component type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the component type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `property_updates`.
    ///
    /// To override the contents of this collection use [`set_property_updates`](Self::set_property_updates).
    ///
    /// <p>An object that maps strings to the properties to set in the component type update. Each string in the mapping must be unique to this object.</p>
    pub fn property_updates(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::PropertyRequest) -> Self {
        let mut hash_map = self.property_updates.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.property_updates = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An object that maps strings to the properties to set in the component type update. Each string in the mapping must be unique to this object.</p>
    pub fn set_property_updates(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PropertyRequest>>,
    ) -> Self {
        self.property_updates = input;
        self
    }
    /// <p>An object that maps strings to the properties to set in the component type update. Each string in the mapping must be unique to this object.</p>
    pub fn get_property_updates(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PropertyRequest>> {
        &self.property_updates
    }
    /// Adds a key-value pair to `property_group_updates`.
    ///
    /// To override the contents of this collection use [`set_property_group_updates`](Self::set_property_group_updates).
    ///
    /// <p>The property group updates.</p>
    pub fn property_group_updates(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::ComponentPropertyGroupRequest,
    ) -> Self {
        let mut hash_map = self.property_group_updates.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.property_group_updates = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The property group updates.</p>
    pub fn set_property_group_updates(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupRequest>>,
    ) -> Self {
        self.property_group_updates = input;
        self
    }
    /// <p>The property group updates.</p>
    pub fn get_property_group_updates(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentPropertyGroupRequest>> {
        &self.property_group_updates
    }
    /// Consumes the builder and constructs a [`CompositeComponentUpdateRequest`](crate::types::CompositeComponentUpdateRequest).
    pub fn build(self) -> crate::types::CompositeComponentUpdateRequest {
        crate::types::CompositeComponentUpdateRequest {
            update_type: self.update_type,
            description: self.description,
            property_updates: self.property_updates,
            property_group_updates: self.property_group_updates,
        }
    }
}
