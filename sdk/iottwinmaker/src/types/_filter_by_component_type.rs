// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter by component type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterByComponentType {
    /// <p>The component type Id.</p>
    pub component_type_id: ::std::string::String,
}
impl FilterByComponentType {
    /// <p>The component type Id.</p>
    pub fn component_type_id(&self) -> &str {
        use std::ops::Deref;
        self.component_type_id.deref()
    }
}
impl FilterByComponentType {
    /// Creates a new builder-style object to manufacture [`FilterByComponentType`](crate::types::FilterByComponentType).
    pub fn builder() -> crate::types::builders::FilterByComponentTypeBuilder {
        crate::types::builders::FilterByComponentTypeBuilder::default()
    }
}

/// A builder for [`FilterByComponentType`](crate::types::FilterByComponentType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterByComponentTypeBuilder {
    pub(crate) component_type_id: ::std::option::Option<::std::string::String>,
}
impl FilterByComponentTypeBuilder {
    /// <p>The component type Id.</p>
    /// This field is required.
    pub fn component_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The component type Id.</p>
    pub fn set_component_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type_id = input;
        self
    }
    /// <p>The component type Id.</p>
    pub fn get_component_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type_id
    }
    /// Consumes the builder and constructs a [`FilterByComponentType`](crate::types::FilterByComponentType).
    /// This method will fail if any of the following fields are not set:
    /// - [`component_type_id`](crate::types::builders::FilterByComponentTypeBuilder::component_type_id)
    pub fn build(self) -> ::std::result::Result<crate::types::FilterByComponentType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilterByComponentType {
            component_type_id: self.component_type_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_type_id",
                    "component_type_id was not specified but it is required when building FilterByComponentType",
                )
            })?,
        })
    }
}
