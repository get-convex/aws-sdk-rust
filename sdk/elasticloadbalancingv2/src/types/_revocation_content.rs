// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a revocation file.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RevocationContent {
    /// <p>The Amazon S3 bucket for the revocation file.</p>
    pub s3_bucket: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 path for the revocation file.</p>
    pub s3_key: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 object version of the revocation file.</p>
    pub s3_object_version: ::std::option::Option<::std::string::String>,
    /// <p>The type of revocation file.</p>
    pub revocation_type: ::std::option::Option<crate::types::RevocationType>,
}
impl RevocationContent {
    /// <p>The Amazon S3 bucket for the revocation file.</p>
    pub fn s3_bucket(&self) -> ::std::option::Option<&str> {
        self.s3_bucket.as_deref()
    }
    /// <p>The Amazon S3 path for the revocation file.</p>
    pub fn s3_key(&self) -> ::std::option::Option<&str> {
        self.s3_key.as_deref()
    }
    /// <p>The Amazon S3 object version of the revocation file.</p>
    pub fn s3_object_version(&self) -> ::std::option::Option<&str> {
        self.s3_object_version.as_deref()
    }
    /// <p>The type of revocation file.</p>
    pub fn revocation_type(&self) -> ::std::option::Option<&crate::types::RevocationType> {
        self.revocation_type.as_ref()
    }
}
impl RevocationContent {
    /// Creates a new builder-style object to manufacture [`RevocationContent`](crate::types::RevocationContent).
    pub fn builder() -> crate::types::builders::RevocationContentBuilder {
        crate::types::builders::RevocationContentBuilder::default()
    }
}

/// A builder for [`RevocationContent`](crate::types::RevocationContent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RevocationContentBuilder {
    pub(crate) s3_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) s3_key: ::std::option::Option<::std::string::String>,
    pub(crate) s3_object_version: ::std::option::Option<::std::string::String>,
    pub(crate) revocation_type: ::std::option::Option<crate::types::RevocationType>,
}
impl RevocationContentBuilder {
    /// <p>The Amazon S3 bucket for the revocation file.</p>
    pub fn s3_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket for the revocation file.</p>
    pub fn set_s3_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The Amazon S3 bucket for the revocation file.</p>
    pub fn get_s3_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket
    }
    /// <p>The Amazon S3 path for the revocation file.</p>
    pub fn s3_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 path for the revocation file.</p>
    pub fn set_s3_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_key = input;
        self
    }
    /// <p>The Amazon S3 path for the revocation file.</p>
    pub fn get_s3_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_key
    }
    /// <p>The Amazon S3 object version of the revocation file.</p>
    pub fn s3_object_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_object_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 object version of the revocation file.</p>
    pub fn set_s3_object_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_object_version = input;
        self
    }
    /// <p>The Amazon S3 object version of the revocation file.</p>
    pub fn get_s3_object_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_object_version
    }
    /// <p>The type of revocation file.</p>
    pub fn revocation_type(mut self, input: crate::types::RevocationType) -> Self {
        self.revocation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of revocation file.</p>
    pub fn set_revocation_type(mut self, input: ::std::option::Option<crate::types::RevocationType>) -> Self {
        self.revocation_type = input;
        self
    }
    /// <p>The type of revocation file.</p>
    pub fn get_revocation_type(&self) -> &::std::option::Option<crate::types::RevocationType> {
        &self.revocation_type
    }
    /// Consumes the builder and constructs a [`RevocationContent`](crate::types::RevocationContent).
    pub fn build(self) -> crate::types::RevocationContent {
        crate::types::RevocationContent {
            s3_bucket: self.s3_bucket,
            s3_key: self.s3_key,
            s3_object_version: self.s3_object_version,
            revocation_type: self.revocation_type,
        }
    }
}
