// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a trust store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrustStore {
    /// <p>The name of the trust store.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub trust_store_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the trust store.</p>
    pub status: ::std::option::Option<crate::types::TrustStoreStatus>,
    /// <p>The number of ca certificates in the trust store.</p>
    pub number_of_ca_certificates: ::std::option::Option<i32>,
    /// <p>The number of revoked certificates in the trust store.</p>
    pub total_revoked_entries: ::std::option::Option<i64>,
}
impl TrustStore {
    /// <p>The name of the trust store.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub fn trust_store_arn(&self) -> ::std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
    /// <p>The current status of the trust store.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TrustStoreStatus> {
        self.status.as_ref()
    }
    /// <p>The number of ca certificates in the trust store.</p>
    pub fn number_of_ca_certificates(&self) -> ::std::option::Option<i32> {
        self.number_of_ca_certificates
    }
    /// <p>The number of revoked certificates in the trust store.</p>
    pub fn total_revoked_entries(&self) -> ::std::option::Option<i64> {
        self.total_revoked_entries
    }
}
impl TrustStore {
    /// Creates a new builder-style object to manufacture [`TrustStore`](crate::types::TrustStore).
    pub fn builder() -> crate::types::builders::TrustStoreBuilder {
        crate::types::builders::TrustStoreBuilder::default()
    }
}

/// A builder for [`TrustStore`](crate::types::TrustStore).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TrustStoreBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) trust_store_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TrustStoreStatus>,
    pub(crate) number_of_ca_certificates: ::std::option::Option<i32>,
    pub(crate) total_revoked_entries: ::std::option::Option<i64>,
}
impl TrustStoreBuilder {
    /// <p>The name of the trust store.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the trust store.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the trust store.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub fn trust_store_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trust_store_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub fn set_trust_store_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trust_store_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub fn get_trust_store_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trust_store_arn
    }
    /// <p>The current status of the trust store.</p>
    pub fn status(mut self, input: crate::types::TrustStoreStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the trust store.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TrustStoreStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the trust store.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TrustStoreStatus> {
        &self.status
    }
    /// <p>The number of ca certificates in the trust store.</p>
    pub fn number_of_ca_certificates(mut self, input: i32) -> Self {
        self.number_of_ca_certificates = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of ca certificates in the trust store.</p>
    pub fn set_number_of_ca_certificates(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_ca_certificates = input;
        self
    }
    /// <p>The number of ca certificates in the trust store.</p>
    pub fn get_number_of_ca_certificates(&self) -> &::std::option::Option<i32> {
        &self.number_of_ca_certificates
    }
    /// <p>The number of revoked certificates in the trust store.</p>
    pub fn total_revoked_entries(mut self, input: i64) -> Self {
        self.total_revoked_entries = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of revoked certificates in the trust store.</p>
    pub fn set_total_revoked_entries(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_revoked_entries = input;
        self
    }
    /// <p>The number of revoked certificates in the trust store.</p>
    pub fn get_total_revoked_entries(&self) -> &::std::option::Option<i64> {
        &self.total_revoked_entries
    }
    /// Consumes the builder and constructs a [`TrustStore`](crate::types::TrustStore).
    pub fn build(self) -> crate::types::TrustStore {
        crate::types::TrustStore {
            name: self.name,
            trust_store_arn: self.trust_store_arn,
            status: self.status,
            number_of_ca_certificates: self.number_of_ca_certificates,
            total_revoked_entries: self.total_revoked_entries,
        }
    }
}
