// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTrustStoresInput {
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub trust_store_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The names of the trust stores.</p>
    pub names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return with this call.</p>
    pub page_size: ::std::option::Option<i32>,
}
impl DescribeTrustStoresInput {
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.trust_store_arns.is_none()`.
    pub fn trust_store_arns(&self) -> &[::std::string::String] {
        self.trust_store_arns.as_deref().unwrap_or_default()
    }
    /// <p>The names of the trust stores.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.names.is_none()`.
    pub fn names(&self) -> &[::std::string::String] {
        self.names.as_deref().unwrap_or_default()
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The maximum number of results to return with this call.</p>
    pub fn page_size(&self) -> ::std::option::Option<i32> {
        self.page_size
    }
}
impl DescribeTrustStoresInput {
    /// Creates a new builder-style object to manufacture [`DescribeTrustStoresInput`](crate::operation::describe_trust_stores::DescribeTrustStoresInput).
    pub fn builder() -> crate::operation::describe_trust_stores::builders::DescribeTrustStoresInputBuilder {
        crate::operation::describe_trust_stores::builders::DescribeTrustStoresInputBuilder::default()
    }
}

/// A builder for [`DescribeTrustStoresInput`](crate::operation::describe_trust_stores::DescribeTrustStoresInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeTrustStoresInputBuilder {
    pub(crate) trust_store_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) page_size: ::std::option::Option<i32>,
}
impl DescribeTrustStoresInputBuilder {
    /// Appends an item to `trust_store_arns`.
    ///
    /// To override the contents of this collection use [`set_trust_store_arns`](Self::set_trust_store_arns).
    ///
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub fn trust_store_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.trust_store_arns.unwrap_or_default();
        v.push(input.into());
        self.trust_store_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub fn set_trust_store_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.trust_store_arns = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trust store.</p>
    pub fn get_trust_store_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.trust_store_arns
    }
    /// Appends an item to `names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>The names of the trust stores.</p>
    pub fn names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.names.unwrap_or_default();
        v.push(input.into());
        self.names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the trust stores.</p>
    pub fn set_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.names = input;
        self
    }
    /// <p>The names of the trust stores.</p>
    pub fn get_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.names
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>The maximum number of results to return with this call.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return with this call.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The maximum number of results to return with this call.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        &self.page_size
    }
    /// Consumes the builder and constructs a [`DescribeTrustStoresInput`](crate::operation::describe_trust_stores::DescribeTrustStoresInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_trust_stores::DescribeTrustStoresInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_trust_stores::DescribeTrustStoresInput {
            trust_store_arns: self.trust_store_arns,
            names: self.names,
            marker: self.marker,
            page_size: self.page_size,
        })
    }
}
