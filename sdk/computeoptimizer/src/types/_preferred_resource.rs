// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The preference to control which resource type values are considered when generating rightsizing recommendations. You can specify this preference as a combination of include and exclude lists. You must specify either an <code>includeList</code> or <code>excludeList</code>. If the preference is an empty set of resource type values, an error occurs. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/rightsizing-preferences.html"> Rightsizing recommendation preferences</a> in the <i>Compute Optimizer User Guide</i>.</p><note>
/// <ul>
/// <li>
/// <p>This preference is only available for the Amazon EC2 instance and Auto Scaling group resource types.</p></li>
/// <li>
/// <p>Compute Optimizer only supports the customization of <code>Ec2InstanceTypes</code>.</p></li>
/// </ul>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PreferredResource {
    /// <p>The type of preferred resource to customize.</p><note>
    /// <p>Compute Optimizer only supports the customization of <code>Ec2InstanceTypes</code>.</p>
    /// </note>
    pub name: ::std::option::Option<crate::types::PreferredResourceName>,
    /// <p>The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as m5.large, or use wild card expressions, such as m5. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    pub include_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    pub exclude_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PreferredResource {
    /// <p>The type of preferred resource to customize.</p><note>
    /// <p>Compute Optimizer only supports the customization of <code>Ec2InstanceTypes</code>.</p>
    /// </note>
    pub fn name(&self) -> ::std::option::Option<&crate::types::PreferredResourceName> {
        self.name.as_ref()
    }
    /// <p>The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as m5.large, or use wild card expressions, such as m5. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include_list.is_none()`.
    pub fn include_list(&self) -> &[::std::string::String] {
        self.include_list.as_deref().unwrap_or_default()
    }
    /// <p>The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclude_list.is_none()`.
    pub fn exclude_list(&self) -> &[::std::string::String] {
        self.exclude_list.as_deref().unwrap_or_default()
    }
}
impl PreferredResource {
    /// Creates a new builder-style object to manufacture [`PreferredResource`](crate::types::PreferredResource).
    pub fn builder() -> crate::types::builders::PreferredResourceBuilder {
        crate::types::builders::PreferredResourceBuilder::default()
    }
}

/// A builder for [`PreferredResource`](crate::types::PreferredResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PreferredResourceBuilder {
    pub(crate) name: ::std::option::Option<crate::types::PreferredResourceName>,
    pub(crate) include_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) exclude_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PreferredResourceBuilder {
    /// <p>The type of preferred resource to customize.</p><note>
    /// <p>Compute Optimizer only supports the customization of <code>Ec2InstanceTypes</code>.</p>
    /// </note>
    pub fn name(mut self, input: crate::types::PreferredResourceName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of preferred resource to customize.</p><note>
    /// <p>Compute Optimizer only supports the customization of <code>Ec2InstanceTypes</code>.</p>
    /// </note>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::PreferredResourceName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of preferred resource to customize.</p><note>
    /// <p>Compute Optimizer only supports the customization of <code>Ec2InstanceTypes</code>.</p>
    /// </note>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::PreferredResourceName> {
        &self.name
    }
    /// Appends an item to `include_list`.
    ///
    /// To override the contents of this collection use [`set_include_list`](Self::set_include_list).
    ///
    /// <p>The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as m5.large, or use wild card expressions, such as m5. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    pub fn include_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.include_list.unwrap_or_default();
        v.push(input.into());
        self.include_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as m5.large, or use wild card expressions, such as m5. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    pub fn set_include_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.include_list = input;
        self
    }
    /// <p>The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as m5.large, or use wild card expressions, such as m5. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    pub fn get_include_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.include_list
    }
    /// Appends an item to `exclude_list`.
    ///
    /// To override the contents of this collection use [`set_exclude_list`](Self::set_exclude_list).
    ///
    /// <p>The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    pub fn exclude_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclude_list.unwrap_or_default();
        v.push(input.into());
        self.exclude_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    pub fn set_exclude_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclude_list = input;
        self
    }
    /// <p>The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default. You can specify up to 1000 values in this list.</p>
    pub fn get_exclude_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclude_list
    }
    /// Consumes the builder and constructs a [`PreferredResource`](crate::types::PreferredResource).
    pub fn build(self) -> crate::types::PreferredResource {
        crate::types::PreferredResource {
            name: self.name,
            include_list: self.include_list,
            exclude_list: self.exclude_list,
        }
    }
}
