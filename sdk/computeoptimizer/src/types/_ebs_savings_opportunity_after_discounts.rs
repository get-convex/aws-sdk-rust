// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the savings opportunity for Amazon EBS volume recommendations after applying specific discounts.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EbsSavingsOpportunityAfterDiscounts {
    /// <p>The estimated monthly savings possible as a percentage of monthly cost after applying the specific discounts. This saving can be achieved by adopting Compute Optimizer’s Amazon EBS volume recommendations.</p>
    pub savings_opportunity_percentage: f64,
    /// <p>The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizer’s Amazon EBS volume recommendations. This saving includes any applicable discounts.</p>
    pub estimated_monthly_savings: ::std::option::Option<crate::types::EbsEstimatedMonthlySavings>,
}
impl EbsSavingsOpportunityAfterDiscounts {
    /// <p>The estimated monthly savings possible as a percentage of monthly cost after applying the specific discounts. This saving can be achieved by adopting Compute Optimizer’s Amazon EBS volume recommendations.</p>
    pub fn savings_opportunity_percentage(&self) -> f64 {
        self.savings_opportunity_percentage
    }
    /// <p>The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizer’s Amazon EBS volume recommendations. This saving includes any applicable discounts.</p>
    pub fn estimated_monthly_savings(&self) -> ::std::option::Option<&crate::types::EbsEstimatedMonthlySavings> {
        self.estimated_monthly_savings.as_ref()
    }
}
impl EbsSavingsOpportunityAfterDiscounts {
    /// Creates a new builder-style object to manufacture [`EbsSavingsOpportunityAfterDiscounts`](crate::types::EbsSavingsOpportunityAfterDiscounts).
    pub fn builder() -> crate::types::builders::EbsSavingsOpportunityAfterDiscountsBuilder {
        crate::types::builders::EbsSavingsOpportunityAfterDiscountsBuilder::default()
    }
}

/// A builder for [`EbsSavingsOpportunityAfterDiscounts`](crate::types::EbsSavingsOpportunityAfterDiscounts).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EbsSavingsOpportunityAfterDiscountsBuilder {
    pub(crate) savings_opportunity_percentage: ::std::option::Option<f64>,
    pub(crate) estimated_monthly_savings: ::std::option::Option<crate::types::EbsEstimatedMonthlySavings>,
}
impl EbsSavingsOpportunityAfterDiscountsBuilder {
    /// <p>The estimated monthly savings possible as a percentage of monthly cost after applying the specific discounts. This saving can be achieved by adopting Compute Optimizer’s Amazon EBS volume recommendations.</p>
    pub fn savings_opportunity_percentage(mut self, input: f64) -> Self {
        self.savings_opportunity_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated monthly savings possible as a percentage of monthly cost after applying the specific discounts. This saving can be achieved by adopting Compute Optimizer’s Amazon EBS volume recommendations.</p>
    pub fn set_savings_opportunity_percentage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.savings_opportunity_percentage = input;
        self
    }
    /// <p>The estimated monthly savings possible as a percentage of monthly cost after applying the specific discounts. This saving can be achieved by adopting Compute Optimizer’s Amazon EBS volume recommendations.</p>
    pub fn get_savings_opportunity_percentage(&self) -> &::std::option::Option<f64> {
        &self.savings_opportunity_percentage
    }
    /// <p>The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizer’s Amazon EBS volume recommendations. This saving includes any applicable discounts.</p>
    pub fn estimated_monthly_savings(mut self, input: crate::types::EbsEstimatedMonthlySavings) -> Self {
        self.estimated_monthly_savings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizer’s Amazon EBS volume recommendations. This saving includes any applicable discounts.</p>
    pub fn set_estimated_monthly_savings(mut self, input: ::std::option::Option<crate::types::EbsEstimatedMonthlySavings>) -> Self {
        self.estimated_monthly_savings = input;
        self
    }
    /// <p>The estimated monthly savings possible as a percentage of monthly cost by adopting Compute Optimizer’s Amazon EBS volume recommendations. This saving includes any applicable discounts.</p>
    pub fn get_estimated_monthly_savings(&self) -> &::std::option::Option<crate::types::EbsEstimatedMonthlySavings> {
        &self.estimated_monthly_savings
    }
    /// Consumes the builder and constructs a [`EbsSavingsOpportunityAfterDiscounts`](crate::types::EbsSavingsOpportunityAfterDiscounts).
    pub fn build(self) -> crate::types::EbsSavingsOpportunityAfterDiscounts {
        crate::types::EbsSavingsOpportunityAfterDiscounts {
            savings_opportunity_percentage: self.savings_opportunity_percentage.unwrap_or_default(),
            estimated_monthly_savings: self.estimated_monthly_savings,
        }
    }
}
