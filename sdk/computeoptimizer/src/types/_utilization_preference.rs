// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The preference to control the resourceâ€™s CPU utilization thresholds - threshold and headroom.</p><note>
/// <p>This preference is only available for the Amazon EC2 instance resource type.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UtilizationPreference {
    /// <p>The name of the resource utilization metric name to customize.</p><note>
    /// <p>Compute Optimizer only supports <code>CpuUtilization</code>.</p>
    /// </note>
    pub metric_name: ::std::option::Option<crate::types::CustomizableMetricName>,
    /// <p>The parameters to set when customizing the resource utilization thresholds.</p>
    pub metric_parameters: ::std::option::Option<crate::types::CustomizableMetricParameters>,
}
impl UtilizationPreference {
    /// <p>The name of the resource utilization metric name to customize.</p><note>
    /// <p>Compute Optimizer only supports <code>CpuUtilization</code>.</p>
    /// </note>
    pub fn metric_name(&self) -> ::std::option::Option<&crate::types::CustomizableMetricName> {
        self.metric_name.as_ref()
    }
    /// <p>The parameters to set when customizing the resource utilization thresholds.</p>
    pub fn metric_parameters(&self) -> ::std::option::Option<&crate::types::CustomizableMetricParameters> {
        self.metric_parameters.as_ref()
    }
}
impl UtilizationPreference {
    /// Creates a new builder-style object to manufacture [`UtilizationPreference`](crate::types::UtilizationPreference).
    pub fn builder() -> crate::types::builders::UtilizationPreferenceBuilder {
        crate::types::builders::UtilizationPreferenceBuilder::default()
    }
}

/// A builder for [`UtilizationPreference`](crate::types::UtilizationPreference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UtilizationPreferenceBuilder {
    pub(crate) metric_name: ::std::option::Option<crate::types::CustomizableMetricName>,
    pub(crate) metric_parameters: ::std::option::Option<crate::types::CustomizableMetricParameters>,
}
impl UtilizationPreferenceBuilder {
    /// <p>The name of the resource utilization metric name to customize.</p><note>
    /// <p>Compute Optimizer only supports <code>CpuUtilization</code>.</p>
    /// </note>
    pub fn metric_name(mut self, input: crate::types::CustomizableMetricName) -> Self {
        self.metric_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the resource utilization metric name to customize.</p><note>
    /// <p>Compute Optimizer only supports <code>CpuUtilization</code>.</p>
    /// </note>
    pub fn set_metric_name(mut self, input: ::std::option::Option<crate::types::CustomizableMetricName>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the resource utilization metric name to customize.</p><note>
    /// <p>Compute Optimizer only supports <code>CpuUtilization</code>.</p>
    /// </note>
    pub fn get_metric_name(&self) -> &::std::option::Option<crate::types::CustomizableMetricName> {
        &self.metric_name
    }
    /// <p>The parameters to set when customizing the resource utilization thresholds.</p>
    pub fn metric_parameters(mut self, input: crate::types::CustomizableMetricParameters) -> Self {
        self.metric_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters to set when customizing the resource utilization thresholds.</p>
    pub fn set_metric_parameters(mut self, input: ::std::option::Option<crate::types::CustomizableMetricParameters>) -> Self {
        self.metric_parameters = input;
        self
    }
    /// <p>The parameters to set when customizing the resource utilization thresholds.</p>
    pub fn get_metric_parameters(&self) -> &::std::option::Option<crate::types::CustomizableMetricParameters> {
        &self.metric_parameters
    }
    /// Consumes the builder and constructs a [`UtilizationPreference`](crate::types::UtilizationPreference).
    pub fn build(self) -> crate::types::UtilizationPreference {
        crate::types::UtilizationPreference {
            metric_name: self.metric_name,
            metric_parameters: self.metric_parameters,
        }
    }
}
