// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that describes the estimated monthly savings possible by adopting Compute Optimizerâ€™s Amazon EBS volume recommendations. This includes any applicable discounts.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EbsEstimatedMonthlySavings {
    /// <p>The currency of the estimated monthly savings.</p>
    pub currency: ::std::option::Option<crate::types::Currency>,
    /// <p>The value of the estimated monthly savings.</p>
    pub value: f64,
}
impl EbsEstimatedMonthlySavings {
    /// <p>The currency of the estimated monthly savings.</p>
    pub fn currency(&self) -> ::std::option::Option<&crate::types::Currency> {
        self.currency.as_ref()
    }
    /// <p>The value of the estimated monthly savings.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
}
impl EbsEstimatedMonthlySavings {
    /// Creates a new builder-style object to manufacture [`EbsEstimatedMonthlySavings`](crate::types::EbsEstimatedMonthlySavings).
    pub fn builder() -> crate::types::builders::EbsEstimatedMonthlySavingsBuilder {
        crate::types::builders::EbsEstimatedMonthlySavingsBuilder::default()
    }
}

/// A builder for [`EbsEstimatedMonthlySavings`](crate::types::EbsEstimatedMonthlySavings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EbsEstimatedMonthlySavingsBuilder {
    pub(crate) currency: ::std::option::Option<crate::types::Currency>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl EbsEstimatedMonthlySavingsBuilder {
    /// <p>The currency of the estimated monthly savings.</p>
    pub fn currency(mut self, input: crate::types::Currency) -> Self {
        self.currency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The currency of the estimated monthly savings.</p>
    pub fn set_currency(mut self, input: ::std::option::Option<crate::types::Currency>) -> Self {
        self.currency = input;
        self
    }
    /// <p>The currency of the estimated monthly savings.</p>
    pub fn get_currency(&self) -> &::std::option::Option<crate::types::Currency> {
        &self.currency
    }
    /// <p>The value of the estimated monthly savings.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the estimated monthly savings.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the estimated monthly savings.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`EbsEstimatedMonthlySavings`](crate::types::EbsEstimatedMonthlySavings).
    pub fn build(self) -> crate::types::EbsEstimatedMonthlySavings {
        crate::types::EbsEstimatedMonthlySavings {
            currency: self.currency,
            value: self.value.unwrap_or_default(),
        }
    }
}
