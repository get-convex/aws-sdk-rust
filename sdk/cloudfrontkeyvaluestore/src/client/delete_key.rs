// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteKey`](crate::operation::delete_key::builders::DeleteKeyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`kvs_arn(impl Into<String>)`](crate::operation::delete_key::builders::DeleteKeyFluentBuilder::kvs_arn) / [`set_kvs_arn(Option<String>)`](crate::operation::delete_key::builders::DeleteKeyFluentBuilder::set_kvs_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the Key Value Store.</p><br>
    ///   - [`key(impl Into<String>)`](crate::operation::delete_key::builders::DeleteKeyFluentBuilder::key) / [`set_key(Option<String>)`](crate::operation::delete_key::builders::DeleteKeyFluentBuilder::set_key):<br>required: **true**<br><p>The key to delete.</p><br>
    ///   - [`if_match(impl Into<String>)`](crate::operation::delete_key::builders::DeleteKeyFluentBuilder::if_match) / [`set_if_match(Option<String>)`](crate::operation::delete_key::builders::DeleteKeyFluentBuilder::set_if_match):<br>required: **true**<br><p>The current version (ETag) of the Key Value Store that you are deleting keys from, which you can get using DescribeKeyValueStore.</p><br>
    /// - On success, responds with [`DeleteKeyOutput`](crate::operation::delete_key::DeleteKeyOutput) with field(s):
    ///   - [`item_count(i32)`](crate::operation::delete_key::DeleteKeyOutput::item_count): <p>Number of key value pairs in the Key Value Store after the successful delete.</p>
    ///   - [`total_size_in_bytes(i64)`](crate::operation::delete_key::DeleteKeyOutput::total_size_in_bytes): <p>Total size of the Key Value Store after the successful delete, in bytes.</p>
    ///   - [`e_tag(String)`](crate::operation::delete_key::DeleteKeyOutput::e_tag): <p>The current version identifier of the Key Value Store after the successful delete.</p>
    /// - On failure, responds with [`SdkError<DeleteKeyError>`](crate::operation::delete_key::DeleteKeyError)
    pub fn delete_key(&self) -> crate::operation::delete_key::builders::DeleteKeyFluentBuilder {
        crate::operation::delete_key::builders::DeleteKeyFluentBuilder::new(self.handle.clone())
    }
}
