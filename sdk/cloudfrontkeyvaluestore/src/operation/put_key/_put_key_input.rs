// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A key value pair.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PutKeyInput {
    /// <p>The key to put.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The value to put.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    pub kvs_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current version (ETag) of the Key Value Store that you are putting keys into, which you can get using DescribeKeyValueStore.</p>
    pub if_match: ::std::option::Option<::std::string::String>,
}
impl PutKeyInput {
    /// <p>The key to put.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value to put.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    pub fn kvs_arn(&self) -> ::std::option::Option<&str> {
        self.kvs_arn.as_deref()
    }
    /// <p>The current version (ETag) of the Key Value Store that you are putting keys into, which you can get using DescribeKeyValueStore.</p>
    pub fn if_match(&self) -> ::std::option::Option<&str> {
        self.if_match.as_deref()
    }
}
impl ::std::fmt::Debug for PutKeyInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutKeyInput");
        formatter.field("key", &self.key);
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("kvs_arn", &self.kvs_arn);
        formatter.field("if_match", &self.if_match);
        formatter.finish()
    }
}
impl PutKeyInput {
    /// Creates a new builder-style object to manufacture [`PutKeyInput`](crate::operation::put_key::PutKeyInput).
    pub fn builder() -> crate::operation::put_key::builders::PutKeyInputBuilder {
        crate::operation::put_key::builders::PutKeyInputBuilder::default()
    }
}

/// A builder for [`PutKeyInput`](crate::operation::put_key::PutKeyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PutKeyInputBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) kvs_arn: ::std::option::Option<::std::string::String>,
    pub(crate) if_match: ::std::option::Option<::std::string::String>,
}
impl PutKeyInputBuilder {
    /// <p>The key to put.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key to put.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key to put.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The value to put.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value to put.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value to put.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    /// This field is required.
    pub fn kvs_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kvs_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    pub fn set_kvs_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kvs_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    pub fn get_kvs_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kvs_arn
    }
    /// <p>The current version (ETag) of the Key Value Store that you are putting keys into, which you can get using DescribeKeyValueStore.</p>
    /// This field is required.
    pub fn if_match(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.if_match = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version (ETag) of the Key Value Store that you are putting keys into, which you can get using DescribeKeyValueStore.</p>
    pub fn set_if_match(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.if_match = input;
        self
    }
    /// <p>The current version (ETag) of the Key Value Store that you are putting keys into, which you can get using DescribeKeyValueStore.</p>
    pub fn get_if_match(&self) -> &::std::option::Option<::std::string::String> {
        &self.if_match
    }
    /// Consumes the builder and constructs a [`PutKeyInput`](crate::operation::put_key::PutKeyInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::put_key::PutKeyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_key::PutKeyInput {
            key: self.key,
            value: self.value,
            kvs_arn: self.kvs_arn,
            if_match: self.if_match,
        })
    }
}
impl ::std::fmt::Debug for PutKeyInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutKeyInputBuilder");
        formatter.field("key", &self.key);
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("kvs_arn", &self.kvs_arn);
        formatter.field("if_match", &self.if_match);
        formatter.finish()
    }
}
