// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateKeysInput {
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    pub kvs_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current version (ETag) of the Key Value Store that you are updating keys of, which you can get using DescribeKeyValueStore.</p>
    pub if_match: ::std::option::Option<::std::string::String>,
    /// <p>List of key value pairs to put.</p>
    pub puts: ::std::option::Option<::std::vec::Vec<crate::types::PutKeyRequestListItem>>,
    /// <p>List of keys to delete.</p>
    pub deletes: ::std::option::Option<::std::vec::Vec<crate::types::DeleteKeyRequestListItem>>,
}
impl UpdateKeysInput {
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    pub fn kvs_arn(&self) -> ::std::option::Option<&str> {
        self.kvs_arn.as_deref()
    }
    /// <p>The current version (ETag) of the Key Value Store that you are updating keys of, which you can get using DescribeKeyValueStore.</p>
    pub fn if_match(&self) -> ::std::option::Option<&str> {
        self.if_match.as_deref()
    }
    /// <p>List of key value pairs to put.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.puts.is_none()`.
    pub fn puts(&self) -> &[crate::types::PutKeyRequestListItem] {
        self.puts.as_deref().unwrap_or_default()
    }
    /// <p>List of keys to delete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.deletes.is_none()`.
    pub fn deletes(&self) -> &[crate::types::DeleteKeyRequestListItem] {
        self.deletes.as_deref().unwrap_or_default()
    }
}
impl UpdateKeysInput {
    /// Creates a new builder-style object to manufacture [`UpdateKeysInput`](crate::operation::update_keys::UpdateKeysInput).
    pub fn builder() -> crate::operation::update_keys::builders::UpdateKeysInputBuilder {
        crate::operation::update_keys::builders::UpdateKeysInputBuilder::default()
    }
}

/// A builder for [`UpdateKeysInput`](crate::operation::update_keys::UpdateKeysInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateKeysInputBuilder {
    pub(crate) kvs_arn: ::std::option::Option<::std::string::String>,
    pub(crate) if_match: ::std::option::Option<::std::string::String>,
    pub(crate) puts: ::std::option::Option<::std::vec::Vec<crate::types::PutKeyRequestListItem>>,
    pub(crate) deletes: ::std::option::Option<::std::vec::Vec<crate::types::DeleteKeyRequestListItem>>,
}
impl UpdateKeysInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    /// This field is required.
    pub fn kvs_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kvs_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    pub fn set_kvs_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kvs_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Value Store.</p>
    pub fn get_kvs_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kvs_arn
    }
    /// <p>The current version (ETag) of the Key Value Store that you are updating keys of, which you can get using DescribeKeyValueStore.</p>
    /// This field is required.
    pub fn if_match(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.if_match = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version (ETag) of the Key Value Store that you are updating keys of, which you can get using DescribeKeyValueStore.</p>
    pub fn set_if_match(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.if_match = input;
        self
    }
    /// <p>The current version (ETag) of the Key Value Store that you are updating keys of, which you can get using DescribeKeyValueStore.</p>
    pub fn get_if_match(&self) -> &::std::option::Option<::std::string::String> {
        &self.if_match
    }
    /// Appends an item to `puts`.
    ///
    /// To override the contents of this collection use [`set_puts`](Self::set_puts).
    ///
    /// <p>List of key value pairs to put.</p>
    pub fn puts(mut self, input: crate::types::PutKeyRequestListItem) -> Self {
        let mut v = self.puts.unwrap_or_default();
        v.push(input);
        self.puts = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of key value pairs to put.</p>
    pub fn set_puts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PutKeyRequestListItem>>) -> Self {
        self.puts = input;
        self
    }
    /// <p>List of key value pairs to put.</p>
    pub fn get_puts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PutKeyRequestListItem>> {
        &self.puts
    }
    /// Appends an item to `deletes`.
    ///
    /// To override the contents of this collection use [`set_deletes`](Self::set_deletes).
    ///
    /// <p>List of keys to delete.</p>
    pub fn deletes(mut self, input: crate::types::DeleteKeyRequestListItem) -> Self {
        let mut v = self.deletes.unwrap_or_default();
        v.push(input);
        self.deletes = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of keys to delete.</p>
    pub fn set_deletes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeleteKeyRequestListItem>>) -> Self {
        self.deletes = input;
        self
    }
    /// <p>List of keys to delete.</p>
    pub fn get_deletes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeleteKeyRequestListItem>> {
        &self.deletes
    }
    /// Consumes the builder and constructs a [`UpdateKeysInput`](crate::operation::update_keys::UpdateKeysInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_keys::UpdateKeysInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_keys::UpdateKeysInput {
            kvs_arn: self.kvs_arn,
            if_match: self.if_match,
            puts: self.puts,
            deletes: self.deletes,
        })
    }
}
