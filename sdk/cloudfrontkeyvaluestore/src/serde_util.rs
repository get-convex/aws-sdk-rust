// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn delete_key_output_output_correct_errors(
    mut builder: crate::operation::delete_key::builders::DeleteKeyOutputBuilder,
) -> crate::operation::delete_key::builders::DeleteKeyOutputBuilder {
    if builder.item_count.is_none() {
        builder.item_count = Some(Default::default())
    }
    if builder.total_size_in_bytes.is_none() {
        builder.total_size_in_bytes = Some(Default::default())
    }
    if builder.e_tag.is_none() {
        builder.e_tag = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_key_value_store_output_output_correct_errors(
    mut builder: crate::operation::describe_key_value_store::builders::DescribeKeyValueStoreOutputBuilder,
) -> crate::operation::describe_key_value_store::builders::DescribeKeyValueStoreOutputBuilder {
    if builder.item_count.is_none() {
        builder.item_count = Some(Default::default())
    }
    if builder.total_size_in_bytes.is_none() {
        builder.total_size_in_bytes = Some(Default::default())
    }
    if builder.kvs_arn.is_none() {
        builder.kvs_arn = Some(Default::default())
    }
    if builder.created.is_none() {
        builder.created = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.e_tag.is_none() {
        builder.e_tag = Some(Default::default())
    }
    builder
}

pub(crate) fn get_key_output_output_correct_errors(
    mut builder: crate::operation::get_key::builders::GetKeyOutputBuilder,
) -> crate::operation::get_key::builders::GetKeyOutputBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.item_count.is_none() {
        builder.item_count = Some(Default::default())
    }
    if builder.total_size_in_bytes.is_none() {
        builder.total_size_in_bytes = Some(Default::default())
    }
    builder
}

pub(crate) fn put_key_output_output_correct_errors(
    mut builder: crate::operation::put_key::builders::PutKeyOutputBuilder,
) -> crate::operation::put_key::builders::PutKeyOutputBuilder {
    if builder.item_count.is_none() {
        builder.item_count = Some(Default::default())
    }
    if builder.total_size_in_bytes.is_none() {
        builder.total_size_in_bytes = Some(Default::default())
    }
    if builder.e_tag.is_none() {
        builder.e_tag = Some(Default::default())
    }
    builder
}

pub(crate) fn update_keys_output_output_correct_errors(
    mut builder: crate::operation::update_keys::builders::UpdateKeysOutputBuilder,
) -> crate::operation::update_keys::builders::UpdateKeysOutputBuilder {
    if builder.item_count.is_none() {
        builder.item_count = Some(Default::default())
    }
    if builder.total_size_in_bytes.is_none() {
        builder.total_size_in_bytes = Some(Default::default())
    }
    if builder.e_tag.is_none() {
        builder.e_tag = Some(Default::default())
    }
    builder
}

pub(crate) fn list_keys_response_list_item_correct_errors(
    mut builder: crate::types::builders::ListKeysResponseListItemBuilder,
) -> crate::types::builders::ListKeysResponseListItemBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
