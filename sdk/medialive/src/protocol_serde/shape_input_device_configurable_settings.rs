// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_input_device_configurable_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InputDeviceConfigurableSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.configured_input {
        object.key("configuredInput").string(var_1.as_str());
    }
    if let Some(var_2) = &input.max_bitrate {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.latency_ms {
        object.key("latencyMs").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.codec {
        object.key("codec").string(var_4.as_str());
    }
    if let Some(var_5) = &input.mediaconnect_settings {
        #[allow(unused_mut)]
        let mut object_6 = object.key("mediaconnectSettings").start_object();
        crate::protocol_serde::shape_input_device_media_connect_configurable_settings::ser_input_device_media_connect_configurable_settings(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.audio_channel_pairs {
        let mut array_8 = object.key("audioChannelPairs").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_input_device_configurable_audio_channel_pair_config::ser_input_device_configurable_audio_channel_pair_config(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}
