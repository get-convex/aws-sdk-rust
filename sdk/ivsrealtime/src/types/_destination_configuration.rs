// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Complex data type that defines destination-configuration objects.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationConfiguration {
    /// <p>Name that can be specified to help identify the destination.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>An IVS channel to be used for broadcasting, for server-side composition. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub channel: ::std::option::Option<crate::types::ChannelDestinationConfiguration>,
    /// <p>An S3 storage configuration to be used for recording video data. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub s3: ::std::option::Option<crate::types::S3DestinationConfiguration>,
}
impl DestinationConfiguration {
    /// <p>Name that can be specified to help identify the destination.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An IVS channel to be used for broadcasting, for server-side composition. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub fn channel(&self) -> ::std::option::Option<&crate::types::ChannelDestinationConfiguration> {
        self.channel.as_ref()
    }
    /// <p>An S3 storage configuration to be used for recording video data. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub fn s3(&self) -> ::std::option::Option<&crate::types::S3DestinationConfiguration> {
        self.s3.as_ref()
    }
}
impl DestinationConfiguration {
    /// Creates a new builder-style object to manufacture [`DestinationConfiguration`](crate::types::DestinationConfiguration).
    pub fn builder() -> crate::types::builders::DestinationConfigurationBuilder {
        crate::types::builders::DestinationConfigurationBuilder::default()
    }
}

/// A builder for [`DestinationConfiguration`](crate::types::DestinationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DestinationConfigurationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) channel: ::std::option::Option<crate::types::ChannelDestinationConfiguration>,
    pub(crate) s3: ::std::option::Option<crate::types::S3DestinationConfiguration>,
}
impl DestinationConfigurationBuilder {
    /// <p>Name that can be specified to help identify the destination.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name that can be specified to help identify the destination.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name that can be specified to help identify the destination.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An IVS channel to be used for broadcasting, for server-side composition. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub fn channel(mut self, input: crate::types::ChannelDestinationConfiguration) -> Self {
        self.channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>An IVS channel to be used for broadcasting, for server-side composition. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub fn set_channel(mut self, input: ::std::option::Option<crate::types::ChannelDestinationConfiguration>) -> Self {
        self.channel = input;
        self
    }
    /// <p>An IVS channel to be used for broadcasting, for server-side composition. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub fn get_channel(&self) -> &::std::option::Option<crate::types::ChannelDestinationConfiguration> {
        &self.channel
    }
    /// <p>An S3 storage configuration to be used for recording video data. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub fn s3(mut self, input: crate::types::S3DestinationConfiguration) -> Self {
        self.s3 = ::std::option::Option::Some(input);
        self
    }
    /// <p>An S3 storage configuration to be used for recording video data. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub fn set_s3(mut self, input: ::std::option::Option<crate::types::S3DestinationConfiguration>) -> Self {
        self.s3 = input;
        self
    }
    /// <p>An S3 storage configuration to be used for recording video data. Either a <code>channel</code> or an <code>s3</code> must be specified.</p>
    pub fn get_s3(&self) -> &::std::option::Option<crate::types::S3DestinationConfiguration> {
        &self.s3
    }
    /// Consumes the builder and constructs a [`DestinationConfiguration`](crate::types::DestinationConfiguration).
    pub fn build(self) -> crate::types::DestinationConfiguration {
        crate::types::DestinationConfiguration {
            name: self.name,
            channel: self.channel,
            s3: self.s3,
        }
    }
}
