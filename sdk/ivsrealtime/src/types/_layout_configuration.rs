// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information of supported layouts for server-side composition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LayoutConfiguration {
    /// <p>Configuration related to grid layout. Default: Grid layout.</p>
    pub grid: ::std::option::Option<crate::types::GridConfiguration>,
}
impl LayoutConfiguration {
    /// <p>Configuration related to grid layout. Default: Grid layout.</p>
    pub fn grid(&self) -> ::std::option::Option<&crate::types::GridConfiguration> {
        self.grid.as_ref()
    }
}
impl LayoutConfiguration {
    /// Creates a new builder-style object to manufacture [`LayoutConfiguration`](crate::types::LayoutConfiguration).
    pub fn builder() -> crate::types::builders::LayoutConfigurationBuilder {
        crate::types::builders::LayoutConfigurationBuilder::default()
    }
}

/// A builder for [`LayoutConfiguration`](crate::types::LayoutConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LayoutConfigurationBuilder {
    pub(crate) grid: ::std::option::Option<crate::types::GridConfiguration>,
}
impl LayoutConfigurationBuilder {
    /// <p>Configuration related to grid layout. Default: Grid layout.</p>
    pub fn grid(mut self, input: crate::types::GridConfiguration) -> Self {
        self.grid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration related to grid layout. Default: Grid layout.</p>
    pub fn set_grid(mut self, input: ::std::option::Option<crate::types::GridConfiguration>) -> Self {
        self.grid = input;
        self
    }
    /// <p>Configuration related to grid layout. Default: Grid layout.</p>
    pub fn get_grid(&self) -> &::std::option::Option<crate::types::GridConfiguration> {
        &self.grid
    }
    /// Consumes the builder and constructs a [`LayoutConfiguration`](crate::types::LayoutConfiguration).
    pub fn build(self) -> crate::types::LayoutConfiguration {
        crate::types::LayoutConfiguration { grid: self.grid }
    }
}
