// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information specific to Grid layout, for server-side composition. See "Layouts" in <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/server-side-composition.html">Server-Side Composition</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GridConfiguration {
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot.</p>
    pub featured_participant_attribute: ::std::option::Option<::std::string::String>,
}
impl GridConfiguration {
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot.</p>
    pub fn featured_participant_attribute(&self) -> ::std::option::Option<&str> {
        self.featured_participant_attribute.as_deref()
    }
}
impl GridConfiguration {
    /// Creates a new builder-style object to manufacture [`GridConfiguration`](crate::types::GridConfiguration).
    pub fn builder() -> crate::types::builders::GridConfigurationBuilder {
        crate::types::builders::GridConfigurationBuilder::default()
    }
}

/// A builder for [`GridConfiguration`](crate::types::GridConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GridConfigurationBuilder {
    pub(crate) featured_participant_attribute: ::std::option::Option<::std::string::String>,
}
impl GridConfigurationBuilder {
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot.</p>
    pub fn featured_participant_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.featured_participant_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot.</p>
    pub fn set_featured_participant_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.featured_participant_attribute = input;
        self
    }
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot.</p>
    pub fn get_featured_participant_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.featured_participant_attribute
    }
    /// Consumes the builder and constructs a [`GridConfiguration`](crate::types::GridConfiguration).
    pub fn build(self) -> crate::types::GridConfiguration {
        crate::types::GridConfiguration {
            featured_participant_attribute: self.featured_participant_attribute,
        }
    }
}
