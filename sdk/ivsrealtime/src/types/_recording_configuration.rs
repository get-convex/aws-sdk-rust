// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a configuration to record a stage stream.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecordingConfiguration {
    /// <p>The recording format for storing a recording in Amazon S3.</p>
    pub format: ::std::option::Option<crate::types::RecordingConfigurationFormat>,
}
impl RecordingConfiguration {
    /// <p>The recording format for storing a recording in Amazon S3.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::RecordingConfigurationFormat> {
        self.format.as_ref()
    }
}
impl RecordingConfiguration {
    /// Creates a new builder-style object to manufacture [`RecordingConfiguration`](crate::types::RecordingConfiguration).
    pub fn builder() -> crate::types::builders::RecordingConfigurationBuilder {
        crate::types::builders::RecordingConfigurationBuilder::default()
    }
}

/// A builder for [`RecordingConfiguration`](crate::types::RecordingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecordingConfigurationBuilder {
    pub(crate) format: ::std::option::Option<crate::types::RecordingConfigurationFormat>,
}
impl RecordingConfigurationBuilder {
    /// <p>The recording format for storing a recording in Amazon S3.</p>
    pub fn format(mut self, input: crate::types::RecordingConfigurationFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recording format for storing a recording in Amazon S3.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::RecordingConfigurationFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The recording format for storing a recording in Amazon S3.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::RecordingConfigurationFormat> {
        &self.format
    }
    /// Consumes the builder and constructs a [`RecordingConfiguration`](crate::types::RecordingConfiguration).
    pub fn build(self) -> crate::types::RecordingConfiguration {
        crate::types::RecordingConfiguration { format: self.format }
    }
}
