// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for video.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Video {
    /// <p>Video-resolution width. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.</p>
    pub width: ::std::option::Option<i32>,
    /// <p>Video-resolution height. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.</p>
    pub height: ::std::option::Option<i32>,
    /// <p>Video frame rate, in fps. Default: 30.</p>
    pub framerate: ::std::option::Option<f32>,
    /// <p>Bitrate for generated output, in bps. Default: 2500000.</p>
    pub bitrate: ::std::option::Option<i32>,
}
impl Video {
    /// <p>Video-resolution width. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.</p>
    pub fn width(&self) -> ::std::option::Option<i32> {
        self.width
    }
    /// <p>Video-resolution height. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.</p>
    pub fn height(&self) -> ::std::option::Option<i32> {
        self.height
    }
    /// <p>Video frame rate, in fps. Default: 30.</p>
    pub fn framerate(&self) -> ::std::option::Option<f32> {
        self.framerate
    }
    /// <p>Bitrate for generated output, in bps. Default: 2500000.</p>
    pub fn bitrate(&self) -> ::std::option::Option<i32> {
        self.bitrate
    }
}
impl Video {
    /// Creates a new builder-style object to manufacture [`Video`](crate::types::Video).
    pub fn builder() -> crate::types::builders::VideoBuilder {
        crate::types::builders::VideoBuilder::default()
    }
}

/// A builder for [`Video`](crate::types::Video).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VideoBuilder {
    pub(crate) width: ::std::option::Option<i32>,
    pub(crate) height: ::std::option::Option<i32>,
    pub(crate) framerate: ::std::option::Option<f32>,
    pub(crate) bitrate: ::std::option::Option<i32>,
}
impl VideoBuilder {
    /// <p>Video-resolution width. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.</p>
    pub fn width(mut self, input: i32) -> Self {
        self.width = ::std::option::Option::Some(input);
        self
    }
    /// <p>Video-resolution width. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.</p>
    pub fn set_width(mut self, input: ::std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// <p>Video-resolution width. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.</p>
    pub fn get_width(&self) -> &::std::option::Option<i32> {
        &self.width
    }
    /// <p>Video-resolution height. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.</p>
    pub fn height(mut self, input: i32) -> Self {
        self.height = ::std::option::Option::Some(input);
        self
    }
    /// <p>Video-resolution height. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.</p>
    pub fn set_height(mut self, input: ::std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// <p>Video-resolution height. Note that the maximum value is determined by <code>width</code> times <code>height</code>, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.</p>
    pub fn get_height(&self) -> &::std::option::Option<i32> {
        &self.height
    }
    /// <p>Video frame rate, in fps. Default: 30.</p>
    pub fn framerate(mut self, input: f32) -> Self {
        self.framerate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Video frame rate, in fps. Default: 30.</p>
    pub fn set_framerate(mut self, input: ::std::option::Option<f32>) -> Self {
        self.framerate = input;
        self
    }
    /// <p>Video frame rate, in fps. Default: 30.</p>
    pub fn get_framerate(&self) -> &::std::option::Option<f32> {
        &self.framerate
    }
    /// <p>Bitrate for generated output, in bps. Default: 2500000.</p>
    pub fn bitrate(mut self, input: i32) -> Self {
        self.bitrate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Bitrate for generated output, in bps. Default: 2500000.</p>
    pub fn set_bitrate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bitrate = input;
        self
    }
    /// <p>Bitrate for generated output, in bps. Default: 2500000.</p>
    pub fn get_bitrate(&self) -> &::std::option::Option<i32> {
        &self.bitrate
    }
    /// Consumes the builder and constructs a [`Video`](crate::types::Video).
    pub fn build(self) -> crate::types::Video {
        crate::types::Video {
            width: self.width,
            height: self.height,
            framerate: self.framerate,
            bitrate: self.bitrate,
        }
    }
}
