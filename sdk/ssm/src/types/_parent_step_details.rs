// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A detailed status of the parent step.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParentStepDetails {
    /// <p>The unique ID of a step execution.</p>
    pub step_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the step.</p>
    pub step_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the automation action.</p>
    pub action: ::std::option::Option<::std::string::String>,
    /// <p>The current repetition of the loop represented by an integer.</p>
    pub iteration: ::std::option::Option<i32>,
    /// <p>The current value of the specified iterator in the loop.</p>
    pub iterator_value: ::std::option::Option<::std::string::String>,
}
impl ParentStepDetails {
    /// <p>The unique ID of a step execution.</p>
    pub fn step_execution_id(&self) -> ::std::option::Option<&str> {
        self.step_execution_id.as_deref()
    }
    /// <p>The name of the step.</p>
    pub fn step_name(&self) -> ::std::option::Option<&str> {
        self.step_name.as_deref()
    }
    /// <p>The name of the automation action.</p>
    pub fn action(&self) -> ::std::option::Option<&str> {
        self.action.as_deref()
    }
    /// <p>The current repetition of the loop represented by an integer.</p>
    pub fn iteration(&self) -> ::std::option::Option<i32> {
        self.iteration
    }
    /// <p>The current value of the specified iterator in the loop.</p>
    pub fn iterator_value(&self) -> ::std::option::Option<&str> {
        self.iterator_value.as_deref()
    }
}
impl ParentStepDetails {
    /// Creates a new builder-style object to manufacture [`ParentStepDetails`](crate::types::ParentStepDetails).
    pub fn builder() -> crate::types::builders::ParentStepDetailsBuilder {
        crate::types::builders::ParentStepDetailsBuilder::default()
    }
}

/// A builder for [`ParentStepDetails`](crate::types::ParentStepDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParentStepDetailsBuilder {
    pub(crate) step_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) step_name: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<::std::string::String>,
    pub(crate) iteration: ::std::option::Option<i32>,
    pub(crate) iterator_value: ::std::option::Option<::std::string::String>,
}
impl ParentStepDetailsBuilder {
    /// <p>The unique ID of a step execution.</p>
    pub fn step_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of a step execution.</p>
    pub fn set_step_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_execution_id = input;
        self
    }
    /// <p>The unique ID of a step execution.</p>
    pub fn get_step_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_execution_id
    }
    /// <p>The name of the step.</p>
    pub fn step_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_step_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_name = input;
        self
    }
    /// <p>The name of the step.</p>
    pub fn get_step_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_name
    }
    /// <p>The name of the automation action.</p>
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the automation action.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p>The name of the automation action.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    /// <p>The current repetition of the loop represented by an integer.</p>
    pub fn iteration(mut self, input: i32) -> Self {
        self.iteration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current repetition of the loop represented by an integer.</p>
    pub fn set_iteration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iteration = input;
        self
    }
    /// <p>The current repetition of the loop represented by an integer.</p>
    pub fn get_iteration(&self) -> &::std::option::Option<i32> {
        &self.iteration
    }
    /// <p>The current value of the specified iterator in the loop.</p>
    pub fn iterator_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iterator_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current value of the specified iterator in the loop.</p>
    pub fn set_iterator_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iterator_value = input;
        self
    }
    /// <p>The current value of the specified iterator in the loop.</p>
    pub fn get_iterator_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.iterator_value
    }
    /// Consumes the builder and constructs a [`ParentStepDetails`](crate::types::ParentStepDetails).
    pub fn build(self) -> crate::types::ParentStepDetails {
        crate::types::ParentStepDetails {
            step_execution_id: self.step_execution_id,
            step_name: self.step_name,
            action: self.action,
            iteration: self.iteration,
            iterator_value: self.iterator_value,
        }
    }
}
