// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateProbeOutput {
    /// <p>The updated ID of the probe.</p>
    pub probe_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated ARN of the probe.</p>
    pub probe_arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated ARN of the source subnet.</p>
    pub source_arn: ::std::string::String,
    /// <p>The updated destination IP address for the probe.</p>
    pub destination: ::std::string::String,
    /// <p>The updated destination port. This will be a number between <code>1</code> and <code>65536</code>.</p>
    pub destination_port: ::std::option::Option<i32>,
    /// <p>The updated protocol for the probe.</p>
    pub protocol: crate::types::Protocol,
    /// <p>The updated packet size for the probe.</p>
    pub packet_size: ::std::option::Option<i32>,
    /// <p>The updated IP address family. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub address_family: ::std::option::Option<crate::types::AddressFamily>,
    /// <p>The updated ID of the source VPC subnet ID.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The state of the updated probe.</p>
    pub state: ::std::option::Option<crate::types::ProbeState>,
    /// <p>The time and date that the probe was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time and date that the probe was last updated.</p>
    pub modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Update tags for a probe.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateProbeOutput {
    /// <p>The updated ID of the probe.</p>
    pub fn probe_id(&self) -> ::std::option::Option<&str> {
        self.probe_id.as_deref()
    }
    /// <p>The updated ARN of the probe.</p>
    pub fn probe_arn(&self) -> ::std::option::Option<&str> {
        self.probe_arn.as_deref()
    }
    /// <p>The updated ARN of the source subnet.</p>
    pub fn source_arn(&self) -> &str {
        use std::ops::Deref;
        self.source_arn.deref()
    }
    /// <p>The updated destination IP address for the probe.</p>
    pub fn destination(&self) -> &str {
        use std::ops::Deref;
        self.destination.deref()
    }
    /// <p>The updated destination port. This will be a number between <code>1</code> and <code>65536</code>.</p>
    pub fn destination_port(&self) -> ::std::option::Option<i32> {
        self.destination_port
    }
    /// <p>The updated protocol for the probe.</p>
    pub fn protocol(&self) -> &crate::types::Protocol {
        &self.protocol
    }
    /// <p>The updated packet size for the probe.</p>
    pub fn packet_size(&self) -> ::std::option::Option<i32> {
        self.packet_size
    }
    /// <p>The updated IP address family. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub fn address_family(&self) -> ::std::option::Option<&crate::types::AddressFamily> {
        self.address_family.as_ref()
    }
    /// <p>The updated ID of the source VPC subnet ID.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The state of the updated probe.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ProbeState> {
        self.state.as_ref()
    }
    /// <p>The time and date that the probe was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time and date that the probe was last updated.</p>
    pub fn modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_at.as_ref()
    }
    /// <p>Update tags for a probe.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateProbeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateProbeOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProbeOutput`](crate::operation::update_probe::UpdateProbeOutput).
    pub fn builder() -> crate::operation::update_probe::builders::UpdateProbeOutputBuilder {
        crate::operation::update_probe::builders::UpdateProbeOutputBuilder::default()
    }
}

/// A builder for [`UpdateProbeOutput`](crate::operation::update_probe::UpdateProbeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateProbeOutputBuilder {
    pub(crate) probe_id: ::std::option::Option<::std::string::String>,
    pub(crate) probe_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) destination_port: ::std::option::Option<i32>,
    pub(crate) protocol: ::std::option::Option<crate::types::Protocol>,
    pub(crate) packet_size: ::std::option::Option<i32>,
    pub(crate) address_family: ::std::option::Option<crate::types::AddressFamily>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ProbeState>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateProbeOutputBuilder {
    /// <p>The updated ID of the probe.</p>
    pub fn probe_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.probe_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated ID of the probe.</p>
    pub fn set_probe_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.probe_id = input;
        self
    }
    /// <p>The updated ID of the probe.</p>
    pub fn get_probe_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.probe_id
    }
    /// <p>The updated ARN of the probe.</p>
    pub fn probe_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.probe_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated ARN of the probe.</p>
    pub fn set_probe_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.probe_arn = input;
        self
    }
    /// <p>The updated ARN of the probe.</p>
    pub fn get_probe_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.probe_arn
    }
    /// <p>The updated ARN of the source subnet.</p>
    /// This field is required.
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated ARN of the source subnet.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The updated ARN of the source subnet.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>The updated destination IP address for the probe.</p>
    /// This field is required.
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated destination IP address for the probe.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The updated destination IP address for the probe.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>The updated destination port. This will be a number between <code>1</code> and <code>65536</code>.</p>
    pub fn destination_port(mut self, input: i32) -> Self {
        self.destination_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated destination port. This will be a number between <code>1</code> and <code>65536</code>.</p>
    pub fn set_destination_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.destination_port = input;
        self
    }
    /// <p>The updated destination port. This will be a number between <code>1</code> and <code>65536</code>.</p>
    pub fn get_destination_port(&self) -> &::std::option::Option<i32> {
        &self.destination_port
    }
    /// <p>The updated protocol for the probe.</p>
    /// This field is required.
    pub fn protocol(mut self, input: crate::types::Protocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated protocol for the probe.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::Protocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The updated protocol for the probe.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::Protocol> {
        &self.protocol
    }
    /// <p>The updated packet size for the probe.</p>
    pub fn packet_size(mut self, input: i32) -> Self {
        self.packet_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated packet size for the probe.</p>
    pub fn set_packet_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.packet_size = input;
        self
    }
    /// <p>The updated packet size for the probe.</p>
    pub fn get_packet_size(&self) -> &::std::option::Option<i32> {
        &self.packet_size
    }
    /// <p>The updated IP address family. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub fn address_family(mut self, input: crate::types::AddressFamily) -> Self {
        self.address_family = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated IP address family. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub fn set_address_family(mut self, input: ::std::option::Option<crate::types::AddressFamily>) -> Self {
        self.address_family = input;
        self
    }
    /// <p>The updated IP address family. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub fn get_address_family(&self) -> &::std::option::Option<crate::types::AddressFamily> {
        &self.address_family
    }
    /// <p>The updated ID of the source VPC subnet ID.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated ID of the source VPC subnet ID.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The updated ID of the source VPC subnet ID.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The state of the updated probe.</p>
    pub fn state(mut self, input: crate::types::ProbeState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the updated probe.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ProbeState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the updated probe.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ProbeState> {
        &self.state
    }
    /// <p>The time and date that the probe was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time and date that the probe was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time and date that the probe was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time and date that the probe was last updated.</p>
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time and date that the probe was last updated.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The time and date that the probe was last updated.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Update tags for a probe.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Update tags for a probe.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Update tags for a probe.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateProbeOutput`](crate::operation::update_probe::UpdateProbeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_arn`](crate::operation::update_probe::builders::UpdateProbeOutputBuilder::source_arn)
    /// - [`destination`](crate::operation::update_probe::builders::UpdateProbeOutputBuilder::destination)
    /// - [`protocol`](crate::operation::update_probe::builders::UpdateProbeOutputBuilder::protocol)
    pub fn build(self) -> ::std::result::Result<crate::operation::update_probe::UpdateProbeOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_probe::UpdateProbeOutput {
            probe_id: self.probe_id,
            probe_arn: self.probe_arn,
            source_arn: self.source_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_arn",
                    "source_arn was not specified but it is required when building UpdateProbeOutput",
                )
            })?,
            destination: self.destination.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination",
                    "destination was not specified but it is required when building UpdateProbeOutput",
                )
            })?,
            destination_port: self.destination_port,
            protocol: self.protocol.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "protocol",
                    "protocol was not specified but it is required when building UpdateProbeOutput",
                )
            })?,
            packet_size: self.packet_size,
            address_family: self.address_family,
            vpc_id: self.vpc_id,
            state: self.state,
            created_at: self.created_at,
            modified_at: self.modified_at,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
