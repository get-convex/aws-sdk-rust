// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMonitorInput {
    /// <p>The name of the monitor to update. Run <code>ListMonitors</code> to get a list of monitor names.</p>
    pub monitor_name: ::std::option::Option<::std::string::String>,
    /// <p>The aggregation time, in seconds, to change to. This must be either <code>30</code> or <code>60</code>.</p>
    pub aggregation_period: ::std::option::Option<i64>,
}
impl UpdateMonitorInput {
    /// <p>The name of the monitor to update. Run <code>ListMonitors</code> to get a list of monitor names.</p>
    pub fn monitor_name(&self) -> ::std::option::Option<&str> {
        self.monitor_name.as_deref()
    }
    /// <p>The aggregation time, in seconds, to change to. This must be either <code>30</code> or <code>60</code>.</p>
    pub fn aggregation_period(&self) -> ::std::option::Option<i64> {
        self.aggregation_period
    }
}
impl UpdateMonitorInput {
    /// Creates a new builder-style object to manufacture [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
    pub fn builder() -> crate::operation::update_monitor::builders::UpdateMonitorInputBuilder {
        crate::operation::update_monitor::builders::UpdateMonitorInputBuilder::default()
    }
}

/// A builder for [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateMonitorInputBuilder {
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) aggregation_period: ::std::option::Option<i64>,
}
impl UpdateMonitorInputBuilder {
    /// <p>The name of the monitor to update. Run <code>ListMonitors</code> to get a list of monitor names.</p>
    /// This field is required.
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the monitor to update. Run <code>ListMonitors</code> to get a list of monitor names.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name of the monitor to update. Run <code>ListMonitors</code> to get a list of monitor names.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// <p>The aggregation time, in seconds, to change to. This must be either <code>30</code> or <code>60</code>.</p>
    /// This field is required.
    pub fn aggregation_period(mut self, input: i64) -> Self {
        self.aggregation_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregation time, in seconds, to change to. This must be either <code>30</code> or <code>60</code>.</p>
    pub fn set_aggregation_period(mut self, input: ::std::option::Option<i64>) -> Self {
        self.aggregation_period = input;
        self
    }
    /// <p>The aggregation time, in seconds, to change to. This must be either <code>30</code> or <code>60</code>.</p>
    pub fn get_aggregation_period(&self) -> &::std::option::Option<i64> {
        &self.aggregation_period
    }
    /// Consumes the builder and constructs a [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_monitor::UpdateMonitorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_monitor::UpdateMonitorInput {
            monitor_name: self.monitor_name,
            aggregation_period: self.aggregation_period,
        })
    }
}
