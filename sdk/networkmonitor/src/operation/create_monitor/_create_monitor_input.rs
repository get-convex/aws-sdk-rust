// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMonitorInput {
    /// <p>The name identifying the monitor. It can contain only letters, underscores (_), or dashes (-), and can be up to 255 characters.</p>
    pub monitor_name: ::std::option::Option<::std::string::String>,
    /// <p>Displays a list of all of the probes created for a monitor.</p>
    pub probes: ::std::option::Option<::std::vec::Vec<crate::types::CreateMonitorProbeInput>>,
    /// <p>The time, in seconds, that metrics are aggregated and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub aggregation_period: ::std::option::Option<i64>,
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMonitorInput {
    /// <p>The name identifying the monitor. It can contain only letters, underscores (_), or dashes (-), and can be up to 255 characters.</p>
    pub fn monitor_name(&self) -> ::std::option::Option<&str> {
        self.monitor_name.as_deref()
    }
    /// <p>Displays a list of all of the probes created for a monitor.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.probes.is_none()`.
    pub fn probes(&self) -> &[crate::types::CreateMonitorProbeInput] {
        self.probes.as_deref().unwrap_or_default()
    }
    /// <p>The time, in seconds, that metrics are aggregated and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub fn aggregation_period(&self) -> ::std::option::Option<i64> {
        self.aggregation_period
    }
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateMonitorInput {
    /// Creates a new builder-style object to manufacture [`CreateMonitorInput`](crate::operation::create_monitor::CreateMonitorInput).
    pub fn builder() -> crate::operation::create_monitor::builders::CreateMonitorInputBuilder {
        crate::operation::create_monitor::builders::CreateMonitorInputBuilder::default()
    }
}

/// A builder for [`CreateMonitorInput`](crate::operation::create_monitor::CreateMonitorInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateMonitorInputBuilder {
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) probes: ::std::option::Option<::std::vec::Vec<crate::types::CreateMonitorProbeInput>>,
    pub(crate) aggregation_period: ::std::option::Option<i64>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMonitorInputBuilder {
    /// <p>The name identifying the monitor. It can contain only letters, underscores (_), or dashes (-), and can be up to 255 characters.</p>
    /// This field is required.
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name identifying the monitor. It can contain only letters, underscores (_), or dashes (-), and can be up to 255 characters.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name identifying the monitor. It can contain only letters, underscores (_), or dashes (-), and can be up to 255 characters.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// Appends an item to `probes`.
    ///
    /// To override the contents of this collection use [`set_probes`](Self::set_probes).
    ///
    /// <p>Displays a list of all of the probes created for a monitor.</p>
    pub fn probes(mut self, input: crate::types::CreateMonitorProbeInput) -> Self {
        let mut v = self.probes.unwrap_or_default();
        v.push(input);
        self.probes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Displays a list of all of the probes created for a monitor.</p>
    pub fn set_probes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CreateMonitorProbeInput>>) -> Self {
        self.probes = input;
        self
    }
    /// <p>Displays a list of all of the probes created for a monitor.</p>
    pub fn get_probes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CreateMonitorProbeInput>> {
        &self.probes
    }
    /// <p>The time, in seconds, that metrics are aggregated and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub fn aggregation_period(mut self, input: i64) -> Self {
        self.aggregation_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in seconds, that metrics are aggregated and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub fn set_aggregation_period(mut self, input: ::std::option::Option<i64>) -> Self {
        self.aggregation_period = input;
        self
    }
    /// <p>The time, in seconds, that metrics are aggregated and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub fn get_aggregation_period(&self) -> &::std::option::Option<i64> {
        &self.aggregation_period
    }
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMonitorInput`](crate::operation::create_monitor::CreateMonitorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_monitor::CreateMonitorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_monitor::CreateMonitorInput {
            monitor_name: self.monitor_name,
            probes: self.probes,
            aggregation_period: self.aggregation_period,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
