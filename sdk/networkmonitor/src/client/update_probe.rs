// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateProbe`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_name(impl Into<String>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::monitor_name) / [`set_monitor_name(Option<String>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::set_monitor_name):<br>required: **true**<br><p>The name of the monitor that the probe was updated for.</p><br>
    ///   - [`probe_id(impl Into<String>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::probe_id) / [`set_probe_id(Option<String>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::set_probe_id):<br>required: **true**<br><p>Run <code>GetMonitor</code> to get a list of probes and probe IDs.</p><br>
    ///   - [`state(ProbeState)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::state) / [`set_state(Option<ProbeState>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::set_state):<br>required: **false**<br><p>The state of the probe update.</p><br>
    ///   - [`destination(impl Into<String>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::destination) / [`set_destination(Option<String>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::set_destination):<br>required: **false**<br><p>The updated IP address for the probe destination. This must be either an IPv4 or IPv6 address.</p><br>
    ///   - [`destination_port(i32)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::destination_port) / [`set_destination_port(Option<i32>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::set_destination_port):<br>required: **false**<br><p>The updated port for the probe destination. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p><br>
    ///   - [`protocol(Protocol)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::protocol) / [`set_protocol(Option<Protocol>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::set_protocol):<br>required: **false**<br><p>The updated network protocol for the destination. This can be either <code>TCP</code> or <code>ICMP</code>. If the protocol is <code>TCP</code>, then <code>port</code> is also required.</p><br>
    ///   - [`packet_size(i32)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::packet_size) / [`set_packet_size(Option<i32>)`](crate::operation::update_probe::builders::UpdateProbeFluentBuilder::set_packet_size):<br>required: **false**<br><p>he updated packets size for network traffic between the source and destination. This must be a number between <code>56</code> and <code>8500</code>.</p><br>
    /// - On success, responds with [`UpdateProbeOutput`](crate::operation::update_probe::UpdateProbeOutput) with field(s):
    ///   - [`probe_id(Option<String>)`](crate::operation::update_probe::UpdateProbeOutput::probe_id): <p>The updated ID of the probe.</p>
    ///   - [`probe_arn(Option<String>)`](crate::operation::update_probe::UpdateProbeOutput::probe_arn): <p>The updated ARN of the probe.</p>
    ///   - [`source_arn(String)`](crate::operation::update_probe::UpdateProbeOutput::source_arn): <p>The updated ARN of the source subnet.</p>
    ///   - [`destination(String)`](crate::operation::update_probe::UpdateProbeOutput::destination): <p>The updated destination IP address for the probe.</p>
    ///   - [`destination_port(Option<i32>)`](crate::operation::update_probe::UpdateProbeOutput::destination_port): <p>The updated destination port. This will be a number between <code>1</code> and <code>65536</code>.</p>
    ///   - [`protocol(Protocol)`](crate::operation::update_probe::UpdateProbeOutput::protocol): <p>The updated protocol for the probe.</p>
    ///   - [`packet_size(Option<i32>)`](crate::operation::update_probe::UpdateProbeOutput::packet_size): <p>The updated packet size for the probe.</p>
    ///   - [`address_family(Option<AddressFamily>)`](crate::operation::update_probe::UpdateProbeOutput::address_family): <p>The updated IP address family. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    ///   - [`vpc_id(Option<String>)`](crate::operation::update_probe::UpdateProbeOutput::vpc_id): <p>The updated ID of the source VPC subnet ID.</p>
    ///   - [`state(Option<ProbeState>)`](crate::operation::update_probe::UpdateProbeOutput::state): <p>The state of the updated probe.</p>
    ///   - [`created_at(Option<DateTime>)`](crate::operation::update_probe::UpdateProbeOutput::created_at): <p>The time and date that the probe was created.</p>
    ///   - [`modified_at(Option<DateTime>)`](crate::operation::update_probe::UpdateProbeOutput::modified_at): <p>The time and date that the probe was last updated.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::update_probe::UpdateProbeOutput::tags): <p>Update tags for a probe.</p>
    /// - On failure, responds with [`SdkError<UpdateProbeError>`](crate::operation::update_probe::UpdateProbeError)
    pub fn update_probe(&self) -> crate::operation::update_probe::builders::UpdateProbeFluentBuilder {
        crate::operation::update_probe::builders::UpdateProbeFluentBuilder::new(self.handle.clone())
    }
}
