// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Displays summary information about a monitor.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitorSummary {
    /// <p>The ARN of the monitor.</p>
    pub monitor_arn: ::std::string::String,
    /// <p>The name of the monitor.</p>
    pub monitor_name: ::std::string::String,
    /// <p>The state of the monitor.</p>
    pub state: crate::types::MonitorState,
    /// <p>The time, in seconds, that metrics are collected and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub aggregation_period: ::std::option::Option<i64>,
    /// <p>The list of key-value pairs assigned to the monitor.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl MonitorSummary {
    /// <p>The ARN of the monitor.</p>
    pub fn monitor_arn(&self) -> &str {
        use std::ops::Deref;
        self.monitor_arn.deref()
    }
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(&self) -> &str {
        use std::ops::Deref;
        self.monitor_name.deref()
    }
    /// <p>The state of the monitor.</p>
    pub fn state(&self) -> &crate::types::MonitorState {
        &self.state
    }
    /// <p>The time, in seconds, that metrics are collected and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub fn aggregation_period(&self) -> ::std::option::Option<i64> {
        self.aggregation_period
    }
    /// <p>The list of key-value pairs assigned to the monitor.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl MonitorSummary {
    /// Creates a new builder-style object to manufacture [`MonitorSummary`](crate::types::MonitorSummary).
    pub fn builder() -> crate::types::builders::MonitorSummaryBuilder {
        crate::types::builders::MonitorSummaryBuilder::default()
    }
}

/// A builder for [`MonitorSummary`](crate::types::MonitorSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MonitorSummaryBuilder {
    pub(crate) monitor_arn: ::std::option::Option<::std::string::String>,
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::MonitorState>,
    pub(crate) aggregation_period: ::std::option::Option<i64>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl MonitorSummaryBuilder {
    /// <p>The ARN of the monitor.</p>
    /// This field is required.
    pub fn monitor_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the monitor.</p>
    pub fn set_monitor_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_arn = input;
        self
    }
    /// <p>The ARN of the monitor.</p>
    pub fn get_monitor_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_arn
    }
    /// <p>The name of the monitor.</p>
    /// This field is required.
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// <p>The state of the monitor.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::MonitorState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the monitor.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::MonitorState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the monitor.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::MonitorState> {
        &self.state
    }
    /// <p>The time, in seconds, that metrics are collected and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub fn aggregation_period(mut self, input: i64) -> Self {
        self.aggregation_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in seconds, that metrics are collected and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub fn set_aggregation_period(mut self, input: ::std::option::Option<i64>) -> Self {
        self.aggregation_period = input;
        self
    }
    /// <p>The time, in seconds, that metrics are collected and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>
    pub fn get_aggregation_period(&self) -> &::std::option::Option<i64> {
        &self.aggregation_period
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of key-value pairs assigned to the monitor.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of key-value pairs assigned to the monitor.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of key-value pairs assigned to the monitor.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`MonitorSummary`](crate::types::MonitorSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`monitor_arn`](crate::types::builders::MonitorSummaryBuilder::monitor_arn)
    /// - [`monitor_name`](crate::types::builders::MonitorSummaryBuilder::monitor_name)
    /// - [`state`](crate::types::builders::MonitorSummaryBuilder::state)
    pub fn build(self) -> ::std::result::Result<crate::types::MonitorSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MonitorSummary {
            monitor_arn: self.monitor_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "monitor_arn",
                    "monitor_arn was not specified but it is required when building MonitorSummary",
                )
            })?,
            monitor_name: self.monitor_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "monitor_name",
                    "monitor_name was not specified but it is required when building MonitorSummary",
                )
            })?,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building MonitorSummary",
                )
            })?,
            aggregation_period: self.aggregation_period,
            tags: self.tags,
        })
    }
}
