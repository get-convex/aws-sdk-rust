// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates a monitor probe.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMonitorProbeInput {
    /// <p>The ARN of the subnet.</p>
    pub source_arn: ::std::string::String,
    /// <p>The destination IP address. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub destination: ::std::string::String,
    /// <p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>
    pub destination_port: ::std::option::Option<i32>,
    /// <p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>
    pub protocol: crate::types::Protocol,
    /// <p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>
    pub packet_size: ::std::option::Option<i32>,
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub probe_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMonitorProbeInput {
    /// <p>The ARN of the subnet.</p>
    pub fn source_arn(&self) -> &str {
        use std::ops::Deref;
        self.source_arn.deref()
    }
    /// <p>The destination IP address. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub fn destination(&self) -> &str {
        use std::ops::Deref;
        self.destination.deref()
    }
    /// <p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>
    pub fn destination_port(&self) -> ::std::option::Option<i32> {
        self.destination_port
    }
    /// <p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>
    pub fn protocol(&self) -> &crate::types::Protocol {
        &self.protocol
    }
    /// <p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>
    pub fn packet_size(&self) -> ::std::option::Option<i32> {
        self.packet_size
    }
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub fn probe_tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.probe_tags.as_ref()
    }
}
impl CreateMonitorProbeInput {
    /// Creates a new builder-style object to manufacture [`CreateMonitorProbeInput`](crate::types::CreateMonitorProbeInput).
    pub fn builder() -> crate::types::builders::CreateMonitorProbeInputBuilder {
        crate::types::builders::CreateMonitorProbeInputBuilder::default()
    }
}

/// A builder for [`CreateMonitorProbeInput`](crate::types::CreateMonitorProbeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateMonitorProbeInputBuilder {
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) destination_port: ::std::option::Option<i32>,
    pub(crate) protocol: ::std::option::Option<crate::types::Protocol>,
    pub(crate) packet_size: ::std::option::Option<i32>,
    pub(crate) probe_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMonitorProbeInputBuilder {
    /// <p>The ARN of the subnet.</p>
    /// This field is required.
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the subnet.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The ARN of the subnet.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>The destination IP address. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    /// This field is required.
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination IP address. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The destination IP address. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>
    pub fn destination_port(mut self, input: i32) -> Self {
        self.destination_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>
    pub fn set_destination_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.destination_port = input;
        self
    }
    /// <p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>
    pub fn get_destination_port(&self) -> &::std::option::Option<i32> {
        &self.destination_port
    }
    /// <p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>
    /// This field is required.
    pub fn protocol(mut self, input: crate::types::Protocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::Protocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::Protocol> {
        &self.protocol
    }
    /// <p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>
    pub fn packet_size(mut self, input: i32) -> Self {
        self.packet_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>
    pub fn set_packet_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.packet_size = input;
        self
    }
    /// <p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>
    pub fn get_packet_size(&self) -> &::std::option::Option<i32> {
        &self.packet_size
    }
    /// Adds a key-value pair to `probe_tags`.
    ///
    /// To override the contents of this collection use [`set_probe_tags`](Self::set_probe_tags).
    ///
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub fn probe_tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.probe_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.probe_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub fn set_probe_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.probe_tags = input;
        self
    }
    /// <p>The list of key-value pairs created and assigned to the monitor.</p>
    pub fn get_probe_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.probe_tags
    }
    /// Consumes the builder and constructs a [`CreateMonitorProbeInput`](crate::types::CreateMonitorProbeInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_arn`](crate::types::builders::CreateMonitorProbeInputBuilder::source_arn)
    /// - [`destination`](crate::types::builders::CreateMonitorProbeInputBuilder::destination)
    /// - [`protocol`](crate::types::builders::CreateMonitorProbeInputBuilder::protocol)
    pub fn build(self) -> ::std::result::Result<crate::types::CreateMonitorProbeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateMonitorProbeInput {
            source_arn: self.source_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_arn",
                    "source_arn was not specified but it is required when building CreateMonitorProbeInput",
                )
            })?,
            destination: self.destination.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination",
                    "destination was not specified but it is required when building CreateMonitorProbeInput",
                )
            })?,
            destination_port: self.destination_port,
            protocol: self.protocol.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "protocol",
                    "protocol was not specified but it is required when building CreateMonitorProbeInput",
                )
            })?,
            packet_size: self.packet_size,
            probe_tags: self.probe_tags,
        })
    }
}
