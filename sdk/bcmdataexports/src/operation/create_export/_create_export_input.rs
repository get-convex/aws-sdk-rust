// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateExportInput {
    /// <p>The details of the export, including data query, name, description, and destination configuration.</p>
    pub export: ::std::option::Option<crate::types::Export>,
    /// <p>An optional list of tags to associate with the specified export. Each tag consists of a key and a value, and each key must be unique for the resource.</p>
    pub resource_tags: ::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>>,
}
impl CreateExportInput {
    /// <p>The details of the export, including data query, name, description, and destination configuration.</p>
    pub fn export(&self) -> ::std::option::Option<&crate::types::Export> {
        self.export.as_ref()
    }
    /// <p>An optional list of tags to associate with the specified export. Each tag consists of a key and a value, and each key must be unique for the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_tags.is_none()`.
    pub fn resource_tags(&self) -> &[crate::types::ResourceTag] {
        self.resource_tags.as_deref().unwrap_or_default()
    }
}
impl CreateExportInput {
    /// Creates a new builder-style object to manufacture [`CreateExportInput`](crate::operation::create_export::CreateExportInput).
    pub fn builder() -> crate::operation::create_export::builders::CreateExportInputBuilder {
        crate::operation::create_export::builders::CreateExportInputBuilder::default()
    }
}

/// A builder for [`CreateExportInput`](crate::operation::create_export::CreateExportInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateExportInputBuilder {
    pub(crate) export: ::std::option::Option<crate::types::Export>,
    pub(crate) resource_tags: ::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>>,
}
impl CreateExportInputBuilder {
    /// <p>The details of the export, including data query, name, description, and destination configuration.</p>
    /// This field is required.
    pub fn export(mut self, input: crate::types::Export) -> Self {
        self.export = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the export, including data query, name, description, and destination configuration.</p>
    pub fn set_export(mut self, input: ::std::option::Option<crate::types::Export>) -> Self {
        self.export = input;
        self
    }
    /// <p>The details of the export, including data query, name, description, and destination configuration.</p>
    pub fn get_export(&self) -> &::std::option::Option<crate::types::Export> {
        &self.export
    }
    /// Appends an item to `resource_tags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>An optional list of tags to associate with the specified export. Each tag consists of a key and a value, and each key must be unique for the resource.</p>
    pub fn resource_tags(mut self, input: crate::types::ResourceTag) -> Self {
        let mut v = self.resource_tags.unwrap_or_default();
        v.push(input);
        self.resource_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An optional list of tags to associate with the specified export. Each tag consists of a key and a value, and each key must be unique for the resource.</p>
    pub fn set_resource_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>>) -> Self {
        self.resource_tags = input;
        self
    }
    /// <p>An optional list of tags to associate with the specified export. Each tag consists of a key and a value, and each key must be unique for the resource.</p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>> {
        &self.resource_tags
    }
    /// Consumes the builder and constructs a [`CreateExportInput`](crate::operation::create_export::CreateExportInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_export::CreateExportInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_export::CreateExportInput {
            export: self.export,
            resource_tags: self.resource_tags,
        })
    }
}
