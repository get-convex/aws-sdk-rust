// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn export_correct_errors(mut builder: crate::types::builders::ExportBuilder) -> crate::types::builders::ExportBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.data_query.is_none() {
        builder.data_query = {
            let builder = crate::types::builders::DataQueryBuilder::default();
            crate::serde_util::data_query_correct_errors(builder).build().ok()
        }
    }
    if builder.destination_configurations.is_none() {
        builder.destination_configurations = {
            let builder = crate::types::builders::DestinationConfigurationsBuilder::default();
            Some(crate::serde_util::destination_configurations_correct_errors(builder).build())
        }
    }
    if builder.refresh_cadence.is_none() {
        builder.refresh_cadence = {
            let builder = crate::types::builders::RefreshCadenceBuilder::default();
            crate::serde_util::refresh_cadence_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn data_query_correct_errors(mut builder: crate::types::builders::DataQueryBuilder) -> crate::types::builders::DataQueryBuilder {
    if builder.query_statement.is_none() {
        builder.query_statement = Some(Default::default())
    }
    builder
}

pub(crate) fn destination_configurations_correct_errors(
    mut builder: crate::types::builders::DestinationConfigurationsBuilder,
) -> crate::types::builders::DestinationConfigurationsBuilder {
    if builder.s3_destination.is_none() {
        builder.s3_destination = {
            let builder = crate::types::builders::S3DestinationBuilder::default();
            crate::serde_util::s3_destination_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn execution_reference_correct_errors(
    mut builder: crate::types::builders::ExecutionReferenceBuilder,
) -> crate::types::builders::ExecutionReferenceBuilder {
    if builder.execution_id.is_none() {
        builder.execution_id = Some(Default::default())
    }
    if builder.execution_status.is_none() {
        builder.execution_status = {
            let builder = crate::types::builders::ExecutionStatusBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn export_reference_correct_errors(
    mut builder: crate::types::builders::ExportReferenceBuilder,
) -> crate::types::builders::ExportReferenceBuilder {
    if builder.export_arn.is_none() {
        builder.export_arn = Some(Default::default())
    }
    if builder.export_name.is_none() {
        builder.export_name = Some(Default::default())
    }
    if builder.export_status.is_none() {
        builder.export_status = {
            let builder = crate::types::builders::ExportStatusBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn refresh_cadence_correct_errors(
    mut builder: crate::types::builders::RefreshCadenceBuilder,
) -> crate::types::builders::RefreshCadenceBuilder {
    if builder.frequency.is_none() {
        builder.frequency = "no value was set".parse::<crate::types::FrequencyOption>().ok()
    }
    builder
}

pub(crate) fn resource_tag_correct_errors(mut builder: crate::types::builders::ResourceTagBuilder) -> crate::types::builders::ResourceTagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_destination_correct_errors(
    mut builder: crate::types::builders::S3DestinationBuilder,
) -> crate::types::builders::S3DestinationBuilder {
    if builder.s3_bucket.is_none() {
        builder.s3_bucket = Some(Default::default())
    }
    if builder.s3_prefix.is_none() {
        builder.s3_prefix = Some(Default::default())
    }
    if builder.s3_region.is_none() {
        builder.s3_region = Some(Default::default())
    }
    if builder.s3_output_configurations.is_none() {
        builder.s3_output_configurations = {
            let builder = crate::types::builders::S3OutputConfigurationsBuilder::default();
            crate::serde_util::s3_output_configurations_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn s3_output_configurations_correct_errors(
    mut builder: crate::types::builders::S3OutputConfigurationsBuilder,
) -> crate::types::builders::S3OutputConfigurationsBuilder {
    if builder.output_type.is_none() {
        builder.output_type = "no value was set".parse::<crate::types::S3OutputType>().ok()
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::FormatOption>().ok()
    }
    if builder.compression.is_none() {
        builder.compression = "no value was set".parse::<crate::types::CompressionOption>().ok()
    }
    if builder.overwrite.is_none() {
        builder.overwrite = "no value was set".parse::<crate::types::OverwriteOption>().ok()
    }
    builder
}
