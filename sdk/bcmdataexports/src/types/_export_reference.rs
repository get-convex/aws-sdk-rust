// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The reference details for a given export.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportReference {
    /// <p>The Amazon Resource Name (ARN) for this export.</p>
    pub export_arn: ::std::string::String,
    /// <p>The name of this specific data export.</p>
    pub export_name: ::std::string::String,
    /// <p>The status of this specific data export.</p>
    pub export_status: ::std::option::Option<crate::types::ExportStatus>,
}
impl ExportReference {
    /// <p>The Amazon Resource Name (ARN) for this export.</p>
    pub fn export_arn(&self) -> &str {
        use std::ops::Deref;
        self.export_arn.deref()
    }
    /// <p>The name of this specific data export.</p>
    pub fn export_name(&self) -> &str {
        use std::ops::Deref;
        self.export_name.deref()
    }
    /// <p>The status of this specific data export.</p>
    pub fn export_status(&self) -> ::std::option::Option<&crate::types::ExportStatus> {
        self.export_status.as_ref()
    }
}
impl ExportReference {
    /// Creates a new builder-style object to manufacture [`ExportReference`](crate::types::ExportReference).
    pub fn builder() -> crate::types::builders::ExportReferenceBuilder {
        crate::types::builders::ExportReferenceBuilder::default()
    }
}

/// A builder for [`ExportReference`](crate::types::ExportReference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportReferenceBuilder {
    pub(crate) export_arn: ::std::option::Option<::std::string::String>,
    pub(crate) export_name: ::std::option::Option<::std::string::String>,
    pub(crate) export_status: ::std::option::Option<crate::types::ExportStatus>,
}
impl ExportReferenceBuilder {
    /// <p>The Amazon Resource Name (ARN) for this export.</p>
    /// This field is required.
    pub fn export_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.export_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for this export.</p>
    pub fn set_export_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.export_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for this export.</p>
    pub fn get_export_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.export_arn
    }
    /// <p>The name of this specific data export.</p>
    /// This field is required.
    pub fn export_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.export_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this specific data export.</p>
    pub fn set_export_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.export_name = input;
        self
    }
    /// <p>The name of this specific data export.</p>
    pub fn get_export_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.export_name
    }
    /// <p>The status of this specific data export.</p>
    /// This field is required.
    pub fn export_status(mut self, input: crate::types::ExportStatus) -> Self {
        self.export_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of this specific data export.</p>
    pub fn set_export_status(mut self, input: ::std::option::Option<crate::types::ExportStatus>) -> Self {
        self.export_status = input;
        self
    }
    /// <p>The status of this specific data export.</p>
    pub fn get_export_status(&self) -> &::std::option::Option<crate::types::ExportStatus> {
        &self.export_status
    }
    /// Consumes the builder and constructs a [`ExportReference`](crate::types::ExportReference).
    /// This method will fail if any of the following fields are not set:
    /// - [`export_arn`](crate::types::builders::ExportReferenceBuilder::export_arn)
    /// - [`export_name`](crate::types::builders::ExportReferenceBuilder::export_name)
    pub fn build(self) -> ::std::result::Result<crate::types::ExportReference, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExportReference {
            export_arn: self.export_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "export_arn",
                    "export_arn was not specified but it is required when building ExportReference",
                )
            })?,
            export_name: self.export_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "export_name",
                    "export_name was not specified but it is required when building ExportReference",
                )
            })?,
            export_status: self.export_status,
        })
    }
}
