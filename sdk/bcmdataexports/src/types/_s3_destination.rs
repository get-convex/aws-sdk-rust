// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a data exports file.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Destination {
    /// <p>The name of the Amazon S3 bucket used as the destination of a data export file.</p>
    pub s3_bucket: ::std::string::String,
    /// <p>The S3 path prefix you want prepended to the name of your data export.</p>
    pub s3_prefix: ::std::string::String,
    /// <p>The S3 bucket Region.</p>
    pub s3_region: ::std::string::String,
    /// <p>The output configuration for the data export.</p>
    pub s3_output_configurations: ::std::option::Option<crate::types::S3OutputConfigurations>,
}
impl S3Destination {
    /// <p>The name of the Amazon S3 bucket used as the destination of a data export file.</p>
    pub fn s3_bucket(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket.deref()
    }
    /// <p>The S3 path prefix you want prepended to the name of your data export.</p>
    pub fn s3_prefix(&self) -> &str {
        use std::ops::Deref;
        self.s3_prefix.deref()
    }
    /// <p>The S3 bucket Region.</p>
    pub fn s3_region(&self) -> &str {
        use std::ops::Deref;
        self.s3_region.deref()
    }
    /// <p>The output configuration for the data export.</p>
    pub fn s3_output_configurations(&self) -> ::std::option::Option<&crate::types::S3OutputConfigurations> {
        self.s3_output_configurations.as_ref()
    }
}
impl S3Destination {
    /// Creates a new builder-style object to manufacture [`S3Destination`](crate::types::S3Destination).
    pub fn builder() -> crate::types::builders::S3DestinationBuilder {
        crate::types::builders::S3DestinationBuilder::default()
    }
}

/// A builder for [`S3Destination`](crate::types::S3Destination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3DestinationBuilder {
    pub(crate) s3_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) s3_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) s3_region: ::std::option::Option<::std::string::String>,
    pub(crate) s3_output_configurations: ::std::option::Option<crate::types::S3OutputConfigurations>,
}
impl S3DestinationBuilder {
    /// <p>The name of the Amazon S3 bucket used as the destination of a data export file.</p>
    /// This field is required.
    pub fn s3_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket used as the destination of a data export file.</p>
    pub fn set_s3_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket used as the destination of a data export file.</p>
    pub fn get_s3_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket
    }
    /// <p>The S3 path prefix you want prepended to the name of your data export.</p>
    /// This field is required.
    pub fn s3_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 path prefix you want prepended to the name of your data export.</p>
    pub fn set_s3_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_prefix = input;
        self
    }
    /// <p>The S3 path prefix you want prepended to the name of your data export.</p>
    pub fn get_s3_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_prefix
    }
    /// <p>The S3 bucket Region.</p>
    /// This field is required.
    pub fn s3_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 bucket Region.</p>
    pub fn set_s3_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_region = input;
        self
    }
    /// <p>The S3 bucket Region.</p>
    pub fn get_s3_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_region
    }
    /// <p>The output configuration for the data export.</p>
    /// This field is required.
    pub fn s3_output_configurations(mut self, input: crate::types::S3OutputConfigurations) -> Self {
        self.s3_output_configurations = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output configuration for the data export.</p>
    pub fn set_s3_output_configurations(mut self, input: ::std::option::Option<crate::types::S3OutputConfigurations>) -> Self {
        self.s3_output_configurations = input;
        self
    }
    /// <p>The output configuration for the data export.</p>
    pub fn get_s3_output_configurations(&self) -> &::std::option::Option<crate::types::S3OutputConfigurations> {
        &self.s3_output_configurations
    }
    /// Consumes the builder and constructs a [`S3Destination`](crate::types::S3Destination).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_bucket`](crate::types::builders::S3DestinationBuilder::s3_bucket)
    /// - [`s3_prefix`](crate::types::builders::S3DestinationBuilder::s3_prefix)
    /// - [`s3_region`](crate::types::builders::S3DestinationBuilder::s3_region)
    pub fn build(self) -> ::std::result::Result<crate::types::S3Destination, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3Destination {
            s3_bucket: self.s3_bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket",
                    "s3_bucket was not specified but it is required when building S3Destination",
                )
            })?,
            s3_prefix: self.s3_prefix.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_prefix",
                    "s3_prefix was not specified but it is required when building S3Destination",
                )
            })?,
            s3_region: self.s3_region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_region",
                    "s3_region was not specified but it is required when building S3Destination",
                )
            })?,
            s3_output_configurations: self.s3_output_configurations,
        })
    }
}
