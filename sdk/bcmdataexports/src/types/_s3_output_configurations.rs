// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The compression type, file format, and overwrite preference for the data export.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3OutputConfigurations {
    /// <p>The output type for the data export.</p>
    pub output_type: crate::types::S3OutputType,
    /// <p>The file format for the data export.</p>
    pub format: crate::types::FormatOption,
    /// <p>The compression type for the data export.</p>
    pub compression: crate::types::CompressionOption,
    /// <p>The rule to follow when generating a version of the data export file. You have the choice to overwrite the previous version or to be delivered in addition to the previous versions. Overwriting exports can save on Amazon S3 storage costs. Creating new export versions allows you to track the changes in cost and usage data over time.</p>
    pub overwrite: crate::types::OverwriteOption,
}
impl S3OutputConfigurations {
    /// <p>The output type for the data export.</p>
    pub fn output_type(&self) -> &crate::types::S3OutputType {
        &self.output_type
    }
    /// <p>The file format for the data export.</p>
    pub fn format(&self) -> &crate::types::FormatOption {
        &self.format
    }
    /// <p>The compression type for the data export.</p>
    pub fn compression(&self) -> &crate::types::CompressionOption {
        &self.compression
    }
    /// <p>The rule to follow when generating a version of the data export file. You have the choice to overwrite the previous version or to be delivered in addition to the previous versions. Overwriting exports can save on Amazon S3 storage costs. Creating new export versions allows you to track the changes in cost and usage data over time.</p>
    pub fn overwrite(&self) -> &crate::types::OverwriteOption {
        &self.overwrite
    }
}
impl S3OutputConfigurations {
    /// Creates a new builder-style object to manufacture [`S3OutputConfigurations`](crate::types::S3OutputConfigurations).
    pub fn builder() -> crate::types::builders::S3OutputConfigurationsBuilder {
        crate::types::builders::S3OutputConfigurationsBuilder::default()
    }
}

/// A builder for [`S3OutputConfigurations`](crate::types::S3OutputConfigurations).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3OutputConfigurationsBuilder {
    pub(crate) output_type: ::std::option::Option<crate::types::S3OutputType>,
    pub(crate) format: ::std::option::Option<crate::types::FormatOption>,
    pub(crate) compression: ::std::option::Option<crate::types::CompressionOption>,
    pub(crate) overwrite: ::std::option::Option<crate::types::OverwriteOption>,
}
impl S3OutputConfigurationsBuilder {
    /// <p>The output type for the data export.</p>
    /// This field is required.
    pub fn output_type(mut self, input: crate::types::S3OutputType) -> Self {
        self.output_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output type for the data export.</p>
    pub fn set_output_type(mut self, input: ::std::option::Option<crate::types::S3OutputType>) -> Self {
        self.output_type = input;
        self
    }
    /// <p>The output type for the data export.</p>
    pub fn get_output_type(&self) -> &::std::option::Option<crate::types::S3OutputType> {
        &self.output_type
    }
    /// <p>The file format for the data export.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::FormatOption) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file format for the data export.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::FormatOption>) -> Self {
        self.format = input;
        self
    }
    /// <p>The file format for the data export.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::FormatOption> {
        &self.format
    }
    /// <p>The compression type for the data export.</p>
    /// This field is required.
    pub fn compression(mut self, input: crate::types::CompressionOption) -> Self {
        self.compression = ::std::option::Option::Some(input);
        self
    }
    /// <p>The compression type for the data export.</p>
    pub fn set_compression(mut self, input: ::std::option::Option<crate::types::CompressionOption>) -> Self {
        self.compression = input;
        self
    }
    /// <p>The compression type for the data export.</p>
    pub fn get_compression(&self) -> &::std::option::Option<crate::types::CompressionOption> {
        &self.compression
    }
    /// <p>The rule to follow when generating a version of the data export file. You have the choice to overwrite the previous version or to be delivered in addition to the previous versions. Overwriting exports can save on Amazon S3 storage costs. Creating new export versions allows you to track the changes in cost and usage data over time.</p>
    /// This field is required.
    pub fn overwrite(mut self, input: crate::types::OverwriteOption) -> Self {
        self.overwrite = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule to follow when generating a version of the data export file. You have the choice to overwrite the previous version or to be delivered in addition to the previous versions. Overwriting exports can save on Amazon S3 storage costs. Creating new export versions allows you to track the changes in cost and usage data over time.</p>
    pub fn set_overwrite(mut self, input: ::std::option::Option<crate::types::OverwriteOption>) -> Self {
        self.overwrite = input;
        self
    }
    /// <p>The rule to follow when generating a version of the data export file. You have the choice to overwrite the previous version or to be delivered in addition to the previous versions. Overwriting exports can save on Amazon S3 storage costs. Creating new export versions allows you to track the changes in cost and usage data over time.</p>
    pub fn get_overwrite(&self) -> &::std::option::Option<crate::types::OverwriteOption> {
        &self.overwrite
    }
    /// Consumes the builder and constructs a [`S3OutputConfigurations`](crate::types::S3OutputConfigurations).
    /// This method will fail if any of the following fields are not set:
    /// - [`output_type`](crate::types::builders::S3OutputConfigurationsBuilder::output_type)
    /// - [`format`](crate::types::builders::S3OutputConfigurationsBuilder::format)
    /// - [`compression`](crate::types::builders::S3OutputConfigurationsBuilder::compression)
    /// - [`overwrite`](crate::types::builders::S3OutputConfigurationsBuilder::overwrite)
    pub fn build(self) -> ::std::result::Result<crate::types::S3OutputConfigurations, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3OutputConfigurations {
            output_type: self.output_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "output_type",
                    "output_type was not specified but it is required when building S3OutputConfigurations",
                )
            })?,
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building S3OutputConfigurations",
                )
            })?,
            compression: self.compression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "compression",
                    "compression was not specified but it is required when building S3OutputConfigurations",
                )
            })?,
            overwrite: self.overwrite.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "overwrite",
                    "overwrite was not specified but it is required when building S3OutputConfigurations",
                )
            })?,
        })
    }
}
