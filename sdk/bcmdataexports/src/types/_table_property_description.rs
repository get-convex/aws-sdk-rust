// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties for the data export table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TablePropertyDescription {
    /// <p>The name of the table.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The valid values for the table.</p>
    pub valid_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The default value for the table.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
    /// <p>The description for the table.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl TablePropertyDescription {
    /// <p>The name of the table.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The valid values for the table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.valid_values.is_none()`.
    pub fn valid_values(&self) -> &[::std::string::String] {
        self.valid_values.as_deref().unwrap_or_default()
    }
    /// <p>The default value for the table.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>The description for the table.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl TablePropertyDescription {
    /// Creates a new builder-style object to manufacture [`TablePropertyDescription`](crate::types::TablePropertyDescription).
    pub fn builder() -> crate::types::builders::TablePropertyDescriptionBuilder {
        crate::types::builders::TablePropertyDescriptionBuilder::default()
    }
}

/// A builder for [`TablePropertyDescription`](crate::types::TablePropertyDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TablePropertyDescriptionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) valid_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl TablePropertyDescriptionBuilder {
    /// <p>The name of the table.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `valid_values`.
    ///
    /// To override the contents of this collection use [`set_valid_values`](Self::set_valid_values).
    ///
    /// <p>The valid values for the table.</p>
    pub fn valid_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.valid_values.unwrap_or_default();
        v.push(input.into());
        self.valid_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The valid values for the table.</p>
    pub fn set_valid_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.valid_values = input;
        self
    }
    /// <p>The valid values for the table.</p>
    pub fn get_valid_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.valid_values
    }
    /// <p>The default value for the table.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value for the table.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value for the table.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// <p>The description for the table.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the table.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the table.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`TablePropertyDescription`](crate::types::TablePropertyDescription).
    pub fn build(self) -> crate::types::TablePropertyDescription {
        crate::types::TablePropertyDescription {
            name: self.name,
            valid_values: self.valid_values,
            default_value: self.default_value,
            description: self.description,
        }
    }
}
