// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SQL query of column selections and row filters from the data table you want.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataQuery {
    /// <p>The query statement.</p>
    pub query_statement: ::std::string::String,
    /// <p>The table configuration.</p>
    pub table_configurations: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    >,
}
impl DataQuery {
    /// <p>The query statement.</p>
    pub fn query_statement(&self) -> &str {
        use std::ops::Deref;
        self.query_statement.deref()
    }
    /// <p>The table configuration.</p>
    pub fn table_configurations(
        &self,
    ) -> ::std::option::Option<
        &::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    > {
        self.table_configurations.as_ref()
    }
}
impl DataQuery {
    /// Creates a new builder-style object to manufacture [`DataQuery`](crate::types::DataQuery).
    pub fn builder() -> crate::types::builders::DataQueryBuilder {
        crate::types::builders::DataQueryBuilder::default()
    }
}

/// A builder for [`DataQuery`](crate::types::DataQuery).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataQueryBuilder {
    pub(crate) query_statement: ::std::option::Option<::std::string::String>,
    pub(crate) table_configurations: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    >,
}
impl DataQueryBuilder {
    /// <p>The query statement.</p>
    /// This field is required.
    pub fn query_statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_statement = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query statement.</p>
    pub fn set_query_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_statement = input;
        self
    }
    /// <p>The query statement.</p>
    pub fn get_query_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_statement
    }
    /// Adds a key-value pair to `table_configurations`.
    ///
    /// To override the contents of this collection use [`set_table_configurations`](Self::set_table_configurations).
    ///
    /// <p>The table configuration.</p>
    pub fn table_configurations(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ) -> Self {
        let mut hash_map = self.table_configurations.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.table_configurations = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The table configuration.</p>
    pub fn set_table_configurations(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
        >,
    ) -> Self {
        self.table_configurations = input;
        self
    }
    /// <p>The table configuration.</p>
    pub fn get_table_configurations(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    > {
        &self.table_configurations
    }
    /// Consumes the builder and constructs a [`DataQuery`](crate::types::DataQuery).
    /// This method will fail if any of the following fields are not set:
    /// - [`query_statement`](crate::types::builders::DataQueryBuilder::query_statement)
    pub fn build(self) -> ::std::result::Result<crate::types::DataQuery, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataQuery {
            query_statement: self.query_statement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "query_statement",
                    "query_statement was not specified but it is required when building DataQuery",
                )
            })?,
            table_configurations: self.table_configurations,
        })
    }
}
