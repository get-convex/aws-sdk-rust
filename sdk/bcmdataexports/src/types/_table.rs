// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for the data export table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Table {
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The description for the table.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The properties for the table.</p>
    pub table_properties: ::std::option::Option<::std::vec::Vec<crate::types::TablePropertyDescription>>,
}
impl Table {
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The description for the table.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The properties for the table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.table_properties.is_none()`.
    pub fn table_properties(&self) -> &[crate::types::TablePropertyDescription] {
        self.table_properties.as_deref().unwrap_or_default()
    }
}
impl Table {
    /// Creates a new builder-style object to manufacture [`Table`](crate::types::Table).
    pub fn builder() -> crate::types::builders::TableBuilder {
        crate::types::builders::TableBuilder::default()
    }
}

/// A builder for [`Table`](crate::types::Table).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TableBuilder {
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) table_properties: ::std::option::Option<::std::vec::Vec<crate::types::TablePropertyDescription>>,
}
impl TableBuilder {
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The description for the table.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the table.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the table.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `table_properties`.
    ///
    /// To override the contents of this collection use [`set_table_properties`](Self::set_table_properties).
    ///
    /// <p>The properties for the table.</p>
    pub fn table_properties(mut self, input: crate::types::TablePropertyDescription) -> Self {
        let mut v = self.table_properties.unwrap_or_default();
        v.push(input);
        self.table_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The properties for the table.</p>
    pub fn set_table_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TablePropertyDescription>>) -> Self {
        self.table_properties = input;
        self
    }
    /// <p>The properties for the table.</p>
    pub fn get_table_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TablePropertyDescription>> {
        &self.table_properties
    }
    /// Consumes the builder and constructs a [`Table`](crate::types::Table).
    pub fn build(self) -> crate::types::Table {
        crate::types::Table {
            table_name: self.table_name,
            description: self.description,
            table_properties: self.table_properties,
        }
    }
}
