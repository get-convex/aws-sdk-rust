// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The reference for the data export update.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecutionReference {
    /// <p>The ID for this specific execution.</p>
    pub execution_id: ::std::string::String,
    /// <p>The status of this specific execution.</p>
    pub execution_status: ::std::option::Option<crate::types::ExecutionStatus>,
}
impl ExecutionReference {
    /// <p>The ID for this specific execution.</p>
    pub fn execution_id(&self) -> &str {
        use std::ops::Deref;
        self.execution_id.deref()
    }
    /// <p>The status of this specific execution.</p>
    pub fn execution_status(&self) -> ::std::option::Option<&crate::types::ExecutionStatus> {
        self.execution_status.as_ref()
    }
}
impl ExecutionReference {
    /// Creates a new builder-style object to manufacture [`ExecutionReference`](crate::types::ExecutionReference).
    pub fn builder() -> crate::types::builders::ExecutionReferenceBuilder {
        crate::types::builders::ExecutionReferenceBuilder::default()
    }
}

/// A builder for [`ExecutionReference`](crate::types::ExecutionReference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecutionReferenceBuilder {
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) execution_status: ::std::option::Option<crate::types::ExecutionStatus>,
}
impl ExecutionReferenceBuilder {
    /// <p>The ID for this specific execution.</p>
    /// This field is required.
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for this specific execution.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The ID for this specific execution.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The status of this specific execution.</p>
    /// This field is required.
    pub fn execution_status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.execution_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of this specific execution.</p>
    pub fn set_execution_status(mut self, input: ::std::option::Option<crate::types::ExecutionStatus>) -> Self {
        self.execution_status = input;
        self
    }
    /// <p>The status of this specific execution.</p>
    pub fn get_execution_status(&self) -> &::std::option::Option<crate::types::ExecutionStatus> {
        &self.execution_status
    }
    /// Consumes the builder and constructs a [`ExecutionReference`](crate::types::ExecutionReference).
    /// This method will fail if any of the following fields are not set:
    /// - [`execution_id`](crate::types::builders::ExecutionReferenceBuilder::execution_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ExecutionReference, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExecutionReference {
            execution_id: self.execution_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_id",
                    "execution_id was not specified but it is required when building ExecutionReference",
                )
            })?,
            execution_status: self.execution_status,
        })
    }
}
