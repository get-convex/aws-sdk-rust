// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn create_space_output_output_correct_errors(
    mut builder: crate::operation::create_space::builders::CreateSpaceOutputBuilder,
) -> crate::operation::create_space::builders::CreateSpaceOutputBuilder {
    if builder.space_id.is_none() {
        builder.space_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_space_output_output_correct_errors(
    mut builder: crate::operation::get_space::builders::GetSpaceOutputBuilder,
) -> crate::operation::get_space::builders::GetSpaceOutputBuilder {
    if builder.space_id.is_none() {
        builder.space_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.configuration_status.is_none() {
        builder.configuration_status = "no value was set".parse::<crate::types::ConfigurationStatus>().ok()
    }
    if builder.client_id.is_none() {
        builder.client_id = Some(Default::default())
    }
    if builder.vanity_domain_status.is_none() {
        builder.vanity_domain_status = "no value was set".parse::<crate::types::VanityDomainStatus>().ok()
    }
    if builder.vanity_domain.is_none() {
        builder.vanity_domain = Some(Default::default())
    }
    if builder.random_domain.is_none() {
        builder.random_domain = Some(Default::default())
    }
    if builder.create_date_time.is_none() {
        builder.create_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.tier.is_none() {
        builder.tier = "no value was set".parse::<crate::types::TierLevel>().ok()
    }
    if builder.storage_limit.is_none() {
        builder.storage_limit = Some(Default::default())
    }
    builder
}

pub(crate) fn list_spaces_output_output_correct_errors(
    mut builder: crate::operation::list_spaces::builders::ListSpacesOutputBuilder,
) -> crate::operation::list_spaces::builders::ListSpacesOutputBuilder {
    if builder.spaces.is_none() {
        builder.spaces = Some(Default::default())
    }
    builder
}

pub(crate) fn space_data_correct_errors(mut builder: crate::types::builders::SpaceDataBuilder) -> crate::types::builders::SpaceDataBuilder {
    if builder.space_id.is_none() {
        builder.space_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.configuration_status.is_none() {
        builder.configuration_status = "no value was set".parse::<crate::types::ConfigurationStatus>().ok()
    }
    if builder.vanity_domain_status.is_none() {
        builder.vanity_domain_status = "no value was set".parse::<crate::types::VanityDomainStatus>().ok()
    }
    if builder.vanity_domain.is_none() {
        builder.vanity_domain = Some(Default::default())
    }
    if builder.random_domain.is_none() {
        builder.random_domain = Some(Default::default())
    }
    if builder.tier.is_none() {
        builder.tier = "no value was set".parse::<crate::types::TierLevel>().ok()
    }
    if builder.storage_limit.is_none() {
        builder.storage_limit = Some(Default::default())
    }
    if builder.create_date_time.is_none() {
        builder.create_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
