// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SendInvitesInput {
    /// <p>The ID of the private re:Post.</p>
    pub space_id: ::std::option::Option<::std::string::String>,
    /// <p>The array of identifiers for the users and groups.</p>
    pub accessor_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The title of the invite.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The body of the invite.</p>
    pub body: ::std::option::Option<::std::string::String>,
}
impl SendInvitesInput {
    /// <p>The ID of the private re:Post.</p>
    pub fn space_id(&self) -> ::std::option::Option<&str> {
        self.space_id.as_deref()
    }
    /// <p>The array of identifiers for the users and groups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.accessor_ids.is_none()`.
    pub fn accessor_ids(&self) -> &[::std::string::String] {
        self.accessor_ids.as_deref().unwrap_or_default()
    }
    /// <p>The title of the invite.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The body of the invite.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
}
impl ::std::fmt::Debug for SendInvitesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SendInvitesInput");
        formatter.field("space_id", &self.space_id);
        formatter.field("accessor_ids", &self.accessor_ids);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SendInvitesInput {
    /// Creates a new builder-style object to manufacture [`SendInvitesInput`](crate::operation::send_invites::SendInvitesInput).
    pub fn builder() -> crate::operation::send_invites::builders::SendInvitesInputBuilder {
        crate::operation::send_invites::builders::SendInvitesInputBuilder::default()
    }
}

/// A builder for [`SendInvitesInput`](crate::operation::send_invites::SendInvitesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SendInvitesInputBuilder {
    pub(crate) space_id: ::std::option::Option<::std::string::String>,
    pub(crate) accessor_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
}
impl SendInvitesInputBuilder {
    /// <p>The ID of the private re:Post.</p>
    /// This field is required.
    pub fn space_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the private re:Post.</p>
    pub fn set_space_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_id = input;
        self
    }
    /// <p>The ID of the private re:Post.</p>
    pub fn get_space_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_id
    }
    /// Appends an item to `accessor_ids`.
    ///
    /// To override the contents of this collection use [`set_accessor_ids`](Self::set_accessor_ids).
    ///
    /// <p>The array of identifiers for the users and groups.</p>
    pub fn accessor_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.accessor_ids.unwrap_or_default();
        v.push(input.into());
        self.accessor_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The array of identifiers for the users and groups.</p>
    pub fn set_accessor_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.accessor_ids = input;
        self
    }
    /// <p>The array of identifiers for the users and groups.</p>
    pub fn get_accessor_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.accessor_ids
    }
    /// <p>The title of the invite.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the invite.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the invite.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The body of the invite.</p>
    /// This field is required.
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The body of the invite.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The body of the invite.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// Consumes the builder and constructs a [`SendInvitesInput`](crate::operation::send_invites::SendInvitesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::send_invites::SendInvitesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::send_invites::SendInvitesInput {
            space_id: self.space_id,
            accessor_ids: self.accessor_ids,
            title: self.title,
            body: self.body,
        })
    }
}
impl ::std::fmt::Debug for SendInvitesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SendInvitesInputBuilder");
        formatter.field("space_id", &self.space_id);
        formatter.field("accessor_ids", &self.accessor_ids);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
