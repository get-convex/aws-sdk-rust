// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateSpaceInput {
    /// <p>The name for the private re:Post. This must be unique in your account.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The subdomain that you use to access your AWS re:Post Private private re:Post. All custom subdomains must be approved by AWS before use. In addition to your custom subdomain, all private re:Posts are issued an AWS generated subdomain for immediate use.</p>
    pub subdomain: ::std::option::Option<::std::string::String>,
    /// <p>The pricing tier for the private re:Post.</p>
    pub tier: ::std::option::Option<crate::types::TierLevel>,
    /// <p>A description for the private re:Post. This is used only to help you identify this private re:Post.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The AWS KMS key ARN that’s used for the AWS KMS encryption. If you don't provide a key, your data is encrypted by default with a key that AWS owns and manages for you.</p>
    pub user_kms_key: ::std::option::Option<::std::string::String>,
    /// <p>The list of tags associated with the private re:Post.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The IAM role that grants permissions to the private re:Post to convert unanswered questions into AWS support tickets.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl CreateSpaceInput {
    /// <p>The name for the private re:Post. This must be unique in your account.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The subdomain that you use to access your AWS re:Post Private private re:Post. All custom subdomains must be approved by AWS before use. In addition to your custom subdomain, all private re:Posts are issued an AWS generated subdomain for immediate use.</p>
    pub fn subdomain(&self) -> ::std::option::Option<&str> {
        self.subdomain.as_deref()
    }
    /// <p>The pricing tier for the private re:Post.</p>
    pub fn tier(&self) -> ::std::option::Option<&crate::types::TierLevel> {
        self.tier.as_ref()
    }
    /// <p>A description for the private re:Post. This is used only to help you identify this private re:Post.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The AWS KMS key ARN that’s used for the AWS KMS encryption. If you don't provide a key, your data is encrypted by default with a key that AWS owns and manages for you.</p>
    pub fn user_kms_key(&self) -> ::std::option::Option<&str> {
        self.user_kms_key.as_deref()
    }
    /// <p>The list of tags associated with the private re:Post.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The IAM role that grants permissions to the private re:Post to convert unanswered questions into AWS support tickets.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl ::std::fmt::Debug for CreateSpaceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSpaceInput");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("subdomain", &self.subdomain);
        formatter.field("tier", &self.tier);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("user_kms_key", &self.user_kms_key);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("role_arn", &self.role_arn);
        formatter.finish()
    }
}
impl CreateSpaceInput {
    /// Creates a new builder-style object to manufacture [`CreateSpaceInput`](crate::operation::create_space::CreateSpaceInput).
    pub fn builder() -> crate::operation::create_space::builders::CreateSpaceInputBuilder {
        crate::operation::create_space::builders::CreateSpaceInputBuilder::default()
    }
}

/// A builder for [`CreateSpaceInput`](crate::operation::create_space::CreateSpaceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateSpaceInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) subdomain: ::std::option::Option<::std::string::String>,
    pub(crate) tier: ::std::option::Option<crate::types::TierLevel>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) user_kms_key: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl CreateSpaceInputBuilder {
    /// <p>The name for the private re:Post. This must be unique in your account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the private re:Post. This must be unique in your account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the private re:Post. This must be unique in your account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The subdomain that you use to access your AWS re:Post Private private re:Post. All custom subdomains must be approved by AWS before use. In addition to your custom subdomain, all private re:Posts are issued an AWS generated subdomain for immediate use.</p>
    /// This field is required.
    pub fn subdomain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdomain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subdomain that you use to access your AWS re:Post Private private re:Post. All custom subdomains must be approved by AWS before use. In addition to your custom subdomain, all private re:Posts are issued an AWS generated subdomain for immediate use.</p>
    pub fn set_subdomain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdomain = input;
        self
    }
    /// <p>The subdomain that you use to access your AWS re:Post Private private re:Post. All custom subdomains must be approved by AWS before use. In addition to your custom subdomain, all private re:Posts are issued an AWS generated subdomain for immediate use.</p>
    pub fn get_subdomain(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdomain
    }
    /// <p>The pricing tier for the private re:Post.</p>
    /// This field is required.
    pub fn tier(mut self, input: crate::types::TierLevel) -> Self {
        self.tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The pricing tier for the private re:Post.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<crate::types::TierLevel>) -> Self {
        self.tier = input;
        self
    }
    /// <p>The pricing tier for the private re:Post.</p>
    pub fn get_tier(&self) -> &::std::option::Option<crate::types::TierLevel> {
        &self.tier
    }
    /// <p>A description for the private re:Post. This is used only to help you identify this private re:Post.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the private re:Post. This is used only to help you identify this private re:Post.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the private re:Post. This is used only to help you identify this private re:Post.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The AWS KMS key ARN that’s used for the AWS KMS encryption. If you don't provide a key, your data is encrypted by default with a key that AWS owns and manages for you.</p>
    pub fn user_kms_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_kms_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS KMS key ARN that’s used for the AWS KMS encryption. If you don't provide a key, your data is encrypted by default with a key that AWS owns and manages for you.</p>
    pub fn set_user_kms_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_kms_key = input;
        self
    }
    /// <p>The AWS KMS key ARN that’s used for the AWS KMS encryption. If you don't provide a key, your data is encrypted by default with a key that AWS owns and manages for you.</p>
    pub fn get_user_kms_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_kms_key
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tags associated with the private re:Post.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of tags associated with the private re:Post.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tags associated with the private re:Post.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The IAM role that grants permissions to the private re:Post to convert unanswered questions into AWS support tickets.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that grants permissions to the private re:Post to convert unanswered questions into AWS support tickets.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role that grants permissions to the private re:Post to convert unanswered questions into AWS support tickets.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`CreateSpaceInput`](crate::operation::create_space::CreateSpaceInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_space::CreateSpaceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_space::CreateSpaceInput {
            name: self.name,
            subdomain: self.subdomain,
            tier: self.tier,
            description: self.description,
            user_kms_key: self.user_kms_key,
            tags: self.tags,
            role_arn: self.role_arn,
        })
    }
}
impl ::std::fmt::Debug for CreateSpaceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSpaceInputBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("subdomain", &self.subdomain);
        formatter.field("tier", &self.tier);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("user_kms_key", &self.user_kms_key);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("role_arn", &self.role_arn);
        formatter.finish()
    }
}
