// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The drift status summary of the landing zone.</p>
/// <p>If the landing zone differs from the expected configuration, it is defined to be in a state of drift. You can repair this drift by resetting the landing zone.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LandingZoneDriftStatusSummary {
    /// <p>The drift status of the landing zone.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DRIFTED</code>: The landing zone deployed in this configuration does not match the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// <li>
    /// <p><code>IN_SYNC</code>: The landing zone deployed in this configuration matches the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::LandingZoneDriftStatus>,
}
impl LandingZoneDriftStatusSummary {
    /// <p>The drift status of the landing zone.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DRIFTED</code>: The landing zone deployed in this configuration does not match the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// <li>
    /// <p><code>IN_SYNC</code>: The landing zone deployed in this configuration matches the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LandingZoneDriftStatus> {
        self.status.as_ref()
    }
}
impl LandingZoneDriftStatusSummary {
    /// Creates a new builder-style object to manufacture [`LandingZoneDriftStatusSummary`](crate::types::LandingZoneDriftStatusSummary).
    pub fn builder() -> crate::types::builders::LandingZoneDriftStatusSummaryBuilder {
        crate::types::builders::LandingZoneDriftStatusSummaryBuilder::default()
    }
}

/// A builder for [`LandingZoneDriftStatusSummary`](crate::types::LandingZoneDriftStatusSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LandingZoneDriftStatusSummaryBuilder {
    pub(crate) status: ::std::option::Option<crate::types::LandingZoneDriftStatus>,
}
impl LandingZoneDriftStatusSummaryBuilder {
    /// <p>The drift status of the landing zone.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DRIFTED</code>: The landing zone deployed in this configuration does not match the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// <li>
    /// <p><code>IN_SYNC</code>: The landing zone deployed in this configuration matches the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::LandingZoneDriftStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The drift status of the landing zone.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DRIFTED</code>: The landing zone deployed in this configuration does not match the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// <li>
    /// <p><code>IN_SYNC</code>: The landing zone deployed in this configuration matches the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LandingZoneDriftStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The drift status of the landing zone.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DRIFTED</code>: The landing zone deployed in this configuration does not match the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// <li>
    /// <p><code>IN_SYNC</code>: The landing zone deployed in this configuration matches the configuration that Amazon Web Services Control Tower expected.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LandingZoneDriftStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`LandingZoneDriftStatusSummary`](crate::types::LandingZoneDriftStatusSummary).
    pub fn build(self) -> crate::types::LandingZoneDriftStatusSummary {
        crate::types::LandingZoneDriftStatusSummary { status: self.status }
    }
}
