// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a landing zone operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LandingZoneOperationDetail {
    /// <p>The landing zone operation type.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE</code>: The <code>DeleteLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>CREATE</code>: The <code>CreateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>UPDATE</code>: The <code>UpdateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>RESET</code>: The <code>ResetLandingZone</code> operation.</p></li>
    /// </ul>
    pub operation_type: ::std::option::Option<crate::types::LandingZoneOperationType>,
    /// <p>The landing zone operation start time.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The landing zone operation end time.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The landing zone operation succeeded.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code>: The landing zone operation is in progress.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The landing zone operation failed.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::LandingZoneOperationStatus>,
    /// <p>If the operation result is FAILED, this string contains a message explaining why the operation failed.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl LandingZoneOperationDetail {
    /// <p>The landing zone operation type.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE</code>: The <code>DeleteLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>CREATE</code>: The <code>CreateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>UPDATE</code>: The <code>UpdateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>RESET</code>: The <code>ResetLandingZone</code> operation.</p></li>
    /// </ul>
    pub fn operation_type(&self) -> ::std::option::Option<&crate::types::LandingZoneOperationType> {
        self.operation_type.as_ref()
    }
    /// <p>The landing zone operation start time.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The landing zone operation end time.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The landing zone operation succeeded.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code>: The landing zone operation is in progress.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The landing zone operation failed.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LandingZoneOperationStatus> {
        self.status.as_ref()
    }
    /// <p>If the operation result is FAILED, this string contains a message explaining why the operation failed.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl LandingZoneOperationDetail {
    /// Creates a new builder-style object to manufacture [`LandingZoneOperationDetail`](crate::types::LandingZoneOperationDetail).
    pub fn builder() -> crate::types::builders::LandingZoneOperationDetailBuilder {
        crate::types::builders::LandingZoneOperationDetailBuilder::default()
    }
}

/// A builder for [`LandingZoneOperationDetail`](crate::types::LandingZoneOperationDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LandingZoneOperationDetailBuilder {
    pub(crate) operation_type: ::std::option::Option<crate::types::LandingZoneOperationType>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::LandingZoneOperationStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl LandingZoneOperationDetailBuilder {
    /// <p>The landing zone operation type.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE</code>: The <code>DeleteLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>CREATE</code>: The <code>CreateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>UPDATE</code>: The <code>UpdateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>RESET</code>: The <code>ResetLandingZone</code> operation.</p></li>
    /// </ul>
    pub fn operation_type(mut self, input: crate::types::LandingZoneOperationType) -> Self {
        self.operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The landing zone operation type.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE</code>: The <code>DeleteLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>CREATE</code>: The <code>CreateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>UPDATE</code>: The <code>UpdateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>RESET</code>: The <code>ResetLandingZone</code> operation.</p></li>
    /// </ul>
    pub fn set_operation_type(mut self, input: ::std::option::Option<crate::types::LandingZoneOperationType>) -> Self {
        self.operation_type = input;
        self
    }
    /// <p>The landing zone operation type.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>DELETE</code>: The <code>DeleteLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>CREATE</code>: The <code>CreateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>UPDATE</code>: The <code>UpdateLandingZone</code> operation.</p></li>
    /// <li>
    /// <p><code>RESET</code>: The <code>ResetLandingZone</code> operation.</p></li>
    /// </ul>
    pub fn get_operation_type(&self) -> &::std::option::Option<crate::types::LandingZoneOperationType> {
        &self.operation_type
    }
    /// <p>The landing zone operation start time.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The landing zone operation start time.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The landing zone operation start time.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The landing zone operation end time.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The landing zone operation end time.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The landing zone operation end time.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The landing zone operation succeeded.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code>: The landing zone operation is in progress.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The landing zone operation failed.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::LandingZoneOperationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The landing zone operation succeeded.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code>: The landing zone operation is in progress.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The landing zone operation failed.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LandingZoneOperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The landing zone operation succeeded.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code>: The landing zone operation is in progress.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The landing zone operation failed.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LandingZoneOperationStatus> {
        &self.status
    }
    /// <p>If the operation result is FAILED, this string contains a message explaining why the operation failed.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the operation result is FAILED, this string contains a message explaining why the operation failed.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>If the operation result is FAILED, this string contains a message explaining why the operation failed.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`LandingZoneOperationDetail`](crate::types::LandingZoneOperationDetail).
    pub fn build(self) -> crate::types::LandingZoneOperationDetail {
        crate::types::LandingZoneOperationDetail {
            operation_type: self.operation_type,
            start_time: self.start_time,
            end_time: self.end_time,
            status: self.status,
            status_message: self.status_message,
        }
    }
}
