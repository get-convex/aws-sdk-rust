// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents action metadata added to an Action dataset using the <code>PutActions</code> API. For more information see <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-actions.html">Importing actions individually</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Action {
    /// <p>The ID associated with the action.</p>
    pub action_id: ::std::string::String,
    /// <p>A string map of action-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"value": "100"}</code>.</p>
    /// <p>The keys use camel case names that match the fields in the schema for the Actions dataset. In the previous example, the <code>value</code> matches the 'VALUE' field defined in the Actions schema. For categorical string data, to include multiple categories for a single action, separate each category with a pipe separator (<code>|</code>). For example, <code>\"Deluxe|Premium\"</code>.</p>
    pub properties: ::std::option::Option<::std::string::String>,
}
impl Action {
    /// <p>The ID associated with the action.</p>
    pub fn action_id(&self) -> &str {
        use std::ops::Deref;
        self.action_id.deref()
    }
    /// <p>A string map of action-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"value": "100"}</code>.</p>
    /// <p>The keys use camel case names that match the fields in the schema for the Actions dataset. In the previous example, the <code>value</code> matches the 'VALUE' field defined in the Actions schema. For categorical string data, to include multiple categories for a single action, separate each category with a pipe separator (<code>|</code>). For example, <code>\"Deluxe|Premium\"</code>.</p>
    pub fn properties(&self) -> ::std::option::Option<&str> {
        self.properties.as_deref()
    }
}
impl ::std::fmt::Debug for Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Action");
        formatter.field("action_id", &self.action_id);
        formatter.field("properties", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Action {
    /// Creates a new builder-style object to manufacture [`Action`](crate::types::Action).
    pub fn builder() -> crate::types::builders::ActionBuilder {
        crate::types::builders::ActionBuilder::default()
    }
}

/// A builder for [`Action`](crate::types::Action).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ActionBuilder {
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) properties: ::std::option::Option<::std::string::String>,
}
impl ActionBuilder {
    /// <p>The ID associated with the action.</p>
    /// This field is required.
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID associated with the action.</p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>The ID associated with the action.</p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p>A string map of action-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"value": "100"}</code>.</p>
    /// <p>The keys use camel case names that match the fields in the schema for the Actions dataset. In the previous example, the <code>value</code> matches the 'VALUE' field defined in the Actions schema. For categorical string data, to include multiple categories for a single action, separate each category with a pipe separator (<code>|</code>). For example, <code>\"Deluxe|Premium\"</code>.</p>
    pub fn properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.properties = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string map of action-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"value": "100"}</code>.</p>
    /// <p>The keys use camel case names that match the fields in the schema for the Actions dataset. In the previous example, the <code>value</code> matches the 'VALUE' field defined in the Actions schema. For categorical string data, to include multiple categories for a single action, separate each category with a pipe separator (<code>|</code>). For example, <code>\"Deluxe|Premium\"</code>.</p>
    pub fn set_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.properties = input;
        self
    }
    /// <p>A string map of action-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"value": "100"}</code>.</p>
    /// <p>The keys use camel case names that match the fields in the schema for the Actions dataset. In the previous example, the <code>value</code> matches the 'VALUE' field defined in the Actions schema. For categorical string data, to include multiple categories for a single action, separate each category with a pipe separator (<code>|</code>). For example, <code>\"Deluxe|Premium\"</code>.</p>
    pub fn get_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.properties
    }
    /// Consumes the builder and constructs a [`Action`](crate::types::Action).
    /// This method will fail if any of the following fields are not set:
    /// - [`action_id`](crate::types::builders::ActionBuilder::action_id)
    pub fn build(self) -> ::std::result::Result<crate::types::Action, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Action {
            action_id: self.action_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_id",
                    "action_id was not specified but it is required when building Action",
                )
            })?,
            properties: self.properties,
        })
    }
}
impl ::std::fmt::Debug for ActionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ActionBuilder");
        formatter.field("action_id", &self.action_id);
        formatter.field("properties", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
