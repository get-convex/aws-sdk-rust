// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that identifies an action.</p>
/// <p>The API returns a list of <code>PredictedAction</code>s.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredictedAction {
    /// <p>The ID of the recommended action.</p>
    pub action_id: ::std::option::Option<::std::string::String>,
    /// <p>The score of the recommended action. For information about action scores, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/how-action-recommendation-scoring-works.html">How action recommendation scoring works</a>.</p>
    pub score: ::std::option::Option<f64>,
}
impl PredictedAction {
    /// <p>The ID of the recommended action.</p>
    pub fn action_id(&self) -> ::std::option::Option<&str> {
        self.action_id.as_deref()
    }
    /// <p>The score of the recommended action. For information about action scores, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/how-action-recommendation-scoring-works.html">How action recommendation scoring works</a>.</p>
    pub fn score(&self) -> ::std::option::Option<f64> {
        self.score
    }
}
impl PredictedAction {
    /// Creates a new builder-style object to manufacture [`PredictedAction`](crate::types::PredictedAction).
    pub fn builder() -> crate::types::builders::PredictedActionBuilder {
        crate::types::builders::PredictedActionBuilder::default()
    }
}

/// A builder for [`PredictedAction`](crate::types::PredictedAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PredictedActionBuilder {
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) score: ::std::option::Option<f64>,
}
impl PredictedActionBuilder {
    /// <p>The ID of the recommended action.</p>
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the recommended action.</p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>The ID of the recommended action.</p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p>The score of the recommended action. For information about action scores, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/how-action-recommendation-scoring-works.html">How action recommendation scoring works</a>.</p>
    pub fn score(mut self, input: f64) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The score of the recommended action. For information about action scores, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/how-action-recommendation-scoring-works.html">How action recommendation scoring works</a>.</p>
    pub fn set_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.score = input;
        self
    }
    /// <p>The score of the recommended action. For information about action scores, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/how-action-recommendation-scoring-works.html">How action recommendation scoring works</a>.</p>
    pub fn get_score(&self) -> &::std::option::Option<f64> {
        &self.score
    }
    /// Consumes the builder and constructs a [`PredictedAction`](crate::types::PredictedAction).
    pub fn build(self) -> crate::types::PredictedAction {
        crate::types::PredictedAction {
            action_id: self.action_id,
            score: self.score,
        }
    }
}
