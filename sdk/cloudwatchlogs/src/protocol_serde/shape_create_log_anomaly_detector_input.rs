// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_log_anomaly_detector_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_log_anomaly_detector::CreateLogAnomalyDetectorInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.log_group_arn_list {
        let mut array_2 = object.key("logGroupArnList").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.detector_name {
        object.key("detectorName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.evaluation_frequency {
        object.key("evaluationFrequency").string(var_5.as_str());
    }
    if let Some(var_6) = &input.filter_pattern {
        object.key("filterPattern").string(var_6.as_str());
    }
    if let Some(var_7) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.anomaly_visibility_time {
        object.key("anomalyVisibilityTime").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
