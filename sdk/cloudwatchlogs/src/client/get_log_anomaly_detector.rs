// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLogAnomalyDetector`](crate::operation::get_log_anomaly_detector::builders::GetLogAnomalyDetectorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`anomaly_detector_arn(impl Into<String>)`](crate::operation::get_log_anomaly_detector::builders::GetLogAnomalyDetectorFluentBuilder::anomaly_detector_arn) / [`set_anomaly_detector_arn(Option<String>)`](crate::operation::get_log_anomaly_detector::builders::GetLogAnomalyDetectorFluentBuilder::set_anomaly_detector_arn):<br>required: **true**<br><p>The ARN of the anomaly detector to retrieve information about. You can find the ARNs of log anomaly detectors in your account by using the <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListLogAnomalyDetectors.html">ListLogAnomalyDetectors</a> operation.</p><br>
    /// - On success, responds with [`GetLogAnomalyDetectorOutput`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput) with field(s):
    ///   - [`detector_name(Option<String>)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::detector_name): <p>The name of the log anomaly detector</p>
    ///   - [`log_group_arn_list(Option<Vec::<String>>)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::log_group_arn_list): <p>An array of structures, where each structure contains the ARN of a log group associated with this anomaly detector.</p>
    ///   - [`evaluation_frequency(Option<EvaluationFrequency>)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::evaluation_frequency): <p>Specifies how often the anomaly detector runs and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then setting <code>evaluationFrequency</code> to <code>FIFTEEN_MIN</code> might be appropriate.</p>
    ///   - [`filter_pattern(Option<String>)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::filter_pattern): <p>A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.</p>
    ///   - [`anomaly_detector_status(Option<AnomalyDetectorStatus>)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::anomaly_detector_status): <p>Specifies whether the anomaly detector is currently active. To change its status, use the <code>enabled</code> parameter in the <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateLogAnomalyDetector.html">UpdateLogAnomalyDetector</a> operation.</p>
    ///   - [`kms_key_id(Option<String>)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::kms_key_id): <p>The ID of the KMS key assigned to this anomaly detector, if any.</p>
    ///   - [`creation_time_stamp(i64)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::creation_time_stamp): <p>The date and time when this anomaly detector was created.</p>
    ///   - [`last_modified_time_stamp(i64)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::last_modified_time_stamp): <p>The date and time when this anomaly detector was most recently modified.</p>
    ///   - [`anomaly_visibility_time(Option<i64>)`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorOutput::anomaly_visibility_time): <p>The number of days used as the life cycle of anomalies. After this time, anomalies are automatically baselined and the anomaly detector model will treat new occurrences of similar event as normal.</p>
    /// - On failure, responds with [`SdkError<GetLogAnomalyDetectorError>`](crate::operation::get_log_anomaly_detector::GetLogAnomalyDetectorError)
    pub fn get_log_anomaly_detector(&self) -> crate::operation::get_log_anomaly_detector::builders::GetLogAnomalyDetectorFluentBuilder {
        crate::operation::get_log_anomaly_detector::builders::GetLogAnomalyDetectorFluentBuilder::new(self.handle.clone())
    }
}
