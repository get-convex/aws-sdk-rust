// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLogAnomalyDetector`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`anomaly_detector_arn(impl Into<String>)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::anomaly_detector_arn) / [`set_anomaly_detector_arn(Option<String>)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::set_anomaly_detector_arn):<br>required: **true**<br><p>The ARN of the anomaly detector that you want to update.</p><br>
    ///   - [`evaluation_frequency(EvaluationFrequency)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::evaluation_frequency) / [`set_evaluation_frequency(Option<EvaluationFrequency>)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::set_evaluation_frequency):<br>required: **false**<br><p>Specifies how often the anomaly detector runs and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then setting <code>evaluationFrequency</code> to <code>FIFTEEN_MIN</code> might be appropriate.</p><br>
    ///   - [`filter_pattern(impl Into<String>)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::filter_pattern) / [`set_filter_pattern(Option<String>)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::set_filter_pattern):<br>required: **false**<br><p>A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.</p><br>
    ///   - [`anomaly_visibility_time(i64)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::anomaly_visibility_time) / [`set_anomaly_visibility_time(Option<i64>)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::set_anomaly_visibility_time):<br>required: **false**<br><p>The number of days to use as the life cycle of anomalies. After this time, anomalies are automatically baselined and the anomaly detector model will treat new occurrences of similar event as normal. Therefore, if you do not correct the cause of an anomaly during this time, it will be considered normal going forward and will not be detected.</p><br>
    ///   - [`enabled(bool)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::enabled) / [`set_enabled(Option<bool>)`](crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::set_enabled):<br>required: **true**<br><p>Use this parameter to pause or restart the anomaly detector.</p><br>
    /// - On success, responds with [`UpdateLogAnomalyDetectorOutput`](crate::operation::update_log_anomaly_detector::UpdateLogAnomalyDetectorOutput)
    /// - On failure, responds with [`SdkError<UpdateLogAnomalyDetectorError>`](crate::operation::update_log_anomaly_detector::UpdateLogAnomalyDetectorError)
    pub fn update_log_anomaly_detector(&self) -> crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder {
        crate::operation::update_log_anomaly_detector::builders::UpdateLogAnomalyDetectorFluentBuilder::new(self.handle.clone())
    }
}
