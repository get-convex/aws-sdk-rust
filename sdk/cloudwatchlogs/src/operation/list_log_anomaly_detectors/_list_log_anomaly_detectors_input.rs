// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLogAnomalyDetectorsInput {
    /// <p>Use this to optionally filter the results to only include anomaly detectors that are associated with the specified log group.</p>
    pub filter_log_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListLogAnomalyDetectorsInput {
    /// <p>Use this to optionally filter the results to only include anomaly detectors that are associated with the specified log group.</p>
    pub fn filter_log_group_arn(&self) -> ::std::option::Option<&str> {
        self.filter_log_group_arn.as_deref()
    }
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListLogAnomalyDetectorsInput {
    /// Creates a new builder-style object to manufacture [`ListLogAnomalyDetectorsInput`](crate::operation::list_log_anomaly_detectors::ListLogAnomalyDetectorsInput).
    pub fn builder() -> crate::operation::list_log_anomaly_detectors::builders::ListLogAnomalyDetectorsInputBuilder {
        crate::operation::list_log_anomaly_detectors::builders::ListLogAnomalyDetectorsInputBuilder::default()
    }
}

/// A builder for [`ListLogAnomalyDetectorsInput`](crate::operation::list_log_anomaly_detectors::ListLogAnomalyDetectorsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListLogAnomalyDetectorsInputBuilder {
    pub(crate) filter_log_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListLogAnomalyDetectorsInputBuilder {
    /// <p>Use this to optionally filter the results to only include anomaly detectors that are associated with the specified log group.</p>
    pub fn filter_log_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_log_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Use this to optionally filter the results to only include anomaly detectors that are associated with the specified log group.</p>
    pub fn set_filter_log_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_log_group_arn = input;
        self
    }
    /// <p>Use this to optionally filter the results to only include anomaly detectors that are associated with the specified log group.</p>
    pub fn get_filter_log_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_log_group_arn
    }
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListLogAnomalyDetectorsInput`](crate::operation::list_log_anomaly_detectors::ListLogAnomalyDetectorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_log_anomaly_detectors::ListLogAnomalyDetectorsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_log_anomaly_detectors::ListLogAnomalyDetectorsInput {
            filter_log_group_arn: self.filter_log_group_arn,
            limit: self.limit,
            next_token: self.next_token,
        })
    }
}
