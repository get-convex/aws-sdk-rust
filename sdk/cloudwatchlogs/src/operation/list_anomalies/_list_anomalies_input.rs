// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAnomaliesInput {
    /// <p>Use this to optionally limit the results to only the anomalies found by a certain anomaly detector.</p>
    pub anomaly_detector_arn: ::std::option::Option<::std::string::String>,
    /// <p>You can specify this parameter if you want to the operation to return only anomalies that are currently either suppressed or unsuppressed.</p>
    pub suppression_state: ::std::option::Option<crate::types::SuppressionState>,
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListAnomaliesInput {
    /// <p>Use this to optionally limit the results to only the anomalies found by a certain anomaly detector.</p>
    pub fn anomaly_detector_arn(&self) -> ::std::option::Option<&str> {
        self.anomaly_detector_arn.as_deref()
    }
    /// <p>You can specify this parameter if you want to the operation to return only anomalies that are currently either suppressed or unsuppressed.</p>
    pub fn suppression_state(&self) -> ::std::option::Option<&crate::types::SuppressionState> {
        self.suppression_state.as_ref()
    }
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListAnomaliesInput {
    /// Creates a new builder-style object to manufacture [`ListAnomaliesInput`](crate::operation::list_anomalies::ListAnomaliesInput).
    pub fn builder() -> crate::operation::list_anomalies::builders::ListAnomaliesInputBuilder {
        crate::operation::list_anomalies::builders::ListAnomaliesInputBuilder::default()
    }
}

/// A builder for [`ListAnomaliesInput`](crate::operation::list_anomalies::ListAnomaliesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAnomaliesInputBuilder {
    pub(crate) anomaly_detector_arn: ::std::option::Option<::std::string::String>,
    pub(crate) suppression_state: ::std::option::Option<crate::types::SuppressionState>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListAnomaliesInputBuilder {
    /// <p>Use this to optionally limit the results to only the anomalies found by a certain anomaly detector.</p>
    pub fn anomaly_detector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.anomaly_detector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Use this to optionally limit the results to only the anomalies found by a certain anomaly detector.</p>
    pub fn set_anomaly_detector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.anomaly_detector_arn = input;
        self
    }
    /// <p>Use this to optionally limit the results to only the anomalies found by a certain anomaly detector.</p>
    pub fn get_anomaly_detector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.anomaly_detector_arn
    }
    /// <p>You can specify this parameter if you want to the operation to return only anomalies that are currently either suppressed or unsuppressed.</p>
    pub fn suppression_state(mut self, input: crate::types::SuppressionState) -> Self {
        self.suppression_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can specify this parameter if you want to the operation to return only anomalies that are currently either suppressed or unsuppressed.</p>
    pub fn set_suppression_state(mut self, input: ::std::option::Option<crate::types::SuppressionState>) -> Self {
        self.suppression_state = input;
        self
    }
    /// <p>You can specify this parameter if you want to the operation to return only anomalies that are currently either suppressed or unsuppressed.</p>
    pub fn get_suppression_state(&self) -> &::std::option::Option<crate::types::SuppressionState> {
        &self.suppression_state
    }
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of items to return. The token expires after 24 hours.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListAnomaliesInput`](crate::operation::list_anomalies::ListAnomaliesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_anomalies::ListAnomaliesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_anomalies::ListAnomaliesInput {
            anomaly_detector_arn: self.anomaly_detector_arn,
            suppression_state: self.suppression_state,
            limit: self.limit,
            next_token: self.next_token,
        })
    }
}
