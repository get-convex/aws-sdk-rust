// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an external access or unused access finding. Only one parameter can be used in a <code>FindingDetails</code> object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum FindingDetails {
    /// <p>The details for an external access analyzer finding.</p>
    ExternalAccessDetails(crate::types::ExternalAccessDetails),
    /// <p>The details for an unused access analyzer finding with an unused IAM role finding type.</p>
    UnusedIamRoleDetails(crate::types::UnusedIamRoleDetails),
    /// <p>The details for an unused access analyzer finding with an unused IAM user access key finding type.</p>
    UnusedIamUserAccessKeyDetails(crate::types::UnusedIamUserAccessKeyDetails),
    /// <p>The details for an unused access analyzer finding with an unused IAM user password finding type.</p>
    UnusedIamUserPasswordDetails(crate::types::UnusedIamUserPasswordDetails),
    /// <p>The details for an unused access analyzer finding with an unused permission finding type.</p>
    UnusedPermissionDetails(crate::types::UnusedPermissionDetails),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FindingDetails {
    /// Tries to convert the enum instance into [`ExternalAccessDetails`](crate::types::FindingDetails::ExternalAccessDetails), extracting the inner [`ExternalAccessDetails`](crate::types::ExternalAccessDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_external_access_details(&self) -> ::std::result::Result<&crate::types::ExternalAccessDetails, &Self> {
        if let FindingDetails::ExternalAccessDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ExternalAccessDetails`](crate::types::FindingDetails::ExternalAccessDetails).
    pub fn is_external_access_details(&self) -> bool {
        self.as_external_access_details().is_ok()
    }
    /// Tries to convert the enum instance into [`UnusedIamRoleDetails`](crate::types::FindingDetails::UnusedIamRoleDetails), extracting the inner [`UnusedIamRoleDetails`](crate::types::UnusedIamRoleDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unused_iam_role_details(&self) -> ::std::result::Result<&crate::types::UnusedIamRoleDetails, &Self> {
        if let FindingDetails::UnusedIamRoleDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnusedIamRoleDetails`](crate::types::FindingDetails::UnusedIamRoleDetails).
    pub fn is_unused_iam_role_details(&self) -> bool {
        self.as_unused_iam_role_details().is_ok()
    }
    /// Tries to convert the enum instance into [`UnusedIamUserAccessKeyDetails`](crate::types::FindingDetails::UnusedIamUserAccessKeyDetails), extracting the inner [`UnusedIamUserAccessKeyDetails`](crate::types::UnusedIamUserAccessKeyDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unused_iam_user_access_key_details(&self) -> ::std::result::Result<&crate::types::UnusedIamUserAccessKeyDetails, &Self> {
        if let FindingDetails::UnusedIamUserAccessKeyDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnusedIamUserAccessKeyDetails`](crate::types::FindingDetails::UnusedIamUserAccessKeyDetails).
    pub fn is_unused_iam_user_access_key_details(&self) -> bool {
        self.as_unused_iam_user_access_key_details().is_ok()
    }
    /// Tries to convert the enum instance into [`UnusedIamUserPasswordDetails`](crate::types::FindingDetails::UnusedIamUserPasswordDetails), extracting the inner [`UnusedIamUserPasswordDetails`](crate::types::UnusedIamUserPasswordDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unused_iam_user_password_details(&self) -> ::std::result::Result<&crate::types::UnusedIamUserPasswordDetails, &Self> {
        if let FindingDetails::UnusedIamUserPasswordDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnusedIamUserPasswordDetails`](crate::types::FindingDetails::UnusedIamUserPasswordDetails).
    pub fn is_unused_iam_user_password_details(&self) -> bool {
        self.as_unused_iam_user_password_details().is_ok()
    }
    /// Tries to convert the enum instance into [`UnusedPermissionDetails`](crate::types::FindingDetails::UnusedPermissionDetails), extracting the inner [`UnusedPermissionDetails`](crate::types::UnusedPermissionDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unused_permission_details(&self) -> ::std::result::Result<&crate::types::UnusedPermissionDetails, &Self> {
        if let FindingDetails::UnusedPermissionDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnusedPermissionDetails`](crate::types::FindingDetails::UnusedPermissionDetails).
    pub fn is_unused_permission_details(&self) -> bool {
        self.as_unused_permission_details().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
