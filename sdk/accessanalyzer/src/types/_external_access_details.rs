// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an external access finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExternalAccessDetails {
    /// <p>The action in the analyzed policy statement that an external principal has permission to use.</p>
    pub action: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The condition in the analyzed policy statement that resulted in an external access finding.</p>
    pub condition: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>Specifies whether the external access finding is public.</p>
    pub is_public: ::std::option::Option<bool>,
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    pub principal: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The sources of the external access finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::FindingSource>>,
}
impl ExternalAccessDetails {
    /// <p>The action in the analyzed policy statement that an external principal has permission to use.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action.is_none()`.
    pub fn action(&self) -> &[::std::string::String] {
        self.action.as_deref().unwrap_or_default()
    }
    /// <p>The condition in the analyzed policy statement that resulted in an external access finding.</p>
    pub fn condition(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.condition
    }
    /// <p>Specifies whether the external access finding is public.</p>
    pub fn is_public(&self) -> ::std::option::Option<bool> {
        self.is_public
    }
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    pub fn principal(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.principal.as_ref()
    }
    /// <p>The sources of the external access finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::FindingSource] {
        self.sources.as_deref().unwrap_or_default()
    }
}
impl ExternalAccessDetails {
    /// Creates a new builder-style object to manufacture [`ExternalAccessDetails`](crate::types::ExternalAccessDetails).
    pub fn builder() -> crate::types::builders::ExternalAccessDetailsBuilder {
        crate::types::builders::ExternalAccessDetailsBuilder::default()
    }
}

/// A builder for [`ExternalAccessDetails`](crate::types::ExternalAccessDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExternalAccessDetailsBuilder {
    pub(crate) action: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) condition: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) is_public: ::std::option::Option<bool>,
    pub(crate) principal: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::FindingSource>>,
}
impl ExternalAccessDetailsBuilder {
    /// Appends an item to `action`.
    ///
    /// To override the contents of this collection use [`set_action`](Self::set_action).
    ///
    /// <p>The action in the analyzed policy statement that an external principal has permission to use.</p>
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.action.unwrap_or_default();
        v.push(input.into());
        self.action = ::std::option::Option::Some(v);
        self
    }
    /// <p>The action in the analyzed policy statement that an external principal has permission to use.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action in the analyzed policy statement that an external principal has permission to use.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.action
    }
    /// Adds a key-value pair to `condition`.
    ///
    /// To override the contents of this collection use [`set_condition`](Self::set_condition).
    ///
    /// <p>The condition in the analyzed policy statement that resulted in an external access finding.</p>
    pub fn condition(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.condition.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.condition = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The condition in the analyzed policy statement that resulted in an external access finding.</p>
    pub fn set_condition(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.condition = input;
        self
    }
    /// <p>The condition in the analyzed policy statement that resulted in an external access finding.</p>
    pub fn get_condition(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.condition
    }
    /// <p>Specifies whether the external access finding is public.</p>
    pub fn is_public(mut self, input: bool) -> Self {
        self.is_public = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the external access finding is public.</p>
    pub fn set_is_public(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_public = input;
        self
    }
    /// <p>Specifies whether the external access finding is public.</p>
    pub fn get_is_public(&self) -> &::std::option::Option<bool> {
        &self.is_public
    }
    /// Adds a key-value pair to `principal`.
    ///
    /// To override the contents of this collection use [`set_principal`](Self::set_principal).
    ///
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    pub fn principal(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.principal.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.principal = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.principal
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The sources of the external access finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    pub fn sources(mut self, input: crate::types::FindingSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The sources of the external access finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FindingSource>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>The sources of the external access finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FindingSource>> {
        &self.sources
    }
    /// Consumes the builder and constructs a [`ExternalAccessDetails`](crate::types::ExternalAccessDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`condition`](crate::types::builders::ExternalAccessDetailsBuilder::condition)
    pub fn build(self) -> ::std::result::Result<crate::types::ExternalAccessDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExternalAccessDetails {
            action: self.action,
            condition: self.condition.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition",
                    "condition was not specified but it is required when building ExternalAccessDetails",
                )
            })?,
            is_public: self.is_public,
            principal: self.principal,
            sources: self.sources,
        })
    }
}
