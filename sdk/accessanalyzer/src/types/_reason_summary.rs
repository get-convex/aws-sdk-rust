// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the reasoning why a check for access passed or failed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReasonSummary {
    /// <p>A description of the reasoning of a result of checking for access.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The index number of the reason statement.</p>
    pub statement_index: ::std::option::Option<i32>,
    /// <p>The identifier for the reason statement.</p>
    pub statement_id: ::std::option::Option<::std::string::String>,
}
impl ReasonSummary {
    /// <p>A description of the reasoning of a result of checking for access.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The index number of the reason statement.</p>
    pub fn statement_index(&self) -> ::std::option::Option<i32> {
        self.statement_index
    }
    /// <p>The identifier for the reason statement.</p>
    pub fn statement_id(&self) -> ::std::option::Option<&str> {
        self.statement_id.as_deref()
    }
}
impl ReasonSummary {
    /// Creates a new builder-style object to manufacture [`ReasonSummary`](crate::types::ReasonSummary).
    pub fn builder() -> crate::types::builders::ReasonSummaryBuilder {
        crate::types::builders::ReasonSummaryBuilder::default()
    }
}

/// A builder for [`ReasonSummary`](crate::types::ReasonSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReasonSummaryBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) statement_index: ::std::option::Option<i32>,
    pub(crate) statement_id: ::std::option::Option<::std::string::String>,
}
impl ReasonSummaryBuilder {
    /// <p>A description of the reasoning of a result of checking for access.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the reasoning of a result of checking for access.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the reasoning of a result of checking for access.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The index number of the reason statement.</p>
    pub fn statement_index(mut self, input: i32) -> Self {
        self.statement_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index number of the reason statement.</p>
    pub fn set_statement_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.statement_index = input;
        self
    }
    /// <p>The index number of the reason statement.</p>
    pub fn get_statement_index(&self) -> &::std::option::Option<i32> {
        &self.statement_index
    }
    /// <p>The identifier for the reason statement.</p>
    pub fn statement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the reason statement.</p>
    pub fn set_statement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement_id = input;
        self
    }
    /// <p>The identifier for the reason statement.</p>
    pub fn get_statement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement_id
    }
    /// Consumes the builder and constructs a [`ReasonSummary`](crate::types::ReasonSummary).
    pub fn build(self) -> crate::types::ReasonSummary {
        crate::types::ReasonSummary {
            description: self.description,
            statement_index: self.statement_index,
            statement_id: self.statement_id,
        }
    }
}
