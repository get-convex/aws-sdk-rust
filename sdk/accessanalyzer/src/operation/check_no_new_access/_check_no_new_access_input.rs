// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CheckNoNewAccessInput {
    /// <p>The JSON policy document to use as the content for the updated policy.</p>
    pub new_policy_document: ::std::option::Option<::std::string::String>,
    /// <p>The JSON policy document to use as the content for the existing policy.</p>
    pub existing_policy_document: ::std::option::Option<::std::string::String>,
    /// <p>The type of policy to compare. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups.</p>
    /// <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy.</p>
    pub policy_type: ::std::option::Option<crate::types::AccessCheckPolicyType>,
}
impl CheckNoNewAccessInput {
    /// <p>The JSON policy document to use as the content for the updated policy.</p>
    pub fn new_policy_document(&self) -> ::std::option::Option<&str> {
        self.new_policy_document.as_deref()
    }
    /// <p>The JSON policy document to use as the content for the existing policy.</p>
    pub fn existing_policy_document(&self) -> ::std::option::Option<&str> {
        self.existing_policy_document.as_deref()
    }
    /// <p>The type of policy to compare. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups.</p>
    /// <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy.</p>
    pub fn policy_type(&self) -> ::std::option::Option<&crate::types::AccessCheckPolicyType> {
        self.policy_type.as_ref()
    }
}
impl ::std::fmt::Debug for CheckNoNewAccessInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CheckNoNewAccessInput");
        formatter.field("new_policy_document", &"*** Sensitive Data Redacted ***");
        formatter.field("existing_policy_document", &"*** Sensitive Data Redacted ***");
        formatter.field("policy_type", &self.policy_type);
        formatter.finish()
    }
}
impl CheckNoNewAccessInput {
    /// Creates a new builder-style object to manufacture [`CheckNoNewAccessInput`](crate::operation::check_no_new_access::CheckNoNewAccessInput).
    pub fn builder() -> crate::operation::check_no_new_access::builders::CheckNoNewAccessInputBuilder {
        crate::operation::check_no_new_access::builders::CheckNoNewAccessInputBuilder::default()
    }
}

/// A builder for [`CheckNoNewAccessInput`](crate::operation::check_no_new_access::CheckNoNewAccessInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CheckNoNewAccessInputBuilder {
    pub(crate) new_policy_document: ::std::option::Option<::std::string::String>,
    pub(crate) existing_policy_document: ::std::option::Option<::std::string::String>,
    pub(crate) policy_type: ::std::option::Option<crate::types::AccessCheckPolicyType>,
}
impl CheckNoNewAccessInputBuilder {
    /// <p>The JSON policy document to use as the content for the updated policy.</p>
    /// This field is required.
    pub fn new_policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON policy document to use as the content for the updated policy.</p>
    pub fn set_new_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_policy_document = input;
        self
    }
    /// <p>The JSON policy document to use as the content for the updated policy.</p>
    pub fn get_new_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_policy_document
    }
    /// <p>The JSON policy document to use as the content for the existing policy.</p>
    /// This field is required.
    pub fn existing_policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.existing_policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON policy document to use as the content for the existing policy.</p>
    pub fn set_existing_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.existing_policy_document = input;
        self
    }
    /// <p>The JSON policy document to use as the content for the existing policy.</p>
    pub fn get_existing_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.existing_policy_document
    }
    /// <p>The type of policy to compare. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups.</p>
    /// <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy.</p>
    /// This field is required.
    pub fn policy_type(mut self, input: crate::types::AccessCheckPolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of policy to compare. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups.</p>
    /// <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::AccessCheckPolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The type of policy to compare. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups.</p>
    /// <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::AccessCheckPolicyType> {
        &self.policy_type
    }
    /// Consumes the builder and constructs a [`CheckNoNewAccessInput`](crate::operation::check_no_new_access::CheckNoNewAccessInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::check_no_new_access::CheckNoNewAccessInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::check_no_new_access::CheckNoNewAccessInput {
            new_policy_document: self.new_policy_document,
            existing_policy_document: self.existing_policy_document,
            policy_type: self.policy_type,
        })
    }
}
impl ::std::fmt::Debug for CheckNoNewAccessInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CheckNoNewAccessInputBuilder");
        formatter.field("new_policy_document", &"*** Sensitive Data Redacted ***");
        formatter.field("existing_policy_document", &"*** Sensitive Data Redacted ***");
        formatter.field("policy_type", &self.policy_type);
        formatter.finish()
    }
}
