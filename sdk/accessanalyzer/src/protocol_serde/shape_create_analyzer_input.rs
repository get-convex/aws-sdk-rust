// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_analyzer_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_analyzer::CreateAnalyzerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.analyzer_name {
        object.key("analyzerName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.archive_rules {
        let mut array_3 = object.key("archiveRules").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_inline_archive_rule::ser_inline_archive_rule(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.client_token {
        object.key("clientToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("configuration").start_object();
        crate::protocol_serde::shape_analyzer_configuration::ser_analyzer_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.r#type {
        object.key("type").string(var_13.as_str());
    }
    Ok(())
}
