// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_checks_output_output_next_token(
    input: &crate::operation::list_checks::ListChecksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_organization_recommendation_accounts_output_output_next_token(
    input: &crate::operation::list_organization_recommendation_accounts::ListOrganizationRecommendationAccountsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_organization_recommendation_resources_output_output_next_token(
    input: &crate::operation::list_organization_recommendation_resources::ListOrganizationRecommendationResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_organization_recommendations_output_output_next_token(
    input: &crate::operation::list_organization_recommendations::ListOrganizationRecommendationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_recommendation_resources_output_output_next_token(
    input: &crate::operation::list_recommendation_resources::ListRecommendationResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_recommendations_output_output_next_token(
    input: &crate::operation::list_recommendations::ListRecommendationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_checks_output_output_check_summaries(
    input: crate::operation::list_checks::ListChecksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CheckSummary>> {
    let input = input.check_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_organization_recommendation_accounts_output_output_account_recommendation_lifecycle_summaries(
    input: crate::operation::list_organization_recommendation_accounts::ListOrganizationRecommendationAccountsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AccountRecommendationLifecycleSummary>> {
    let input = input.account_recommendation_lifecycle_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_organization_recommendation_resources_output_output_organization_recommendation_resource_summaries(
    input: crate::operation::list_organization_recommendation_resources::ListOrganizationRecommendationResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OrganizationRecommendationResourceSummary>> {
    let input = input.organization_recommendation_resource_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_organization_recommendations_output_output_organization_recommendation_summaries(
    input: crate::operation::list_organization_recommendations::ListOrganizationRecommendationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OrganizationRecommendationSummary>> {
    let input = input.organization_recommendation_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_recommendation_resources_output_output_recommendation_resource_summaries(
    input: crate::operation::list_recommendation_resources::ListRecommendationResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RecommendationResourceSummary>> {
    let input = input.recommendation_resource_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_recommendations_output_output_recommendation_summaries(
    input: crate::operation::list_recommendations::ListRecommendationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RecommendationSummary>> {
    let input = input.recommendation_summaries;
    ::std::option::Option::Some(input)
}
