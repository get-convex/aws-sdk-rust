// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListOrganizationRecommendationsInput {
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The type of the Recommendation</p>
    pub r#type: ::std::option::Option<crate::types::RecommendationType>,
    /// <p>The status of the Recommendation</p>
    pub status: ::std::option::Option<crate::types::RecommendationStatus>,
    /// <p>The pillar of the Recommendation</p>
    pub pillar: ::std::option::Option<crate::types::RecommendationPillar>,
    /// <p>The aws service associated with the Recommendation</p>
    pub aws_service: ::std::option::Option<::std::string::String>,
    /// <p>The source of the Recommendation</p>
    pub source: ::std::option::Option<crate::types::RecommendationSource>,
    /// <p>The check identifier of the Recommendation</p>
    pub check_identifier: ::std::option::Option<::std::string::String>,
    /// <p>After the last update of the Recommendation</p>
    pub after_last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Before the last update of the Recommendation</p>
    pub before_last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListOrganizationRecommendationsInput {
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The type of the Recommendation</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RecommendationType> {
        self.r#type.as_ref()
    }
    /// <p>The status of the Recommendation</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RecommendationStatus> {
        self.status.as_ref()
    }
    /// <p>The pillar of the Recommendation</p>
    pub fn pillar(&self) -> ::std::option::Option<&crate::types::RecommendationPillar> {
        self.pillar.as_ref()
    }
    /// <p>The aws service associated with the Recommendation</p>
    pub fn aws_service(&self) -> ::std::option::Option<&str> {
        self.aws_service.as_deref()
    }
    /// <p>The source of the Recommendation</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::RecommendationSource> {
        self.source.as_ref()
    }
    /// <p>The check identifier of the Recommendation</p>
    pub fn check_identifier(&self) -> ::std::option::Option<&str> {
        self.check_identifier.as_deref()
    }
    /// <p>After the last update of the Recommendation</p>
    pub fn after_last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.after_last_updated_at.as_ref()
    }
    /// <p>Before the last update of the Recommendation</p>
    pub fn before_last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.before_last_updated_at.as_ref()
    }
}
impl ListOrganizationRecommendationsInput {
    /// Creates a new builder-style object to manufacture [`ListOrganizationRecommendationsInput`](crate::operation::list_organization_recommendations::ListOrganizationRecommendationsInput).
    pub fn builder() -> crate::operation::list_organization_recommendations::builders::ListOrganizationRecommendationsInputBuilder {
        crate::operation::list_organization_recommendations::builders::ListOrganizationRecommendationsInputBuilder::default()
    }
}

/// A builder for [`ListOrganizationRecommendationsInput`](crate::operation::list_organization_recommendations::ListOrganizationRecommendationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListOrganizationRecommendationsInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) r#type: ::std::option::Option<crate::types::RecommendationType>,
    pub(crate) status: ::std::option::Option<crate::types::RecommendationStatus>,
    pub(crate) pillar: ::std::option::Option<crate::types::RecommendationPillar>,
    pub(crate) aws_service: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::RecommendationSource>,
    pub(crate) check_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) after_last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) before_last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListOrganizationRecommendationsInputBuilder {
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The type of the Recommendation</p>
    pub fn r#type(mut self, input: crate::types::RecommendationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the Recommendation</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RecommendationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the Recommendation</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RecommendationType> {
        &self.r#type
    }
    /// <p>The status of the Recommendation</p>
    pub fn status(mut self, input: crate::types::RecommendationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Recommendation</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RecommendationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Recommendation</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RecommendationStatus> {
        &self.status
    }
    /// <p>The pillar of the Recommendation</p>
    pub fn pillar(mut self, input: crate::types::RecommendationPillar) -> Self {
        self.pillar = ::std::option::Option::Some(input);
        self
    }
    /// <p>The pillar of the Recommendation</p>
    pub fn set_pillar(mut self, input: ::std::option::Option<crate::types::RecommendationPillar>) -> Self {
        self.pillar = input;
        self
    }
    /// <p>The pillar of the Recommendation</p>
    pub fn get_pillar(&self) -> &::std::option::Option<crate::types::RecommendationPillar> {
        &self.pillar
    }
    /// <p>The aws service associated with the Recommendation</p>
    pub fn aws_service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The aws service associated with the Recommendation</p>
    pub fn set_aws_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_service = input;
        self
    }
    /// <p>The aws service associated with the Recommendation</p>
    pub fn get_aws_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_service
    }
    /// <p>The source of the Recommendation</p>
    pub fn source(mut self, input: crate::types::RecommendationSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the Recommendation</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::RecommendationSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the Recommendation</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::RecommendationSource> {
        &self.source
    }
    /// <p>The check identifier of the Recommendation</p>
    pub fn check_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.check_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The check identifier of the Recommendation</p>
    pub fn set_check_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.check_identifier = input;
        self
    }
    /// <p>The check identifier of the Recommendation</p>
    pub fn get_check_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.check_identifier
    }
    /// <p>After the last update of the Recommendation</p>
    pub fn after_last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.after_last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>After the last update of the Recommendation</p>
    pub fn set_after_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.after_last_updated_at = input;
        self
    }
    /// <p>After the last update of the Recommendation</p>
    pub fn get_after_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.after_last_updated_at
    }
    /// <p>Before the last update of the Recommendation</p>
    pub fn before_last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.before_last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Before the last update of the Recommendation</p>
    pub fn set_before_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.before_last_updated_at = input;
        self
    }
    /// <p>Before the last update of the Recommendation</p>
    pub fn get_before_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.before_last_updated_at
    }
    /// Consumes the builder and constructs a [`ListOrganizationRecommendationsInput`](crate::operation::list_organization_recommendations::ListOrganizationRecommendationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_organization_recommendations::ListOrganizationRecommendationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_organization_recommendations::ListOrganizationRecommendationsInput {
                next_token: self.next_token,
                max_results: self.max_results,
                r#type: self.r#type,
                status: self.status,
                pillar: self.pillar,
                aws_service: self.aws_service,
                source: self.source,
                check_identifier: self.check_identifier,
                after_last_updated_at: self.after_last_updated_at,
                before_last_updated_at: self.before_last_updated_at,
            },
        )
    }
}
