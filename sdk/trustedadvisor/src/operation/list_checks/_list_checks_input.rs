// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListChecksInput {
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pillar of the check</p>
    pub pillar: ::std::option::Option<crate::types::RecommendationPillar>,
    /// <p>The aws service associated with the check</p>
    pub aws_service: ::std::option::Option<::std::string::String>,
    /// <p>The source of the check</p>
    pub source: ::std::option::Option<crate::types::RecommendationSource>,
    /// <p>The ISO 639-1 code for the language that you want your checks to appear in.</p>
    pub language: ::std::option::Option<crate::types::RecommendationLanguage>,
}
impl ListChecksInput {
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pillar of the check</p>
    pub fn pillar(&self) -> ::std::option::Option<&crate::types::RecommendationPillar> {
        self.pillar.as_ref()
    }
    /// <p>The aws service associated with the check</p>
    pub fn aws_service(&self) -> ::std::option::Option<&str> {
        self.aws_service.as_deref()
    }
    /// <p>The source of the check</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::RecommendationSource> {
        self.source.as_ref()
    }
    /// <p>The ISO 639-1 code for the language that you want your checks to appear in.</p>
    pub fn language(&self) -> ::std::option::Option<&crate::types::RecommendationLanguage> {
        self.language.as_ref()
    }
}
impl ListChecksInput {
    /// Creates a new builder-style object to manufacture [`ListChecksInput`](crate::operation::list_checks::ListChecksInput).
    pub fn builder() -> crate::operation::list_checks::builders::ListChecksInputBuilder {
        crate::operation::list_checks::builders::ListChecksInputBuilder::default()
    }
}

/// A builder for [`ListChecksInput`](crate::operation::list_checks::ListChecksInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListChecksInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) pillar: ::std::option::Option<crate::types::RecommendationPillar>,
    pub(crate) aws_service: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::RecommendationSource>,
    pub(crate) language: ::std::option::Option<crate::types::RecommendationLanguage>,
}
impl ListChecksInputBuilder {
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pillar of the check</p>
    pub fn pillar(mut self, input: crate::types::RecommendationPillar) -> Self {
        self.pillar = ::std::option::Option::Some(input);
        self
    }
    /// <p>The pillar of the check</p>
    pub fn set_pillar(mut self, input: ::std::option::Option<crate::types::RecommendationPillar>) -> Self {
        self.pillar = input;
        self
    }
    /// <p>The pillar of the check</p>
    pub fn get_pillar(&self) -> &::std::option::Option<crate::types::RecommendationPillar> {
        &self.pillar
    }
    /// <p>The aws service associated with the check</p>
    pub fn aws_service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The aws service associated with the check</p>
    pub fn set_aws_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_service = input;
        self
    }
    /// <p>The aws service associated with the check</p>
    pub fn get_aws_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_service
    }
    /// <p>The source of the check</p>
    pub fn source(mut self, input: crate::types::RecommendationSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the check</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::RecommendationSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the check</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::RecommendationSource> {
        &self.source
    }
    /// <p>The ISO 639-1 code for the language that you want your checks to appear in.</p>
    pub fn language(mut self, input: crate::types::RecommendationLanguage) -> Self {
        self.language = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ISO 639-1 code for the language that you want your checks to appear in.</p>
    pub fn set_language(mut self, input: ::std::option::Option<crate::types::RecommendationLanguage>) -> Self {
        self.language = input;
        self
    }
    /// <p>The ISO 639-1 code for the language that you want your checks to appear in.</p>
    pub fn get_language(&self) -> &::std::option::Option<crate::types::RecommendationLanguage> {
        &self.language
    }
    /// Consumes the builder and constructs a [`ListChecksInput`](crate::operation::list_checks::ListChecksInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_checks::ListChecksInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_checks::ListChecksInput {
            next_token: self.next_token,
            max_results: self.max_results,
            pillar: self.pillar,
            aws_service: self.aws_service,
            source: self.source,
            language: self.language,
        })
    }
}
