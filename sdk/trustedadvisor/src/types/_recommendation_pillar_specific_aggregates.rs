// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Recommendation pillar aggregates</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendationPillarSpecificAggregates {
    /// <p>Cost optimizing aggregates</p>
    pub cost_optimizing: ::std::option::Option<crate::types::RecommendationCostOptimizingAggregates>,
}
impl RecommendationPillarSpecificAggregates {
    /// <p>Cost optimizing aggregates</p>
    pub fn cost_optimizing(&self) -> ::std::option::Option<&crate::types::RecommendationCostOptimizingAggregates> {
        self.cost_optimizing.as_ref()
    }
}
impl RecommendationPillarSpecificAggregates {
    /// Creates a new builder-style object to manufacture [`RecommendationPillarSpecificAggregates`](crate::types::RecommendationPillarSpecificAggregates).
    pub fn builder() -> crate::types::builders::RecommendationPillarSpecificAggregatesBuilder {
        crate::types::builders::RecommendationPillarSpecificAggregatesBuilder::default()
    }
}

/// A builder for [`RecommendationPillarSpecificAggregates`](crate::types::RecommendationPillarSpecificAggregates).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationPillarSpecificAggregatesBuilder {
    pub(crate) cost_optimizing: ::std::option::Option<crate::types::RecommendationCostOptimizingAggregates>,
}
impl RecommendationPillarSpecificAggregatesBuilder {
    /// <p>Cost optimizing aggregates</p>
    pub fn cost_optimizing(mut self, input: crate::types::RecommendationCostOptimizingAggregates) -> Self {
        self.cost_optimizing = ::std::option::Option::Some(input);
        self
    }
    /// <p>Cost optimizing aggregates</p>
    pub fn set_cost_optimizing(mut self, input: ::std::option::Option<crate::types::RecommendationCostOptimizingAggregates>) -> Self {
        self.cost_optimizing = input;
        self
    }
    /// <p>Cost optimizing aggregates</p>
    pub fn get_cost_optimizing(&self) -> &::std::option::Option<crate::types::RecommendationCostOptimizingAggregates> {
        &self.cost_optimizing
    }
    /// Consumes the builder and constructs a [`RecommendationPillarSpecificAggregates`](crate::types::RecommendationPillarSpecificAggregates).
    pub fn build(self) -> crate::types::RecommendationPillarSpecificAggregates {
        crate::types::RecommendationPillarSpecificAggregates {
            cost_optimizing: self.cost_optimizing,
        }
    }
}
