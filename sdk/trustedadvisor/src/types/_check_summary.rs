// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of an AWS Trusted Advisor Check</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CheckSummary {
    /// <p>The unique identifier of the AWS Trusted Advisor Check</p>
    pub id: ::std::string::String,
    /// <p>The ARN of the AWS Trusted Advisor Check</p>
    pub arn: ::std::string::String,
    /// <p>The name of the AWS Trusted Advisor Check</p>
    pub name: ::std::string::String,
    /// <p>A description of what the AWS Trusted Advisor Check is monitoring</p>
    pub description: ::std::string::String,
    /// <p>The Recommendation pillars that the AWS Trusted Advisor Check falls under</p>
    pub pillars: ::std::vec::Vec<crate::types::RecommendationPillar>,
    /// <p>The AWS Services that the Check applies to</p>
    pub aws_services: ::std::vec::Vec<::std::string::String>,
    /// <p>The source of the Recommendation</p>
    pub source: crate::types::RecommendationSource,
    /// <p>The column headings for the metadata returned in the resource</p>
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl CheckSummary {
    /// <p>The unique identifier of the AWS Trusted Advisor Check</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ARN of the AWS Trusted Advisor Check</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the AWS Trusted Advisor Check</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A description of what the AWS Trusted Advisor Check is monitoring</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The Recommendation pillars that the AWS Trusted Advisor Check falls under</p>
    pub fn pillars(&self) -> &[crate::types::RecommendationPillar] {
        use std::ops::Deref;
        self.pillars.deref()
    }
    /// <p>The AWS Services that the Check applies to</p>
    pub fn aws_services(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.aws_services.deref()
    }
    /// <p>The source of the Recommendation</p>
    pub fn source(&self) -> &crate::types::RecommendationSource {
        &self.source
    }
    /// <p>The column headings for the metadata returned in the resource</p>
    pub fn metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
}
impl CheckSummary {
    /// Creates a new builder-style object to manufacture [`CheckSummary`](crate::types::CheckSummary).
    pub fn builder() -> crate::types::builders::CheckSummaryBuilder {
        crate::types::builders::CheckSummaryBuilder::default()
    }
}

/// A builder for [`CheckSummary`](crate::types::CheckSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CheckSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) pillars: ::std::option::Option<::std::vec::Vec<crate::types::RecommendationPillar>>,
    pub(crate) aws_services: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) source: ::std::option::Option<crate::types::RecommendationSource>,
    pub(crate) metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CheckSummaryBuilder {
    /// <p>The unique identifier of the AWS Trusted Advisor Check</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the AWS Trusted Advisor Check</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the AWS Trusted Advisor Check</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the AWS Trusted Advisor Check</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the AWS Trusted Advisor Check</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the AWS Trusted Advisor Check</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the AWS Trusted Advisor Check</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the AWS Trusted Advisor Check</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the AWS Trusted Advisor Check</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of what the AWS Trusted Advisor Check is monitoring</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of what the AWS Trusted Advisor Check is monitoring</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of what the AWS Trusted Advisor Check is monitoring</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `pillars`.
    ///
    /// To override the contents of this collection use [`set_pillars`](Self::set_pillars).
    ///
    /// <p>The Recommendation pillars that the AWS Trusted Advisor Check falls under</p>
    pub fn pillars(mut self, input: crate::types::RecommendationPillar) -> Self {
        let mut v = self.pillars.unwrap_or_default();
        v.push(input);
        self.pillars = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Recommendation pillars that the AWS Trusted Advisor Check falls under</p>
    pub fn set_pillars(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RecommendationPillar>>) -> Self {
        self.pillars = input;
        self
    }
    /// <p>The Recommendation pillars that the AWS Trusted Advisor Check falls under</p>
    pub fn get_pillars(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RecommendationPillar>> {
        &self.pillars
    }
    /// Appends an item to `aws_services`.
    ///
    /// To override the contents of this collection use [`set_aws_services`](Self::set_aws_services).
    ///
    /// <p>The AWS Services that the Check applies to</p>
    pub fn aws_services(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aws_services.unwrap_or_default();
        v.push(input.into());
        self.aws_services = ::std::option::Option::Some(v);
        self
    }
    /// <p>The AWS Services that the Check applies to</p>
    pub fn set_aws_services(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aws_services = input;
        self
    }
    /// <p>The AWS Services that the Check applies to</p>
    pub fn get_aws_services(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aws_services
    }
    /// <p>The source of the Recommendation</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::RecommendationSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the Recommendation</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::RecommendationSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the Recommendation</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::RecommendationSource> {
        &self.source
    }
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>The column headings for the metadata returned in the resource</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The column headings for the metadata returned in the resource</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The column headings for the metadata returned in the resource</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`CheckSummary`](crate::types::CheckSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CheckSummaryBuilder::id)
    /// - [`arn`](crate::types::builders::CheckSummaryBuilder::arn)
    /// - [`name`](crate::types::builders::CheckSummaryBuilder::name)
    /// - [`description`](crate::types::builders::CheckSummaryBuilder::description)
    /// - [`pillars`](crate::types::builders::CheckSummaryBuilder::pillars)
    /// - [`aws_services`](crate::types::builders::CheckSummaryBuilder::aws_services)
    /// - [`source`](crate::types::builders::CheckSummaryBuilder::source)
    /// - [`metadata`](crate::types::builders::CheckSummaryBuilder::metadata)
    pub fn build(self) -> ::std::result::Result<crate::types::CheckSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CheckSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CheckSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building CheckSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CheckSummary",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building CheckSummary",
                )
            })?,
            pillars: self.pillars.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pillars",
                    "pillars was not specified but it is required when building CheckSummary",
                )
            })?,
            aws_services: self.aws_services.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aws_services",
                    "aws_services was not specified but it is required when building CheckSummary",
                )
            })?,
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building CheckSummary",
                )
            })?,
            metadata: self.metadata.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metadata",
                    "metadata was not specified but it is required when building CheckSummary",
                )
            })?,
        })
    }
}
