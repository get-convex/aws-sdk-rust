// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary of an AccountRecommendationLifecycle for an Organization Recommendation</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccountRecommendationLifecycleSummary {
    /// <p>The AWS account ID</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Recommendation ARN</p>
    pub account_recommendation_arn: ::std::option::Option<::std::string::String>,
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub lifecycle_stage: ::std::option::Option<crate::types::RecommendationLifecycleStage>,
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub updated_on_behalf_of: ::std::option::Option<::std::string::String>,
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub updated_on_behalf_of_job_title: ::std::option::Option<::std::string::String>,
    /// <p>Reason for the lifecycle stage change</p>
    pub update_reason: ::std::option::Option<::std::string::String>,
    /// <p>Reason code for the lifecycle state change</p>
    pub update_reason_code: ::std::option::Option<crate::types::UpdateRecommendationLifecycleStageReasonCode>,
    /// <p>When the Recommendation was last updated</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AccountRecommendationLifecycleSummary {
    /// <p>The AWS account ID</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The Recommendation ARN</p>
    pub fn account_recommendation_arn(&self) -> ::std::option::Option<&str> {
        self.account_recommendation_arn.as_deref()
    }
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub fn lifecycle_stage(&self) -> ::std::option::Option<&crate::types::RecommendationLifecycleStage> {
        self.lifecycle_stage.as_ref()
    }
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn updated_on_behalf_of(&self) -> ::std::option::Option<&str> {
        self.updated_on_behalf_of.as_deref()
    }
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn updated_on_behalf_of_job_title(&self) -> ::std::option::Option<&str> {
        self.updated_on_behalf_of_job_title.as_deref()
    }
    /// <p>Reason for the lifecycle stage change</p>
    pub fn update_reason(&self) -> ::std::option::Option<&str> {
        self.update_reason.as_deref()
    }
    /// <p>Reason code for the lifecycle state change</p>
    pub fn update_reason_code(&self) -> ::std::option::Option<&crate::types::UpdateRecommendationLifecycleStageReasonCode> {
        self.update_reason_code.as_ref()
    }
    /// <p>When the Recommendation was last updated</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for AccountRecommendationLifecycleSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountRecommendationLifecycleSummary");
        formatter.field("account_id", &self.account_id);
        formatter.field("account_recommendation_arn", &self.account_recommendation_arn);
        formatter.field("lifecycle_stage", &self.lifecycle_stage);
        formatter.field("updated_on_behalf_of", &self.updated_on_behalf_of);
        formatter.field("updated_on_behalf_of_job_title", &self.updated_on_behalf_of_job_title);
        formatter.field("update_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("update_reason_code", &self.update_reason_code);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.finish()
    }
}
impl AccountRecommendationLifecycleSummary {
    /// Creates a new builder-style object to manufacture [`AccountRecommendationLifecycleSummary`](crate::types::AccountRecommendationLifecycleSummary).
    pub fn builder() -> crate::types::builders::AccountRecommendationLifecycleSummaryBuilder {
        crate::types::builders::AccountRecommendationLifecycleSummaryBuilder::default()
    }
}

/// A builder for [`AccountRecommendationLifecycleSummary`](crate::types::AccountRecommendationLifecycleSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AccountRecommendationLifecycleSummaryBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_recommendation_arn: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle_stage: ::std::option::Option<crate::types::RecommendationLifecycleStage>,
    pub(crate) updated_on_behalf_of: ::std::option::Option<::std::string::String>,
    pub(crate) updated_on_behalf_of_job_title: ::std::option::Option<::std::string::String>,
    pub(crate) update_reason: ::std::option::Option<::std::string::String>,
    pub(crate) update_reason_code: ::std::option::Option<crate::types::UpdateRecommendationLifecycleStageReasonCode>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AccountRecommendationLifecycleSummaryBuilder {
    /// <p>The AWS account ID</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The AWS account ID</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The Recommendation ARN</p>
    pub fn account_recommendation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_recommendation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Recommendation ARN</p>
    pub fn set_account_recommendation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_recommendation_arn = input;
        self
    }
    /// <p>The Recommendation ARN</p>
    pub fn get_account_recommendation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_recommendation_arn
    }
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub fn lifecycle_stage(mut self, input: crate::types::RecommendationLifecycleStage) -> Self {
        self.lifecycle_stage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub fn set_lifecycle_stage(mut self, input: ::std::option::Option<crate::types::RecommendationLifecycleStage>) -> Self {
        self.lifecycle_stage = input;
        self
    }
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub fn get_lifecycle_stage(&self) -> &::std::option::Option<crate::types::RecommendationLifecycleStage> {
        &self.lifecycle_stage
    }
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn updated_on_behalf_of(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_on_behalf_of = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn set_updated_on_behalf_of(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_on_behalf_of = input;
        self
    }
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn get_updated_on_behalf_of(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_on_behalf_of
    }
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn updated_on_behalf_of_job_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_on_behalf_of_job_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn set_updated_on_behalf_of_job_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_on_behalf_of_job_title = input;
        self
    }
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn get_updated_on_behalf_of_job_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_on_behalf_of_job_title
    }
    /// <p>Reason for the lifecycle stage change</p>
    pub fn update_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.update_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reason for the lifecycle stage change</p>
    pub fn set_update_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.update_reason = input;
        self
    }
    /// <p>Reason for the lifecycle stage change</p>
    pub fn get_update_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.update_reason
    }
    /// <p>Reason code for the lifecycle state change</p>
    pub fn update_reason_code(mut self, input: crate::types::UpdateRecommendationLifecycleStageReasonCode) -> Self {
        self.update_reason_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reason code for the lifecycle state change</p>
    pub fn set_update_reason_code(mut self, input: ::std::option::Option<crate::types::UpdateRecommendationLifecycleStageReasonCode>) -> Self {
        self.update_reason_code = input;
        self
    }
    /// <p>Reason code for the lifecycle state change</p>
    pub fn get_update_reason_code(&self) -> &::std::option::Option<crate::types::UpdateRecommendationLifecycleStageReasonCode> {
        &self.update_reason_code
    }
    /// <p>When the Recommendation was last updated</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the Recommendation was last updated</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>When the Recommendation was last updated</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Consumes the builder and constructs a [`AccountRecommendationLifecycleSummary`](crate::types::AccountRecommendationLifecycleSummary).
    pub fn build(self) -> crate::types::AccountRecommendationLifecycleSummary {
        crate::types::AccountRecommendationLifecycleSummary {
            account_id: self.account_id,
            account_recommendation_arn: self.account_recommendation_arn,
            lifecycle_stage: self.lifecycle_stage,
            updated_on_behalf_of: self.updated_on_behalf_of,
            updated_on_behalf_of_job_title: self.updated_on_behalf_of_job_title,
            update_reason: self.update_reason,
            update_reason_code: self.update_reason_code,
            last_updated_at: self.last_updated_at,
        }
    }
}
impl ::std::fmt::Debug for AccountRecommendationLifecycleSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountRecommendationLifecycleSummaryBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("account_recommendation_arn", &self.account_recommendation_arn);
        formatter.field("lifecycle_stage", &self.lifecycle_stage);
        formatter.field("updated_on_behalf_of", &self.updated_on_behalf_of);
        formatter.field("updated_on_behalf_of_job_title", &self.updated_on_behalf_of_job_title);
        formatter.field("update_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("update_reason_code", &self.update_reason_code);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.finish()
    }
}
