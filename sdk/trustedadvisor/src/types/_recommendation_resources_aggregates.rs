// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Aggregation of Recommendation Resources</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendationResourcesAggregates {
    /// <p>The number of AWS resources that were flagged to be OK according to the Trusted Advisor check</p>
    pub ok_count: i64,
    /// <p>The number of AWS resources that were flagged to have warning according to the Trusted Advisor check</p>
    pub warning_count: i64,
    /// <p>The number of AWS resources that were flagged to have errors according to the Trusted Advisor check</p>
    pub error_count: i64,
}
impl RecommendationResourcesAggregates {
    /// <p>The number of AWS resources that were flagged to be OK according to the Trusted Advisor check</p>
    pub fn ok_count(&self) -> i64 {
        self.ok_count
    }
    /// <p>The number of AWS resources that were flagged to have warning according to the Trusted Advisor check</p>
    pub fn warning_count(&self) -> i64 {
        self.warning_count
    }
    /// <p>The number of AWS resources that were flagged to have errors according to the Trusted Advisor check</p>
    pub fn error_count(&self) -> i64 {
        self.error_count
    }
}
impl RecommendationResourcesAggregates {
    /// Creates a new builder-style object to manufacture [`RecommendationResourcesAggregates`](crate::types::RecommendationResourcesAggregates).
    pub fn builder() -> crate::types::builders::RecommendationResourcesAggregatesBuilder {
        crate::types::builders::RecommendationResourcesAggregatesBuilder::default()
    }
}

/// A builder for [`RecommendationResourcesAggregates`](crate::types::RecommendationResourcesAggregates).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationResourcesAggregatesBuilder {
    pub(crate) ok_count: ::std::option::Option<i64>,
    pub(crate) warning_count: ::std::option::Option<i64>,
    pub(crate) error_count: ::std::option::Option<i64>,
}
impl RecommendationResourcesAggregatesBuilder {
    /// <p>The number of AWS resources that were flagged to be OK according to the Trusted Advisor check</p>
    /// This field is required.
    pub fn ok_count(mut self, input: i64) -> Self {
        self.ok_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of AWS resources that were flagged to be OK according to the Trusted Advisor check</p>
    pub fn set_ok_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.ok_count = input;
        self
    }
    /// <p>The number of AWS resources that were flagged to be OK according to the Trusted Advisor check</p>
    pub fn get_ok_count(&self) -> &::std::option::Option<i64> {
        &self.ok_count
    }
    /// <p>The number of AWS resources that were flagged to have warning according to the Trusted Advisor check</p>
    /// This field is required.
    pub fn warning_count(mut self, input: i64) -> Self {
        self.warning_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of AWS resources that were flagged to have warning according to the Trusted Advisor check</p>
    pub fn set_warning_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.warning_count = input;
        self
    }
    /// <p>The number of AWS resources that were flagged to have warning according to the Trusted Advisor check</p>
    pub fn get_warning_count(&self) -> &::std::option::Option<i64> {
        &self.warning_count
    }
    /// <p>The number of AWS resources that were flagged to have errors according to the Trusted Advisor check</p>
    /// This field is required.
    pub fn error_count(mut self, input: i64) -> Self {
        self.error_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of AWS resources that were flagged to have errors according to the Trusted Advisor check</p>
    pub fn set_error_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.error_count = input;
        self
    }
    /// <p>The number of AWS resources that were flagged to have errors according to the Trusted Advisor check</p>
    pub fn get_error_count(&self) -> &::std::option::Option<i64> {
        &self.error_count
    }
    /// Consumes the builder and constructs a [`RecommendationResourcesAggregates`](crate::types::RecommendationResourcesAggregates).
    /// This method will fail if any of the following fields are not set:
    /// - [`ok_count`](crate::types::builders::RecommendationResourcesAggregatesBuilder::ok_count)
    /// - [`warning_count`](crate::types::builders::RecommendationResourcesAggregatesBuilder::warning_count)
    /// - [`error_count`](crate::types::builders::RecommendationResourcesAggregatesBuilder::error_count)
    pub fn build(self) -> ::std::result::Result<crate::types::RecommendationResourcesAggregates, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecommendationResourcesAggregates {
            ok_count: self.ok_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ok_count",
                    "ok_count was not specified but it is required when building RecommendationResourcesAggregates",
                )
            })?,
            warning_count: self.warning_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "warning_count",
                    "warning_count was not specified but it is required when building RecommendationResourcesAggregates",
                )
            })?,
            error_count: self.error_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_count",
                    "error_count was not specified but it is required when building RecommendationResourcesAggregates",
                )
            })?,
        })
    }
}
