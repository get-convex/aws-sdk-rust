// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Cost optimizing aggregates for a Recommendation</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendationCostOptimizingAggregates {
    /// <p>The estimated monthly savings</p>
    pub estimated_monthly_savings: f64,
    /// <p>The estimated percently monthly savings</p>
    pub estimated_percent_monthly_savings: f64,
}
impl RecommendationCostOptimizingAggregates {
    /// <p>The estimated monthly savings</p>
    pub fn estimated_monthly_savings(&self) -> f64 {
        self.estimated_monthly_savings
    }
    /// <p>The estimated percently monthly savings</p>
    pub fn estimated_percent_monthly_savings(&self) -> f64 {
        self.estimated_percent_monthly_savings
    }
}
impl RecommendationCostOptimizingAggregates {
    /// Creates a new builder-style object to manufacture [`RecommendationCostOptimizingAggregates`](crate::types::RecommendationCostOptimizingAggregates).
    pub fn builder() -> crate::types::builders::RecommendationCostOptimizingAggregatesBuilder {
        crate::types::builders::RecommendationCostOptimizingAggregatesBuilder::default()
    }
}

/// A builder for [`RecommendationCostOptimizingAggregates`](crate::types::RecommendationCostOptimizingAggregates).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationCostOptimizingAggregatesBuilder {
    pub(crate) estimated_monthly_savings: ::std::option::Option<f64>,
    pub(crate) estimated_percent_monthly_savings: ::std::option::Option<f64>,
}
impl RecommendationCostOptimizingAggregatesBuilder {
    /// <p>The estimated monthly savings</p>
    /// This field is required.
    pub fn estimated_monthly_savings(mut self, input: f64) -> Self {
        self.estimated_monthly_savings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated monthly savings</p>
    pub fn set_estimated_monthly_savings(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_monthly_savings = input;
        self
    }
    /// <p>The estimated monthly savings</p>
    pub fn get_estimated_monthly_savings(&self) -> &::std::option::Option<f64> {
        &self.estimated_monthly_savings
    }
    /// <p>The estimated percently monthly savings</p>
    /// This field is required.
    pub fn estimated_percent_monthly_savings(mut self, input: f64) -> Self {
        self.estimated_percent_monthly_savings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated percently monthly savings</p>
    pub fn set_estimated_percent_monthly_savings(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_percent_monthly_savings = input;
        self
    }
    /// <p>The estimated percently monthly savings</p>
    pub fn get_estimated_percent_monthly_savings(&self) -> &::std::option::Option<f64> {
        &self.estimated_percent_monthly_savings
    }
    /// Consumes the builder and constructs a [`RecommendationCostOptimizingAggregates`](crate::types::RecommendationCostOptimizingAggregates).
    /// This method will fail if any of the following fields are not set:
    /// - [`estimated_monthly_savings`](crate::types::builders::RecommendationCostOptimizingAggregatesBuilder::estimated_monthly_savings)
    /// - [`estimated_percent_monthly_savings`](crate::types::builders::RecommendationCostOptimizingAggregatesBuilder::estimated_percent_monthly_savings)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::RecommendationCostOptimizingAggregates, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecommendationCostOptimizingAggregates {
            estimated_monthly_savings: self.estimated_monthly_savings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "estimated_monthly_savings",
                    "estimated_monthly_savings was not specified but it is required when building RecommendationCostOptimizingAggregates",
                )
            })?,
            estimated_percent_monthly_savings: self.estimated_percent_monthly_savings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "estimated_percent_monthly_savings",
                    "estimated_percent_monthly_savings was not specified but it is required when building RecommendationCostOptimizingAggregates",
                )
            })?,
        })
    }
}
