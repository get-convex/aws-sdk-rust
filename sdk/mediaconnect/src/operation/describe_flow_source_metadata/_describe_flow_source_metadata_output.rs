// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeFlowSourceMetadataOutput {
    /// The ARN of the flow that DescribeFlowSourceMetadata was performed on.
    pub flow_arn: ::std::option::Option<::std::string::String>,
    /// Provides a status code and message regarding issues found with the flow source metadata.
    pub messages: ::std::option::Option<::std::vec::Vec<crate::types::MessageDetail>>,
    /// The timestamp of the most recent change in metadata for this flow’s source.
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// The metadata of the transport stream in the current flow's source.
    pub transport_media_info: ::std::option::Option<crate::types::TransportMediaInfo>,
    _request_id: Option<String>,
}
impl DescribeFlowSourceMetadataOutput {
    /// The ARN of the flow that DescribeFlowSourceMetadata was performed on.
    pub fn flow_arn(&self) -> ::std::option::Option<&str> {
        self.flow_arn.as_deref()
    }
    /// Provides a status code and message regarding issues found with the flow source metadata.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.messages.is_none()`.
    pub fn messages(&self) -> &[crate::types::MessageDetail] {
        self.messages.as_deref().unwrap_or_default()
    }
    /// The timestamp of the most recent change in metadata for this flow’s source.
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// The metadata of the transport stream in the current flow's source.
    pub fn transport_media_info(&self) -> ::std::option::Option<&crate::types::TransportMediaInfo> {
        self.transport_media_info.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeFlowSourceMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeFlowSourceMetadataOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFlowSourceMetadataOutput`](crate::operation::describe_flow_source_metadata::DescribeFlowSourceMetadataOutput).
    pub fn builder() -> crate::operation::describe_flow_source_metadata::builders::DescribeFlowSourceMetadataOutputBuilder {
        crate::operation::describe_flow_source_metadata::builders::DescribeFlowSourceMetadataOutputBuilder::default()
    }
}

/// A builder for [`DescribeFlowSourceMetadataOutput`](crate::operation::describe_flow_source_metadata::DescribeFlowSourceMetadataOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeFlowSourceMetadataOutputBuilder {
    pub(crate) flow_arn: ::std::option::Option<::std::string::String>,
    pub(crate) messages: ::std::option::Option<::std::vec::Vec<crate::types::MessageDetail>>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) transport_media_info: ::std::option::Option<crate::types::TransportMediaInfo>,
    _request_id: Option<String>,
}
impl DescribeFlowSourceMetadataOutputBuilder {
    /// The ARN of the flow that DescribeFlowSourceMetadata was performed on.
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the flow that DescribeFlowSourceMetadata was performed on.
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_arn = input;
        self
    }
    /// The ARN of the flow that DescribeFlowSourceMetadata was performed on.
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_arn
    }
    /// Appends an item to `messages`.
    ///
    /// To override the contents of this collection use [`set_messages`](Self::set_messages).
    ///
    /// Provides a status code and message regarding issues found with the flow source metadata.
    pub fn messages(mut self, input: crate::types::MessageDetail) -> Self {
        let mut v = self.messages.unwrap_or_default();
        v.push(input);
        self.messages = ::std::option::Option::Some(v);
        self
    }
    /// Provides a status code and message regarding issues found with the flow source metadata.
    pub fn set_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageDetail>>) -> Self {
        self.messages = input;
        self
    }
    /// Provides a status code and message regarding issues found with the flow source metadata.
    pub fn get_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageDetail>> {
        &self.messages
    }
    /// The timestamp of the most recent change in metadata for this flow’s source.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// The timestamp of the most recent change in metadata for this flow’s source.
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// The timestamp of the most recent change in metadata for this flow’s source.
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// The metadata of the transport stream in the current flow's source.
    pub fn transport_media_info(mut self, input: crate::types::TransportMediaInfo) -> Self {
        self.transport_media_info = ::std::option::Option::Some(input);
        self
    }
    /// The metadata of the transport stream in the current flow's source.
    pub fn set_transport_media_info(mut self, input: ::std::option::Option<crate::types::TransportMediaInfo>) -> Self {
        self.transport_media_info = input;
        self
    }
    /// The metadata of the transport stream in the current flow's source.
    pub fn get_transport_media_info(&self) -> &::std::option::Option<crate::types::TransportMediaInfo> {
        &self.transport_media_info
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeFlowSourceMetadataOutput`](crate::operation::describe_flow_source_metadata::DescribeFlowSourceMetadataOutput).
    pub fn build(self) -> crate::operation::describe_flow_source_metadata::DescribeFlowSourceMetadataOutput {
        crate::operation::describe_flow_source_metadata::DescribeFlowSourceMetadataOutput {
            flow_arn: self.flow_arn,
            messages: self.messages,
            timestamp: self.timestamp,
            transport_media_info: self.transport_media_info,
            _request_id: self._request_id,
        }
    }
}
