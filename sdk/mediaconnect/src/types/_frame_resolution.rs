// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The frame resolution used by the video stream.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FrameResolution {
    /// The number of pixels in the height of the video frame.
    pub frame_height: ::std::option::Option<i32>,
    /// The number of pixels in the width of the video frame.
    pub frame_width: ::std::option::Option<i32>,
}
impl FrameResolution {
    /// The number of pixels in the height of the video frame.
    pub fn frame_height(&self) -> ::std::option::Option<i32> {
        self.frame_height
    }
    /// The number of pixels in the width of the video frame.
    pub fn frame_width(&self) -> ::std::option::Option<i32> {
        self.frame_width
    }
}
impl FrameResolution {
    /// Creates a new builder-style object to manufacture [`FrameResolution`](crate::types::FrameResolution).
    pub fn builder() -> crate::types::builders::FrameResolutionBuilder {
        crate::types::builders::FrameResolutionBuilder::default()
    }
}

/// A builder for [`FrameResolution`](crate::types::FrameResolution).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FrameResolutionBuilder {
    pub(crate) frame_height: ::std::option::Option<i32>,
    pub(crate) frame_width: ::std::option::Option<i32>,
}
impl FrameResolutionBuilder {
    /// The number of pixels in the height of the video frame.
    /// This field is required.
    pub fn frame_height(mut self, input: i32) -> Self {
        self.frame_height = ::std::option::Option::Some(input);
        self
    }
    /// The number of pixels in the height of the video frame.
    pub fn set_frame_height(mut self, input: ::std::option::Option<i32>) -> Self {
        self.frame_height = input;
        self
    }
    /// The number of pixels in the height of the video frame.
    pub fn get_frame_height(&self) -> &::std::option::Option<i32> {
        &self.frame_height
    }
    /// The number of pixels in the width of the video frame.
    /// This field is required.
    pub fn frame_width(mut self, input: i32) -> Self {
        self.frame_width = ::std::option::Option::Some(input);
        self
    }
    /// The number of pixels in the width of the video frame.
    pub fn set_frame_width(mut self, input: ::std::option::Option<i32>) -> Self {
        self.frame_width = input;
        self
    }
    /// The number of pixels in the width of the video frame.
    pub fn get_frame_width(&self) -> &::std::option::Option<i32> {
        &self.frame_width
    }
    /// Consumes the builder and constructs a [`FrameResolution`](crate::types::FrameResolution).
    pub fn build(self) -> crate::types::FrameResolution {
        crate::types::FrameResolution {
            frame_height: self.frame_height,
            frame_width: self.frame_width,
        }
    }
}
