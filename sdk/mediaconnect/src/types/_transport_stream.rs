// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The metadata of an elementary transport stream.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransportStream {
    /// The number of channels in the audio stream.
    pub channels: ::std::option::Option<i32>,
    /// The codec used by the stream.
    pub codec: ::std::option::Option<::std::string::String>,
    /// The frame rate used by the video stream.
    pub frame_rate: ::std::option::Option<::std::string::String>,
    /// The frame resolution used by the video stream.
    pub frame_resolution: ::std::option::Option<crate::types::FrameResolution>,
    /// The Packet ID (PID) as it is reported in the Program Map Table.
    pub pid: ::std::option::Option<i32>,
    /// The sample rate used by the audio stream.
    pub sample_rate: ::std::option::Option<i32>,
    /// The sample bit size used by the audio stream.
    pub sample_size: ::std::option::Option<i32>,
    /// The Stream Type as it is reported in the Program Map Table.
    pub stream_type: ::std::option::Option<::std::string::String>,
}
impl TransportStream {
    /// The number of channels in the audio stream.
    pub fn channels(&self) -> ::std::option::Option<i32> {
        self.channels
    }
    /// The codec used by the stream.
    pub fn codec(&self) -> ::std::option::Option<&str> {
        self.codec.as_deref()
    }
    /// The frame rate used by the video stream.
    pub fn frame_rate(&self) -> ::std::option::Option<&str> {
        self.frame_rate.as_deref()
    }
    /// The frame resolution used by the video stream.
    pub fn frame_resolution(&self) -> ::std::option::Option<&crate::types::FrameResolution> {
        self.frame_resolution.as_ref()
    }
    /// The Packet ID (PID) as it is reported in the Program Map Table.
    pub fn pid(&self) -> ::std::option::Option<i32> {
        self.pid
    }
    /// The sample rate used by the audio stream.
    pub fn sample_rate(&self) -> ::std::option::Option<i32> {
        self.sample_rate
    }
    /// The sample bit size used by the audio stream.
    pub fn sample_size(&self) -> ::std::option::Option<i32> {
        self.sample_size
    }
    /// The Stream Type as it is reported in the Program Map Table.
    pub fn stream_type(&self) -> ::std::option::Option<&str> {
        self.stream_type.as_deref()
    }
}
impl TransportStream {
    /// Creates a new builder-style object to manufacture [`TransportStream`](crate::types::TransportStream).
    pub fn builder() -> crate::types::builders::TransportStreamBuilder {
        crate::types::builders::TransportStreamBuilder::default()
    }
}

/// A builder for [`TransportStream`](crate::types::TransportStream).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TransportStreamBuilder {
    pub(crate) channels: ::std::option::Option<i32>,
    pub(crate) codec: ::std::option::Option<::std::string::String>,
    pub(crate) frame_rate: ::std::option::Option<::std::string::String>,
    pub(crate) frame_resolution: ::std::option::Option<crate::types::FrameResolution>,
    pub(crate) pid: ::std::option::Option<i32>,
    pub(crate) sample_rate: ::std::option::Option<i32>,
    pub(crate) sample_size: ::std::option::Option<i32>,
    pub(crate) stream_type: ::std::option::Option<::std::string::String>,
}
impl TransportStreamBuilder {
    /// The number of channels in the audio stream.
    pub fn channels(mut self, input: i32) -> Self {
        self.channels = ::std::option::Option::Some(input);
        self
    }
    /// The number of channels in the audio stream.
    pub fn set_channels(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channels = input;
        self
    }
    /// The number of channels in the audio stream.
    pub fn get_channels(&self) -> &::std::option::Option<i32> {
        &self.channels
    }
    /// The codec used by the stream.
    pub fn codec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.codec = ::std::option::Option::Some(input.into());
        self
    }
    /// The codec used by the stream.
    pub fn set_codec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.codec = input;
        self
    }
    /// The codec used by the stream.
    pub fn get_codec(&self) -> &::std::option::Option<::std::string::String> {
        &self.codec
    }
    /// The frame rate used by the video stream.
    pub fn frame_rate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.frame_rate = ::std::option::Option::Some(input.into());
        self
    }
    /// The frame rate used by the video stream.
    pub fn set_frame_rate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.frame_rate = input;
        self
    }
    /// The frame rate used by the video stream.
    pub fn get_frame_rate(&self) -> &::std::option::Option<::std::string::String> {
        &self.frame_rate
    }
    /// The frame resolution used by the video stream.
    pub fn frame_resolution(mut self, input: crate::types::FrameResolution) -> Self {
        self.frame_resolution = ::std::option::Option::Some(input);
        self
    }
    /// The frame resolution used by the video stream.
    pub fn set_frame_resolution(mut self, input: ::std::option::Option<crate::types::FrameResolution>) -> Self {
        self.frame_resolution = input;
        self
    }
    /// The frame resolution used by the video stream.
    pub fn get_frame_resolution(&self) -> &::std::option::Option<crate::types::FrameResolution> {
        &self.frame_resolution
    }
    /// The Packet ID (PID) as it is reported in the Program Map Table.
    /// This field is required.
    pub fn pid(mut self, input: i32) -> Self {
        self.pid = ::std::option::Option::Some(input);
        self
    }
    /// The Packet ID (PID) as it is reported in the Program Map Table.
    pub fn set_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pid = input;
        self
    }
    /// The Packet ID (PID) as it is reported in the Program Map Table.
    pub fn get_pid(&self) -> &::std::option::Option<i32> {
        &self.pid
    }
    /// The sample rate used by the audio stream.
    pub fn sample_rate(mut self, input: i32) -> Self {
        self.sample_rate = ::std::option::Option::Some(input);
        self
    }
    /// The sample rate used by the audio stream.
    pub fn set_sample_rate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sample_rate = input;
        self
    }
    /// The sample rate used by the audio stream.
    pub fn get_sample_rate(&self) -> &::std::option::Option<i32> {
        &self.sample_rate
    }
    /// The sample bit size used by the audio stream.
    pub fn sample_size(mut self, input: i32) -> Self {
        self.sample_size = ::std::option::Option::Some(input);
        self
    }
    /// The sample bit size used by the audio stream.
    pub fn set_sample_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sample_size = input;
        self
    }
    /// The sample bit size used by the audio stream.
    pub fn get_sample_size(&self) -> &::std::option::Option<i32> {
        &self.sample_size
    }
    /// The Stream Type as it is reported in the Program Map Table.
    /// This field is required.
    pub fn stream_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_type = ::std::option::Option::Some(input.into());
        self
    }
    /// The Stream Type as it is reported in the Program Map Table.
    pub fn set_stream_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_type = input;
        self
    }
    /// The Stream Type as it is reported in the Program Map Table.
    pub fn get_stream_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_type
    }
    /// Consumes the builder and constructs a [`TransportStream`](crate::types::TransportStream).
    pub fn build(self) -> crate::types::TransportStream {
        crate::types::TransportStream {
            channels: self.channels,
            codec: self.codec,
            frame_rate: self.frame_rate,
            frame_resolution: self.frame_resolution,
            pid: self.pid,
            sample_rate: self.sample_rate,
            sample_size: self.sample_size,
            stream_type: self.stream_type,
        }
    }
}
