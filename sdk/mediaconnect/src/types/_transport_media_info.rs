// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The metadata of the transport stream in the current flow's source.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransportMediaInfo {
    /// The list of transport stream programs in the current flow's source.
    pub programs: ::std::option::Option<::std::vec::Vec<crate::types::TransportStreamProgram>>,
}
impl TransportMediaInfo {
    /// The list of transport stream programs in the current flow's source.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.programs.is_none()`.
    pub fn programs(&self) -> &[crate::types::TransportStreamProgram] {
        self.programs.as_deref().unwrap_or_default()
    }
}
impl TransportMediaInfo {
    /// Creates a new builder-style object to manufacture [`TransportMediaInfo`](crate::types::TransportMediaInfo).
    pub fn builder() -> crate::types::builders::TransportMediaInfoBuilder {
        crate::types::builders::TransportMediaInfoBuilder::default()
    }
}

/// A builder for [`TransportMediaInfo`](crate::types::TransportMediaInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TransportMediaInfoBuilder {
    pub(crate) programs: ::std::option::Option<::std::vec::Vec<crate::types::TransportStreamProgram>>,
}
impl TransportMediaInfoBuilder {
    /// Appends an item to `programs`.
    ///
    /// To override the contents of this collection use [`set_programs`](Self::set_programs).
    ///
    /// The list of transport stream programs in the current flow's source.
    pub fn programs(mut self, input: crate::types::TransportStreamProgram) -> Self {
        let mut v = self.programs.unwrap_or_default();
        v.push(input);
        self.programs = ::std::option::Option::Some(v);
        self
    }
    /// The list of transport stream programs in the current flow's source.
    pub fn set_programs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TransportStreamProgram>>) -> Self {
        self.programs = input;
        self
    }
    /// The list of transport stream programs in the current flow's source.
    pub fn get_programs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TransportStreamProgram>> {
        &self.programs
    }
    /// Consumes the builder and constructs a [`TransportMediaInfo`](crate::types::TransportMediaInfo).
    pub fn build(self) -> crate::types::TransportMediaInfo {
        crate::types::TransportMediaInfo { programs: self.programs }
    }
}
