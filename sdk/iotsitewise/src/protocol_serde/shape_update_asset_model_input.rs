// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_asset_model_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_asset_model::UpdateAssetModelInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.asset_model_composite_models {
        let mut array_2 = object.key("assetModelCompositeModels").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_asset_model_composite_model::ser_asset_model_composite_model(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.asset_model_description {
        object.key("assetModelDescription").string(var_5.as_str());
    }
    if let Some(var_6) = &input.asset_model_external_id {
        object.key("assetModelExternalId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.asset_model_hierarchies {
        let mut array_8 = object.key("assetModelHierarchies").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_asset_model_hierarchy::ser_asset_model_hierarchy(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.asset_model_name {
        object.key("assetModelName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.asset_model_properties {
        let mut array_13 = object.key("assetModelProperties").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_asset_model_property::ser_asset_model_property(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.client_token {
        object.key("clientToken").string(var_16.as_str());
    }
    Ok(())
}
