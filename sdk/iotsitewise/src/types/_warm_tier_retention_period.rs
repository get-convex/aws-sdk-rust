// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Set this period to specify how long your data is stored in the warm tier before it is deleted. You can set this only if cold tier is enabled.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WarmTierRetentionPeriod {
    /// <p>The number of days the data is stored in the warm tier.</p>
    pub number_of_days: ::std::option::Option<i32>,
    /// <p>If set to true, the data is stored indefinitely in the warm tier.</p>
    pub unlimited: ::std::option::Option<bool>,
}
impl WarmTierRetentionPeriod {
    /// <p>The number of days the data is stored in the warm tier.</p>
    pub fn number_of_days(&self) -> ::std::option::Option<i32> {
        self.number_of_days
    }
    /// <p>If set to true, the data is stored indefinitely in the warm tier.</p>
    pub fn unlimited(&self) -> ::std::option::Option<bool> {
        self.unlimited
    }
}
impl WarmTierRetentionPeriod {
    /// Creates a new builder-style object to manufacture [`WarmTierRetentionPeriod`](crate::types::WarmTierRetentionPeriod).
    pub fn builder() -> crate::types::builders::WarmTierRetentionPeriodBuilder {
        crate::types::builders::WarmTierRetentionPeriodBuilder::default()
    }
}

/// A builder for [`WarmTierRetentionPeriod`](crate::types::WarmTierRetentionPeriod).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WarmTierRetentionPeriodBuilder {
    pub(crate) number_of_days: ::std::option::Option<i32>,
    pub(crate) unlimited: ::std::option::Option<bool>,
}
impl WarmTierRetentionPeriodBuilder {
    /// <p>The number of days the data is stored in the warm tier.</p>
    pub fn number_of_days(mut self, input: i32) -> Self {
        self.number_of_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days the data is stored in the warm tier.</p>
    pub fn set_number_of_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_days = input;
        self
    }
    /// <p>The number of days the data is stored in the warm tier.</p>
    pub fn get_number_of_days(&self) -> &::std::option::Option<i32> {
        &self.number_of_days
    }
    /// <p>If set to true, the data is stored indefinitely in the warm tier.</p>
    pub fn unlimited(mut self, input: bool) -> Self {
        self.unlimited = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to true, the data is stored indefinitely in the warm tier.</p>
    pub fn set_unlimited(mut self, input: ::std::option::Option<bool>) -> Self {
        self.unlimited = input;
        self
    }
    /// <p>If set to true, the data is stored indefinitely in the warm tier.</p>
    pub fn get_unlimited(&self) -> &::std::option::Option<bool> {
        &self.unlimited
    }
    /// Consumes the builder and constructs a [`WarmTierRetentionPeriod`](crate::types::WarmTierRetentionPeriod).
    pub fn build(self) -> crate::types::WarmTierRetentionPeriod {
        crate::types::WarmTierRetentionPeriod {
            number_of_days: self.number_of_days,
            unlimited: self.unlimited,
        }
    }
}
