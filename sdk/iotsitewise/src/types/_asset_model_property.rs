// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an asset model property.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetModelProperty {
    /// <p>The ID of the asset model property.</p>
    /// <ul>
    /// <li>
    /// <p>If you are callling <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> to create a <i>new</i> property: You can specify its ID here, if desired. IoT SiteWise automatically generates a unique ID for you, so this parameter is never required. However, if you prefer to supply your own ID instead, you can specify it here in UUID format. If you specify your own ID, it must be globally unique.</p></li>
    /// <li>
    /// <p>If you are calling UpdateAssetModel to modify an <i>existing</i> property: This can be either the actual ID in UUID format, or else <code>externalId:</code> followed by the external ID, if it has one. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-id-references">Referencing objects with external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p></li>
    /// </ul>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the asset model property.</p>
    pub name: ::std::string::String,
    /// <p>The data type of the asset model property.</p>
    pub data_type: crate::types::PropertyDataType,
    /// <p>The data type of the structure for this property. This parameter exists on properties that have the <code>STRUCT</code> data type.</p>
    pub data_type_spec: ::std::option::Option<::std::string::String>,
    /// <p>The unit of the asset model property, such as <code>Newtons</code> or <code>RPM</code>.</p>
    pub unit: ::std::option::Option<::std::string::String>,
    /// <p>The property type (see <code>PropertyType</code>).</p>
    pub r#type: ::std::option::Option<crate::types::PropertyType>,
    /// <p>The structured path to the property from the root of the asset model.</p>
    pub path: ::std::option::Option<::std::vec::Vec<crate::types::AssetModelPropertyPathSegment>>,
    /// <p>The external ID (if any) provided in the <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html">CreateAssetModel</a> or <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> operation. You can assign an external ID by specifying this value as part of a call to <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a>. However, you can't change the external ID if one is already assigned. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-ids">Using external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
}
impl AssetModelProperty {
    /// <p>The ID of the asset model property.</p>
    /// <ul>
    /// <li>
    /// <p>If you are callling <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> to create a <i>new</i> property: You can specify its ID here, if desired. IoT SiteWise automatically generates a unique ID for you, so this parameter is never required. However, if you prefer to supply your own ID instead, you can specify it here in UUID format. If you specify your own ID, it must be globally unique.</p></li>
    /// <li>
    /// <p>If you are calling UpdateAssetModel to modify an <i>existing</i> property: This can be either the actual ID in UUID format, or else <code>externalId:</code> followed by the external ID, if it has one. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-id-references">Referencing objects with external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p></li>
    /// </ul>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the asset model property.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The data type of the asset model property.</p>
    pub fn data_type(&self) -> &crate::types::PropertyDataType {
        &self.data_type
    }
    /// <p>The data type of the structure for this property. This parameter exists on properties that have the <code>STRUCT</code> data type.</p>
    pub fn data_type_spec(&self) -> ::std::option::Option<&str> {
        self.data_type_spec.as_deref()
    }
    /// <p>The unit of the asset model property, such as <code>Newtons</code> or <code>RPM</code>.</p>
    pub fn unit(&self) -> ::std::option::Option<&str> {
        self.unit.as_deref()
    }
    /// <p>The property type (see <code>PropertyType</code>).</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PropertyType> {
        self.r#type.as_ref()
    }
    /// <p>The structured path to the property from the root of the asset model.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.path.is_none()`.
    pub fn path(&self) -> &[crate::types::AssetModelPropertyPathSegment] {
        self.path.as_deref().unwrap_or_default()
    }
    /// <p>The external ID (if any) provided in the <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html">CreateAssetModel</a> or <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> operation. You can assign an external ID by specifying this value as part of a call to <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a>. However, you can't change the external ID if one is already assigned. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-ids">Using external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
}
impl AssetModelProperty {
    /// Creates a new builder-style object to manufacture [`AssetModelProperty`](crate::types::AssetModelProperty).
    pub fn builder() -> crate::types::builders::AssetModelPropertyBuilder {
        crate::types::builders::AssetModelPropertyBuilder::default()
    }
}

/// A builder for [`AssetModelProperty`](crate::types::AssetModelProperty).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetModelPropertyBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) data_type: ::std::option::Option<crate::types::PropertyDataType>,
    pub(crate) data_type_spec: ::std::option::Option<::std::string::String>,
    pub(crate) unit: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::PropertyType>,
    pub(crate) path: ::std::option::Option<::std::vec::Vec<crate::types::AssetModelPropertyPathSegment>>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
}
impl AssetModelPropertyBuilder {
    /// <p>The ID of the asset model property.</p>
    /// <ul>
    /// <li>
    /// <p>If you are callling <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> to create a <i>new</i> property: You can specify its ID here, if desired. IoT SiteWise automatically generates a unique ID for you, so this parameter is never required. However, if you prefer to supply your own ID instead, you can specify it here in UUID format. If you specify your own ID, it must be globally unique.</p></li>
    /// <li>
    /// <p>If you are calling UpdateAssetModel to modify an <i>existing</i> property: This can be either the actual ID in UUID format, or else <code>externalId:</code> followed by the external ID, if it has one. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-id-references">Referencing objects with external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p></li>
    /// </ul>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset model property.</p>
    /// <ul>
    /// <li>
    /// <p>If you are callling <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> to create a <i>new</i> property: You can specify its ID here, if desired. IoT SiteWise automatically generates a unique ID for you, so this parameter is never required. However, if you prefer to supply your own ID instead, you can specify it here in UUID format. If you specify your own ID, it must be globally unique.</p></li>
    /// <li>
    /// <p>If you are calling UpdateAssetModel to modify an <i>existing</i> property: This can be either the actual ID in UUID format, or else <code>externalId:</code> followed by the external ID, if it has one. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-id-references">Referencing objects with external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p></li>
    /// </ul>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the asset model property.</p>
    /// <ul>
    /// <li>
    /// <p>If you are callling <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> to create a <i>new</i> property: You can specify its ID here, if desired. IoT SiteWise automatically generates a unique ID for you, so this parameter is never required. However, if you prefer to supply your own ID instead, you can specify it here in UUID format. If you specify your own ID, it must be globally unique.</p></li>
    /// <li>
    /// <p>If you are calling UpdateAssetModel to modify an <i>existing</i> property: This can be either the actual ID in UUID format, or else <code>externalId:</code> followed by the external ID, if it has one. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-id-references">Referencing objects with external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p></li>
    /// </ul>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the asset model property.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the asset model property.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the asset model property.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The data type of the asset model property.</p>
    /// This field is required.
    pub fn data_type(mut self, input: crate::types::PropertyDataType) -> Self {
        self.data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the asset model property.</p>
    pub fn set_data_type(mut self, input: ::std::option::Option<crate::types::PropertyDataType>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The data type of the asset model property.</p>
    pub fn get_data_type(&self) -> &::std::option::Option<crate::types::PropertyDataType> {
        &self.data_type
    }
    /// <p>The data type of the structure for this property. This parameter exists on properties that have the <code>STRUCT</code> data type.</p>
    pub fn data_type_spec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_type_spec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data type of the structure for this property. This parameter exists on properties that have the <code>STRUCT</code> data type.</p>
    pub fn set_data_type_spec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_type_spec = input;
        self
    }
    /// <p>The data type of the structure for this property. This parameter exists on properties that have the <code>STRUCT</code> data type.</p>
    pub fn get_data_type_spec(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_type_spec
    }
    /// <p>The unit of the asset model property, such as <code>Newtons</code> or <code>RPM</code>.</p>
    pub fn unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unit of the asset model property, such as <code>Newtons</code> or <code>RPM</code>.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The unit of the asset model property, such as <code>Newtons</code> or <code>RPM</code>.</p>
    pub fn get_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.unit
    }
    /// <p>The property type (see <code>PropertyType</code>).</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::PropertyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The property type (see <code>PropertyType</code>).</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PropertyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The property type (see <code>PropertyType</code>).</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PropertyType> {
        &self.r#type
    }
    /// Appends an item to `path`.
    ///
    /// To override the contents of this collection use [`set_path`](Self::set_path).
    ///
    /// <p>The structured path to the property from the root of the asset model.</p>
    pub fn path(mut self, input: crate::types::AssetModelPropertyPathSegment) -> Self {
        let mut v = self.path.unwrap_or_default();
        v.push(input);
        self.path = ::std::option::Option::Some(v);
        self
    }
    /// <p>The structured path to the property from the root of the asset model.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssetModelPropertyPathSegment>>) -> Self {
        self.path = input;
        self
    }
    /// <p>The structured path to the property from the root of the asset model.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetModelPropertyPathSegment>> {
        &self.path
    }
    /// <p>The external ID (if any) provided in the <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html">CreateAssetModel</a> or <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> operation. You can assign an external ID by specifying this value as part of a call to <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a>. However, you can't change the external ID if one is already assigned. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-ids">Using external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID (if any) provided in the <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html">CreateAssetModel</a> or <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> operation. You can assign an external ID by specifying this value as part of a call to <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a>. However, you can't change the external ID if one is already assigned. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-ids">Using external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID (if any) provided in the <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html">CreateAssetModel</a> or <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a> operation. You can assign an external ID by specifying this value as part of a call to <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html">UpdateAssetModel</a>. However, you can't change the external ID if one is already assigned. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-ids">Using external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// Consumes the builder and constructs a [`AssetModelProperty`](crate::types::AssetModelProperty).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AssetModelPropertyBuilder::name)
    /// - [`data_type`](crate::types::builders::AssetModelPropertyBuilder::data_type)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetModelProperty, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetModelProperty {
            id: self.id,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AssetModelProperty",
                )
            })?,
            data_type: self.data_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_type",
                    "data_type was not specified but it is required when building AssetModelProperty",
                )
            })?,
            data_type_spec: self.data_type_spec,
            unit: self.unit,
            r#type: self.r#type,
            path: self.path,
            external_id: self.external_id,
        })
    }
}
