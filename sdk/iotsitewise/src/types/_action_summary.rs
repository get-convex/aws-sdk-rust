// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the summary of the actions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionSummary {
    /// <p>The ID of the action.</p>
    pub action_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the action definition.</p>
    pub action_definition_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource the action will be taken on.</p>
    pub target_resource: ::std::option::Option<crate::types::TargetResource>,
}
impl ActionSummary {
    /// <p>The ID of the action.</p>
    pub fn action_id(&self) -> ::std::option::Option<&str> {
        self.action_id.as_deref()
    }
    /// <p>The ID of the action definition.</p>
    pub fn action_definition_id(&self) -> ::std::option::Option<&str> {
        self.action_definition_id.as_deref()
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn target_resource(&self) -> ::std::option::Option<&crate::types::TargetResource> {
        self.target_resource.as_ref()
    }
}
impl ActionSummary {
    /// Creates a new builder-style object to manufacture [`ActionSummary`](crate::types::ActionSummary).
    pub fn builder() -> crate::types::builders::ActionSummaryBuilder {
        crate::types::builders::ActionSummaryBuilder::default()
    }
}

/// A builder for [`ActionSummary`](crate::types::ActionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ActionSummaryBuilder {
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_definition_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_resource: ::std::option::Option<crate::types::TargetResource>,
}
impl ActionSummaryBuilder {
    /// <p>The ID of the action.</p>
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the action.</p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>The ID of the action.</p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p>The ID of the action definition.</p>
    pub fn action_definition_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_definition_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the action definition.</p>
    pub fn set_action_definition_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_definition_id = input;
        self
    }
    /// <p>The ID of the action definition.</p>
    pub fn get_action_definition_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_definition_id
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn target_resource(mut self, input: crate::types::TargetResource) -> Self {
        self.target_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn set_target_resource(mut self, input: ::std::option::Option<crate::types::TargetResource>) -> Self {
        self.target_resource = input;
        self
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn get_target_resource(&self) -> &::std::option::Option<crate::types::TargetResource> {
        &self.target_resource
    }
    /// Consumes the builder and constructs a [`ActionSummary`](crate::types::ActionSummary).
    pub fn build(self) -> crate::types::ActionSummary {
        crate::types::ActionSummary {
            action_id: self.action_id,
            action_definition_id: self.action_definition_id,
            target_resource: self.target_resource,
        }
    }
}
