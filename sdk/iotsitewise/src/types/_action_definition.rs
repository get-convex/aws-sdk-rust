// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a definition for an action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionDefinition {
    /// <p>The ID of the action definition.</p>
    pub action_definition_id: ::std::string::String,
    /// <p>The name of the action definition.</p>
    pub action_name: ::std::string::String,
    /// <p>The type of the action definition.</p>
    pub action_type: ::std::string::String,
}
impl ActionDefinition {
    /// <p>The ID of the action definition.</p>
    pub fn action_definition_id(&self) -> &str {
        use std::ops::Deref;
        self.action_definition_id.deref()
    }
    /// <p>The name of the action definition.</p>
    pub fn action_name(&self) -> &str {
        use std::ops::Deref;
        self.action_name.deref()
    }
    /// <p>The type of the action definition.</p>
    pub fn action_type(&self) -> &str {
        use std::ops::Deref;
        self.action_type.deref()
    }
}
impl ActionDefinition {
    /// Creates a new builder-style object to manufacture [`ActionDefinition`](crate::types::ActionDefinition).
    pub fn builder() -> crate::types::builders::ActionDefinitionBuilder {
        crate::types::builders::ActionDefinitionBuilder::default()
    }
}

/// A builder for [`ActionDefinition`](crate::types::ActionDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ActionDefinitionBuilder {
    pub(crate) action_definition_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_name: ::std::option::Option<::std::string::String>,
    pub(crate) action_type: ::std::option::Option<::std::string::String>,
}
impl ActionDefinitionBuilder {
    /// <p>The ID of the action definition.</p>
    /// This field is required.
    pub fn action_definition_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_definition_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the action definition.</p>
    pub fn set_action_definition_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_definition_id = input;
        self
    }
    /// <p>The ID of the action definition.</p>
    pub fn get_action_definition_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_definition_id
    }
    /// <p>The name of the action definition.</p>
    /// This field is required.
    pub fn action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the action definition.</p>
    pub fn set_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>The name of the action definition.</p>
    pub fn get_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_name
    }
    /// <p>The type of the action definition.</p>
    /// This field is required.
    pub fn action_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the action definition.</p>
    pub fn set_action_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>The type of the action definition.</p>
    pub fn get_action_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_type
    }
    /// Consumes the builder and constructs a [`ActionDefinition`](crate::types::ActionDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`action_definition_id`](crate::types::builders::ActionDefinitionBuilder::action_definition_id)
    /// - [`action_name`](crate::types::builders::ActionDefinitionBuilder::action_name)
    /// - [`action_type`](crate::types::builders::ActionDefinitionBuilder::action_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ActionDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActionDefinition {
            action_definition_id: self.action_definition_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_definition_id",
                    "action_definition_id was not specified but it is required when building ActionDefinition",
                )
            })?,
            action_name: self.action_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_name",
                    "action_name was not specified but it is required when building ActionDefinition",
                )
            })?,
            action_type: self.action_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_type",
                    "action_type was not specified but it is required when building ActionDefinition",
                )
            })?,
        })
    }
}
