// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data type of the column.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ColumnType {
    /// <p>The allowed data types that the column has as it's value.</p>
    pub scalar_type: ::std::option::Option<crate::types::ScalarType>,
}
impl ColumnType {
    /// <p>The allowed data types that the column has as it's value.</p>
    pub fn scalar_type(&self) -> ::std::option::Option<&crate::types::ScalarType> {
        self.scalar_type.as_ref()
    }
}
impl ColumnType {
    /// Creates a new builder-style object to manufacture [`ColumnType`](crate::types::ColumnType).
    pub fn builder() -> crate::types::builders::ColumnTypeBuilder {
        crate::types::builders::ColumnTypeBuilder::default()
    }
}

/// A builder for [`ColumnType`](crate::types::ColumnType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ColumnTypeBuilder {
    pub(crate) scalar_type: ::std::option::Option<crate::types::ScalarType>,
}
impl ColumnTypeBuilder {
    /// <p>The allowed data types that the column has as it's value.</p>
    pub fn scalar_type(mut self, input: crate::types::ScalarType) -> Self {
        self.scalar_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The allowed data types that the column has as it's value.</p>
    pub fn set_scalar_type(mut self, input: ::std::option::Option<crate::types::ScalarType>) -> Self {
        self.scalar_type = input;
        self
    }
    /// <p>The allowed data types that the column has as it's value.</p>
    pub fn get_scalar_type(&self) -> &::std::option::Option<crate::types::ScalarType> {
        &self.scalar_type
    }
    /// Consumes the builder and constructs a [`ColumnType`](crate::types::ColumnType).
    pub fn build(self) -> crate::types::ColumnType {
        crate::types::ColumnType {
            scalar_type: self.scalar_type,
        }
    }
}
