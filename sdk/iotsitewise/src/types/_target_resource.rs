// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource the action will be taken on.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetResource {
    /// <p>The ID of the asset, in UUID format.</p>
    pub asset_id: ::std::string::String,
}
impl TargetResource {
    /// <p>The ID of the asset, in UUID format.</p>
    pub fn asset_id(&self) -> &str {
        use std::ops::Deref;
        self.asset_id.deref()
    }
}
impl TargetResource {
    /// Creates a new builder-style object to manufacture [`TargetResource`](crate::types::TargetResource).
    pub fn builder() -> crate::types::builders::TargetResourceBuilder {
        crate::types::builders::TargetResourceBuilder::default()
    }
}

/// A builder for [`TargetResource`](crate::types::TargetResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TargetResourceBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
}
impl TargetResourceBuilder {
    /// <p>The ID of the asset, in UUID format.</p>
    /// This field is required.
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset, in UUID format.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset, in UUID format.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// Consumes the builder and constructs a [`TargetResource`](crate::types::TargetResource).
    /// This method will fail if any of the following fields are not set:
    /// - [`asset_id`](crate::types::builders::TargetResourceBuilder::asset_id)
    pub fn build(self) -> ::std::result::Result<crate::types::TargetResource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TargetResource {
            asset_id: self.asset_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "asset_id",
                    "asset_id was not specified but it is required when building TargetResource",
                )
            })?,
        })
    }
}
