// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteActionInput {
    /// <p>The resource the action will be taken on.</p>
    pub target_resource: ::std::option::Option<crate::types::TargetResource>,
    /// <p>The ID of the action definition.</p>
    pub action_definition_id: ::std::option::Option<::std::string::String>,
    /// <p>The JSON payload of the action.</p>
    pub action_payload: ::std::option::Option<crate::types::ActionPayload>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl ExecuteActionInput {
    /// <p>The resource the action will be taken on.</p>
    pub fn target_resource(&self) -> ::std::option::Option<&crate::types::TargetResource> {
        self.target_resource.as_ref()
    }
    /// <p>The ID of the action definition.</p>
    pub fn action_definition_id(&self) -> ::std::option::Option<&str> {
        self.action_definition_id.as_deref()
    }
    /// <p>The JSON payload of the action.</p>
    pub fn action_payload(&self) -> ::std::option::Option<&crate::types::ActionPayload> {
        self.action_payload.as_ref()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ExecuteActionInput {
    /// Creates a new builder-style object to manufacture [`ExecuteActionInput`](crate::operation::execute_action::ExecuteActionInput).
    pub fn builder() -> crate::operation::execute_action::builders::ExecuteActionInputBuilder {
        crate::operation::execute_action::builders::ExecuteActionInputBuilder::default()
    }
}

/// A builder for [`ExecuteActionInput`](crate::operation::execute_action::ExecuteActionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecuteActionInputBuilder {
    pub(crate) target_resource: ::std::option::Option<crate::types::TargetResource>,
    pub(crate) action_definition_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_payload: ::std::option::Option<crate::types::ActionPayload>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl ExecuteActionInputBuilder {
    /// <p>The resource the action will be taken on.</p>
    /// This field is required.
    pub fn target_resource(mut self, input: crate::types::TargetResource) -> Self {
        self.target_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn set_target_resource(mut self, input: ::std::option::Option<crate::types::TargetResource>) -> Self {
        self.target_resource = input;
        self
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn get_target_resource(&self) -> &::std::option::Option<crate::types::TargetResource> {
        &self.target_resource
    }
    /// <p>The ID of the action definition.</p>
    /// This field is required.
    pub fn action_definition_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_definition_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the action definition.</p>
    pub fn set_action_definition_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_definition_id = input;
        self
    }
    /// <p>The ID of the action definition.</p>
    pub fn get_action_definition_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_definition_id
    }
    /// <p>The JSON payload of the action.</p>
    /// This field is required.
    pub fn action_payload(mut self, input: crate::types::ActionPayload) -> Self {
        self.action_payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>The JSON payload of the action.</p>
    pub fn set_action_payload(mut self, input: ::std::option::Option<crate::types::ActionPayload>) -> Self {
        self.action_payload = input;
        self
    }
    /// <p>The JSON payload of the action.</p>
    pub fn get_action_payload(&self) -> &::std::option::Option<crate::types::ActionPayload> {
        &self.action_payload
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`ExecuteActionInput`](crate::operation::execute_action::ExecuteActionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::execute_action::ExecuteActionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::execute_action::ExecuteActionInput {
            target_resource: self.target_resource,
            action_definition_id: self.action_definition_id,
            action_payload: self.action_payload,
            client_token: self.client_token,
        })
    }
}
