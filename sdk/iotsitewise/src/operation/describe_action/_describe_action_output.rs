// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeActionOutput {
    /// <p>The ID of the action.</p>
    pub action_id: ::std::string::String,
    /// <p>The resource the action will be taken on.</p>
    pub target_resource: ::std::option::Option<crate::types::TargetResource>,
    /// <p>The ID of the action definition.</p>
    pub action_definition_id: ::std::string::String,
    /// <p>The JSON payload of the action.</p>
    pub action_payload: ::std::option::Option<crate::types::ActionPayload>,
    /// <p>The time the action was executed.</p>
    pub execution_time: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl DescribeActionOutput {
    /// <p>The ID of the action.</p>
    pub fn action_id(&self) -> &str {
        use std::ops::Deref;
        self.action_id.deref()
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn target_resource(&self) -> ::std::option::Option<&crate::types::TargetResource> {
        self.target_resource.as_ref()
    }
    /// <p>The ID of the action definition.</p>
    pub fn action_definition_id(&self) -> &str {
        use std::ops::Deref;
        self.action_definition_id.deref()
    }
    /// <p>The JSON payload of the action.</p>
    pub fn action_payload(&self) -> ::std::option::Option<&crate::types::ActionPayload> {
        self.action_payload.as_ref()
    }
    /// <p>The time the action was executed.</p>
    pub fn execution_time(&self) -> &::aws_smithy_types::DateTime {
        &self.execution_time
    }
}
impl ::aws_types::request_id::RequestId for DescribeActionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeActionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeActionOutput`](crate::operation::describe_action::DescribeActionOutput).
    pub fn builder() -> crate::operation::describe_action::builders::DescribeActionOutputBuilder {
        crate::operation::describe_action::builders::DescribeActionOutputBuilder::default()
    }
}

/// A builder for [`DescribeActionOutput`](crate::operation::describe_action::DescribeActionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeActionOutputBuilder {
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_resource: ::std::option::Option<crate::types::TargetResource>,
    pub(crate) action_definition_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_payload: ::std::option::Option<crate::types::ActionPayload>,
    pub(crate) execution_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeActionOutputBuilder {
    /// <p>The ID of the action.</p>
    /// This field is required.
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the action.</p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>The ID of the action.</p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p>The resource the action will be taken on.</p>
    /// This field is required.
    pub fn target_resource(mut self, input: crate::types::TargetResource) -> Self {
        self.target_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn set_target_resource(mut self, input: ::std::option::Option<crate::types::TargetResource>) -> Self {
        self.target_resource = input;
        self
    }
    /// <p>The resource the action will be taken on.</p>
    pub fn get_target_resource(&self) -> &::std::option::Option<crate::types::TargetResource> {
        &self.target_resource
    }
    /// <p>The ID of the action definition.</p>
    /// This field is required.
    pub fn action_definition_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_definition_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the action definition.</p>
    pub fn set_action_definition_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_definition_id = input;
        self
    }
    /// <p>The ID of the action definition.</p>
    pub fn get_action_definition_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_definition_id
    }
    /// <p>The JSON payload of the action.</p>
    /// This field is required.
    pub fn action_payload(mut self, input: crate::types::ActionPayload) -> Self {
        self.action_payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>The JSON payload of the action.</p>
    pub fn set_action_payload(mut self, input: ::std::option::Option<crate::types::ActionPayload>) -> Self {
        self.action_payload = input;
        self
    }
    /// <p>The JSON payload of the action.</p>
    pub fn get_action_payload(&self) -> &::std::option::Option<crate::types::ActionPayload> {
        &self.action_payload
    }
    /// <p>The time the action was executed.</p>
    /// This field is required.
    pub fn execution_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.execution_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the action was executed.</p>
    pub fn set_execution_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.execution_time = input;
        self
    }
    /// <p>The time the action was executed.</p>
    pub fn get_execution_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.execution_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeActionOutput`](crate::operation::describe_action::DescribeActionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`action_id`](crate::operation::describe_action::builders::DescribeActionOutputBuilder::action_id)
    /// - [`action_definition_id`](crate::operation::describe_action::builders::DescribeActionOutputBuilder::action_definition_id)
    /// - [`execution_time`](crate::operation::describe_action::builders::DescribeActionOutputBuilder::execution_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_action::DescribeActionOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_action::DescribeActionOutput {
            action_id: self.action_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_id",
                    "action_id was not specified but it is required when building DescribeActionOutput",
                )
            })?,
            target_resource: self.target_resource,
            action_definition_id: self.action_definition_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_definition_id",
                    "action_definition_id was not specified but it is required when building DescribeActionOutput",
                )
            })?,
            action_payload: self.action_payload,
            execution_time: self.execution_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_time",
                    "execution_time was not specified but it is required when building DescribeActionOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
