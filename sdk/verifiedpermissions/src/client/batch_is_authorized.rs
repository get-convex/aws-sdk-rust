// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchIsAuthorized`](crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy_store_id(impl Into<String>)`](crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder::policy_store_id) / [`set_policy_store_id(Option<String>)`](crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder::set_policy_store_id):<br>required: **true**<br><p>Specifies the ID of the policy store. Policies in this policy store will be used to make the authorization decisions for the input.</p><br>
    ///   - [`entities(EntitiesDefinition)`](crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder::entities) / [`set_entities(Option<EntitiesDefinition>)`](crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder::set_entities):<br>required: **false**<br><p>Specifies the list of resources and principals and their associated attributes that Verified Permissions can examine when evaluating the policies.</p><note>  <p>You can include only principal and resource entities in this parameter; you can't include actions. You must specify actions in the schema.</p> </note><br>
    ///   - [`requests(BatchIsAuthorizedInputItem)`](crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder::requests) / [`set_requests(Option<Vec::<BatchIsAuthorizedInputItem>>)`](crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder::set_requests):<br>required: **true**<br><p>An array of up to 30 requests that you want Verified Permissions to evaluate.</p><br>
    /// - On success, responds with [`BatchIsAuthorizedOutput`](crate::operation::batch_is_authorized::BatchIsAuthorizedOutput) with field(s):
    ///   - [`results(Vec::<BatchIsAuthorizedOutputItem>)`](crate::operation::batch_is_authorized::BatchIsAuthorizedOutput::results): <p>A series of <code>Allow</code> or <code>Deny</code> decisions for each request, and the policies that produced them.</p>
    /// - On failure, responds with [`SdkError<BatchIsAuthorizedError>`](crate::operation::batch_is_authorized::BatchIsAuthorizedError)
    pub fn batch_is_authorized(&self) -> crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder {
        crate::operation::batch_is_authorized::builders::BatchIsAuthorizedFluentBuilder::new(self.handle.clone())
    }
}
