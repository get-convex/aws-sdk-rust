// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_audience_model_output_output_correct_errors(
    mut builder: crate::operation::create_audience_model::builders::CreateAudienceModelOutputBuilder,
) -> crate::operation::create_audience_model::builders::CreateAudienceModelOutputBuilder {
    if builder.audience_model_arn.is_none() {
        builder.audience_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_configured_audience_model_output_output_correct_errors(
    mut builder: crate::operation::create_configured_audience_model::builders::CreateConfiguredAudienceModelOutputBuilder,
) -> crate::operation::create_configured_audience_model::builders::CreateConfiguredAudienceModelOutputBuilder {
    if builder.configured_audience_model_arn.is_none() {
        builder.configured_audience_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_training_dataset_output_output_correct_errors(
    mut builder: crate::operation::create_training_dataset::builders::CreateTrainingDatasetOutputBuilder,
) -> crate::operation::create_training_dataset::builders::CreateTrainingDatasetOutputBuilder {
    if builder.training_dataset_arn.is_none() {
        builder.training_dataset_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_audience_generation_job_output_output_correct_errors(
    mut builder: crate::operation::get_audience_generation_job::builders::GetAudienceGenerationJobOutputBuilder,
) -> crate::operation::get_audience_generation_job::builders::GetAudienceGenerationJobOutputBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.audience_generation_job_arn.is_none() {
        builder.audience_generation_job_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AudienceGenerationJobStatus>().ok()
    }
    if builder.configured_audience_model_arn.is_none() {
        builder.configured_audience_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_audience_model_output_output_correct_errors(
    mut builder: crate::operation::get_audience_model::builders::GetAudienceModelOutputBuilder,
) -> crate::operation::get_audience_model::builders::GetAudienceModelOutputBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.audience_model_arn.is_none() {
        builder.audience_model_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.training_dataset_arn.is_none() {
        builder.training_dataset_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AudienceModelStatus>().ok()
    }
    builder
}

pub(crate) fn get_configured_audience_model_output_output_correct_errors(
    mut builder: crate::operation::get_configured_audience_model::builders::GetConfiguredAudienceModelOutputBuilder,
) -> crate::operation::get_configured_audience_model::builders::GetConfiguredAudienceModelOutputBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.configured_audience_model_arn.is_none() {
        builder.configured_audience_model_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.audience_model_arn.is_none() {
        builder.audience_model_arn = Some(Default::default())
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::ConfiguredAudienceModelOutputConfigBuilder::default();
            crate::serde_util::configured_audience_model_output_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ConfiguredAudienceModelStatus>().ok()
    }
    if builder.shared_audience_metrics.is_none() {
        builder.shared_audience_metrics = Some(Default::default())
    }
    builder
}

pub(crate) fn get_configured_audience_model_policy_output_output_correct_errors(
    mut builder: crate::operation::get_configured_audience_model_policy::builders::GetConfiguredAudienceModelPolicyOutputBuilder,
) -> crate::operation::get_configured_audience_model_policy::builders::GetConfiguredAudienceModelPolicyOutputBuilder {
    if builder.configured_audience_model_arn.is_none() {
        builder.configured_audience_model_arn = Some(Default::default())
    }
    if builder.configured_audience_model_policy.is_none() {
        builder.configured_audience_model_policy = Some(Default::default())
    }
    if builder.policy_hash.is_none() {
        builder.policy_hash = Some(Default::default())
    }
    builder
}

pub(crate) fn get_training_dataset_output_output_correct_errors(
    mut builder: crate::operation::get_training_dataset::builders::GetTrainingDatasetOutputBuilder,
) -> crate::operation::get_training_dataset::builders::GetTrainingDatasetOutputBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.training_dataset_arn.is_none() {
        builder.training_dataset_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.training_data.is_none() {
        builder.training_data = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TrainingDatasetStatus>().ok()
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_audience_export_jobs_output_output_correct_errors(
    mut builder: crate::operation::list_audience_export_jobs::builders::ListAudienceExportJobsOutputBuilder,
) -> crate::operation::list_audience_export_jobs::builders::ListAudienceExportJobsOutputBuilder {
    if builder.audience_export_jobs.is_none() {
        builder.audience_export_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_audience_generation_jobs_output_output_correct_errors(
    mut builder: crate::operation::list_audience_generation_jobs::builders::ListAudienceGenerationJobsOutputBuilder,
) -> crate::operation::list_audience_generation_jobs::builders::ListAudienceGenerationJobsOutputBuilder {
    if builder.audience_generation_jobs.is_none() {
        builder.audience_generation_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_audience_models_output_output_correct_errors(
    mut builder: crate::operation::list_audience_models::builders::ListAudienceModelsOutputBuilder,
) -> crate::operation::list_audience_models::builders::ListAudienceModelsOutputBuilder {
    if builder.audience_models.is_none() {
        builder.audience_models = Some(Default::default())
    }
    builder
}

pub(crate) fn list_configured_audience_models_output_output_correct_errors(
    mut builder: crate::operation::list_configured_audience_models::builders::ListConfiguredAudienceModelsOutputBuilder,
) -> crate::operation::list_configured_audience_models::builders::ListConfiguredAudienceModelsOutputBuilder {
    if builder.configured_audience_models.is_none() {
        builder.configured_audience_models = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_training_datasets_output_output_correct_errors(
    mut builder: crate::operation::list_training_datasets::builders::ListTrainingDatasetsOutputBuilder,
) -> crate::operation::list_training_datasets::builders::ListTrainingDatasetsOutputBuilder {
    if builder.training_datasets.is_none() {
        builder.training_datasets = Some(Default::default())
    }
    builder
}

pub(crate) fn put_configured_audience_model_policy_output_output_correct_errors(
    mut builder: crate::operation::put_configured_audience_model_policy::builders::PutConfiguredAudienceModelPolicyOutputBuilder,
) -> crate::operation::put_configured_audience_model_policy::builders::PutConfiguredAudienceModelPolicyOutputBuilder {
    if builder.configured_audience_model_policy.is_none() {
        builder.configured_audience_model_policy = Some(Default::default())
    }
    if builder.policy_hash.is_none() {
        builder.policy_hash = Some(Default::default())
    }
    builder
}

pub(crate) fn start_audience_generation_job_output_output_correct_errors(
    mut builder: crate::operation::start_audience_generation_job::builders::StartAudienceGenerationJobOutputBuilder,
) -> crate::operation::start_audience_generation_job::builders::StartAudienceGenerationJobOutputBuilder {
    if builder.audience_generation_job_arn.is_none() {
        builder.audience_generation_job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_configured_audience_model_output_output_correct_errors(
    mut builder: crate::operation::update_configured_audience_model::builders::UpdateConfiguredAudienceModelOutputBuilder,
) -> crate::operation::update_configured_audience_model::builders::UpdateConfiguredAudienceModelOutputBuilder {
    if builder.configured_audience_model_arn.is_none() {
        builder.configured_audience_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn configured_audience_model_output_config_correct_errors(
    mut builder: crate::types::builders::ConfiguredAudienceModelOutputConfigBuilder,
) -> crate::types::builders::ConfiguredAudienceModelOutputConfigBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::AudienceDestinationBuilder::default();
            Some(crate::serde_util::audience_destination_correct_errors(builder).build())
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn audience_generation_job_data_source_correct_errors(
    mut builder: crate::types::builders::AudienceGenerationJobDataSourceBuilder,
) -> crate::types::builders::AudienceGenerationJobDataSourceBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::S3ConfigMapBuilder::default();
            crate::serde_util::s3_config_map_correct_errors(builder).build().ok()
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn audience_quality_metrics_correct_errors(
    mut builder: crate::types::builders::AudienceQualityMetricsBuilder,
) -> crate::types::builders::AudienceQualityMetricsBuilder {
    if builder.relevance_metrics.is_none() {
        builder.relevance_metrics = Some(Default::default())
    }
    builder
}

pub(crate) fn audience_size_config_correct_errors(
    mut builder: crate::types::builders::AudienceSizeConfigBuilder,
) -> crate::types::builders::AudienceSizeConfigBuilder {
    if builder.audience_size_type.is_none() {
        builder.audience_size_type = "no value was set".parse::<crate::types::AudienceSizeType>().ok()
    }
    if builder.audience_size_bins.is_none() {
        builder.audience_size_bins = Some(Default::default())
    }
    builder
}

pub(crate) fn audience_destination_correct_errors(
    mut builder: crate::types::builders::AudienceDestinationBuilder,
) -> crate::types::builders::AudienceDestinationBuilder {
    if builder.s3_destination.is_none() {
        builder.s3_destination = {
            let builder = crate::types::builders::S3ConfigMapBuilder::default();
            crate::serde_util::s3_config_map_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn audience_export_job_summary_correct_errors(
    mut builder: crate::types::builders::AudienceExportJobSummaryBuilder,
) -> crate::types::builders::AudienceExportJobSummaryBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.audience_generation_job_arn.is_none() {
        builder.audience_generation_job_arn = Some(Default::default())
    }
    if builder.audience_size.is_none() {
        builder.audience_size = {
            let builder = crate::types::builders::AudienceSizeBuilder::default();
            crate::serde_util::audience_size_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AudienceExportJobStatus>().ok()
    }
    builder
}

pub(crate) fn audience_generation_job_summary_correct_errors(
    mut builder: crate::types::builders::AudienceGenerationJobSummaryBuilder,
) -> crate::types::builders::AudienceGenerationJobSummaryBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.audience_generation_job_arn.is_none() {
        builder.audience_generation_job_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AudienceGenerationJobStatus>().ok()
    }
    if builder.configured_audience_model_arn.is_none() {
        builder.configured_audience_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn audience_model_metric_correct_errors(
    mut builder: crate::types::builders::AudienceModelMetricBuilder,
) -> crate::types::builders::AudienceModelMetricBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AudienceModelMetricType>().ok()
    }
    if builder.for_top_k_item_predictions.is_none() {
        builder.for_top_k_item_predictions = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn audience_model_summary_correct_errors(
    mut builder: crate::types::builders::AudienceModelSummaryBuilder,
) -> crate::types::builders::AudienceModelSummaryBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.audience_model_arn.is_none() {
        builder.audience_model_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.training_dataset_arn.is_none() {
        builder.training_dataset_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AudienceModelStatus>().ok()
    }
    builder
}

pub(crate) fn configured_audience_model_summary_correct_errors(
    mut builder: crate::types::builders::ConfiguredAudienceModelSummaryBuilder,
) -> crate::types::builders::ConfiguredAudienceModelSummaryBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.audience_model_arn.is_none() {
        builder.audience_model_arn = Some(Default::default())
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::ConfiguredAudienceModelOutputConfigBuilder::default();
            crate::serde_util::configured_audience_model_output_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.configured_audience_model_arn.is_none() {
        builder.configured_audience_model_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ConfiguredAudienceModelStatus>().ok()
    }
    builder
}

pub(crate) fn dataset_correct_errors(mut builder: crate::types::builders::DatasetBuilder) -> crate::types::builders::DatasetBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DatasetType>().ok()
    }
    if builder.input_config.is_none() {
        builder.input_config = {
            let builder = crate::types::builders::DatasetInputConfigBuilder::default();
            crate::serde_util::dataset_input_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn s3_config_map_correct_errors(mut builder: crate::types::builders::S3ConfigMapBuilder) -> crate::types::builders::S3ConfigMapBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn training_dataset_summary_correct_errors(
    mut builder: crate::types::builders::TrainingDatasetSummaryBuilder,
) -> crate::types::builders::TrainingDatasetSummaryBuilder {
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.training_dataset_arn.is_none() {
        builder.training_dataset_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TrainingDatasetStatus>().ok()
    }
    builder
}

pub(crate) fn audience_size_correct_errors(mut builder: crate::types::builders::AudienceSizeBuilder) -> crate::types::builders::AudienceSizeBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AudienceSizeType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn dataset_input_config_correct_errors(
    mut builder: crate::types::builders::DatasetInputConfigBuilder,
) -> crate::types::builders::DatasetInputConfigBuilder {
    if builder.schema.is_none() {
        builder.schema = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            Some(crate::serde_util::data_source_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn relevance_metric_correct_errors(
    mut builder: crate::types::builders::RelevanceMetricBuilder,
) -> crate::types::builders::RelevanceMetricBuilder {
    if builder.audience_size.is_none() {
        builder.audience_size = {
            let builder = crate::types::builders::AudienceSizeBuilder::default();
            crate::serde_util::audience_size_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn data_source_correct_errors(mut builder: crate::types::builders::DataSourceBuilder) -> crate::types::builders::DataSourceBuilder {
    if builder.glue_data_source.is_none() {
        builder.glue_data_source = {
            let builder = crate::types::builders::GlueDataSourceBuilder::default();
            crate::serde_util::glue_data_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn column_schema_correct_errors(mut builder: crate::types::builders::ColumnSchemaBuilder) -> crate::types::builders::ColumnSchemaBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.column_types.is_none() {
        builder.column_types = Some(Default::default())
    }
    builder
}

pub(crate) fn glue_data_source_correct_errors(
    mut builder: crate::types::builders::GlueDataSourceBuilder,
) -> crate::types::builders::GlueDataSourceBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    builder
}
