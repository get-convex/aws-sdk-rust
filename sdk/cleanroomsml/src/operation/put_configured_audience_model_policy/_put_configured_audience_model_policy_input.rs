// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutConfiguredAudienceModelPolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that the resource policy will govern.</p>
    pub configured_audience_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The IAM resource policy.</p>
    pub configured_audience_model_policy: ::std::option::Option<::std::string::String>,
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub previous_policy_hash: ::std::option::Option<::std::string::String>,
    /// <p>Use this to prevent unexpected concurrent modification of the policy.</p>
    pub policy_existence_condition: ::std::option::Option<crate::types::PolicyExistenceCondition>,
}
impl PutConfiguredAudienceModelPolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that the resource policy will govern.</p>
    pub fn configured_audience_model_arn(&self) -> ::std::option::Option<&str> {
        self.configured_audience_model_arn.as_deref()
    }
    /// <p>The IAM resource policy.</p>
    pub fn configured_audience_model_policy(&self) -> ::std::option::Option<&str> {
        self.configured_audience_model_policy.as_deref()
    }
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub fn previous_policy_hash(&self) -> ::std::option::Option<&str> {
        self.previous_policy_hash.as_deref()
    }
    /// <p>Use this to prevent unexpected concurrent modification of the policy.</p>
    pub fn policy_existence_condition(&self) -> ::std::option::Option<&crate::types::PolicyExistenceCondition> {
        self.policy_existence_condition.as_ref()
    }
}
impl PutConfiguredAudienceModelPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutConfiguredAudienceModelPolicyInput`](crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyInput).
    pub fn builder() -> crate::operation::put_configured_audience_model_policy::builders::PutConfiguredAudienceModelPolicyInputBuilder {
        crate::operation::put_configured_audience_model_policy::builders::PutConfiguredAudienceModelPolicyInputBuilder::default()
    }
}

/// A builder for [`PutConfiguredAudienceModelPolicyInput`](crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutConfiguredAudienceModelPolicyInputBuilder {
    pub(crate) configured_audience_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) configured_audience_model_policy: ::std::option::Option<::std::string::String>,
    pub(crate) previous_policy_hash: ::std::option::Option<::std::string::String>,
    pub(crate) policy_existence_condition: ::std::option::Option<crate::types::PolicyExistenceCondition>,
}
impl PutConfiguredAudienceModelPolicyInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that the resource policy will govern.</p>
    /// This field is required.
    pub fn configured_audience_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_audience_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that the resource policy will govern.</p>
    pub fn set_configured_audience_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_audience_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that the resource policy will govern.</p>
    pub fn get_configured_audience_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_audience_model_arn
    }
    /// <p>The IAM resource policy.</p>
    /// This field is required.
    pub fn configured_audience_model_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_audience_model_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM resource policy.</p>
    pub fn set_configured_audience_model_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_audience_model_policy = input;
        self
    }
    /// <p>The IAM resource policy.</p>
    pub fn get_configured_audience_model_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_audience_model_policy
    }
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub fn previous_policy_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.previous_policy_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub fn set_previous_policy_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.previous_policy_hash = input;
        self
    }
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub fn get_previous_policy_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.previous_policy_hash
    }
    /// <p>Use this to prevent unexpected concurrent modification of the policy.</p>
    pub fn policy_existence_condition(mut self, input: crate::types::PolicyExistenceCondition) -> Self {
        self.policy_existence_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this to prevent unexpected concurrent modification of the policy.</p>
    pub fn set_policy_existence_condition(mut self, input: ::std::option::Option<crate::types::PolicyExistenceCondition>) -> Self {
        self.policy_existence_condition = input;
        self
    }
    /// <p>Use this to prevent unexpected concurrent modification of the policy.</p>
    pub fn get_policy_existence_condition(&self) -> &::std::option::Option<crate::types::PolicyExistenceCondition> {
        &self.policy_existence_condition
    }
    /// Consumes the builder and constructs a [`PutConfiguredAudienceModelPolicyInput`](crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyInput {
                configured_audience_model_arn: self.configured_audience_model_arn,
                configured_audience_model_policy: self.configured_audience_model_policy,
                previous_policy_hash: self.previous_policy_hash,
                policy_existence_condition: self.policy_existence_condition,
            },
        )
    }
}
