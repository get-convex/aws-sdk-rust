// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutConfiguredAudienceModelPolicyOutput {
    /// <p>The IAM resource policy.</p>
    pub configured_audience_model_policy: ::std::string::String,
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub policy_hash: ::std::string::String,
    _request_id: Option<String>,
}
impl PutConfiguredAudienceModelPolicyOutput {
    /// <p>The IAM resource policy.</p>
    pub fn configured_audience_model_policy(&self) -> &str {
        use std::ops::Deref;
        self.configured_audience_model_policy.deref()
    }
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub fn policy_hash(&self) -> &str {
        use std::ops::Deref;
        self.policy_hash.deref()
    }
}
impl ::aws_types::request_id::RequestId for PutConfiguredAudienceModelPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutConfiguredAudienceModelPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutConfiguredAudienceModelPolicyOutput`](crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyOutput).
    pub fn builder() -> crate::operation::put_configured_audience_model_policy::builders::PutConfiguredAudienceModelPolicyOutputBuilder {
        crate::operation::put_configured_audience_model_policy::builders::PutConfiguredAudienceModelPolicyOutputBuilder::default()
    }
}

/// A builder for [`PutConfiguredAudienceModelPolicyOutput`](crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutConfiguredAudienceModelPolicyOutputBuilder {
    pub(crate) configured_audience_model_policy: ::std::option::Option<::std::string::String>,
    pub(crate) policy_hash: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl PutConfiguredAudienceModelPolicyOutputBuilder {
    /// <p>The IAM resource policy.</p>
    /// This field is required.
    pub fn configured_audience_model_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_audience_model_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM resource policy.</p>
    pub fn set_configured_audience_model_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_audience_model_policy = input;
        self
    }
    /// <p>The IAM resource policy.</p>
    pub fn get_configured_audience_model_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_audience_model_policy
    }
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    /// This field is required.
    pub fn policy_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub fn set_policy_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_hash = input;
        self
    }
    /// <p>A cryptographic hash of the contents of the policy used to prevent unexpected concurrent modification of the policy.</p>
    pub fn get_policy_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_hash
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutConfiguredAudienceModelPolicyOutput`](crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`configured_audience_model_policy`](crate::operation::put_configured_audience_model_policy::builders::PutConfiguredAudienceModelPolicyOutputBuilder::configured_audience_model_policy)
    /// - [`policy_hash`](crate::operation::put_configured_audience_model_policy::builders::PutConfiguredAudienceModelPolicyOutputBuilder::policy_hash)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::put_configured_audience_model_policy::PutConfiguredAudienceModelPolicyOutput {
                configured_audience_model_policy: self.configured_audience_model_policy.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "configured_audience_model_policy",
                        "configured_audience_model_policy was not specified but it is required when building PutConfiguredAudienceModelPolicyOutput",
                    )
                })?,
                policy_hash: self.policy_hash.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "policy_hash",
                        "policy_hash was not specified but it is required when building PutConfiguredAudienceModelPolicyOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
