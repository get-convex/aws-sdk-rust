// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAudienceExportJobInput {
    /// <p>The name of the audience export job.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that you want to export.</p>
    pub audience_generation_job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub audience_size: ::std::option::Option<crate::types::AudienceSize>,
    /// <p>The description of the audience export job.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl StartAudienceExportJobInput {
    /// <p>The name of the audience export job.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that you want to export.</p>
    pub fn audience_generation_job_arn(&self) -> ::std::option::Option<&str> {
        self.audience_generation_job_arn.as_deref()
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn audience_size(&self) -> ::std::option::Option<&crate::types::AudienceSize> {
        self.audience_size.as_ref()
    }
    /// <p>The description of the audience export job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl StartAudienceExportJobInput {
    /// Creates a new builder-style object to manufacture [`StartAudienceExportJobInput`](crate::operation::start_audience_export_job::StartAudienceExportJobInput).
    pub fn builder() -> crate::operation::start_audience_export_job::builders::StartAudienceExportJobInputBuilder {
        crate::operation::start_audience_export_job::builders::StartAudienceExportJobInputBuilder::default()
    }
}

/// A builder for [`StartAudienceExportJobInput`](crate::operation::start_audience_export_job::StartAudienceExportJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartAudienceExportJobInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) audience_generation_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) audience_size: ::std::option::Option<crate::types::AudienceSize>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl StartAudienceExportJobInputBuilder {
    /// <p>The name of the audience export job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the audience export job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the audience export job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that you want to export.</p>
    /// This field is required.
    pub fn audience_generation_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audience_generation_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that you want to export.</p>
    pub fn set_audience_generation_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audience_generation_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that you want to export.</p>
    pub fn get_audience_generation_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.audience_generation_job_arn
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    /// This field is required.
    pub fn audience_size(mut self, input: crate::types::AudienceSize) -> Self {
        self.audience_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn set_audience_size(mut self, input: ::std::option::Option<crate::types::AudienceSize>) -> Self {
        self.audience_size = input;
        self
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn get_audience_size(&self) -> &::std::option::Option<crate::types::AudienceSize> {
        &self.audience_size
    }
    /// <p>The description of the audience export job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the audience export job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the audience export job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`StartAudienceExportJobInput`](crate::operation::start_audience_export_job::StartAudienceExportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_audience_export_job::StartAudienceExportJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_audience_export_job::StartAudienceExportJobInput {
            name: self.name,
            audience_generation_job_arn: self.audience_generation_job_arn,
            audience_size: self.audience_size,
            description: self.description,
        })
    }
}
