// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateConfiguredAudienceModelInput {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that you want to update.</p>
    pub configured_audience_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The new output configuration.</p>
    pub output_config: ::std::option::Option<crate::types::ConfiguredAudienceModelOutputConfig>,
    /// <p>The Amazon Resource Name (ARN) of the new audience model that you want to use.</p>
    pub audience_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The new value for whether to share audience metrics.</p>
    pub shared_audience_metrics: ::std::option::Option<::std::vec::Vec<crate::types::SharedAudienceMetrics>>,
    /// <p>The minimum number of users from the seed audience that must match with users in the training data of the audience model.</p>
    pub min_matching_seed_size: ::std::option::Option<i32>,
    /// <p>The new audience size configuration.</p>
    pub audience_size_config: ::std::option::Option<crate::types::AudienceSizeConfig>,
    /// <p>The new description of the configured audience model.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateConfiguredAudienceModelInput {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that you want to update.</p>
    pub fn configured_audience_model_arn(&self) -> ::std::option::Option<&str> {
        self.configured_audience_model_arn.as_deref()
    }
    /// <p>The new output configuration.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::ConfiguredAudienceModelOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the new audience model that you want to use.</p>
    pub fn audience_model_arn(&self) -> ::std::option::Option<&str> {
        self.audience_model_arn.as_deref()
    }
    /// <p>The new value for whether to share audience metrics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.shared_audience_metrics.is_none()`.
    pub fn shared_audience_metrics(&self) -> &[crate::types::SharedAudienceMetrics] {
        self.shared_audience_metrics.as_deref().unwrap_or_default()
    }
    /// <p>The minimum number of users from the seed audience that must match with users in the training data of the audience model.</p>
    pub fn min_matching_seed_size(&self) -> ::std::option::Option<i32> {
        self.min_matching_seed_size
    }
    /// <p>The new audience size configuration.</p>
    pub fn audience_size_config(&self) -> ::std::option::Option<&crate::types::AudienceSizeConfig> {
        self.audience_size_config.as_ref()
    }
    /// <p>The new description of the configured audience model.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateConfiguredAudienceModelInput {
    /// Creates a new builder-style object to manufacture [`UpdateConfiguredAudienceModelInput`](crate::operation::update_configured_audience_model::UpdateConfiguredAudienceModelInput).
    pub fn builder() -> crate::operation::update_configured_audience_model::builders::UpdateConfiguredAudienceModelInputBuilder {
        crate::operation::update_configured_audience_model::builders::UpdateConfiguredAudienceModelInputBuilder::default()
    }
}

/// A builder for [`UpdateConfiguredAudienceModelInput`](crate::operation::update_configured_audience_model::UpdateConfiguredAudienceModelInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateConfiguredAudienceModelInputBuilder {
    pub(crate) configured_audience_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) output_config: ::std::option::Option<crate::types::ConfiguredAudienceModelOutputConfig>,
    pub(crate) audience_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) shared_audience_metrics: ::std::option::Option<::std::vec::Vec<crate::types::SharedAudienceMetrics>>,
    pub(crate) min_matching_seed_size: ::std::option::Option<i32>,
    pub(crate) audience_size_config: ::std::option::Option<crate::types::AudienceSizeConfig>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateConfiguredAudienceModelInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that you want to update.</p>
    /// This field is required.
    pub fn configured_audience_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_audience_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that you want to update.</p>
    pub fn set_configured_audience_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_audience_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that you want to update.</p>
    pub fn get_configured_audience_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_audience_model_arn
    }
    /// <p>The new output configuration.</p>
    pub fn output_config(mut self, input: crate::types::ConfiguredAudienceModelOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new output configuration.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::ConfiguredAudienceModelOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>The new output configuration.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::ConfiguredAudienceModelOutputConfig> {
        &self.output_config
    }
    /// <p>The Amazon Resource Name (ARN) of the new audience model that you want to use.</p>
    pub fn audience_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audience_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the new audience model that you want to use.</p>
    pub fn set_audience_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audience_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the new audience model that you want to use.</p>
    pub fn get_audience_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.audience_model_arn
    }
    /// Appends an item to `shared_audience_metrics`.
    ///
    /// To override the contents of this collection use [`set_shared_audience_metrics`](Self::set_shared_audience_metrics).
    ///
    /// <p>The new value for whether to share audience metrics.</p>
    pub fn shared_audience_metrics(mut self, input: crate::types::SharedAudienceMetrics) -> Self {
        let mut v = self.shared_audience_metrics.unwrap_or_default();
        v.push(input);
        self.shared_audience_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>The new value for whether to share audience metrics.</p>
    pub fn set_shared_audience_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SharedAudienceMetrics>>) -> Self {
        self.shared_audience_metrics = input;
        self
    }
    /// <p>The new value for whether to share audience metrics.</p>
    pub fn get_shared_audience_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SharedAudienceMetrics>> {
        &self.shared_audience_metrics
    }
    /// <p>The minimum number of users from the seed audience that must match with users in the training data of the audience model.</p>
    pub fn min_matching_seed_size(mut self, input: i32) -> Self {
        self.min_matching_seed_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of users from the seed audience that must match with users in the training data of the audience model.</p>
    pub fn set_min_matching_seed_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_matching_seed_size = input;
        self
    }
    /// <p>The minimum number of users from the seed audience that must match with users in the training data of the audience model.</p>
    pub fn get_min_matching_seed_size(&self) -> &::std::option::Option<i32> {
        &self.min_matching_seed_size
    }
    /// <p>The new audience size configuration.</p>
    pub fn audience_size_config(mut self, input: crate::types::AudienceSizeConfig) -> Self {
        self.audience_size_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new audience size configuration.</p>
    pub fn set_audience_size_config(mut self, input: ::std::option::Option<crate::types::AudienceSizeConfig>) -> Self {
        self.audience_size_config = input;
        self
    }
    /// <p>The new audience size configuration.</p>
    pub fn get_audience_size_config(&self) -> &::std::option::Option<crate::types::AudienceSizeConfig> {
        &self.audience_size_config
    }
    /// <p>The new description of the configured audience model.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new description of the configured audience model.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The new description of the configured audience model.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateConfiguredAudienceModelInput`](crate::operation::update_configured_audience_model::UpdateConfiguredAudienceModelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_configured_audience_model::UpdateConfiguredAudienceModelInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_configured_audience_model::UpdateConfiguredAudienceModelInput {
            configured_audience_model_arn: self.configured_audience_model_arn,
            output_config: self.output_config,
            audience_model_arn: self.audience_model_arn,
            shared_audience_metrics: self.shared_audience_metrics,
            min_matching_seed_size: self.min_matching_seed_size,
            audience_size_config: self.audience_size_config,
            description: self.description,
        })
    }
}
