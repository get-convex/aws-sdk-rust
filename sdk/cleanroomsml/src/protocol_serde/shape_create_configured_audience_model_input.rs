// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_configured_audience_model_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_configured_audience_model::CreateConfiguredAudienceModelInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.audience_model_arn {
        object.key("audienceModelArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.audience_size_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("audienceSizeConfig").start_object();
        crate::protocol_serde::shape_audience_size_config::ser_audience_size_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.child_resource_tag_on_create_policy {
        object.key("childResourceTagOnCreatePolicy").string(var_4.as_str());
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.min_matching_seed_size {
        object.key("minMatchingSeedSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.name {
        object.key("name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("outputConfig").start_object();
        crate::protocol_serde::shape_configured_audience_model_output_config::ser_configured_audience_model_output_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.shared_audience_metrics {
        let mut array_11 = object.key("sharedAudienceMetrics").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.tags {
        #[allow(unused_mut)]
        let mut object_14 = object.key("tags").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    Ok(())
}
