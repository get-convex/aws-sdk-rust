// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The audience model metrics.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceModelMetric {
    /// <p>The audience model metric.</p>
    pub r#type: crate::types::AudienceModelMetricType,
    /// <p>The number of users that were used to generate these model metrics.</p>
    pub for_top_k_item_predictions: i32,
    /// <p>The value of the audience model metric</p>
    pub value: f64,
}
impl AudienceModelMetric {
    /// <p>The audience model metric.</p>
    pub fn r#type(&self) -> &crate::types::AudienceModelMetricType {
        &self.r#type
    }
    /// <p>The number of users that were used to generate these model metrics.</p>
    pub fn for_top_k_item_predictions(&self) -> i32 {
        self.for_top_k_item_predictions
    }
    /// <p>The value of the audience model metric</p>
    pub fn value(&self) -> f64 {
        self.value
    }
}
impl AudienceModelMetric {
    /// Creates a new builder-style object to manufacture [`AudienceModelMetric`](crate::types::AudienceModelMetric).
    pub fn builder() -> crate::types::builders::AudienceModelMetricBuilder {
        crate::types::builders::AudienceModelMetricBuilder::default()
    }
}

/// A builder for [`AudienceModelMetric`](crate::types::AudienceModelMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AudienceModelMetricBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AudienceModelMetricType>,
    pub(crate) for_top_k_item_predictions: ::std::option::Option<i32>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl AudienceModelMetricBuilder {
    /// <p>The audience model metric.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AudienceModelMetricType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The audience model metric.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AudienceModelMetricType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The audience model metric.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AudienceModelMetricType> {
        &self.r#type
    }
    /// <p>The number of users that were used to generate these model metrics.</p>
    /// This field is required.
    pub fn for_top_k_item_predictions(mut self, input: i32) -> Self {
        self.for_top_k_item_predictions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of users that were used to generate these model metrics.</p>
    pub fn set_for_top_k_item_predictions(mut self, input: ::std::option::Option<i32>) -> Self {
        self.for_top_k_item_predictions = input;
        self
    }
    /// <p>The number of users that were used to generate these model metrics.</p>
    pub fn get_for_top_k_item_predictions(&self) -> &::std::option::Option<i32> {
        &self.for_top_k_item_predictions
    }
    /// <p>The value of the audience model metric</p>
    /// This field is required.
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the audience model metric</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the audience model metric</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AudienceModelMetric`](crate::types::AudienceModelMetric).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::AudienceModelMetricBuilder::r#type)
    /// - [`for_top_k_item_predictions`](crate::types::builders::AudienceModelMetricBuilder::for_top_k_item_predictions)
    /// - [`value`](crate::types::builders::AudienceModelMetricBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::AudienceModelMetric, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudienceModelMetric {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AudienceModelMetric",
                )
            })?,
            for_top_k_item_predictions: self.for_top_k_item_predictions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "for_top_k_item_predictions",
                    "for_top_k_item_predictions was not specified but it is required when building AudienceModelMetric",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building AudienceModelMetric",
                )
            })?,
        })
    }
}
