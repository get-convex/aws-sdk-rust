// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configure the list of audience output sizes that can be created. A request to <code>StartAudienceGenerationJob</code> that uses this configured audience model must have an <code>audienceSize</code> selected from this list. You can use the <code>ABSOLUTE</code> <code>AudienceSize</code> to configure out audience sizes using the count of identifiers in the output. You can use the <code>Percentage</code> <code>AudienceSize</code> to configure sizes in the range 1-100 percent.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceSizeConfig {
    /// <p>Whether the audience output sizes are defined as an absolute number or a percentage.</p>
    pub audience_size_type: crate::types::AudienceSizeType,
    /// <p>An array of the different audience output sizes.</p>
    pub audience_size_bins: ::std::vec::Vec<i32>,
}
impl AudienceSizeConfig {
    /// <p>Whether the audience output sizes are defined as an absolute number or a percentage.</p>
    pub fn audience_size_type(&self) -> &crate::types::AudienceSizeType {
        &self.audience_size_type
    }
    /// <p>An array of the different audience output sizes.</p>
    pub fn audience_size_bins(&self) -> &[i32] {
        use std::ops::Deref;
        self.audience_size_bins.deref()
    }
}
impl AudienceSizeConfig {
    /// Creates a new builder-style object to manufacture [`AudienceSizeConfig`](crate::types::AudienceSizeConfig).
    pub fn builder() -> crate::types::builders::AudienceSizeConfigBuilder {
        crate::types::builders::AudienceSizeConfigBuilder::default()
    }
}

/// A builder for [`AudienceSizeConfig`](crate::types::AudienceSizeConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AudienceSizeConfigBuilder {
    pub(crate) audience_size_type: ::std::option::Option<crate::types::AudienceSizeType>,
    pub(crate) audience_size_bins: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl AudienceSizeConfigBuilder {
    /// <p>Whether the audience output sizes are defined as an absolute number or a percentage.</p>
    /// This field is required.
    pub fn audience_size_type(mut self, input: crate::types::AudienceSizeType) -> Self {
        self.audience_size_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the audience output sizes are defined as an absolute number or a percentage.</p>
    pub fn set_audience_size_type(mut self, input: ::std::option::Option<crate::types::AudienceSizeType>) -> Self {
        self.audience_size_type = input;
        self
    }
    /// <p>Whether the audience output sizes are defined as an absolute number or a percentage.</p>
    pub fn get_audience_size_type(&self) -> &::std::option::Option<crate::types::AudienceSizeType> {
        &self.audience_size_type
    }
    /// Appends an item to `audience_size_bins`.
    ///
    /// To override the contents of this collection use [`set_audience_size_bins`](Self::set_audience_size_bins).
    ///
    /// <p>An array of the different audience output sizes.</p>
    pub fn audience_size_bins(mut self, input: i32) -> Self {
        let mut v = self.audience_size_bins.unwrap_or_default();
        v.push(input);
        self.audience_size_bins = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of the different audience output sizes.</p>
    pub fn set_audience_size_bins(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.audience_size_bins = input;
        self
    }
    /// <p>An array of the different audience output sizes.</p>
    pub fn get_audience_size_bins(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.audience_size_bins
    }
    /// Consumes the builder and constructs a [`AudienceSizeConfig`](crate::types::AudienceSizeConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`audience_size_type`](crate::types::builders::AudienceSizeConfigBuilder::audience_size_type)
    /// - [`audience_size_bins`](crate::types::builders::AudienceSizeConfigBuilder::audience_size_bins)
    pub fn build(self) -> ::std::result::Result<crate::types::AudienceSizeConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudienceSizeConfig {
            audience_size_type: self.audience_size_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audience_size_type",
                    "audience_size_type was not specified but it is required when building AudienceSizeConfig",
                )
            })?,
            audience_size_bins: self.audience_size_bins.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audience_size_bins",
                    "audience_size_bins was not specified but it is required when building AudienceSizeConfig",
                )
            })?,
        })
    }
}
