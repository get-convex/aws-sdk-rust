// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The relevance score of a generated audience.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RelevanceMetric {
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub audience_size: ::std::option::Option<crate::types::AudienceSize>,
    /// <p>The relevance score of the generated audience.</p>
    pub score: ::std::option::Option<f64>,
}
impl RelevanceMetric {
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn audience_size(&self) -> ::std::option::Option<&crate::types::AudienceSize> {
        self.audience_size.as_ref()
    }
    /// <p>The relevance score of the generated audience.</p>
    pub fn score(&self) -> ::std::option::Option<f64> {
        self.score
    }
}
impl RelevanceMetric {
    /// Creates a new builder-style object to manufacture [`RelevanceMetric`](crate::types::RelevanceMetric).
    pub fn builder() -> crate::types::builders::RelevanceMetricBuilder {
        crate::types::builders::RelevanceMetricBuilder::default()
    }
}

/// A builder for [`RelevanceMetric`](crate::types::RelevanceMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RelevanceMetricBuilder {
    pub(crate) audience_size: ::std::option::Option<crate::types::AudienceSize>,
    pub(crate) score: ::std::option::Option<f64>,
}
impl RelevanceMetricBuilder {
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    /// This field is required.
    pub fn audience_size(mut self, input: crate::types::AudienceSize) -> Self {
        self.audience_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn set_audience_size(mut self, input: ::std::option::Option<crate::types::AudienceSize>) -> Self {
        self.audience_size = input;
        self
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn get_audience_size(&self) -> &::std::option::Option<crate::types::AudienceSize> {
        &self.audience_size
    }
    /// <p>The relevance score of the generated audience.</p>
    pub fn score(mut self, input: f64) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The relevance score of the generated audience.</p>
    pub fn set_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.score = input;
        self
    }
    /// <p>The relevance score of the generated audience.</p>
    pub fn get_score(&self) -> &::std::option::Option<f64> {
        &self.score
    }
    /// Consumes the builder and constructs a [`RelevanceMetric`](crate::types::RelevanceMetric).
    pub fn build(self) -> crate::types::RelevanceMetric {
        crate::types::RelevanceMetric {
            audience_size: self.audience_size,
            score: self.score,
        }
    }
}
