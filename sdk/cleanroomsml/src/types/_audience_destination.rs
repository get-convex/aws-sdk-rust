// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the Amazon S3 bucket where the configured audience is stored.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceDestination {
    /// <p>The Amazon S3 bucket and path for the configured audience.</p>
    pub s3_destination: ::std::option::Option<crate::types::S3ConfigMap>,
}
impl AudienceDestination {
    /// <p>The Amazon S3 bucket and path for the configured audience.</p>
    pub fn s3_destination(&self) -> ::std::option::Option<&crate::types::S3ConfigMap> {
        self.s3_destination.as_ref()
    }
}
impl AudienceDestination {
    /// Creates a new builder-style object to manufacture [`AudienceDestination`](crate::types::AudienceDestination).
    pub fn builder() -> crate::types::builders::AudienceDestinationBuilder {
        crate::types::builders::AudienceDestinationBuilder::default()
    }
}

/// A builder for [`AudienceDestination`](crate::types::AudienceDestination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AudienceDestinationBuilder {
    pub(crate) s3_destination: ::std::option::Option<crate::types::S3ConfigMap>,
}
impl AudienceDestinationBuilder {
    /// <p>The Amazon S3 bucket and path for the configured audience.</p>
    /// This field is required.
    pub fn s3_destination(mut self, input: crate::types::S3ConfigMap) -> Self {
        self.s3_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 bucket and path for the configured audience.</p>
    pub fn set_s3_destination(mut self, input: ::std::option::Option<crate::types::S3ConfigMap>) -> Self {
        self.s3_destination = input;
        self
    }
    /// <p>The Amazon S3 bucket and path for the configured audience.</p>
    pub fn get_s3_destination(&self) -> &::std::option::Option<crate::types::S3ConfigMap> {
        &self.s3_destination
    }
    /// Consumes the builder and constructs a [`AudienceDestination`](crate::types::AudienceDestination).
    pub fn build(self) -> crate::types::AudienceDestination {
        crate::types::AudienceDestination {
            s3_destination: self.s3_destination,
        }
    }
}
