// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the configured audience generation job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceGenerationJobSummary {
    /// <p>The time at which the audience generation job was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The most recent time at which the audience generation job was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The Amazon Resource Name (ARN) of the audience generation job.</p>
    pub audience_generation_job_arn: ::std::string::String,
    /// <p>The name of the audience generation job.</p>
    pub name: ::std::string::String,
    /// <p>The description of the audience generation job.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the audience generation job.</p>
    pub status: crate::types::AudienceGenerationJobStatus,
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that was used for this audience generation job.</p>
    pub configured_audience_model_arn: ::std::string::String,
    /// <p>The identifier of the collaboration that contains this audience generation job.</p>
    pub collaboration_id: ::std::option::Option<::std::string::String>,
    /// <p>The AWS Account that submitted the job.</p>
    pub started_by: ::std::option::Option<::std::string::String>,
}
impl AudienceGenerationJobSummary {
    /// <p>The time at which the audience generation job was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The most recent time at which the audience generation job was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job.</p>
    pub fn audience_generation_job_arn(&self) -> &str {
        use std::ops::Deref;
        self.audience_generation_job_arn.deref()
    }
    /// <p>The name of the audience generation job.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the audience generation job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the audience generation job.</p>
    pub fn status(&self) -> &crate::types::AudienceGenerationJobStatus {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that was used for this audience generation job.</p>
    pub fn configured_audience_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.configured_audience_model_arn.deref()
    }
    /// <p>The identifier of the collaboration that contains this audience generation job.</p>
    pub fn collaboration_id(&self) -> ::std::option::Option<&str> {
        self.collaboration_id.as_deref()
    }
    /// <p>The AWS Account that submitted the job.</p>
    pub fn started_by(&self) -> ::std::option::Option<&str> {
        self.started_by.as_deref()
    }
}
impl AudienceGenerationJobSummary {
    /// Creates a new builder-style object to manufacture [`AudienceGenerationJobSummary`](crate::types::AudienceGenerationJobSummary).
    pub fn builder() -> crate::types::builders::AudienceGenerationJobSummaryBuilder {
        crate::types::builders::AudienceGenerationJobSummaryBuilder::default()
    }
}

/// A builder for [`AudienceGenerationJobSummary`](crate::types::AudienceGenerationJobSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AudienceGenerationJobSummaryBuilder {
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) audience_generation_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AudienceGenerationJobStatus>,
    pub(crate) configured_audience_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_id: ::std::option::Option<::std::string::String>,
    pub(crate) started_by: ::std::option::Option<::std::string::String>,
}
impl AudienceGenerationJobSummaryBuilder {
    /// <p>The time at which the audience generation job was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the audience generation job was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the audience generation job was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The most recent time at which the audience generation job was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the audience generation job was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the audience generation job was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job.</p>
    /// This field is required.
    pub fn audience_generation_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audience_generation_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job.</p>
    pub fn set_audience_generation_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audience_generation_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job.</p>
    pub fn get_audience_generation_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.audience_generation_job_arn
    }
    /// <p>The name of the audience generation job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the audience generation job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the audience generation job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the audience generation job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the audience generation job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the audience generation job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the audience generation job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AudienceGenerationJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the audience generation job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AudienceGenerationJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the audience generation job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AudienceGenerationJobStatus> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that was used for this audience generation job.</p>
    /// This field is required.
    pub fn configured_audience_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_audience_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that was used for this audience generation job.</p>
    pub fn set_configured_audience_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_audience_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model that was used for this audience generation job.</p>
    pub fn get_configured_audience_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_audience_model_arn
    }
    /// <p>The identifier of the collaboration that contains this audience generation job.</p>
    pub fn collaboration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the collaboration that contains this audience generation job.</p>
    pub fn set_collaboration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_id = input;
        self
    }
    /// <p>The identifier of the collaboration that contains this audience generation job.</p>
    pub fn get_collaboration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_id
    }
    /// <p>The AWS Account that submitted the job.</p>
    pub fn started_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.started_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Account that submitted the job.</p>
    pub fn set_started_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.started_by = input;
        self
    }
    /// <p>The AWS Account that submitted the job.</p>
    pub fn get_started_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.started_by
    }
    /// Consumes the builder and constructs a [`AudienceGenerationJobSummary`](crate::types::AudienceGenerationJobSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`create_time`](crate::types::builders::AudienceGenerationJobSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::AudienceGenerationJobSummaryBuilder::update_time)
    /// - [`audience_generation_job_arn`](crate::types::builders::AudienceGenerationJobSummaryBuilder::audience_generation_job_arn)
    /// - [`name`](crate::types::builders::AudienceGenerationJobSummaryBuilder::name)
    /// - [`status`](crate::types::builders::AudienceGenerationJobSummaryBuilder::status)
    /// - [`configured_audience_model_arn`](crate::types::builders::AudienceGenerationJobSummaryBuilder::configured_audience_model_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::AudienceGenerationJobSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudienceGenerationJobSummary {
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building AudienceGenerationJobSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building AudienceGenerationJobSummary",
                )
            })?,
            audience_generation_job_arn: self.audience_generation_job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audience_generation_job_arn",
                    "audience_generation_job_arn was not specified but it is required when building AudienceGenerationJobSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AudienceGenerationJobSummary",
                )
            })?,
            description: self.description,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AudienceGenerationJobSummary",
                )
            })?,
            configured_audience_model_arn: self.configured_audience_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "configured_audience_model_arn",
                    "configured_audience_model_arn was not specified but it is required when building AudienceGenerationJobSummary",
                )
            })?,
            collaboration_id: self.collaboration_id,
            started_by: self.started_by,
        })
    }
}
