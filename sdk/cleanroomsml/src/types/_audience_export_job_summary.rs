// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the audience export job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceExportJobSummary {
    /// <p>The time at which the audience export job was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The most recent time at which the audience export job was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The name of the audience export job.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that was exported.</p>
    pub audience_generation_job_arn: ::std::string::String,
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub audience_size: ::std::option::Option<crate::types::AudienceSize>,
    /// <p>The description of the audience export job.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the audience export job.</p>
    pub status: crate::types::AudienceExportJobStatus,
    /// <p>Details about the status of a resource.</p>
    pub status_details: ::std::option::Option<crate::types::StatusDetails>,
    /// <p>The Amazon S3 bucket where the audience export is stored.</p>
    pub output_location: ::std::option::Option<::std::string::String>,
}
impl AudienceExportJobSummary {
    /// <p>The time at which the audience export job was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The most recent time at which the audience export job was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The name of the audience export job.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that was exported.</p>
    pub fn audience_generation_job_arn(&self) -> &str {
        use std::ops::Deref;
        self.audience_generation_job_arn.deref()
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn audience_size(&self) -> ::std::option::Option<&crate::types::AudienceSize> {
        self.audience_size.as_ref()
    }
    /// <p>The description of the audience export job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the audience export job.</p>
    pub fn status(&self) -> &crate::types::AudienceExportJobStatus {
        &self.status
    }
    /// <p>Details about the status of a resource.</p>
    pub fn status_details(&self) -> ::std::option::Option<&crate::types::StatusDetails> {
        self.status_details.as_ref()
    }
    /// <p>The Amazon S3 bucket where the audience export is stored.</p>
    pub fn output_location(&self) -> ::std::option::Option<&str> {
        self.output_location.as_deref()
    }
}
impl AudienceExportJobSummary {
    /// Creates a new builder-style object to manufacture [`AudienceExportJobSummary`](crate::types::AudienceExportJobSummary).
    pub fn builder() -> crate::types::builders::AudienceExportJobSummaryBuilder {
        crate::types::builders::AudienceExportJobSummaryBuilder::default()
    }
}

/// A builder for [`AudienceExportJobSummary`](crate::types::AudienceExportJobSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AudienceExportJobSummaryBuilder {
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) audience_generation_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) audience_size: ::std::option::Option<crate::types::AudienceSize>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AudienceExportJobStatus>,
    pub(crate) status_details: ::std::option::Option<crate::types::StatusDetails>,
    pub(crate) output_location: ::std::option::Option<::std::string::String>,
}
impl AudienceExportJobSummaryBuilder {
    /// <p>The time at which the audience export job was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the audience export job was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the audience export job was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The most recent time at which the audience export job was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the audience export job was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the audience export job was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The name of the audience export job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the audience export job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the audience export job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that was exported.</p>
    /// This field is required.
    pub fn audience_generation_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audience_generation_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that was exported.</p>
    pub fn set_audience_generation_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audience_generation_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the audience generation job that was exported.</p>
    pub fn get_audience_generation_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.audience_generation_job_arn
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    /// This field is required.
    pub fn audience_size(mut self, input: crate::types::AudienceSize) -> Self {
        self.audience_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn set_audience_size(mut self, input: ::std::option::Option<crate::types::AudienceSize>) -> Self {
        self.audience_size = input;
        self
    }
    /// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
    pub fn get_audience_size(&self) -> &::std::option::Option<crate::types::AudienceSize> {
        &self.audience_size
    }
    /// <p>The description of the audience export job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the audience export job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the audience export job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the audience export job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AudienceExportJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the audience export job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AudienceExportJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the audience export job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AudienceExportJobStatus> {
        &self.status
    }
    /// <p>Details about the status of a resource.</p>
    pub fn status_details(mut self, input: crate::types::StatusDetails) -> Self {
        self.status_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the status of a resource.</p>
    pub fn set_status_details(mut self, input: ::std::option::Option<crate::types::StatusDetails>) -> Self {
        self.status_details = input;
        self
    }
    /// <p>Details about the status of a resource.</p>
    pub fn get_status_details(&self) -> &::std::option::Option<crate::types::StatusDetails> {
        &self.status_details
    }
    /// <p>The Amazon S3 bucket where the audience export is stored.</p>
    pub fn output_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket where the audience export is stored.</p>
    pub fn set_output_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_location = input;
        self
    }
    /// <p>The Amazon S3 bucket where the audience export is stored.</p>
    pub fn get_output_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_location
    }
    /// Consumes the builder and constructs a [`AudienceExportJobSummary`](crate::types::AudienceExportJobSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`create_time`](crate::types::builders::AudienceExportJobSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::AudienceExportJobSummaryBuilder::update_time)
    /// - [`name`](crate::types::builders::AudienceExportJobSummaryBuilder::name)
    /// - [`audience_generation_job_arn`](crate::types::builders::AudienceExportJobSummaryBuilder::audience_generation_job_arn)
    /// - [`status`](crate::types::builders::AudienceExportJobSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::AudienceExportJobSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudienceExportJobSummary {
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building AudienceExportJobSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building AudienceExportJobSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AudienceExportJobSummary",
                )
            })?,
            audience_generation_job_arn: self.audience_generation_job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audience_generation_job_arn",
                    "audience_generation_job_arn was not specified but it is required when building AudienceExportJobSummary",
                )
            })?,
            audience_size: self.audience_size,
            description: self.description,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AudienceExportJobSummary",
                )
            })?,
            status_details: self.status_details,
            output_location: self.output_location,
        })
    }
}
