// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the audience model.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceModelSummary {
    /// <p>The time at which the audience model was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The most recent time at which the audience model was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The Amazon Resource Name (ARN) of the audience model.</p>
    pub audience_model_arn: ::std::string::String,
    /// <p>The name of the audience model.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the training dataset that was used for the audience model.</p>
    pub training_dataset_arn: ::std::string::String,
    /// <p>The status of the audience model.</p>
    pub status: crate::types::AudienceModelStatus,
    /// <p>The description of the audience model.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl AudienceModelSummary {
    /// <p>The time at which the audience model was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The most recent time at which the audience model was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The Amazon Resource Name (ARN) of the audience model.</p>
    pub fn audience_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.audience_model_arn.deref()
    }
    /// <p>The name of the audience model.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the training dataset that was used for the audience model.</p>
    pub fn training_dataset_arn(&self) -> &str {
        use std::ops::Deref;
        self.training_dataset_arn.deref()
    }
    /// <p>The status of the audience model.</p>
    pub fn status(&self) -> &crate::types::AudienceModelStatus {
        &self.status
    }
    /// <p>The description of the audience model.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl AudienceModelSummary {
    /// Creates a new builder-style object to manufacture [`AudienceModelSummary`](crate::types::AudienceModelSummary).
    pub fn builder() -> crate::types::builders::AudienceModelSummaryBuilder {
        crate::types::builders::AudienceModelSummaryBuilder::default()
    }
}

/// A builder for [`AudienceModelSummary`](crate::types::AudienceModelSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AudienceModelSummaryBuilder {
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) audience_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) training_dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AudienceModelStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl AudienceModelSummaryBuilder {
    /// <p>The time at which the audience model was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the audience model was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the audience model was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The most recent time at which the audience model was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the audience model was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the audience model was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The Amazon Resource Name (ARN) of the audience model.</p>
    /// This field is required.
    pub fn audience_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audience_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the audience model.</p>
    pub fn set_audience_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audience_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the audience model.</p>
    pub fn get_audience_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.audience_model_arn
    }
    /// <p>The name of the audience model.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the audience model.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the audience model.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the training dataset that was used for the audience model.</p>
    /// This field is required.
    pub fn training_dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the training dataset that was used for the audience model.</p>
    pub fn set_training_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_dataset_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the training dataset that was used for the audience model.</p>
    pub fn get_training_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_dataset_arn
    }
    /// <p>The status of the audience model.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AudienceModelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the audience model.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AudienceModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the audience model.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AudienceModelStatus> {
        &self.status
    }
    /// <p>The description of the audience model.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the audience model.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the audience model.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`AudienceModelSummary`](crate::types::AudienceModelSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`create_time`](crate::types::builders::AudienceModelSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::AudienceModelSummaryBuilder::update_time)
    /// - [`audience_model_arn`](crate::types::builders::AudienceModelSummaryBuilder::audience_model_arn)
    /// - [`name`](crate::types::builders::AudienceModelSummaryBuilder::name)
    /// - [`training_dataset_arn`](crate::types::builders::AudienceModelSummaryBuilder::training_dataset_arn)
    /// - [`status`](crate::types::builders::AudienceModelSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::AudienceModelSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudienceModelSummary {
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building AudienceModelSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building AudienceModelSummary",
                )
            })?,
            audience_model_arn: self.audience_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audience_model_arn",
                    "audience_model_arn was not specified but it is required when building AudienceModelSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AudienceModelSummary",
                )
            })?,
            training_dataset_arn: self.training_dataset_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "training_dataset_arn",
                    "training_dataset_arn was not specified but it is required when building AudienceModelSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AudienceModelSummary",
                )
            })?,
            description: self.description,
        })
    }
}
