// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_expression(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Expression,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.or {
        let mut array_2 = object.key("Or").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_expression::ser_expression(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.and {
        let mut array_6 = object.key("And").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_expression::ser_expression(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.not {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Not").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.dimensions {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Dimensions").start_object();
        crate::protocol_serde::shape_dimension_values::ser_dimension_values(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
