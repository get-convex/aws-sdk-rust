// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLakeFormationIdentityCenterConfigurationInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>Allows to enable or disable the IAM Identity Center connection.</p>
    pub application_status: ::std::option::Option<crate::types::ApplicationStatus>,
    /// <p>A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub external_filtering: ::std::option::Option<crate::types::ExternalFilteringConfiguration>,
}
impl UpdateLakeFormationIdentityCenterConfigurationInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>Allows to enable or disable the IAM Identity Center connection.</p>
    pub fn application_status(&self) -> ::std::option::Option<&crate::types::ApplicationStatus> {
        self.application_status.as_ref()
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn external_filtering(&self) -> ::std::option::Option<&crate::types::ExternalFilteringConfiguration> {
        self.external_filtering.as_ref()
    }
}
impl UpdateLakeFormationIdentityCenterConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateLakeFormationIdentityCenterConfigurationInput`](crate::operation::update_lake_formation_identity_center_configuration::UpdateLakeFormationIdentityCenterConfigurationInput).
    pub fn builder(
    ) -> crate::operation::update_lake_formation_identity_center_configuration::builders::UpdateLakeFormationIdentityCenterConfigurationInputBuilder
    {
        crate::operation::update_lake_formation_identity_center_configuration::builders::UpdateLakeFormationIdentityCenterConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateLakeFormationIdentityCenterConfigurationInput`](crate::operation::update_lake_formation_identity_center_configuration::UpdateLakeFormationIdentityCenterConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateLakeFormationIdentityCenterConfigurationInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) application_status: ::std::option::Option<crate::types::ApplicationStatus>,
    pub(crate) external_filtering: ::std::option::Option<crate::types::ExternalFilteringConfiguration>,
}
impl UpdateLakeFormationIdentityCenterConfigurationInputBuilder {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>Allows to enable or disable the IAM Identity Center connection.</p>
    pub fn application_status(mut self, input: crate::types::ApplicationStatus) -> Self {
        self.application_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows to enable or disable the IAM Identity Center connection.</p>
    pub fn set_application_status(mut self, input: ::std::option::Option<crate::types::ApplicationStatus>) -> Self {
        self.application_status = input;
        self
    }
    /// <p>Allows to enable or disable the IAM Identity Center connection.</p>
    pub fn get_application_status(&self) -> &::std::option::Option<crate::types::ApplicationStatus> {
        &self.application_status
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn external_filtering(mut self, input: crate::types::ExternalFilteringConfiguration) -> Self {
        self.external_filtering = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn set_external_filtering(mut self, input: ::std::option::Option<crate::types::ExternalFilteringConfiguration>) -> Self {
        self.external_filtering = input;
        self
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn get_external_filtering(&self) -> &::std::option::Option<crate::types::ExternalFilteringConfiguration> {
        &self.external_filtering
    }
    /// Consumes the builder and constructs a [`UpdateLakeFormationIdentityCenterConfigurationInput`](crate::operation::update_lake_formation_identity_center_configuration::UpdateLakeFormationIdentityCenterConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_lake_formation_identity_center_configuration::UpdateLakeFormationIdentityCenterConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_lake_formation_identity_center_configuration::UpdateLakeFormationIdentityCenterConfigurationInput {
                catalog_id: self.catalog_id,
                application_status: self.application_status,
                external_filtering: self.external_filtering,
            },
        )
    }
}
