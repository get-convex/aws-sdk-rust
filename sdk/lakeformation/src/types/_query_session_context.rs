// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure used as a protocol between query engines and Lake Formation or Glue. Contains both a Lake Formation generated authorization identifier and information from the request's authorization context.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuerySessionContext {
    /// <p>A unique identifier generated by the query engine for the query.</p>
    pub query_id: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp provided by the query engine for when the query started.</p>
    pub query_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An identifier string for the consumer cluster.</p>
    pub cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>A cryptographically generated query identifier generated by Glue or Lake Formation.</p>
    pub query_authorization_id: ::std::option::Option<::std::string::String>,
    /// <p>An opaque string-string map passed by the query engine.</p>
    pub additional_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl QuerySessionContext {
    /// <p>A unique identifier generated by the query engine for the query.</p>
    pub fn query_id(&self) -> ::std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>A timestamp provided by the query engine for when the query started.</p>
    pub fn query_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.query_start_time.as_ref()
    }
    /// <p>An identifier string for the consumer cluster.</p>
    pub fn cluster_id(&self) -> ::std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
    /// <p>A cryptographically generated query identifier generated by Glue or Lake Formation.</p>
    pub fn query_authorization_id(&self) -> ::std::option::Option<&str> {
        self.query_authorization_id.as_deref()
    }
    /// <p>An opaque string-string map passed by the query engine.</p>
    pub fn additional_context(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_context.as_ref()
    }
}
impl QuerySessionContext {
    /// Creates a new builder-style object to manufacture [`QuerySessionContext`](crate::types::QuerySessionContext).
    pub fn builder() -> crate::types::builders::QuerySessionContextBuilder {
        crate::types::builders::QuerySessionContextBuilder::default()
    }
}

/// A builder for [`QuerySessionContext`](crate::types::QuerySessionContext).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QuerySessionContextBuilder {
    pub(crate) query_id: ::std::option::Option<::std::string::String>,
    pub(crate) query_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) query_authorization_id: ::std::option::Option<::std::string::String>,
    pub(crate) additional_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl QuerySessionContextBuilder {
    /// <p>A unique identifier generated by the query engine for the query.</p>
    pub fn query_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier generated by the query engine for the query.</p>
    pub fn set_query_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>A unique identifier generated by the query engine for the query.</p>
    pub fn get_query_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_id
    }
    /// <p>A timestamp provided by the query engine for when the query started.</p>
    pub fn query_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.query_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp provided by the query engine for when the query started.</p>
    pub fn set_query_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.query_start_time = input;
        self
    }
    /// <p>A timestamp provided by the query engine for when the query started.</p>
    pub fn get_query_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.query_start_time
    }
    /// <p>An identifier string for the consumer cluster.</p>
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier string for the consumer cluster.</p>
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// <p>An identifier string for the consumer cluster.</p>
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_id
    }
    /// <p>A cryptographically generated query identifier generated by Glue or Lake Formation.</p>
    pub fn query_authorization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_authorization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A cryptographically generated query identifier generated by Glue or Lake Formation.</p>
    pub fn set_query_authorization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_authorization_id = input;
        self
    }
    /// <p>A cryptographically generated query identifier generated by Glue or Lake Formation.</p>
    pub fn get_query_authorization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_authorization_id
    }
    /// Adds a key-value pair to `additional_context`.
    ///
    /// To override the contents of this collection use [`set_additional_context`](Self::set_additional_context).
    ///
    /// <p>An opaque string-string map passed by the query engine.</p>
    pub fn additional_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_context = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An opaque string-string map passed by the query engine.</p>
    pub fn set_additional_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_context = input;
        self
    }
    /// <p>An opaque string-string map passed by the query engine.</p>
    pub fn get_additional_context(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_context
    }
    /// Consumes the builder and constructs a [`QuerySessionContext`](crate::types::QuerySessionContext).
    pub fn build(self) -> crate::types::QuerySessionContext {
        crate::types::QuerySessionContext {
            query_id: self.query_id,
            query_start_time: self.query_start_time,
            cluster_id: self.cluster_id,
            query_authorization_id: self.query_authorization_id,
            additional_context: self.additional_context,
        }
    }
}
