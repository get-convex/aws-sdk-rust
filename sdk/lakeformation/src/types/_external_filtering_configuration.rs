// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for enabling external data filtering for third-party applications to access data managed by Lake Formation .</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExternalFilteringConfiguration {
    /// <p>Allows to enable or disable the third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub status: crate::types::EnableStatus,
    /// <p>List of third-party application <code>ARNs</code> integrated with Lake Formation.</p>
    pub authorized_targets: ::std::vec::Vec<::std::string::String>,
}
impl ExternalFilteringConfiguration {
    /// <p>Allows to enable or disable the third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn status(&self) -> &crate::types::EnableStatus {
        &self.status
    }
    /// <p>List of third-party application <code>ARNs</code> integrated with Lake Formation.</p>
    pub fn authorized_targets(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.authorized_targets.deref()
    }
}
impl ExternalFilteringConfiguration {
    /// Creates a new builder-style object to manufacture [`ExternalFilteringConfiguration`](crate::types::ExternalFilteringConfiguration).
    pub fn builder() -> crate::types::builders::ExternalFilteringConfigurationBuilder {
        crate::types::builders::ExternalFilteringConfigurationBuilder::default()
    }
}

/// A builder for [`ExternalFilteringConfiguration`](crate::types::ExternalFilteringConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExternalFilteringConfigurationBuilder {
    pub(crate) status: ::std::option::Option<crate::types::EnableStatus>,
    pub(crate) authorized_targets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ExternalFilteringConfigurationBuilder {
    /// <p>Allows to enable or disable the third-party applications that are allowed to access data managed by Lake Formation.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::EnableStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows to enable or disable the third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EnableStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Allows to enable or disable the third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EnableStatus> {
        &self.status
    }
    /// Appends an item to `authorized_targets`.
    ///
    /// To override the contents of this collection use [`set_authorized_targets`](Self::set_authorized_targets).
    ///
    /// <p>List of third-party application <code>ARNs</code> integrated with Lake Formation.</p>
    pub fn authorized_targets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.authorized_targets.unwrap_or_default();
        v.push(input.into());
        self.authorized_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of third-party application <code>ARNs</code> integrated with Lake Formation.</p>
    pub fn set_authorized_targets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.authorized_targets = input;
        self
    }
    /// <p>List of third-party application <code>ARNs</code> integrated with Lake Formation.</p>
    pub fn get_authorized_targets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.authorized_targets
    }
    /// Consumes the builder and constructs a [`ExternalFilteringConfiguration`](crate::types::ExternalFilteringConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::ExternalFilteringConfigurationBuilder::status)
    /// - [`authorized_targets`](crate::types::builders::ExternalFilteringConfigurationBuilder::authorized_targets)
    pub fn build(self) -> ::std::result::Result<crate::types::ExternalFilteringConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExternalFilteringConfiguration {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ExternalFilteringConfiguration",
                )
            })?,
            authorized_targets: self.authorized_targets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorized_targets",
                    "authorized_targets was not specified but it is required when building ExternalFilteringConfiguration",
                )
            })?,
        })
    }
}
