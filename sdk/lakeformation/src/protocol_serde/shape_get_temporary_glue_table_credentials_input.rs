// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_temporary_glue_table_credentials_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_temporary_glue_table_credentials::GetTemporaryGlueTableCredentialsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.audit_context {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AuditContext").start_object();
        crate::protocol_serde::shape_audit_context::ser_audit_context(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.duration_seconds {
        object.key("DurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.permissions {
        let mut array_5 = object.key("Permissions").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.query_session_context {
        #[allow(unused_mut)]
        let mut object_8 = object.key("QuerySessionContext").start_object();
        crate::protocol_serde::shape_query_session_context::ser_query_session_context(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.s3_path {
        object.key("S3Path").string(var_9.as_str());
    }
    if let Some(var_10) = &input.supported_permission_types {
        let mut array_11 = object.key("SupportedPermissionTypes").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.table_arn {
        object.key("TableArn").string(var_13.as_str());
    }
    Ok(())
}
