// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A string to string map of the configuration details for theme generation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FieldsForThemeGeneration {
    /// <p>The name of the Items dataset column that stores the name of each item in the dataset.</p>
    pub item_name: ::std::string::String,
}
impl FieldsForThemeGeneration {
    /// <p>The name of the Items dataset column that stores the name of each item in the dataset.</p>
    pub fn item_name(&self) -> &str {
        use std::ops::Deref;
        self.item_name.deref()
    }
}
impl FieldsForThemeGeneration {
    /// Creates a new builder-style object to manufacture [`FieldsForThemeGeneration`](crate::types::FieldsForThemeGeneration).
    pub fn builder() -> crate::types::builders::FieldsForThemeGenerationBuilder {
        crate::types::builders::FieldsForThemeGenerationBuilder::default()
    }
}

/// A builder for [`FieldsForThemeGeneration`](crate::types::FieldsForThemeGeneration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FieldsForThemeGenerationBuilder {
    pub(crate) item_name: ::std::option::Option<::std::string::String>,
}
impl FieldsForThemeGenerationBuilder {
    /// <p>The name of the Items dataset column that stores the name of each item in the dataset.</p>
    /// This field is required.
    pub fn item_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.item_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Items dataset column that stores the name of each item in the dataset.</p>
    pub fn set_item_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.item_name = input;
        self
    }
    /// <p>The name of the Items dataset column that stores the name of each item in the dataset.</p>
    pub fn get_item_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.item_name
    }
    /// Consumes the builder and constructs a [`FieldsForThemeGeneration`](crate::types::FieldsForThemeGeneration).
    /// This method will fail if any of the following fields are not set:
    /// - [`item_name`](crate::types::builders::FieldsForThemeGenerationBuilder::item_name)
    pub fn build(self) -> ::std::result::Result<crate::types::FieldsForThemeGeneration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FieldsForThemeGeneration {
            item_name: self.item_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "item_name",
                    "item_name was not specified but it is required when building FieldsForThemeGeneration",
                )
            })?,
        })
    }
}
