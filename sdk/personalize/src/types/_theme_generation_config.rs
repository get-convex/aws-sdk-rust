// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration details for generating themes with a batch inference job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThemeGenerationConfig {
    /// <p>Fields used to generate descriptive themes for a batch inference job.</p>
    pub fields_for_theme_generation: ::std::option::Option<crate::types::FieldsForThemeGeneration>,
}
impl ThemeGenerationConfig {
    /// <p>Fields used to generate descriptive themes for a batch inference job.</p>
    pub fn fields_for_theme_generation(&self) -> ::std::option::Option<&crate::types::FieldsForThemeGeneration> {
        self.fields_for_theme_generation.as_ref()
    }
}
impl ThemeGenerationConfig {
    /// Creates a new builder-style object to manufacture [`ThemeGenerationConfig`](crate::types::ThemeGenerationConfig).
    pub fn builder() -> crate::types::builders::ThemeGenerationConfigBuilder {
        crate::types::builders::ThemeGenerationConfigBuilder::default()
    }
}

/// A builder for [`ThemeGenerationConfig`](crate::types::ThemeGenerationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ThemeGenerationConfigBuilder {
    pub(crate) fields_for_theme_generation: ::std::option::Option<crate::types::FieldsForThemeGeneration>,
}
impl ThemeGenerationConfigBuilder {
    /// <p>Fields used to generate descriptive themes for a batch inference job.</p>
    /// This field is required.
    pub fn fields_for_theme_generation(mut self, input: crate::types::FieldsForThemeGeneration) -> Self {
        self.fields_for_theme_generation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Fields used to generate descriptive themes for a batch inference job.</p>
    pub fn set_fields_for_theme_generation(mut self, input: ::std::option::Option<crate::types::FieldsForThemeGeneration>) -> Self {
        self.fields_for_theme_generation = input;
        self
    }
    /// <p>Fields used to generate descriptive themes for a batch inference job.</p>
    pub fn get_fields_for_theme_generation(&self) -> &::std::option::Option<crate::types::FieldsForThemeGeneration> {
        &self.fields_for_theme_generation
    }
    /// Consumes the builder and constructs a [`ThemeGenerationConfig`](crate::types::ThemeGenerationConfig).
    pub fn build(self) -> crate::types::ThemeGenerationConfig {
        crate::types::ThemeGenerationConfig {
            fields_for_theme_generation: self.fields_for_theme_generation,
        }
    }
}
