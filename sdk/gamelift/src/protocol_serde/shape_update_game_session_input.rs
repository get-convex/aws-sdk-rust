// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_game_session_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_game_session::UpdateGameSessionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.game_session_id {
        object.key("GameSessionId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.maximum_player_session_count {
        object.key("MaximumPlayerSessionCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.player_session_creation_policy {
        object.key("PlayerSessionCreationPolicy").string(var_4.as_str());
    }
    if let Some(var_5) = &input.protection_policy {
        object.key("ProtectionPolicy").string(var_5.as_str());
    }
    if let Some(var_6) = &input.game_properties {
        let mut array_7 = object.key("GameProperties").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_game_property::ser_game_property(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    Ok(())
}
