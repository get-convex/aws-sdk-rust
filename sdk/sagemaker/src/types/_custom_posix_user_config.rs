// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the POSIX identity that is used for file system operations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomPosixUserConfig {
    /// <p>The POSIX user ID.</p>
    pub uid: ::std::option::Option<i64>,
    /// <p>The POSIX group ID.</p>
    pub gid: ::std::option::Option<i64>,
}
impl CustomPosixUserConfig {
    /// <p>The POSIX user ID.</p>
    pub fn uid(&self) -> ::std::option::Option<i64> {
        self.uid
    }
    /// <p>The POSIX group ID.</p>
    pub fn gid(&self) -> ::std::option::Option<i64> {
        self.gid
    }
}
impl CustomPosixUserConfig {
    /// Creates a new builder-style object to manufacture [`CustomPosixUserConfig`](crate::types::CustomPosixUserConfig).
    pub fn builder() -> crate::types::builders::CustomPosixUserConfigBuilder {
        crate::types::builders::CustomPosixUserConfigBuilder::default()
    }
}

/// A builder for [`CustomPosixUserConfig`](crate::types::CustomPosixUserConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomPosixUserConfigBuilder {
    pub(crate) uid: ::std::option::Option<i64>,
    pub(crate) gid: ::std::option::Option<i64>,
}
impl CustomPosixUserConfigBuilder {
    /// <p>The POSIX user ID.</p>
    /// This field is required.
    pub fn uid(mut self, input: i64) -> Self {
        self.uid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The POSIX user ID.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<i64>) -> Self {
        self.uid = input;
        self
    }
    /// <p>The POSIX user ID.</p>
    pub fn get_uid(&self) -> &::std::option::Option<i64> {
        &self.uid
    }
    /// <p>The POSIX group ID.</p>
    /// This field is required.
    pub fn gid(mut self, input: i64) -> Self {
        self.gid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The POSIX group ID.</p>
    pub fn set_gid(mut self, input: ::std::option::Option<i64>) -> Self {
        self.gid = input;
        self
    }
    /// <p>The POSIX group ID.</p>
    pub fn get_gid(&self) -> &::std::option::Option<i64> {
        &self.gid
    }
    /// Consumes the builder and constructs a [`CustomPosixUserConfig`](crate::types::CustomPosixUserConfig).
    pub fn build(self) -> crate::types::CustomPosixUserConfig {
        crate::types::CustomPosixUserConfig {
            uid: self.uid,
            gid: self.gid,
        }
    }
}
