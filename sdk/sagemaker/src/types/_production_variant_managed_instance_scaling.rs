// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings that control the range in the number of instances that the endpoint provisions as it scales up or down to accommodate traffic.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductionVariantManagedInstanceScaling {
    /// <p>Indicates whether managed instance scaling is enabled.</p>
    pub status: ::std::option::Option<crate::types::ManagedInstanceScalingStatus>,
    /// <p>The minimum number of instances that the endpoint must retain when it scales down to accommodate a decrease in traffic.</p>
    pub min_instance_count: ::std::option::Option<i32>,
    /// <p>The maximum number of instances that the endpoint can provision when it scales up to accommodate an increase in traffic.</p>
    pub max_instance_count: ::std::option::Option<i32>,
}
impl ProductionVariantManagedInstanceScaling {
    /// <p>Indicates whether managed instance scaling is enabled.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ManagedInstanceScalingStatus> {
        self.status.as_ref()
    }
    /// <p>The minimum number of instances that the endpoint must retain when it scales down to accommodate a decrease in traffic.</p>
    pub fn min_instance_count(&self) -> ::std::option::Option<i32> {
        self.min_instance_count
    }
    /// <p>The maximum number of instances that the endpoint can provision when it scales up to accommodate an increase in traffic.</p>
    pub fn max_instance_count(&self) -> ::std::option::Option<i32> {
        self.max_instance_count
    }
}
impl ProductionVariantManagedInstanceScaling {
    /// Creates a new builder-style object to manufacture [`ProductionVariantManagedInstanceScaling`](crate::types::ProductionVariantManagedInstanceScaling).
    pub fn builder() -> crate::types::builders::ProductionVariantManagedInstanceScalingBuilder {
        crate::types::builders::ProductionVariantManagedInstanceScalingBuilder::default()
    }
}

/// A builder for [`ProductionVariantManagedInstanceScaling`](crate::types::ProductionVariantManagedInstanceScaling).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProductionVariantManagedInstanceScalingBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ManagedInstanceScalingStatus>,
    pub(crate) min_instance_count: ::std::option::Option<i32>,
    pub(crate) max_instance_count: ::std::option::Option<i32>,
}
impl ProductionVariantManagedInstanceScalingBuilder {
    /// <p>Indicates whether managed instance scaling is enabled.</p>
    pub fn status(mut self, input: crate::types::ManagedInstanceScalingStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether managed instance scaling is enabled.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ManagedInstanceScalingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates whether managed instance scaling is enabled.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ManagedInstanceScalingStatus> {
        &self.status
    }
    /// <p>The minimum number of instances that the endpoint must retain when it scales down to accommodate a decrease in traffic.</p>
    pub fn min_instance_count(mut self, input: i32) -> Self {
        self.min_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of instances that the endpoint must retain when it scales down to accommodate a decrease in traffic.</p>
    pub fn set_min_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_instance_count = input;
        self
    }
    /// <p>The minimum number of instances that the endpoint must retain when it scales down to accommodate a decrease in traffic.</p>
    pub fn get_min_instance_count(&self) -> &::std::option::Option<i32> {
        &self.min_instance_count
    }
    /// <p>The maximum number of instances that the endpoint can provision when it scales up to accommodate an increase in traffic.</p>
    pub fn max_instance_count(mut self, input: i32) -> Self {
        self.max_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of instances that the endpoint can provision when it scales up to accommodate an increase in traffic.</p>
    pub fn set_max_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_instance_count = input;
        self
    }
    /// <p>The maximum number of instances that the endpoint can provision when it scales up to accommodate an increase in traffic.</p>
    pub fn get_max_instance_count(&self) -> &::std::option::Option<i32> {
        &self.max_instance_count
    }
    /// Consumes the builder and constructs a [`ProductionVariantManagedInstanceScaling`](crate::types::ProductionVariantManagedInstanceScaling).
    pub fn build(self) -> crate::types::ProductionVariantManagedInstanceScaling {
        crate::types::ProductionVariantManagedInstanceScaling {
            status: self.status,
            min_instance_count: self.min_instance_count,
            max_instance_count: self.max_instance_count,
        }
    }
}
