// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration used to run the application image container.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerConfig {
    /// <p>The arguments for the container when you're running the application.</p>
    pub container_arguments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The entrypoint used to run the application in the container.</p>
    pub container_entrypoint: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The environment variables to set in the container</p>
    pub container_environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ContainerConfig {
    /// <p>The arguments for the container when you're running the application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_arguments.is_none()`.
    pub fn container_arguments(&self) -> &[::std::string::String] {
        self.container_arguments.as_deref().unwrap_or_default()
    }
    /// <p>The entrypoint used to run the application in the container.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_entrypoint.is_none()`.
    pub fn container_entrypoint(&self) -> &[::std::string::String] {
        self.container_entrypoint.as_deref().unwrap_or_default()
    }
    /// <p>The environment variables to set in the container</p>
    pub fn container_environment_variables(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.container_environment_variables.as_ref()
    }
}
impl ContainerConfig {
    /// Creates a new builder-style object to manufacture [`ContainerConfig`](crate::types::ContainerConfig).
    pub fn builder() -> crate::types::builders::ContainerConfigBuilder {
        crate::types::builders::ContainerConfigBuilder::default()
    }
}

/// A builder for [`ContainerConfig`](crate::types::ContainerConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerConfigBuilder {
    pub(crate) container_arguments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) container_entrypoint: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) container_environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ContainerConfigBuilder {
    /// Appends an item to `container_arguments`.
    ///
    /// To override the contents of this collection use [`set_container_arguments`](Self::set_container_arguments).
    ///
    /// <p>The arguments for the container when you're running the application.</p>
    pub fn container_arguments(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.container_arguments.unwrap_or_default();
        v.push(input.into());
        self.container_arguments = ::std::option::Option::Some(v);
        self
    }
    /// <p>The arguments for the container when you're running the application.</p>
    pub fn set_container_arguments(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.container_arguments = input;
        self
    }
    /// <p>The arguments for the container when you're running the application.</p>
    pub fn get_container_arguments(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.container_arguments
    }
    /// Appends an item to `container_entrypoint`.
    ///
    /// To override the contents of this collection use [`set_container_entrypoint`](Self::set_container_entrypoint).
    ///
    /// <p>The entrypoint used to run the application in the container.</p>
    pub fn container_entrypoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.container_entrypoint.unwrap_or_default();
        v.push(input.into());
        self.container_entrypoint = ::std::option::Option::Some(v);
        self
    }
    /// <p>The entrypoint used to run the application in the container.</p>
    pub fn set_container_entrypoint(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.container_entrypoint = input;
        self
    }
    /// <p>The entrypoint used to run the application in the container.</p>
    pub fn get_container_entrypoint(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.container_entrypoint
    }
    /// Adds a key-value pair to `container_environment_variables`.
    ///
    /// To override the contents of this collection use [`set_container_environment_variables`](Self::set_container_environment_variables).
    ///
    /// <p>The environment variables to set in the container</p>
    pub fn container_environment_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.container_environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.container_environment_variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The environment variables to set in the container</p>
    pub fn set_container_environment_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.container_environment_variables = input;
        self
    }
    /// <p>The environment variables to set in the container</p>
    pub fn get_container_environment_variables(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.container_environment_variables
    }
    /// Consumes the builder and constructs a [`ContainerConfig`](crate::types::ContainerConfig).
    pub fn build(self) -> crate::types::ContainerConfig {
        crate::types::ContainerConfig {
            container_arguments: self.container_arguments,
            container_entrypoint: self.container_entrypoint,
            container_environment_variables: self.container_environment_variables,
        }
    }
}
