// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The specifications of an instance group that you need to define.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterInstanceGroupSpecification {
    /// <p>Specifies the number of instances to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub instance_count: ::std::option::Option<i32>,
    /// <p>Specifies the name of the instance group.</p>
    pub instance_group_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the instance type of the instance group.</p>
    pub instance_type: ::std::option::Option<crate::types::ClusterInstanceType>,
    /// <p>Specifies the LifeCycle configuration for the instance group.</p>
    pub life_cycle_config: ::std::option::Option<crate::types::ClusterLifeCycleConfig>,
    /// <p>Specifies an IAM execution role to be assumed by the instance group.</p>
    pub execution_role: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the value for <b>Threads per core</b>. For instance types that support multithreading, you can specify <code>1</code> for disabling multithreading and <code>2</code> for enabling multithreading. For instance types that doesn't support multithreading, specify <code>1</code>. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub threads_per_core: ::std::option::Option<i32>,
}
impl ClusterInstanceGroupSpecification {
    /// <p>Specifies the number of instances to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
    /// <p>Specifies the name of the instance group.</p>
    pub fn instance_group_name(&self) -> ::std::option::Option<&str> {
        self.instance_group_name.as_deref()
    }
    /// <p>Specifies the instance type of the instance group.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::ClusterInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>Specifies the LifeCycle configuration for the instance group.</p>
    pub fn life_cycle_config(&self) -> ::std::option::Option<&crate::types::ClusterLifeCycleConfig> {
        self.life_cycle_config.as_ref()
    }
    /// <p>Specifies an IAM execution role to be assumed by the instance group.</p>
    pub fn execution_role(&self) -> ::std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>Specifies the value for <b>Threads per core</b>. For instance types that support multithreading, you can specify <code>1</code> for disabling multithreading and <code>2</code> for enabling multithreading. For instance types that doesn't support multithreading, specify <code>1</code>. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn threads_per_core(&self) -> ::std::option::Option<i32> {
        self.threads_per_core
    }
}
impl ClusterInstanceGroupSpecification {
    /// Creates a new builder-style object to manufacture [`ClusterInstanceGroupSpecification`](crate::types::ClusterInstanceGroupSpecification).
    pub fn builder() -> crate::types::builders::ClusterInstanceGroupSpecificationBuilder {
        crate::types::builders::ClusterInstanceGroupSpecificationBuilder::default()
    }
}

/// A builder for [`ClusterInstanceGroupSpecification`](crate::types::ClusterInstanceGroupSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClusterInstanceGroupSpecificationBuilder {
    pub(crate) instance_count: ::std::option::Option<i32>,
    pub(crate) instance_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::ClusterInstanceType>,
    pub(crate) life_cycle_config: ::std::option::Option<crate::types::ClusterLifeCycleConfig>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) threads_per_core: ::std::option::Option<i32>,
}
impl ClusterInstanceGroupSpecificationBuilder {
    /// <p>Specifies the number of instances to add to the instance group of a SageMaker HyperPod cluster.</p>
    /// This field is required.
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the number of instances to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>Specifies the number of instances to add to the instance group of a SageMaker HyperPod cluster.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// <p>Specifies the name of the instance group.</p>
    /// This field is required.
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the instance group.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_name = input;
        self
    }
    /// <p>Specifies the name of the instance group.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_name
    }
    /// <p>Specifies the instance type of the instance group.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: crate::types::ClusterInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the instance type of the instance group.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ClusterInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>Specifies the instance type of the instance group.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ClusterInstanceType> {
        &self.instance_type
    }
    /// <p>Specifies the LifeCycle configuration for the instance group.</p>
    /// This field is required.
    pub fn life_cycle_config(mut self, input: crate::types::ClusterLifeCycleConfig) -> Self {
        self.life_cycle_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the LifeCycle configuration for the instance group.</p>
    pub fn set_life_cycle_config(mut self, input: ::std::option::Option<crate::types::ClusterLifeCycleConfig>) -> Self {
        self.life_cycle_config = input;
        self
    }
    /// <p>Specifies the LifeCycle configuration for the instance group.</p>
    pub fn get_life_cycle_config(&self) -> &::std::option::Option<crate::types::ClusterLifeCycleConfig> {
        &self.life_cycle_config
    }
    /// <p>Specifies an IAM execution role to be assumed by the instance group.</p>
    /// This field is required.
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies an IAM execution role to be assumed by the instance group.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>Specifies an IAM execution role to be assumed by the instance group.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>Specifies the value for <b>Threads per core</b>. For instance types that support multithreading, you can specify <code>1</code> for disabling multithreading and <code>2</code> for enabling multithreading. For instance types that doesn't support multithreading, specify <code>1</code>. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn threads_per_core(mut self, input: i32) -> Self {
        self.threads_per_core = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the value for <b>Threads per core</b>. For instance types that support multithreading, you can specify <code>1</code> for disabling multithreading and <code>2</code> for enabling multithreading. For instance types that doesn't support multithreading, specify <code>1</code>. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn set_threads_per_core(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threads_per_core = input;
        self
    }
    /// <p>Specifies the value for <b>Threads per core</b>. For instance types that support multithreading, you can specify <code>1</code> for disabling multithreading and <code>2</code> for enabling multithreading. For instance types that doesn't support multithreading, specify <code>1</code>. For more information, see the reference table of <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">CPU cores and threads per CPU core per instance type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn get_threads_per_core(&self) -> &::std::option::Option<i32> {
        &self.threads_per_core
    }
    /// Consumes the builder and constructs a [`ClusterInstanceGroupSpecification`](crate::types::ClusterInstanceGroupSpecification).
    pub fn build(self) -> crate::types::ClusterInstanceGroupSpecification {
        crate::types::ClusterInstanceGroupSpecification {
            instance_count: self.instance_count,
            instance_group_name: self.instance_group_name,
            instance_type: self.instance_type,
            life_cycle_config: self.life_cycle_config,
            execution_role: self.execution_role,
            threads_per_core: self.threads_per_core,
        }
    }
}
