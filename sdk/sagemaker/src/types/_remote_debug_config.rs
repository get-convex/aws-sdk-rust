// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for remote debugging for the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> API. To learn more about the remote debugging functionality of SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html">Access a training container through Amazon Web Services Systems Manager (SSM) for remote debugging</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RemoteDebugConfig {
    /// <p>If set to True, enables remote debugging.</p>
    pub enable_remote_debug: ::std::option::Option<bool>,
}
impl RemoteDebugConfig {
    /// <p>If set to True, enables remote debugging.</p>
    pub fn enable_remote_debug(&self) -> ::std::option::Option<bool> {
        self.enable_remote_debug
    }
}
impl RemoteDebugConfig {
    /// Creates a new builder-style object to manufacture [`RemoteDebugConfig`](crate::types::RemoteDebugConfig).
    pub fn builder() -> crate::types::builders::RemoteDebugConfigBuilder {
        crate::types::builders::RemoteDebugConfigBuilder::default()
    }
}

/// A builder for [`RemoteDebugConfig`](crate::types::RemoteDebugConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RemoteDebugConfigBuilder {
    pub(crate) enable_remote_debug: ::std::option::Option<bool>,
}
impl RemoteDebugConfigBuilder {
    /// <p>If set to True, enables remote debugging.</p>
    pub fn enable_remote_debug(mut self, input: bool) -> Self {
        self.enable_remote_debug = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to True, enables remote debugging.</p>
    pub fn set_enable_remote_debug(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_remote_debug = input;
        self
    }
    /// <p>If set to True, enables remote debugging.</p>
    pub fn get_enable_remote_debug(&self) -> &::std::option::Option<bool> {
        &self.enable_remote_debug
    }
    /// Consumes the builder and constructs a [`RemoteDebugConfig`](crate::types::RemoteDebugConfig).
    pub fn build(self) -> crate::types::RemoteDebugConfig {
        crate::types::RemoteDebugConfig {
            enable_remote_debug: self.enable_remote_debug,
        }
    }
}
