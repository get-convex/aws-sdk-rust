// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Active throughput configuration of the feature group. There are two modes: <code>ON_DEMAND</code> and <code>PROVISIONED</code>. With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled.</p>
/// <p>Note: <code>PROVISIONED</code> throughput mode is supported only for feature groups that are offline-only, or use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType"> <code>Standard</code> </a> tier online store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThroughputConfigDescription {
    /// <p>The mode used for your feature group throughput: <code>ON_DEMAND</code> or <code>PROVISIONED</code>.</p>
    pub throughput_mode: ::std::option::Option<crate::types::ThroughputMode>,
    /// <p>For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub provisioned_read_capacity_units: ::std::option::Option<i32>,
    /// <p>For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub provisioned_write_capacity_units: ::std::option::Option<i32>,
}
impl ThroughputConfigDescription {
    /// <p>The mode used for your feature group throughput: <code>ON_DEMAND</code> or <code>PROVISIONED</code>.</p>
    pub fn throughput_mode(&self) -> ::std::option::Option<&crate::types::ThroughputMode> {
        self.throughput_mode.as_ref()
    }
    /// <p>For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub fn provisioned_read_capacity_units(&self) -> ::std::option::Option<i32> {
        self.provisioned_read_capacity_units
    }
    /// <p>For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub fn provisioned_write_capacity_units(&self) -> ::std::option::Option<i32> {
        self.provisioned_write_capacity_units
    }
}
impl ThroughputConfigDescription {
    /// Creates a new builder-style object to manufacture [`ThroughputConfigDescription`](crate::types::ThroughputConfigDescription).
    pub fn builder() -> crate::types::builders::ThroughputConfigDescriptionBuilder {
        crate::types::builders::ThroughputConfigDescriptionBuilder::default()
    }
}

/// A builder for [`ThroughputConfigDescription`](crate::types::ThroughputConfigDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ThroughputConfigDescriptionBuilder {
    pub(crate) throughput_mode: ::std::option::Option<crate::types::ThroughputMode>,
    pub(crate) provisioned_read_capacity_units: ::std::option::Option<i32>,
    pub(crate) provisioned_write_capacity_units: ::std::option::Option<i32>,
}
impl ThroughputConfigDescriptionBuilder {
    /// <p>The mode used for your feature group throughput: <code>ON_DEMAND</code> or <code>PROVISIONED</code>.</p>
    /// This field is required.
    pub fn throughput_mode(mut self, input: crate::types::ThroughputMode) -> Self {
        self.throughput_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode used for your feature group throughput: <code>ON_DEMAND</code> or <code>PROVISIONED</code>.</p>
    pub fn set_throughput_mode(mut self, input: ::std::option::Option<crate::types::ThroughputMode>) -> Self {
        self.throughput_mode = input;
        self
    }
    /// <p>The mode used for your feature group throughput: <code>ON_DEMAND</code> or <code>PROVISIONED</code>.</p>
    pub fn get_throughput_mode(&self) -> &::std::option::Option<crate::types::ThroughputMode> {
        &self.throughput_mode
    }
    /// <p>For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub fn provisioned_read_capacity_units(mut self, input: i32) -> Self {
        self.provisioned_read_capacity_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub fn set_provisioned_read_capacity_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.provisioned_read_capacity_units = input;
        self
    }
    /// <p>For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub fn get_provisioned_read_capacity_units(&self) -> &::std::option::Option<i32> {
        &self.provisioned_read_capacity_units
    }
    /// <p>For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub fn provisioned_write_capacity_units(mut self, input: i32) -> Self {
        self.provisioned_write_capacity_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub fn set_provisioned_write_capacity_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.provisioned_write_capacity_units = input;
        self
    }
    /// <p>For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.</p>
    /// <p>This field is not applicable for on-demand feature groups.</p>
    pub fn get_provisioned_write_capacity_units(&self) -> &::std::option::Option<i32> {
        &self.provisioned_write_capacity_units
    }
    /// Consumes the builder and constructs a [`ThroughputConfigDescription`](crate::types::ThroughputConfigDescription).
    pub fn build(self) -> crate::types::ThroughputConfigDescription {
        crate::types::ThroughputConfigDescription {
            throughput_mode: self.throughput_mode,
            provisioned_read_capacity_units: self.provisioned_read_capacity_units,
            provisioned_write_capacity_units: self.provisioned_write_capacity_units,
        }
    }
}
