// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings that control how the endpoint routes incoming traffic to the instances that the endpoint hosts.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductionVariantRoutingConfig {
    /// <p>Sets how the endpoint routes incoming traffic:</p>
    /// <ul>
    /// <li>
    /// <p><code>LEAST_OUTSTANDING_REQUESTS</code>: The endpoint routes requests to the specific instances that have more capacity to process them.</p></li>
    /// <li>
    /// <p><code>RANDOM</code>: The endpoint routes each request to a randomly chosen instance.</p></li>
    /// </ul>
    pub routing_strategy: ::std::option::Option<crate::types::RoutingStrategy>,
}
impl ProductionVariantRoutingConfig {
    /// <p>Sets how the endpoint routes incoming traffic:</p>
    /// <ul>
    /// <li>
    /// <p><code>LEAST_OUTSTANDING_REQUESTS</code>: The endpoint routes requests to the specific instances that have more capacity to process them.</p></li>
    /// <li>
    /// <p><code>RANDOM</code>: The endpoint routes each request to a randomly chosen instance.</p></li>
    /// </ul>
    pub fn routing_strategy(&self) -> ::std::option::Option<&crate::types::RoutingStrategy> {
        self.routing_strategy.as_ref()
    }
}
impl ProductionVariantRoutingConfig {
    /// Creates a new builder-style object to manufacture [`ProductionVariantRoutingConfig`](crate::types::ProductionVariantRoutingConfig).
    pub fn builder() -> crate::types::builders::ProductionVariantRoutingConfigBuilder {
        crate::types::builders::ProductionVariantRoutingConfigBuilder::default()
    }
}

/// A builder for [`ProductionVariantRoutingConfig`](crate::types::ProductionVariantRoutingConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProductionVariantRoutingConfigBuilder {
    pub(crate) routing_strategy: ::std::option::Option<crate::types::RoutingStrategy>,
}
impl ProductionVariantRoutingConfigBuilder {
    /// <p>Sets how the endpoint routes incoming traffic:</p>
    /// <ul>
    /// <li>
    /// <p><code>LEAST_OUTSTANDING_REQUESTS</code>: The endpoint routes requests to the specific instances that have more capacity to process them.</p></li>
    /// <li>
    /// <p><code>RANDOM</code>: The endpoint routes each request to a randomly chosen instance.</p></li>
    /// </ul>
    /// This field is required.
    pub fn routing_strategy(mut self, input: crate::types::RoutingStrategy) -> Self {
        self.routing_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets how the endpoint routes incoming traffic:</p>
    /// <ul>
    /// <li>
    /// <p><code>LEAST_OUTSTANDING_REQUESTS</code>: The endpoint routes requests to the specific instances that have more capacity to process them.</p></li>
    /// <li>
    /// <p><code>RANDOM</code>: The endpoint routes each request to a randomly chosen instance.</p></li>
    /// </ul>
    pub fn set_routing_strategy(mut self, input: ::std::option::Option<crate::types::RoutingStrategy>) -> Self {
        self.routing_strategy = input;
        self
    }
    /// <p>Sets how the endpoint routes incoming traffic:</p>
    /// <ul>
    /// <li>
    /// <p><code>LEAST_OUTSTANDING_REQUESTS</code>: The endpoint routes requests to the specific instances that have more capacity to process them.</p></li>
    /// <li>
    /// <p><code>RANDOM</code>: The endpoint routes each request to a randomly chosen instance.</p></li>
    /// </ul>
    pub fn get_routing_strategy(&self) -> &::std::option::Option<crate::types::RoutingStrategy> {
        &self.routing_strategy
    }
    /// Consumes the builder and constructs a [`ProductionVariantRoutingConfig`](crate::types::ProductionVariantRoutingConfig).
    pub fn build(self) -> crate::types::ProductionVariantRoutingConfig {
        crate::types::ProductionVariantRoutingConfig {
            routing_strategy: self.routing_strategy,
        }
    }
}
