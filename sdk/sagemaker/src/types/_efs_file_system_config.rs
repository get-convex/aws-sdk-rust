// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for assigning a custom Amazon EFS file system to a user profile or space for an Amazon SageMaker Domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EfsFileSystemConfig {
    /// <p>The ID of your Amazon EFS file system.</p>
    pub file_system_id: ::std::option::Option<::std::string::String>,
    /// <p>The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.</p>
    pub file_system_path: ::std::option::Option<::std::string::String>,
}
impl EfsFileSystemConfig {
    /// <p>The ID of your Amazon EFS file system.</p>
    pub fn file_system_id(&self) -> ::std::option::Option<&str> {
        self.file_system_id.as_deref()
    }
    /// <p>The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.</p>
    pub fn file_system_path(&self) -> ::std::option::Option<&str> {
        self.file_system_path.as_deref()
    }
}
impl EfsFileSystemConfig {
    /// Creates a new builder-style object to manufacture [`EfsFileSystemConfig`](crate::types::EfsFileSystemConfig).
    pub fn builder() -> crate::types::builders::EfsFileSystemConfigBuilder {
        crate::types::builders::EfsFileSystemConfigBuilder::default()
    }
}

/// A builder for [`EfsFileSystemConfig`](crate::types::EfsFileSystemConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EfsFileSystemConfigBuilder {
    pub(crate) file_system_id: ::std::option::Option<::std::string::String>,
    pub(crate) file_system_path: ::std::option::Option<::std::string::String>,
}
impl EfsFileSystemConfigBuilder {
    /// <p>The ID of your Amazon EFS file system.</p>
    /// This field is required.
    pub fn file_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_system_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of your Amazon EFS file system.</p>
    pub fn set_file_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_system_id = input;
        self
    }
    /// <p>The ID of your Amazon EFS file system.</p>
    pub fn get_file_system_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_system_id
    }
    /// <p>The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.</p>
    pub fn file_system_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_system_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.</p>
    pub fn set_file_system_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_system_path = input;
        self
    }
    /// <p>The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.</p>
    pub fn get_file_system_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_system_path
    }
    /// Consumes the builder and constructs a [`EfsFileSystemConfig`](crate::types::EfsFileSystemConfig).
    pub fn build(self) -> crate::types::EfsFileSystemConfig {
        crate::types::EfsFileSystemConfig {
            file_system_id: self.file_system_id,
            file_system_path: self.file_system_path,
        }
    }
}
