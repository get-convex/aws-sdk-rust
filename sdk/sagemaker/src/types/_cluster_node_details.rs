// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of an instance (also called a <i>node</i> interchangeably) in a SageMaker HyperPod cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterNodeDetails {
    /// <p>The instance group name in which the instance is.</p>
    pub instance_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the instance.</p>
    pub instance_status: ::std::option::Option<crate::types::ClusterInstanceStatusDetails>,
    /// <p>The type of the instance.</p>
    pub instance_type: ::std::option::Option<crate::types::ClusterInstanceType>,
    /// <p>The time when the instance is launched.</p>
    pub launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub life_cycle_config: ::std::option::Option<crate::types::ClusterLifeCycleConfig>,
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub threads_per_core: ::std::option::Option<i32>,
}
impl ClusterNodeDetails {
    /// <p>The instance group name in which the instance is.</p>
    pub fn instance_group_name(&self) -> ::std::option::Option<&str> {
        self.instance_group_name.as_deref()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The status of the instance.</p>
    pub fn instance_status(&self) -> ::std::option::Option<&crate::types::ClusterInstanceStatusDetails> {
        self.instance_status.as_ref()
    }
    /// <p>The type of the instance.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::ClusterInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The time when the instance is launched.</p>
    pub fn launch_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.launch_time.as_ref()
    }
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub fn life_cycle_config(&self) -> ::std::option::Option<&crate::types::ClusterLifeCycleConfig> {
        self.life_cycle_config.as_ref()
    }
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub fn threads_per_core(&self) -> ::std::option::Option<i32> {
        self.threads_per_core
    }
}
impl ClusterNodeDetails {
    /// Creates a new builder-style object to manufacture [`ClusterNodeDetails`](crate::types::ClusterNodeDetails).
    pub fn builder() -> crate::types::builders::ClusterNodeDetailsBuilder {
        crate::types::builders::ClusterNodeDetailsBuilder::default()
    }
}

/// A builder for [`ClusterNodeDetails`](crate::types::ClusterNodeDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClusterNodeDetailsBuilder {
    pub(crate) instance_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_status: ::std::option::Option<crate::types::ClusterInstanceStatusDetails>,
    pub(crate) instance_type: ::std::option::Option<crate::types::ClusterInstanceType>,
    pub(crate) launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) life_cycle_config: ::std::option::Option<crate::types::ClusterLifeCycleConfig>,
    pub(crate) threads_per_core: ::std::option::Option<i32>,
}
impl ClusterNodeDetailsBuilder {
    /// <p>The instance group name in which the instance is.</p>
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance group name in which the instance is.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_name = input;
        self
    }
    /// <p>The instance group name in which the instance is.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_name
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The status of the instance.</p>
    pub fn instance_status(mut self, input: crate::types::ClusterInstanceStatusDetails) -> Self {
        self.instance_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the instance.</p>
    pub fn set_instance_status(mut self, input: ::std::option::Option<crate::types::ClusterInstanceStatusDetails>) -> Self {
        self.instance_status = input;
        self
    }
    /// <p>The status of the instance.</p>
    pub fn get_instance_status(&self) -> &::std::option::Option<crate::types::ClusterInstanceStatusDetails> {
        &self.instance_status
    }
    /// <p>The type of the instance.</p>
    pub fn instance_type(mut self, input: crate::types::ClusterInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the instance.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ClusterInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type of the instance.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ClusterInstanceType> {
        &self.instance_type
    }
    /// <p>The time when the instance is launched.</p>
    pub fn launch_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.launch_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the instance is launched.</p>
    pub fn set_launch_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.launch_time = input;
        self
    }
    /// <p>The time when the instance is launched.</p>
    pub fn get_launch_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.launch_time
    }
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub fn life_cycle_config(mut self, input: crate::types::ClusterLifeCycleConfig) -> Self {
        self.life_cycle_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub fn set_life_cycle_config(mut self, input: ::std::option::Option<crate::types::ClusterLifeCycleConfig>) -> Self {
        self.life_cycle_config = input;
        self
    }
    /// <p>The LifeCycle configuration applied to the instance.</p>
    pub fn get_life_cycle_config(&self) -> &::std::option::Option<crate::types::ClusterLifeCycleConfig> {
        &self.life_cycle_config
    }
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub fn threads_per_core(mut self, input: i32) -> Self {
        self.threads_per_core = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub fn set_threads_per_core(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threads_per_core = input;
        self
    }
    /// <p>The number of threads per CPU core you specified under <code>CreateCluster</code>.</p>
    pub fn get_threads_per_core(&self) -> &::std::option::Option<i32> {
        &self.threads_per_core
    }
    /// Consumes the builder and constructs a [`ClusterNodeDetails`](crate::types::ClusterNodeDetails).
    pub fn build(self) -> crate::types::ClusterNodeDetails {
        crate::types::ClusterNodeDetails {
            instance_group_name: self.instance_group_name,
            instance_id: self.instance_id,
            instance_status: self.instance_status,
            instance_type: self.instance_type,
            launch_time: self.launch_time,
            life_cycle_config: self.life_cycle_config,
            threads_per_core: self.threads_per_core,
        }
    }
}
