// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateResolverEndpoint`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resolver_endpoint_id(impl Into<String>)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::resolver_endpoint_id) / [`set_resolver_endpoint_id(Option<String>)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::set_resolver_endpoint_id):<br>required: **true**<br><p>The ID of the Resolver endpoint that you want to update.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::set_name):<br>required: **false**<br><p>The name of the Resolver endpoint that you want to update.</p><br>
    ///   - [`resolver_endpoint_type(ResolverEndpointType)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::resolver_endpoint_type) / [`set_resolver_endpoint_type(Option<ResolverEndpointType>)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::set_resolver_endpoint_type):<br>required: **false**<br><p>Specifies the endpoint type for what type of IP address the endpoint uses to forward DNS queries.</p> <p>Updating to <code>IPV6</code> type isn't currently supported.</p><br>
    ///   - [`update_ip_addresses(UpdateIpAddress)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::update_ip_addresses) / [`set_update_ip_addresses(Option<Vec::<UpdateIpAddress>>)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::set_update_ip_addresses):<br>required: **false**<br><p>Specifies the IPv6 address when you update the Resolver endpoint from IPv4 to dual-stack. If you don't specify an IPv6 address, one will be automatically chosen from your subnet.</p><br>
    ///   - [`protocols(Protocol)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::protocols) / [`set_protocols(Option<Vec::<Protocol>>)`](crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::set_protocols):<br>required: **false**<br><p>The protocols you want to use for the endpoint. DoH-FIPS is applicable for inbound endpoints only.</p> <p>For an inbound endpoint you can apply the protocols as follows:</p> <ul>  <li>   <p>Do53 and DoH in combination.</p></li>  <li>   <p>Do53 and DoH-FIPS in combination.</p></li>  <li>   <p>Do53 alone.</p></li>  <li>   <p>DoH alone.</p></li>  <li>   <p>DoH-FIPS alone.</p></li>  <li>   <p>None, which is treated as Do53.</p></li> </ul> <p>For an outbound endpoint you can apply the protocols as follows:</p> <ul>  <li>   <p>Do53 and DoH in combination.</p></li>  <li>   <p>Do53 alone.</p></li>  <li>   <p>DoH alone.</p></li>  <li>   <p>None, which is treated as Do53.</p></li> </ul><important>  <p>You can't change the protocol of an inbound endpoint directly from only Do53 to only DoH, or DoH-FIPS. This is to prevent a sudden disruption to incoming traffic that relies on Do53. To change the protocol from Do53 to DoH, or DoH-FIPS, you must first enable both Do53 and DoH, or Do53 and DoH-FIPS, to make sure that all incoming traffic has transferred to using the DoH protocol, or DoH-FIPS, and then remove the Do53.</p> </important><br>
    /// - On success, responds with [`UpdateResolverEndpointOutput`](crate::operation::update_resolver_endpoint::UpdateResolverEndpointOutput) with field(s):
    ///   - [`resolver_endpoint(Option<ResolverEndpoint>)`](crate::operation::update_resolver_endpoint::UpdateResolverEndpointOutput::resolver_endpoint): <p>The response to an <code>UpdateResolverEndpoint</code> request.</p>
    /// - On failure, responds with [`SdkError<UpdateResolverEndpointError>`](crate::operation::update_resolver_endpoint::UpdateResolverEndpointError)
    pub fn update_resolver_endpoint(&self) -> crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder {
        crate::operation::update_resolver_endpoint::builders::UpdateResolverEndpointFluentBuilder::new(self.handle.clone())
    }
}
