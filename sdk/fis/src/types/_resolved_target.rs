// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a resolved target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResolvedTarget {
    /// <p>The resource type of the target.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the target.</p>
    pub target_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the target.</p>
    pub target_information: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ResolvedTarget {
    /// <p>The resource type of the target.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The name of the target.</p>
    pub fn target_name(&self) -> ::std::option::Option<&str> {
        self.target_name.as_deref()
    }
    /// <p>Information about the target.</p>
    pub fn target_information(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.target_information.as_ref()
    }
}
impl ResolvedTarget {
    /// Creates a new builder-style object to manufacture [`ResolvedTarget`](crate::types::ResolvedTarget).
    pub fn builder() -> crate::types::builders::ResolvedTargetBuilder {
        crate::types::builders::ResolvedTargetBuilder::default()
    }
}

/// A builder for [`ResolvedTarget`](crate::types::ResolvedTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResolvedTargetBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) target_name: ::std::option::Option<::std::string::String>,
    pub(crate) target_information: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ResolvedTargetBuilder {
    /// <p>The resource type of the target.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource type of the target.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The resource type of the target.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The name of the target.</p>
    pub fn target_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the target.</p>
    pub fn set_target_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_name = input;
        self
    }
    /// <p>The name of the target.</p>
    pub fn get_target_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_name
    }
    /// Adds a key-value pair to `target_information`.
    ///
    /// To override the contents of this collection use [`set_target_information`](Self::set_target_information).
    ///
    /// <p>Information about the target.</p>
    pub fn target_information(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.target_information.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.target_information = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Information about the target.</p>
    pub fn set_target_information(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.target_information = input;
        self
    }
    /// <p>Information about the target.</p>
    pub fn get_target_information(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.target_information
    }
    /// Consumes the builder and constructs a [`ResolvedTarget`](crate::types::ResolvedTarget).
    pub fn build(self) -> crate::types::ResolvedTarget {
        crate::types::ResolvedTarget {
            resource_type: self.resource_type,
            target_name: self.target_name,
            target_information: self.target_information,
        }
    }
}
