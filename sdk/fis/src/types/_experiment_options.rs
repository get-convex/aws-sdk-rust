// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the options for an experiment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExperimentOptions {
    /// <p>The account targeting setting for an experiment.</p>
    pub account_targeting: ::std::option::Option<crate::types::AccountTargeting>,
    /// <p>The empty target resolution mode for an experiment.</p>
    pub empty_target_resolution_mode: ::std::option::Option<crate::types::EmptyTargetResolutionMode>,
}
impl ExperimentOptions {
    /// <p>The account targeting setting for an experiment.</p>
    pub fn account_targeting(&self) -> ::std::option::Option<&crate::types::AccountTargeting> {
        self.account_targeting.as_ref()
    }
    /// <p>The empty target resolution mode for an experiment.</p>
    pub fn empty_target_resolution_mode(&self) -> ::std::option::Option<&crate::types::EmptyTargetResolutionMode> {
        self.empty_target_resolution_mode.as_ref()
    }
}
impl ExperimentOptions {
    /// Creates a new builder-style object to manufacture [`ExperimentOptions`](crate::types::ExperimentOptions).
    pub fn builder() -> crate::types::builders::ExperimentOptionsBuilder {
        crate::types::builders::ExperimentOptionsBuilder::default()
    }
}

/// A builder for [`ExperimentOptions`](crate::types::ExperimentOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExperimentOptionsBuilder {
    pub(crate) account_targeting: ::std::option::Option<crate::types::AccountTargeting>,
    pub(crate) empty_target_resolution_mode: ::std::option::Option<crate::types::EmptyTargetResolutionMode>,
}
impl ExperimentOptionsBuilder {
    /// <p>The account targeting setting for an experiment.</p>
    pub fn account_targeting(mut self, input: crate::types::AccountTargeting) -> Self {
        self.account_targeting = ::std::option::Option::Some(input);
        self
    }
    /// <p>The account targeting setting for an experiment.</p>
    pub fn set_account_targeting(mut self, input: ::std::option::Option<crate::types::AccountTargeting>) -> Self {
        self.account_targeting = input;
        self
    }
    /// <p>The account targeting setting for an experiment.</p>
    pub fn get_account_targeting(&self) -> &::std::option::Option<crate::types::AccountTargeting> {
        &self.account_targeting
    }
    /// <p>The empty target resolution mode for an experiment.</p>
    pub fn empty_target_resolution_mode(mut self, input: crate::types::EmptyTargetResolutionMode) -> Self {
        self.empty_target_resolution_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The empty target resolution mode for an experiment.</p>
    pub fn set_empty_target_resolution_mode(mut self, input: ::std::option::Option<crate::types::EmptyTargetResolutionMode>) -> Self {
        self.empty_target_resolution_mode = input;
        self
    }
    /// <p>The empty target resolution mode for an experiment.</p>
    pub fn get_empty_target_resolution_mode(&self) -> &::std::option::Option<crate::types::EmptyTargetResolutionMode> {
        &self.empty_target_resolution_mode
    }
    /// Consumes the builder and constructs a [`ExperimentOptions`](crate::types::ExperimentOptions).
    pub fn build(self) -> crate::types::ExperimentOptions {
        crate::types::ExperimentOptions {
            account_targeting: self.account_targeting,
            empty_target_resolution_mode: self.empty_target_resolution_mode,
        }
    }
}
