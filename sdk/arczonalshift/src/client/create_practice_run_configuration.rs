// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePracticeRunConfiguration`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_identifier(impl Into<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::resource_identifier) / [`set_resource_identifier(Option<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_resource_identifier):<br>required: **true**<br><p>The identifier of the resource to shift away traffic for when a practice run starts a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p> <p>At this time, supported resources are Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p><br>
    ///   - [`blocked_windows(impl Into<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::blocked_windows) / [`set_blocked_windows(Option<Vec::<String>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_blocked_windows):<br>required: **false**<br><p>Optionally, you can block Route 53 ARC from starting practice runs for specific windows of days and times.</p> <p>The format for blocked windows is: DAY:HH:SS-DAY:HH:SS. Keep in mind, when you specify dates, that dates and times for practice runs are in UTC. Also, be aware of potential time adjustments that might be required for daylight saving time differences. Separate multiple blocked windows with spaces.</p> <p>For example, say you run business report summaries three days a week. For this scenario, you might set the following recurring days and times as blocked windows, for example: <code>MON-20:30-21:30 WED-20:30-21:30 FRI-20:30-21:30</code>.</p><br>
    ///   - [`blocked_dates(impl Into<String>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::blocked_dates) / [`set_blocked_dates(Option<Vec::<String>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_blocked_dates):<br>required: **false**<br><p>Optionally, you can block Route 53 ARC from starting practice runs for a resource on specific calendar dates.</p> <p>The format for blocked dates is: YYYY-MM-DD. Keep in mind, when you specify dates, that dates and times for practice runs are in UTC. Separate multiple blocked dates with spaces.</p> <p>For example, if you have an application update scheduled to launch on May 1, 2024, and you don't want practice runs to shift traffic away at that time, you could set a blocked date for <code>2024-05-01</code>.</p><br>
    ///   - [`blocking_alarms(ControlCondition)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::blocking_alarms) / [`set_blocking_alarms(Option<Vec::<ControlCondition>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_blocking_alarms):<br>required: **false**<br><p>An Amazon CloudWatch alarm that you can specify for zonal autoshift practice runs. This alarm blocks Route 53 ARC from starting practice run zonal shifts, and ends a practice run that's in progress, when the alarm is in an <code>ALARM</code> state.</p><br>
    ///   - [`outcome_alarms(ControlCondition)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::outcome_alarms) / [`set_outcome_alarms(Option<Vec::<ControlCondition>>)`](crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::set_outcome_alarms):<br>required: **true**<br><p>The <i>outcome alarm</i> for practice runs is a required Amazon CloudWatch alarm that you specify that ends a practice run when the alarm is in an <code>ALARM</code> state.</p> <p>Configure the alarm to monitor the health of your application when traffic is shifted away from an Availability Zone during each weekly practice run. You should configure the alarm to go into an <code>ALARM</code> state if your application is impacted by the zonal shift, and you want to stop the zonal shift, to let traffic for the resource return to the Availability Zone.</p><br>
    /// - On success, responds with [`CreatePracticeRunConfigurationOutput`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput) with field(s):
    ///   - [`arn(String)`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput::arn): <p>The Amazon Resource Name (ARN) of the resource that you configured the practice run for.</p>
    ///   - [`name(String)`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput::name): <p>The name of the resource that you configured the practice run for.</p>
    ///   - [`zonal_autoshift_status(ZonalAutoshiftStatus)`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput::zonal_autoshift_status): <p>The status for zonal autoshift for a resource. When you specify the autoshift status as <code>ENABLED</code>, Amazon Web Services shifts traffic away from shifts away application resource traffic from an Availability Zone, on your behalf, when Amazon Web Services determines that there's an issue in the Availability Zone that could potentially affect customers.</p> <p>When you enable zonal autoshift, you must also configure practice runs for the resource.</p>
    ///   - [`practice_run_configuration(Option<PracticeRunConfiguration>)`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationOutput::practice_run_configuration): <p>A practice run configuration for a resource. Configurations include the outcome alarm that you specify for practice runs, and, optionally, a blocking alarm and blocking dates and windows.</p>
    /// - On failure, responds with [`SdkError<CreatePracticeRunConfigurationError>`](crate::operation::create_practice_run_configuration::CreatePracticeRunConfigurationError)
    pub fn create_practice_run_configuration(
        &self,
    ) -> crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder {
        crate::operation::create_practice_run_configuration::builders::CreatePracticeRunConfigurationFluentBuilder::new(self.handle.clone())
    }
}
