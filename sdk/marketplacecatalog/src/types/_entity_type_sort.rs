// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object containing all the sort fields per entity type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum EntityTypeSort {
    /// <p>A sort for AMI products.</p>
    AmiProductSort(crate::types::AmiProductSort),
    /// <p>A sort for container products.</p>
    ContainerProductSort(crate::types::ContainerProductSort),
    /// <p>A sort for data products.</p>
    DataProductSort(crate::types::DataProductSort),
    /// <p>A sort for offers.</p>
    OfferSort(crate::types::OfferSort),
    /// <p>A sort for Resale Authorizations.</p>
    ResaleAuthorizationSort(crate::types::ResaleAuthorizationSort),
    /// <p>A sort for SaaS products.</p>
    SaaSProductSort(crate::types::SaaSProductSort),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl EntityTypeSort {
    /// Tries to convert the enum instance into [`AmiProductSort`](crate::types::EntityTypeSort::AmiProductSort), extracting the inner [`AmiProductSort`](crate::types::AmiProductSort).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ami_product_sort(&self) -> ::std::result::Result<&crate::types::AmiProductSort, &Self> {
        if let EntityTypeSort::AmiProductSort(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AmiProductSort`](crate::types::EntityTypeSort::AmiProductSort).
    pub fn is_ami_product_sort(&self) -> bool {
        self.as_ami_product_sort().is_ok()
    }
    /// Tries to convert the enum instance into [`ContainerProductSort`](crate::types::EntityTypeSort::ContainerProductSort), extracting the inner [`ContainerProductSort`](crate::types::ContainerProductSort).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_container_product_sort(&self) -> ::std::result::Result<&crate::types::ContainerProductSort, &Self> {
        if let EntityTypeSort::ContainerProductSort(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ContainerProductSort`](crate::types::EntityTypeSort::ContainerProductSort).
    pub fn is_container_product_sort(&self) -> bool {
        self.as_container_product_sort().is_ok()
    }
    /// Tries to convert the enum instance into [`DataProductSort`](crate::types::EntityTypeSort::DataProductSort), extracting the inner [`DataProductSort`](crate::types::DataProductSort).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_data_product_sort(&self) -> ::std::result::Result<&crate::types::DataProductSort, &Self> {
        if let EntityTypeSort::DataProductSort(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DataProductSort`](crate::types::EntityTypeSort::DataProductSort).
    pub fn is_data_product_sort(&self) -> bool {
        self.as_data_product_sort().is_ok()
    }
    /// Tries to convert the enum instance into [`OfferSort`](crate::types::EntityTypeSort::OfferSort), extracting the inner [`OfferSort`](crate::types::OfferSort).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_offer_sort(&self) -> ::std::result::Result<&crate::types::OfferSort, &Self> {
        if let EntityTypeSort::OfferSort(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OfferSort`](crate::types::EntityTypeSort::OfferSort).
    pub fn is_offer_sort(&self) -> bool {
        self.as_offer_sort().is_ok()
    }
    /// Tries to convert the enum instance into [`ResaleAuthorizationSort`](crate::types::EntityTypeSort::ResaleAuthorizationSort), extracting the inner [`ResaleAuthorizationSort`](crate::types::ResaleAuthorizationSort).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_resale_authorization_sort(&self) -> ::std::result::Result<&crate::types::ResaleAuthorizationSort, &Self> {
        if let EntityTypeSort::ResaleAuthorizationSort(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ResaleAuthorizationSort`](crate::types::EntityTypeSort::ResaleAuthorizationSort).
    pub fn is_resale_authorization_sort(&self) -> bool {
        self.as_resale_authorization_sort().is_ok()
    }
    /// Tries to convert the enum instance into [`SaaSProductSort`](crate::types::EntityTypeSort::SaaSProductSort), extracting the inner [`SaaSProductSort`](crate::types::SaaSProductSort).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_saa_s_product_sort(&self) -> ::std::result::Result<&crate::types::SaaSProductSort, &Self> {
        if let EntityTypeSort::SaaSProductSort(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SaaSProductSort`](crate::types::EntityTypeSort::SaaSProductSort).
    pub fn is_saa_s_product_sort(&self) -> bool {
        self.as_saa_s_product_sort().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
