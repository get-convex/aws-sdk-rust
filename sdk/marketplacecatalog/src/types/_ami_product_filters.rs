// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object containing all the filter fields for AMI products. Client can add a maximum of 8 filters in a single <code>ListEntities</code> request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AmiProductFilters {
    /// <p>Unique identifier for the AMI product.</p>
    pub entity_id: ::std::option::Option<crate::types::AmiProductEntityIdFilter>,
    /// <p>The last date on which the AMI product was modified.</p>
    pub last_modified_date: ::std::option::Option<crate::types::AmiProductLastModifiedDateFilter>,
    /// <p>The title of the AMI product.</p>
    pub product_title: ::std::option::Option<crate::types::AmiProductTitleFilter>,
    /// <p>The visibility of the AMI product.</p>
    pub visibility: ::std::option::Option<crate::types::AmiProductVisibilityFilter>,
}
impl AmiProductFilters {
    /// <p>Unique identifier for the AMI product.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&crate::types::AmiProductEntityIdFilter> {
        self.entity_id.as_ref()
    }
    /// <p>The last date on which the AMI product was modified.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&crate::types::AmiProductLastModifiedDateFilter> {
        self.last_modified_date.as_ref()
    }
    /// <p>The title of the AMI product.</p>
    pub fn product_title(&self) -> ::std::option::Option<&crate::types::AmiProductTitleFilter> {
        self.product_title.as_ref()
    }
    /// <p>The visibility of the AMI product.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::AmiProductVisibilityFilter> {
        self.visibility.as_ref()
    }
}
impl AmiProductFilters {
    /// Creates a new builder-style object to manufacture [`AmiProductFilters`](crate::types::AmiProductFilters).
    pub fn builder() -> crate::types::builders::AmiProductFiltersBuilder {
        crate::types::builders::AmiProductFiltersBuilder::default()
    }
}

/// A builder for [`AmiProductFilters`](crate::types::AmiProductFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AmiProductFiltersBuilder {
    pub(crate) entity_id: ::std::option::Option<crate::types::AmiProductEntityIdFilter>,
    pub(crate) last_modified_date: ::std::option::Option<crate::types::AmiProductLastModifiedDateFilter>,
    pub(crate) product_title: ::std::option::Option<crate::types::AmiProductTitleFilter>,
    pub(crate) visibility: ::std::option::Option<crate::types::AmiProductVisibilityFilter>,
}
impl AmiProductFiltersBuilder {
    /// <p>Unique identifier for the AMI product.</p>
    pub fn entity_id(mut self, input: crate::types::AmiProductEntityIdFilter) -> Self {
        self.entity_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Unique identifier for the AMI product.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<crate::types::AmiProductEntityIdFilter>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>Unique identifier for the AMI product.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<crate::types::AmiProductEntityIdFilter> {
        &self.entity_id
    }
    /// <p>The last date on which the AMI product was modified.</p>
    pub fn last_modified_date(mut self, input: crate::types::AmiProductLastModifiedDateFilter) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last date on which the AMI product was modified.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<crate::types::AmiProductLastModifiedDateFilter>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The last date on which the AMI product was modified.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<crate::types::AmiProductLastModifiedDateFilter> {
        &self.last_modified_date
    }
    /// <p>The title of the AMI product.</p>
    pub fn product_title(mut self, input: crate::types::AmiProductTitleFilter) -> Self {
        self.product_title = ::std::option::Option::Some(input);
        self
    }
    /// <p>The title of the AMI product.</p>
    pub fn set_product_title(mut self, input: ::std::option::Option<crate::types::AmiProductTitleFilter>) -> Self {
        self.product_title = input;
        self
    }
    /// <p>The title of the AMI product.</p>
    pub fn get_product_title(&self) -> &::std::option::Option<crate::types::AmiProductTitleFilter> {
        &self.product_title
    }
    /// <p>The visibility of the AMI product.</p>
    pub fn visibility(mut self, input: crate::types::AmiProductVisibilityFilter) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility of the AMI product.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::AmiProductVisibilityFilter>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The visibility of the AMI product.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::AmiProductVisibilityFilter> {
        &self.visibility
    }
    /// Consumes the builder and constructs a [`AmiProductFilters`](crate::types::AmiProductFilters).
    pub fn build(self) -> crate::types::AmiProductFilters {
        crate::types::AmiProductFilters {
            entity_id: self.entity_id,
            last_modified_date: self.last_modified_date,
            product_title: self.product_title,
            visibility: self.visibility,
        }
    }
}
