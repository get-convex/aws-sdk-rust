// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summarized information about a Resale Authorization.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResaleAuthorizationSummary {
    /// <p>The name of the ResaleAuthorization.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The product ID of the ResaleAuthorization.</p>
    pub product_id: ::std::option::Option<::std::string::String>,
    /// <p>The product name of the ResaleAuthorization.</p>
    pub product_name: ::std::option::Option<::std::string::String>,
    /// <p>The manufacturer account ID of the ResaleAuthorization.</p>
    pub manufacturer_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The manufacturer legal name of the ResaleAuthorization.</p>
    pub manufacturer_legal_name: ::std::option::Option<::std::string::String>,
    /// <p>The reseller account ID of the ResaleAuthorization.</p>
    pub reseller_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The reseller legal name of the ResaleAuthorization</p>
    pub reseller_legal_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the ResaleAuthorization.</p>
    pub status: ::std::option::Option<crate::types::ResaleAuthorizationStatusString>,
    /// <p>The offer extended status of the ResaleAuthorization</p>
    pub offer_extended_status: ::std::option::Option<::std::string::String>,
    /// <p>The created date of the ResaleAuthorization.</p>
    pub created_date: ::std::option::Option<::std::string::String>,
    /// <p>The availability end date of the ResaleAuthorization.</p>
    pub availability_end_date: ::std::option::Option<::std::string::String>,
}
impl ResaleAuthorizationSummary {
    /// <p>The name of the ResaleAuthorization.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The product ID of the ResaleAuthorization.</p>
    pub fn product_id(&self) -> ::std::option::Option<&str> {
        self.product_id.as_deref()
    }
    /// <p>The product name of the ResaleAuthorization.</p>
    pub fn product_name(&self) -> ::std::option::Option<&str> {
        self.product_name.as_deref()
    }
    /// <p>The manufacturer account ID of the ResaleAuthorization.</p>
    pub fn manufacturer_account_id(&self) -> ::std::option::Option<&str> {
        self.manufacturer_account_id.as_deref()
    }
    /// <p>The manufacturer legal name of the ResaleAuthorization.</p>
    pub fn manufacturer_legal_name(&self) -> ::std::option::Option<&str> {
        self.manufacturer_legal_name.as_deref()
    }
    /// <p>The reseller account ID of the ResaleAuthorization.</p>
    pub fn reseller_account_id(&self) -> ::std::option::Option<&str> {
        self.reseller_account_id.as_deref()
    }
    /// <p>The reseller legal name of the ResaleAuthorization</p>
    pub fn reseller_legal_name(&self) -> ::std::option::Option<&str> {
        self.reseller_legal_name.as_deref()
    }
    /// <p>The status of the ResaleAuthorization.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResaleAuthorizationStatusString> {
        self.status.as_ref()
    }
    /// <p>The offer extended status of the ResaleAuthorization</p>
    pub fn offer_extended_status(&self) -> ::std::option::Option<&str> {
        self.offer_extended_status.as_deref()
    }
    /// <p>The created date of the ResaleAuthorization.</p>
    pub fn created_date(&self) -> ::std::option::Option<&str> {
        self.created_date.as_deref()
    }
    /// <p>The availability end date of the ResaleAuthorization.</p>
    pub fn availability_end_date(&self) -> ::std::option::Option<&str> {
        self.availability_end_date.as_deref()
    }
}
impl ResaleAuthorizationSummary {
    /// Creates a new builder-style object to manufacture [`ResaleAuthorizationSummary`](crate::types::ResaleAuthorizationSummary).
    pub fn builder() -> crate::types::builders::ResaleAuthorizationSummaryBuilder {
        crate::types::builders::ResaleAuthorizationSummaryBuilder::default()
    }
}

/// A builder for [`ResaleAuthorizationSummary`](crate::types::ResaleAuthorizationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResaleAuthorizationSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) product_id: ::std::option::Option<::std::string::String>,
    pub(crate) product_name: ::std::option::Option<::std::string::String>,
    pub(crate) manufacturer_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) manufacturer_legal_name: ::std::option::Option<::std::string::String>,
    pub(crate) reseller_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) reseller_legal_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResaleAuthorizationStatusString>,
    pub(crate) offer_extended_status: ::std::option::Option<::std::string::String>,
    pub(crate) created_date: ::std::option::Option<::std::string::String>,
    pub(crate) availability_end_date: ::std::option::Option<::std::string::String>,
}
impl ResaleAuthorizationSummaryBuilder {
    /// <p>The name of the ResaleAuthorization.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the ResaleAuthorization.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the ResaleAuthorization.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The product ID of the ResaleAuthorization.</p>
    pub fn product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The product ID of the ResaleAuthorization.</p>
    pub fn set_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>The product ID of the ResaleAuthorization.</p>
    pub fn get_product_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_id
    }
    /// <p>The product name of the ResaleAuthorization.</p>
    pub fn product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The product name of the ResaleAuthorization.</p>
    pub fn set_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_name = input;
        self
    }
    /// <p>The product name of the ResaleAuthorization.</p>
    pub fn get_product_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_name
    }
    /// <p>The manufacturer account ID of the ResaleAuthorization.</p>
    pub fn manufacturer_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manufacturer_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The manufacturer account ID of the ResaleAuthorization.</p>
    pub fn set_manufacturer_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manufacturer_account_id = input;
        self
    }
    /// <p>The manufacturer account ID of the ResaleAuthorization.</p>
    pub fn get_manufacturer_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.manufacturer_account_id
    }
    /// <p>The manufacturer legal name of the ResaleAuthorization.</p>
    pub fn manufacturer_legal_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manufacturer_legal_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The manufacturer legal name of the ResaleAuthorization.</p>
    pub fn set_manufacturer_legal_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manufacturer_legal_name = input;
        self
    }
    /// <p>The manufacturer legal name of the ResaleAuthorization.</p>
    pub fn get_manufacturer_legal_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.manufacturer_legal_name
    }
    /// <p>The reseller account ID of the ResaleAuthorization.</p>
    pub fn reseller_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reseller_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reseller account ID of the ResaleAuthorization.</p>
    pub fn set_reseller_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reseller_account_id = input;
        self
    }
    /// <p>The reseller account ID of the ResaleAuthorization.</p>
    pub fn get_reseller_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reseller_account_id
    }
    /// <p>The reseller legal name of the ResaleAuthorization</p>
    pub fn reseller_legal_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reseller_legal_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reseller legal name of the ResaleAuthorization</p>
    pub fn set_reseller_legal_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reseller_legal_name = input;
        self
    }
    /// <p>The reseller legal name of the ResaleAuthorization</p>
    pub fn get_reseller_legal_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.reseller_legal_name
    }
    /// <p>The status of the ResaleAuthorization.</p>
    pub fn status(mut self, input: crate::types::ResaleAuthorizationStatusString) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the ResaleAuthorization.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResaleAuthorizationStatusString>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the ResaleAuthorization.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResaleAuthorizationStatusString> {
        &self.status
    }
    /// <p>The offer extended status of the ResaleAuthorization</p>
    pub fn offer_extended_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.offer_extended_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The offer extended status of the ResaleAuthorization</p>
    pub fn set_offer_extended_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.offer_extended_status = input;
        self
    }
    /// <p>The offer extended status of the ResaleAuthorization</p>
    pub fn get_offer_extended_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.offer_extended_status
    }
    /// <p>The created date of the ResaleAuthorization.</p>
    pub fn created_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The created date of the ResaleAuthorization.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The created date of the ResaleAuthorization.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_date
    }
    /// <p>The availability end date of the ResaleAuthorization.</p>
    pub fn availability_end_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_end_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The availability end date of the ResaleAuthorization.</p>
    pub fn set_availability_end_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_end_date = input;
        self
    }
    /// <p>The availability end date of the ResaleAuthorization.</p>
    pub fn get_availability_end_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_end_date
    }
    /// Consumes the builder and constructs a [`ResaleAuthorizationSummary`](crate::types::ResaleAuthorizationSummary).
    pub fn build(self) -> crate::types::ResaleAuthorizationSummary {
        crate::types::ResaleAuthorizationSummary {
            name: self.name,
            product_id: self.product_id,
            product_name: self.product_name,
            manufacturer_account_id: self.manufacturer_account_id,
            manufacturer_legal_name: self.manufacturer_legal_name,
            reseller_account_id: self.reseller_account_id,
            reseller_legal_name: self.reseller_legal_name,
            status: self.status,
            offer_extended_status: self.offer_extended_status,
            created_date: self.created_date,
            availability_end_date: self.availability_end_date,
        }
    }
}
