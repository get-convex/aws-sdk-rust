// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Objects that allows sorting on AMI products based on certain fields and sorting order.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AmiProductSort {
    /// <p>Field to sort the AMI products by.</p>
    pub sort_by: ::std::option::Option<crate::types::AmiProductSortBy>,
    /// <p>The sorting order. Can be <code>ASCENDING</code> or <code>DESCENDING</code>. The default value is <code>DESCENDING</code>.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl AmiProductSort {
    /// <p>Field to sort the AMI products by.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::AmiProductSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The sorting order. Can be <code>ASCENDING</code> or <code>DESCENDING</code>. The default value is <code>DESCENDING</code>.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
}
impl AmiProductSort {
    /// Creates a new builder-style object to manufacture [`AmiProductSort`](crate::types::AmiProductSort).
    pub fn builder() -> crate::types::builders::AmiProductSortBuilder {
        crate::types::builders::AmiProductSortBuilder::default()
    }
}

/// A builder for [`AmiProductSort`](crate::types::AmiProductSort).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AmiProductSortBuilder {
    pub(crate) sort_by: ::std::option::Option<crate::types::AmiProductSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl AmiProductSortBuilder {
    /// <p>Field to sort the AMI products by.</p>
    pub fn sort_by(mut self, input: crate::types::AmiProductSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Field to sort the AMI products by.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::AmiProductSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Field to sort the AMI products by.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::AmiProductSortBy> {
        &self.sort_by
    }
    /// <p>The sorting order. Can be <code>ASCENDING</code> or <code>DESCENDING</code>. The default value is <code>DESCENDING</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sorting order. Can be <code>ASCENDING</code> or <code>DESCENDING</code>. The default value is <code>DESCENDING</code>.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sorting order. Can be <code>ASCENDING</code> or <code>DESCENDING</code>. The default value is <code>DESCENDING</code>.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`AmiProductSort`](crate::types::AmiProductSort).
    pub fn build(self) -> crate::types::AmiProductSort {
        crate::types::AmiProductSort {
            sort_by: self.sort_by,
            sort_order: self.sort_order,
        }
    }
}
