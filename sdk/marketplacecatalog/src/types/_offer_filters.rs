// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter for offers entity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OfferFilters {
    /// <p>Allows filtering on <code>EntityId</code> of an offer.</p>
    pub entity_id: ::std::option::Option<crate::types::OfferEntityIdFilter>,
    /// <p>Allows filtering on the <code>Name</code> of an offer.</p>
    pub name: ::std::option::Option<crate::types::OfferNameFilter>,
    /// <p>Allows filtering on the <code>ProductId</code> of an offer.</p>
    pub product_id: ::std::option::Option<crate::types::OfferProductIdFilter>,
    /// <p>Allows filtering on the <code>ReleaseDate</code> of an offer.</p>
    pub release_date: ::std::option::Option<crate::types::OfferReleaseDateFilter>,
    /// <p>Allows filtering on the <code>AvailabilityEndDate</code> of an offer.</p>
    pub availability_end_date: ::std::option::Option<crate::types::OfferAvailabilityEndDateFilter>,
    /// <p>Allows filtering on the <code>BuyerAccounts</code> of an offer.</p>
    pub buyer_accounts: ::std::option::Option<crate::types::OfferBuyerAccountsFilter>,
    /// <p>Allows filtering on the <code>State</code> of an offer.</p>
    pub state: ::std::option::Option<crate::types::OfferStateFilter>,
    /// <p>Allows filtering on the <code>Targeting</code> of an offer.</p>
    pub targeting: ::std::option::Option<crate::types::OfferTargetingFilter>,
    /// <p>Allows filtering on the <code>LastModifiedDate</code> of an offer.</p>
    pub last_modified_date: ::std::option::Option<crate::types::OfferLastModifiedDateFilter>,
}
impl OfferFilters {
    /// <p>Allows filtering on <code>EntityId</code> of an offer.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&crate::types::OfferEntityIdFilter> {
        self.entity_id.as_ref()
    }
    /// <p>Allows filtering on the <code>Name</code> of an offer.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::OfferNameFilter> {
        self.name.as_ref()
    }
    /// <p>Allows filtering on the <code>ProductId</code> of an offer.</p>
    pub fn product_id(&self) -> ::std::option::Option<&crate::types::OfferProductIdFilter> {
        self.product_id.as_ref()
    }
    /// <p>Allows filtering on the <code>ReleaseDate</code> of an offer.</p>
    pub fn release_date(&self) -> ::std::option::Option<&crate::types::OfferReleaseDateFilter> {
        self.release_date.as_ref()
    }
    /// <p>Allows filtering on the <code>AvailabilityEndDate</code> of an offer.</p>
    pub fn availability_end_date(&self) -> ::std::option::Option<&crate::types::OfferAvailabilityEndDateFilter> {
        self.availability_end_date.as_ref()
    }
    /// <p>Allows filtering on the <code>BuyerAccounts</code> of an offer.</p>
    pub fn buyer_accounts(&self) -> ::std::option::Option<&crate::types::OfferBuyerAccountsFilter> {
        self.buyer_accounts.as_ref()
    }
    /// <p>Allows filtering on the <code>State</code> of an offer.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::OfferStateFilter> {
        self.state.as_ref()
    }
    /// <p>Allows filtering on the <code>Targeting</code> of an offer.</p>
    pub fn targeting(&self) -> ::std::option::Option<&crate::types::OfferTargetingFilter> {
        self.targeting.as_ref()
    }
    /// <p>Allows filtering on the <code>LastModifiedDate</code> of an offer.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&crate::types::OfferLastModifiedDateFilter> {
        self.last_modified_date.as_ref()
    }
}
impl OfferFilters {
    /// Creates a new builder-style object to manufacture [`OfferFilters`](crate::types::OfferFilters).
    pub fn builder() -> crate::types::builders::OfferFiltersBuilder {
        crate::types::builders::OfferFiltersBuilder::default()
    }
}

/// A builder for [`OfferFilters`](crate::types::OfferFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OfferFiltersBuilder {
    pub(crate) entity_id: ::std::option::Option<crate::types::OfferEntityIdFilter>,
    pub(crate) name: ::std::option::Option<crate::types::OfferNameFilter>,
    pub(crate) product_id: ::std::option::Option<crate::types::OfferProductIdFilter>,
    pub(crate) release_date: ::std::option::Option<crate::types::OfferReleaseDateFilter>,
    pub(crate) availability_end_date: ::std::option::Option<crate::types::OfferAvailabilityEndDateFilter>,
    pub(crate) buyer_accounts: ::std::option::Option<crate::types::OfferBuyerAccountsFilter>,
    pub(crate) state: ::std::option::Option<crate::types::OfferStateFilter>,
    pub(crate) targeting: ::std::option::Option<crate::types::OfferTargetingFilter>,
    pub(crate) last_modified_date: ::std::option::Option<crate::types::OfferLastModifiedDateFilter>,
}
impl OfferFiltersBuilder {
    /// <p>Allows filtering on <code>EntityId</code> of an offer.</p>
    pub fn entity_id(mut self, input: crate::types::OfferEntityIdFilter) -> Self {
        self.entity_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on <code>EntityId</code> of an offer.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<crate::types::OfferEntityIdFilter>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>Allows filtering on <code>EntityId</code> of an offer.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<crate::types::OfferEntityIdFilter> {
        &self.entity_id
    }
    /// <p>Allows filtering on the <code>Name</code> of an offer.</p>
    pub fn name(mut self, input: crate::types::OfferNameFilter) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on the <code>Name</code> of an offer.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::OfferNameFilter>) -> Self {
        self.name = input;
        self
    }
    /// <p>Allows filtering on the <code>Name</code> of an offer.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::OfferNameFilter> {
        &self.name
    }
    /// <p>Allows filtering on the <code>ProductId</code> of an offer.</p>
    pub fn product_id(mut self, input: crate::types::OfferProductIdFilter) -> Self {
        self.product_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on the <code>ProductId</code> of an offer.</p>
    pub fn set_product_id(mut self, input: ::std::option::Option<crate::types::OfferProductIdFilter>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>Allows filtering on the <code>ProductId</code> of an offer.</p>
    pub fn get_product_id(&self) -> &::std::option::Option<crate::types::OfferProductIdFilter> {
        &self.product_id
    }
    /// <p>Allows filtering on the <code>ReleaseDate</code> of an offer.</p>
    pub fn release_date(mut self, input: crate::types::OfferReleaseDateFilter) -> Self {
        self.release_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on the <code>ReleaseDate</code> of an offer.</p>
    pub fn set_release_date(mut self, input: ::std::option::Option<crate::types::OfferReleaseDateFilter>) -> Self {
        self.release_date = input;
        self
    }
    /// <p>Allows filtering on the <code>ReleaseDate</code> of an offer.</p>
    pub fn get_release_date(&self) -> &::std::option::Option<crate::types::OfferReleaseDateFilter> {
        &self.release_date
    }
    /// <p>Allows filtering on the <code>AvailabilityEndDate</code> of an offer.</p>
    pub fn availability_end_date(mut self, input: crate::types::OfferAvailabilityEndDateFilter) -> Self {
        self.availability_end_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on the <code>AvailabilityEndDate</code> of an offer.</p>
    pub fn set_availability_end_date(mut self, input: ::std::option::Option<crate::types::OfferAvailabilityEndDateFilter>) -> Self {
        self.availability_end_date = input;
        self
    }
    /// <p>Allows filtering on the <code>AvailabilityEndDate</code> of an offer.</p>
    pub fn get_availability_end_date(&self) -> &::std::option::Option<crate::types::OfferAvailabilityEndDateFilter> {
        &self.availability_end_date
    }
    /// <p>Allows filtering on the <code>BuyerAccounts</code> of an offer.</p>
    pub fn buyer_accounts(mut self, input: crate::types::OfferBuyerAccountsFilter) -> Self {
        self.buyer_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on the <code>BuyerAccounts</code> of an offer.</p>
    pub fn set_buyer_accounts(mut self, input: ::std::option::Option<crate::types::OfferBuyerAccountsFilter>) -> Self {
        self.buyer_accounts = input;
        self
    }
    /// <p>Allows filtering on the <code>BuyerAccounts</code> of an offer.</p>
    pub fn get_buyer_accounts(&self) -> &::std::option::Option<crate::types::OfferBuyerAccountsFilter> {
        &self.buyer_accounts
    }
    /// <p>Allows filtering on the <code>State</code> of an offer.</p>
    pub fn state(mut self, input: crate::types::OfferStateFilter) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on the <code>State</code> of an offer.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::OfferStateFilter>) -> Self {
        self.state = input;
        self
    }
    /// <p>Allows filtering on the <code>State</code> of an offer.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::OfferStateFilter> {
        &self.state
    }
    /// <p>Allows filtering on the <code>Targeting</code> of an offer.</p>
    pub fn targeting(mut self, input: crate::types::OfferTargetingFilter) -> Self {
        self.targeting = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on the <code>Targeting</code> of an offer.</p>
    pub fn set_targeting(mut self, input: ::std::option::Option<crate::types::OfferTargetingFilter>) -> Self {
        self.targeting = input;
        self
    }
    /// <p>Allows filtering on the <code>Targeting</code> of an offer.</p>
    pub fn get_targeting(&self) -> &::std::option::Option<crate::types::OfferTargetingFilter> {
        &self.targeting
    }
    /// <p>Allows filtering on the <code>LastModifiedDate</code> of an offer.</p>
    pub fn last_modified_date(mut self, input: crate::types::OfferLastModifiedDateFilter) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows filtering on the <code>LastModifiedDate</code> of an offer.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<crate::types::OfferLastModifiedDateFilter>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>Allows filtering on the <code>LastModifiedDate</code> of an offer.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<crate::types::OfferLastModifiedDateFilter> {
        &self.last_modified_date
    }
    /// Consumes the builder and constructs a [`OfferFilters`](crate::types::OfferFilters).
    pub fn build(self) -> crate::types::OfferFilters {
        crate::types::OfferFilters {
            entity_id: self.entity_id,
            name: self.name,
            product_id: self.product_id,
            release_date: self.release_date,
            availability_end_date: self.availability_end_date,
            buyer_accounts: self.buyer_accounts,
            state: self.state,
            targeting: self.targeting,
            last_modified_date: self.last_modified_date,
        }
    }
}
