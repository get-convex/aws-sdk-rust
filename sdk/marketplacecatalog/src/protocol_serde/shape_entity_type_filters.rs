// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_entity_type_filters(
    object_4: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EntityTypeFilters,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::EntityTypeFilters::DataProductFilters(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_4.key("DataProductFilters").start_object();
            crate::protocol_serde::shape_data_product_filters::ser_data_product_filters(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::EntityTypeFilters::SaaSProductFilters(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_4.key("SaaSProductFilters").start_object();
            crate::protocol_serde::shape_saa_s_product_filters::ser_saa_s_product_filters(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::types::EntityTypeFilters::AmiProductFilters(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_4.key("AmiProductFilters").start_object();
            crate::protocol_serde::shape_ami_product_filters::ser_ami_product_filters(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::types::EntityTypeFilters::OfferFilters(inner) => {
            #[allow(unused_mut)]
            let mut object_4 = object_4.key("OfferFilters").start_object();
            crate::protocol_serde::shape_offer_filters::ser_offer_filters(&mut object_4, inner)?;
            object_4.finish();
        }
        crate::types::EntityTypeFilters::ContainerProductFilters(inner) => {
            #[allow(unused_mut)]
            let mut object_5 = object_4.key("ContainerProductFilters").start_object();
            crate::protocol_serde::shape_container_product_filters::ser_container_product_filters(&mut object_5, inner)?;
            object_5.finish();
        }
        crate::types::EntityTypeFilters::ResaleAuthorizationFilters(inner) => {
            #[allow(unused_mut)]
            let mut object_6 = object_4.key("ResaleAuthorizationFilters").start_object();
            crate::protocol_serde::shape_resale_authorization_filters::ser_resale_authorization_filters(&mut object_6, inner)?;
            object_6.finish();
        }
        crate::types::EntityTypeFilters::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "EntityTypeFilters",
            ))
        }
    }
    Ok(())
}
