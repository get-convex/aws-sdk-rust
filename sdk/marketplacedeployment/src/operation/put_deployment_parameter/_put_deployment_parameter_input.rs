// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutDeploymentParameterInput {
    /// <p>The catalog related to the request. Fixed value: <code>AWS Marketplace</code></p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>The product for which AWS Marketplace will save secrets for the buyer’s account.</p>
    pub product_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the agreement.</p>
    pub agreement_id: ::std::option::Option<::std::string::String>,
    /// <p>The deployment parameter targeted to the acceptor of an agreement for which to create the AWS Secret Manager resource.</p>
    pub deployment_parameter: ::std::option::Option<crate::types::DeploymentParameterInput>,
    /// <p>A map of key-value pairs, where each pair represents a tag saved to the resource. Tags will only be applied for create operations, and they'll be ignored if the resource already exists.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The date when deployment parameters expire and are scheduled for deletion.</p>
    pub expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The idempotency token for deployment parameters. A unique identifier for the new version.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl PutDeploymentParameterInput {
    /// <p>The catalog related to the request. Fixed value: <code>AWS Marketplace</code></p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The product for which AWS Marketplace will save secrets for the buyer’s account.</p>
    pub fn product_id(&self) -> ::std::option::Option<&str> {
        self.product_id.as_deref()
    }
    /// <p>The unique identifier of the agreement.</p>
    pub fn agreement_id(&self) -> ::std::option::Option<&str> {
        self.agreement_id.as_deref()
    }
    /// <p>The deployment parameter targeted to the acceptor of an agreement for which to create the AWS Secret Manager resource.</p>
    pub fn deployment_parameter(&self) -> ::std::option::Option<&crate::types::DeploymentParameterInput> {
        self.deployment_parameter.as_ref()
    }
    /// <p>A map of key-value pairs, where each pair represents a tag saved to the resource. Tags will only be applied for create operations, and they'll be ignored if the resource already exists.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The date when deployment parameters expire and are scheduled for deletion.</p>
    pub fn expiration_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_date.as_ref()
    }
    /// <p>The idempotency token for deployment parameters. A unique identifier for the new version.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl PutDeploymentParameterInput {
    /// Creates a new builder-style object to manufacture [`PutDeploymentParameterInput`](crate::operation::put_deployment_parameter::PutDeploymentParameterInput).
    pub fn builder() -> crate::operation::put_deployment_parameter::builders::PutDeploymentParameterInputBuilder {
        crate::operation::put_deployment_parameter::builders::PutDeploymentParameterInputBuilder::default()
    }
}

/// A builder for [`PutDeploymentParameterInput`](crate::operation::put_deployment_parameter::PutDeploymentParameterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutDeploymentParameterInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) product_id: ::std::option::Option<::std::string::String>,
    pub(crate) agreement_id: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_parameter: ::std::option::Option<crate::types::DeploymentParameterInput>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl PutDeploymentParameterInputBuilder {
    /// <p>The catalog related to the request. Fixed value: <code>AWS Marketplace</code></p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWS Marketplace</code></p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The catalog related to the request. Fixed value: <code>AWS Marketplace</code></p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The product for which AWS Marketplace will save secrets for the buyer’s account.</p>
    /// This field is required.
    pub fn product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The product for which AWS Marketplace will save secrets for the buyer’s account.</p>
    pub fn set_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>The product for which AWS Marketplace will save secrets for the buyer’s account.</p>
    pub fn get_product_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_id
    }
    /// <p>The unique identifier of the agreement.</p>
    /// This field is required.
    pub fn agreement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agreement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agreement.</p>
    pub fn set_agreement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agreement_id = input;
        self
    }
    /// <p>The unique identifier of the agreement.</p>
    pub fn get_agreement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agreement_id
    }
    /// <p>The deployment parameter targeted to the acceptor of an agreement for which to create the AWS Secret Manager resource.</p>
    /// This field is required.
    pub fn deployment_parameter(mut self, input: crate::types::DeploymentParameterInput) -> Self {
        self.deployment_parameter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment parameter targeted to the acceptor of an agreement for which to create the AWS Secret Manager resource.</p>
    pub fn set_deployment_parameter(mut self, input: ::std::option::Option<crate::types::DeploymentParameterInput>) -> Self {
        self.deployment_parameter = input;
        self
    }
    /// <p>The deployment parameter targeted to the acceptor of an agreement for which to create the AWS Secret Manager resource.</p>
    pub fn get_deployment_parameter(&self) -> &::std::option::Option<crate::types::DeploymentParameterInput> {
        &self.deployment_parameter
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of key-value pairs, where each pair represents a tag saved to the resource. Tags will only be applied for create operations, and they'll be ignored if the resource already exists.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs, where each pair represents a tag saved to the resource. Tags will only be applied for create operations, and they'll be ignored if the resource already exists.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of key-value pairs, where each pair represents a tag saved to the resource. Tags will only be applied for create operations, and they'll be ignored if the resource already exists.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The date when deployment parameters expire and are scheduled for deletion.</p>
    pub fn expiration_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when deployment parameters expire and are scheduled for deletion.</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p>The date when deployment parameters expire and are scheduled for deletion.</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_date
    }
    /// <p>The idempotency token for deployment parameters. A unique identifier for the new version.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token for deployment parameters. A unique identifier for the new version.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token for deployment parameters. A unique identifier for the new version.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`PutDeploymentParameterInput`](crate::operation::put_deployment_parameter::PutDeploymentParameterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_deployment_parameter::PutDeploymentParameterInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_deployment_parameter::PutDeploymentParameterInput {
            catalog: self.catalog,
            product_id: self.product_id,
            agreement_id: self.agreement_id,
            deployment_parameter: self.deployment_parameter,
            tags: self.tags,
            expiration_date: self.expiration_date,
            client_token: self.client_token,
        })
    }
}
