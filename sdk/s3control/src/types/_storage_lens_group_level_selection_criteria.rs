// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates which Storage Lens group ARNs to include or exclude in the Storage Lens group aggregation. You can only attach Storage Lens groups to your Storage Lens dashboard if they're included in your Storage Lens group aggregation. If this value is left null, then all Storage Lens groups are selected.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StorageLensGroupLevelSelectionCriteria {
    /// <p>Indicates which Storage Lens group ARNs to include in the Storage Lens group aggregation.</p>
    pub include: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates which Storage Lens group ARNs to exclude from the Storage Lens group aggregation.</p>
    pub exclude: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StorageLensGroupLevelSelectionCriteria {
    /// <p>Indicates which Storage Lens group ARNs to include in the Storage Lens group aggregation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include.is_none()`.
    pub fn include(&self) -> &[::std::string::String] {
        self.include.as_deref().unwrap_or_default()
    }
    /// <p>Indicates which Storage Lens group ARNs to exclude from the Storage Lens group aggregation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclude.is_none()`.
    pub fn exclude(&self) -> &[::std::string::String] {
        self.exclude.as_deref().unwrap_or_default()
    }
}
impl StorageLensGroupLevelSelectionCriteria {
    /// Creates a new builder-style object to manufacture [`StorageLensGroupLevelSelectionCriteria`](crate::types::StorageLensGroupLevelSelectionCriteria).
    pub fn builder() -> crate::types::builders::StorageLensGroupLevelSelectionCriteriaBuilder {
        crate::types::builders::StorageLensGroupLevelSelectionCriteriaBuilder::default()
    }
}

/// A builder for [`StorageLensGroupLevelSelectionCriteria`](crate::types::StorageLensGroupLevelSelectionCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StorageLensGroupLevelSelectionCriteriaBuilder {
    pub(crate) include: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) exclude: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StorageLensGroupLevelSelectionCriteriaBuilder {
    /// Appends an item to `include`.
    ///
    /// To override the contents of this collection use [`set_include`](Self::set_include).
    ///
    /// <p>Indicates which Storage Lens group ARNs to include in the Storage Lens group aggregation.</p>
    pub fn include(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.include.unwrap_or_default();
        v.push(input.into());
        self.include = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates which Storage Lens group ARNs to include in the Storage Lens group aggregation.</p>
    pub fn set_include(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.include = input;
        self
    }
    /// <p>Indicates which Storage Lens group ARNs to include in the Storage Lens group aggregation.</p>
    pub fn get_include(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.include
    }
    /// Appends an item to `exclude`.
    ///
    /// To override the contents of this collection use [`set_exclude`](Self::set_exclude).
    ///
    /// <p>Indicates which Storage Lens group ARNs to exclude from the Storage Lens group aggregation.</p>
    pub fn exclude(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclude.unwrap_or_default();
        v.push(input.into());
        self.exclude = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates which Storage Lens group ARNs to exclude from the Storage Lens group aggregation.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclude = input;
        self
    }
    /// <p>Indicates which Storage Lens group ARNs to exclude from the Storage Lens group aggregation.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclude
    }
    /// Consumes the builder and constructs a [`StorageLensGroupLevelSelectionCriteria`](crate::types::StorageLensGroupLevelSelectionCriteria).
    pub fn build(self) -> crate::types::StorageLensGroupLevelSelectionCriteria {
        crate::types::StorageLensGroupLevelSelectionCriteria {
            include: self.include,
            exclude: self.exclude,
        }
    }
}
