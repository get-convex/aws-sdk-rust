// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A logical operator that allows multiple filter conditions to be joined for more complex comparisons of Storage Lens group data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StorageLensGroupAndOperator {
    /// <p>Contains a list of prefixes. At least one prefix must be specified. Up to 10 prefixes are allowed.</p>
    pub match_any_prefix: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Contains a list of suffixes. At least one suffix must be specified. Up to 10 suffixes are allowed.</p>
    pub match_any_suffix: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Contains the list of object tags. At least one object tag must be specified. Up to 10 object tags are allowed.</p>
    pub match_any_tag: ::std::option::Option<::std::vec::Vec<crate::types::S3Tag>>,
    /// <p>Contains <code>DaysGreaterThan</code> and <code>DaysLessThan</code> to define the object age range (minimum and maximum number of days).</p>
    pub match_object_age: ::std::option::Option<crate::types::MatchObjectAge>,
    /// <p>Contains <code>BytesGreaterThan</code> and <code>BytesLessThan</code> to define the object size range (minimum and maximum number of Bytes).</p>
    pub match_object_size: ::std::option::Option<crate::types::MatchObjectSize>,
}
impl StorageLensGroupAndOperator {
    /// <p>Contains a list of prefixes. At least one prefix must be specified. Up to 10 prefixes are allowed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_any_prefix.is_none()`.
    pub fn match_any_prefix(&self) -> &[::std::string::String] {
        self.match_any_prefix.as_deref().unwrap_or_default()
    }
    /// <p>Contains a list of suffixes. At least one suffix must be specified. Up to 10 suffixes are allowed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_any_suffix.is_none()`.
    pub fn match_any_suffix(&self) -> &[::std::string::String] {
        self.match_any_suffix.as_deref().unwrap_or_default()
    }
    /// <p>Contains the list of object tags. At least one object tag must be specified. Up to 10 object tags are allowed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_any_tag.is_none()`.
    pub fn match_any_tag(&self) -> &[crate::types::S3Tag] {
        self.match_any_tag.as_deref().unwrap_or_default()
    }
    /// <p>Contains <code>DaysGreaterThan</code> and <code>DaysLessThan</code> to define the object age range (minimum and maximum number of days).</p>
    pub fn match_object_age(&self) -> ::std::option::Option<&crate::types::MatchObjectAge> {
        self.match_object_age.as_ref()
    }
    /// <p>Contains <code>BytesGreaterThan</code> and <code>BytesLessThan</code> to define the object size range (minimum and maximum number of Bytes).</p>
    pub fn match_object_size(&self) -> ::std::option::Option<&crate::types::MatchObjectSize> {
        self.match_object_size.as_ref()
    }
}
impl StorageLensGroupAndOperator {
    /// Creates a new builder-style object to manufacture [`StorageLensGroupAndOperator`](crate::types::StorageLensGroupAndOperator).
    pub fn builder() -> crate::types::builders::StorageLensGroupAndOperatorBuilder {
        crate::types::builders::StorageLensGroupAndOperatorBuilder::default()
    }
}

/// A builder for [`StorageLensGroupAndOperator`](crate::types::StorageLensGroupAndOperator).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StorageLensGroupAndOperatorBuilder {
    pub(crate) match_any_prefix: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) match_any_suffix: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) match_any_tag: ::std::option::Option<::std::vec::Vec<crate::types::S3Tag>>,
    pub(crate) match_object_age: ::std::option::Option<crate::types::MatchObjectAge>,
    pub(crate) match_object_size: ::std::option::Option<crate::types::MatchObjectSize>,
}
impl StorageLensGroupAndOperatorBuilder {
    /// Appends an item to `match_any_prefix`.
    ///
    /// To override the contents of this collection use [`set_match_any_prefix`](Self::set_match_any_prefix).
    ///
    /// <p>Contains a list of prefixes. At least one prefix must be specified. Up to 10 prefixes are allowed.</p>
    pub fn match_any_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.match_any_prefix.unwrap_or_default();
        v.push(input.into());
        self.match_any_prefix = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains a list of prefixes. At least one prefix must be specified. Up to 10 prefixes are allowed.</p>
    pub fn set_match_any_prefix(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.match_any_prefix = input;
        self
    }
    /// <p>Contains a list of prefixes. At least one prefix must be specified. Up to 10 prefixes are allowed.</p>
    pub fn get_match_any_prefix(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.match_any_prefix
    }
    /// Appends an item to `match_any_suffix`.
    ///
    /// To override the contents of this collection use [`set_match_any_suffix`](Self::set_match_any_suffix).
    ///
    /// <p>Contains a list of suffixes. At least one suffix must be specified. Up to 10 suffixes are allowed.</p>
    pub fn match_any_suffix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.match_any_suffix.unwrap_or_default();
        v.push(input.into());
        self.match_any_suffix = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains a list of suffixes. At least one suffix must be specified. Up to 10 suffixes are allowed.</p>
    pub fn set_match_any_suffix(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.match_any_suffix = input;
        self
    }
    /// <p>Contains a list of suffixes. At least one suffix must be specified. Up to 10 suffixes are allowed.</p>
    pub fn get_match_any_suffix(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.match_any_suffix
    }
    /// Appends an item to `match_any_tag`.
    ///
    /// To override the contents of this collection use [`set_match_any_tag`](Self::set_match_any_tag).
    ///
    /// <p>Contains the list of object tags. At least one object tag must be specified. Up to 10 object tags are allowed.</p>
    pub fn match_any_tag(mut self, input: crate::types::S3Tag) -> Self {
        let mut v = self.match_any_tag.unwrap_or_default();
        v.push(input);
        self.match_any_tag = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the list of object tags. At least one object tag must be specified. Up to 10 object tags are allowed.</p>
    pub fn set_match_any_tag(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::S3Tag>>) -> Self {
        self.match_any_tag = input;
        self
    }
    /// <p>Contains the list of object tags. At least one object tag must be specified. Up to 10 object tags are allowed.</p>
    pub fn get_match_any_tag(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::S3Tag>> {
        &self.match_any_tag
    }
    /// <p>Contains <code>DaysGreaterThan</code> and <code>DaysLessThan</code> to define the object age range (minimum and maximum number of days).</p>
    pub fn match_object_age(mut self, input: crate::types::MatchObjectAge) -> Self {
        self.match_object_age = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains <code>DaysGreaterThan</code> and <code>DaysLessThan</code> to define the object age range (minimum and maximum number of days).</p>
    pub fn set_match_object_age(mut self, input: ::std::option::Option<crate::types::MatchObjectAge>) -> Self {
        self.match_object_age = input;
        self
    }
    /// <p>Contains <code>DaysGreaterThan</code> and <code>DaysLessThan</code> to define the object age range (minimum and maximum number of days).</p>
    pub fn get_match_object_age(&self) -> &::std::option::Option<crate::types::MatchObjectAge> {
        &self.match_object_age
    }
    /// <p>Contains <code>BytesGreaterThan</code> and <code>BytesLessThan</code> to define the object size range (minimum and maximum number of Bytes).</p>
    pub fn match_object_size(mut self, input: crate::types::MatchObjectSize) -> Self {
        self.match_object_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains <code>BytesGreaterThan</code> and <code>BytesLessThan</code> to define the object size range (minimum and maximum number of Bytes).</p>
    pub fn set_match_object_size(mut self, input: ::std::option::Option<crate::types::MatchObjectSize>) -> Self {
        self.match_object_size = input;
        self
    }
    /// <p>Contains <code>BytesGreaterThan</code> and <code>BytesLessThan</code> to define the object size range (minimum and maximum number of Bytes).</p>
    pub fn get_match_object_size(&self) -> &::std::option::Option<crate::types::MatchObjectSize> {
        &self.match_object_size
    }
    /// Consumes the builder and constructs a [`StorageLensGroupAndOperator`](crate::types::StorageLensGroupAndOperator).
    pub fn build(self) -> crate::types::StorageLensGroupAndOperator {
        crate::types::StorageLensGroupAndOperator {
            match_any_prefix: self.match_any_prefix,
            match_any_suffix: self.match_any_suffix,
            match_any_tag: self.match_any_tag,
            match_object_age: self.match_object_age,
            match_object_size: self.match_object_size,
        }
    }
}
