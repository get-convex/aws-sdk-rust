// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for information about the registered location.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAccessGrantsLocationsEntry {
    /// <p>The date and time when you registered the location.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the registered location to which you are granting access. S3 Access Grants assigns this ID when you register the location. S3 Access Grants assigns the ID <code>default</code> to the default location <code>s3://</code> and assigns an auto-generated ID to other locations that you register.</p>
    pub access_grants_location_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the registered location.</p>
    pub access_grants_location_arn: ::std::option::Option<::std::string::String>,
    /// <p>The S3 path to the location that you are registering. The location scope can be the default S3 location <code>s3://</code>, the S3 path to a bucket <code>s3://<bucket></bucket></code>, or the S3 path to a bucket and prefix <code>s3://<bucket>
    /// /
    /// <prefix></prefix>
    /// </bucket></code>. A prefix in S3 is a string of characters at the beginning of an object key name used to organize the objects that you store in your S3 buckets. For example, object key names that start with the <code>engineering/</code> prefix or object key names that start with the <code>marketing/campaigns/</code> prefix.</p>
    pub location_scope: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the registered location. S3 Access Grants assumes this role to manage access to the registered location.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
}
impl ListAccessGrantsLocationsEntry {
    /// <p>The date and time when you registered the location.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The ID of the registered location to which you are granting access. S3 Access Grants assigns this ID when you register the location. S3 Access Grants assigns the ID <code>default</code> to the default location <code>s3://</code> and assigns an auto-generated ID to other locations that you register.</p>
    pub fn access_grants_location_id(&self) -> ::std::option::Option<&str> {
        self.access_grants_location_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the registered location.</p>
    pub fn access_grants_location_arn(&self) -> ::std::option::Option<&str> {
        self.access_grants_location_arn.as_deref()
    }
    /// <p>The S3 path to the location that you are registering. The location scope can be the default S3 location <code>s3://</code>, the S3 path to a bucket <code>s3://<bucket></bucket></code>, or the S3 path to a bucket and prefix <code>s3://<bucket>
    /// /
    /// <prefix></prefix>
    /// </bucket></code>. A prefix in S3 is a string of characters at the beginning of an object key name used to organize the objects that you store in your S3 buckets. For example, object key names that start with the <code>engineering/</code> prefix or object key names that start with the <code>marketing/campaigns/</code> prefix.</p>
    pub fn location_scope(&self) -> ::std::option::Option<&str> {
        self.location_scope.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the registered location. S3 Access Grants assumes this role to manage access to the registered location.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
}
impl ListAccessGrantsLocationsEntry {
    /// Creates a new builder-style object to manufacture [`ListAccessGrantsLocationsEntry`](crate::types::ListAccessGrantsLocationsEntry).
    pub fn builder() -> crate::types::builders::ListAccessGrantsLocationsEntryBuilder {
        crate::types::builders::ListAccessGrantsLocationsEntryBuilder::default()
    }
}

/// A builder for [`ListAccessGrantsLocationsEntry`](crate::types::ListAccessGrantsLocationsEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAccessGrantsLocationsEntryBuilder {
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) access_grants_location_id: ::std::option::Option<::std::string::String>,
    pub(crate) access_grants_location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) location_scope: ::std::option::Option<::std::string::String>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
}
impl ListAccessGrantsLocationsEntryBuilder {
    /// <p>The date and time when you registered the location.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when you registered the location.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when you registered the location.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The ID of the registered location to which you are granting access. S3 Access Grants assigns this ID when you register the location. S3 Access Grants assigns the ID <code>default</code> to the default location <code>s3://</code> and assigns an auto-generated ID to other locations that you register.</p>
    pub fn access_grants_location_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_grants_location_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the registered location to which you are granting access. S3 Access Grants assigns this ID when you register the location. S3 Access Grants assigns the ID <code>default</code> to the default location <code>s3://</code> and assigns an auto-generated ID to other locations that you register.</p>
    pub fn set_access_grants_location_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_grants_location_id = input;
        self
    }
    /// <p>The ID of the registered location to which you are granting access. S3 Access Grants assigns this ID when you register the location. S3 Access Grants assigns the ID <code>default</code> to the default location <code>s3://</code> and assigns an auto-generated ID to other locations that you register.</p>
    pub fn get_access_grants_location_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_grants_location_id
    }
    /// <p>The Amazon Resource Name (ARN) of the registered location.</p>
    pub fn access_grants_location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_grants_location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the registered location.</p>
    pub fn set_access_grants_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_grants_location_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the registered location.</p>
    pub fn get_access_grants_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_grants_location_arn
    }
    /// <p>The S3 path to the location that you are registering. The location scope can be the default S3 location <code>s3://</code>, the S3 path to a bucket <code>s3://<bucket></bucket></code>, or the S3 path to a bucket and prefix <code>s3://<bucket>
    /// /
    /// <prefix></prefix>
    /// </bucket></code>. A prefix in S3 is a string of characters at the beginning of an object key name used to organize the objects that you store in your S3 buckets. For example, object key names that start with the <code>engineering/</code> prefix or object key names that start with the <code>marketing/campaigns/</code> prefix.</p>
    pub fn location_scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 path to the location that you are registering. The location scope can be the default S3 location <code>s3://</code>, the S3 path to a bucket <code>s3://<bucket></bucket></code>, or the S3 path to a bucket and prefix <code>s3://<bucket>
    /// /
    /// <prefix></prefix>
    /// </bucket></code>. A prefix in S3 is a string of characters at the beginning of an object key name used to organize the objects that you store in your S3 buckets. For example, object key names that start with the <code>engineering/</code> prefix or object key names that start with the <code>marketing/campaigns/</code> prefix.</p>
    pub fn set_location_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_scope = input;
        self
    }
    /// <p>The S3 path to the location that you are registering. The location scope can be the default S3 location <code>s3://</code>, the S3 path to a bucket <code>s3://<bucket></bucket></code>, or the S3 path to a bucket and prefix <code>s3://<bucket>
    /// /
    /// <prefix></prefix>
    /// </bucket></code>. A prefix in S3 is a string of characters at the beginning of an object key name used to organize the objects that you store in your S3 buckets. For example, object key names that start with the <code>engineering/</code> prefix or object key names that start with the <code>marketing/campaigns/</code> prefix.</p>
    pub fn get_location_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_scope
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the registered location. S3 Access Grants assumes this role to manage access to the registered location.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the registered location. S3 Access Grants assumes this role to manage access to the registered location.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the registered location. S3 Access Grants assumes this role to manage access to the registered location.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// Consumes the builder and constructs a [`ListAccessGrantsLocationsEntry`](crate::types::ListAccessGrantsLocationsEntry).
    pub fn build(self) -> crate::types::ListAccessGrantsLocationsEntry {
        crate::types::ListAccessGrantsLocationsEntry {
            created_at: self.created_at,
            access_grants_location_id: self.access_grants_location_id,
            access_grants_location_arn: self.access_grants_location_arn,
            location_scope: self.location_scope,
            iam_role_arn: self.iam_role_arn,
        }
    }
}
