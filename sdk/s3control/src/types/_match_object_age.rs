// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter condition that specifies the object age range of included objects in days. Only integers are supported.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatchObjectAge {
    /// <p>Specifies the maximum object age in days. Must be a positive whole number, greater than the minimum object age and less than or equal to 2,147,483,647.</p>
    pub days_greater_than: i32,
    /// <p>Specifies the minimum object age in days. The value must be a positive whole number, greater than 0 and less than or equal to 2,147,483,647.</p>
    pub days_less_than: i32,
}
impl MatchObjectAge {
    /// <p>Specifies the maximum object age in days. Must be a positive whole number, greater than the minimum object age and less than or equal to 2,147,483,647.</p>
    pub fn days_greater_than(&self) -> i32 {
        self.days_greater_than
    }
    /// <p>Specifies the minimum object age in days. The value must be a positive whole number, greater than 0 and less than or equal to 2,147,483,647.</p>
    pub fn days_less_than(&self) -> i32 {
        self.days_less_than
    }
}
impl MatchObjectAge {
    /// Creates a new builder-style object to manufacture [`MatchObjectAge`](crate::types::MatchObjectAge).
    pub fn builder() -> crate::types::builders::MatchObjectAgeBuilder {
        crate::types::builders::MatchObjectAgeBuilder::default()
    }
}

/// A builder for [`MatchObjectAge`](crate::types::MatchObjectAge).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MatchObjectAgeBuilder {
    pub(crate) days_greater_than: ::std::option::Option<i32>,
    pub(crate) days_less_than: ::std::option::Option<i32>,
}
impl MatchObjectAgeBuilder {
    /// <p>Specifies the maximum object age in days. Must be a positive whole number, greater than the minimum object age and less than or equal to 2,147,483,647.</p>
    pub fn days_greater_than(mut self, input: i32) -> Self {
        self.days_greater_than = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum object age in days. Must be a positive whole number, greater than the minimum object age and less than or equal to 2,147,483,647.</p>
    pub fn set_days_greater_than(mut self, input: ::std::option::Option<i32>) -> Self {
        self.days_greater_than = input;
        self
    }
    /// <p>Specifies the maximum object age in days. Must be a positive whole number, greater than the minimum object age and less than or equal to 2,147,483,647.</p>
    pub fn get_days_greater_than(&self) -> &::std::option::Option<i32> {
        &self.days_greater_than
    }
    /// <p>Specifies the minimum object age in days. The value must be a positive whole number, greater than 0 and less than or equal to 2,147,483,647.</p>
    pub fn days_less_than(mut self, input: i32) -> Self {
        self.days_less_than = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the minimum object age in days. The value must be a positive whole number, greater than 0 and less than or equal to 2,147,483,647.</p>
    pub fn set_days_less_than(mut self, input: ::std::option::Option<i32>) -> Self {
        self.days_less_than = input;
        self
    }
    /// <p>Specifies the minimum object age in days. The value must be a positive whole number, greater than 0 and less than or equal to 2,147,483,647.</p>
    pub fn get_days_less_than(&self) -> &::std::option::Option<i32> {
        &self.days_less_than
    }
    /// Consumes the builder and constructs a [`MatchObjectAge`](crate::types::MatchObjectAge).
    pub fn build(self) -> crate::types::MatchObjectAge {
        crate::types::MatchObjectAge {
            days_greater_than: self.days_greater_than.unwrap_or_default(),
            days_less_than: self.days_less_than.unwrap_or_default(),
        }
    }
}
