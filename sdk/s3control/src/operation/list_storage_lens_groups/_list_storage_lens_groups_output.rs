// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStorageLensGroupsOutput {
    /// <p>If <code>NextToken</code> is returned, there are more Storage Lens groups results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The list of Storage Lens groups that exist in the specified home Region.</p>
    pub storage_lens_group_list: ::std::option::Option<::std::vec::Vec<crate::types::ListStorageLensGroupEntry>>,
    _request_id: Option<String>,
}
impl ListStorageLensGroupsOutput {
    /// <p>If <code>NextToken</code> is returned, there are more Storage Lens groups results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of Storage Lens groups that exist in the specified home Region.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.storage_lens_group_list.is_none()`.
    pub fn storage_lens_group_list(&self) -> &[crate::types::ListStorageLensGroupEntry] {
        self.storage_lens_group_list.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListStorageLensGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStorageLensGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListStorageLensGroupsOutput`](crate::operation::list_storage_lens_groups::ListStorageLensGroupsOutput).
    pub fn builder() -> crate::operation::list_storage_lens_groups::builders::ListStorageLensGroupsOutputBuilder {
        crate::operation::list_storage_lens_groups::builders::ListStorageLensGroupsOutputBuilder::default()
    }
}

/// A builder for [`ListStorageLensGroupsOutput`](crate::operation::list_storage_lens_groups::ListStorageLensGroupsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListStorageLensGroupsOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) storage_lens_group_list: ::std::option::Option<::std::vec::Vec<crate::types::ListStorageLensGroupEntry>>,
    _request_id: Option<String>,
}
impl ListStorageLensGroupsOutputBuilder {
    /// <p>If <code>NextToken</code> is returned, there are more Storage Lens groups results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more Storage Lens groups results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more Storage Lens groups results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `storage_lens_group_list`.
    ///
    /// To override the contents of this collection use [`set_storage_lens_group_list`](Self::set_storage_lens_group_list).
    ///
    /// <p>The list of Storage Lens groups that exist in the specified home Region.</p>
    pub fn storage_lens_group_list(mut self, input: crate::types::ListStorageLensGroupEntry) -> Self {
        let mut v = self.storage_lens_group_list.unwrap_or_default();
        v.push(input);
        self.storage_lens_group_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Storage Lens groups that exist in the specified home Region.</p>
    pub fn set_storage_lens_group_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ListStorageLensGroupEntry>>) -> Self {
        self.storage_lens_group_list = input;
        self
    }
    /// <p>The list of Storage Lens groups that exist in the specified home Region.</p>
    pub fn get_storage_lens_group_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ListStorageLensGroupEntry>> {
        &self.storage_lens_group_list
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListStorageLensGroupsOutput`](crate::operation::list_storage_lens_groups::ListStorageLensGroupsOutput).
    pub fn build(self) -> crate::operation::list_storage_lens_groups::ListStorageLensGroupsOutput {
        crate::operation::list_storage_lens_groups::ListStorageLensGroupsOutput {
            next_token: self.next_token,
            storage_lens_group_list: self.storage_lens_group_list,
            _request_id: self._request_id,
        }
    }
}
