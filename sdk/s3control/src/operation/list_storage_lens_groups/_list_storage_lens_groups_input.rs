// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStorageLensGroupsInput {
    /// <p>The Amazon Web Services account ID that owns the Storage Lens groups.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The token for the next set of results, or <code>null</code> if there are no more results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListStorageLensGroupsInput {
    /// <p>The Amazon Web Services account ID that owns the Storage Lens groups.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The token for the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListStorageLensGroupsInput {
    /// Creates a new builder-style object to manufacture [`ListStorageLensGroupsInput`](crate::operation::list_storage_lens_groups::ListStorageLensGroupsInput).
    pub fn builder() -> crate::operation::list_storage_lens_groups::builders::ListStorageLensGroupsInputBuilder {
        crate::operation::list_storage_lens_groups::builders::ListStorageLensGroupsInputBuilder::default()
    }
}

/// A builder for [`ListStorageLensGroupsInput`](crate::operation::list_storage_lens_groups::ListStorageLensGroupsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListStorageLensGroupsInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListStorageLensGroupsInputBuilder {
    /// <p>The Amazon Web Services account ID that owns the Storage Lens groups.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the Storage Lens groups.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the Storage Lens groups.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The token for the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListStorageLensGroupsInput`](crate::operation::list_storage_lens_groups::ListStorageLensGroupsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_storage_lens_groups::ListStorageLensGroupsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_storage_lens_groups::ListStorageLensGroupsInput {
            account_id: self.account_id,
            next_token: self.next_token,
        })
    }
}
