// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateStorageLensGroupInput {
    /// <p>The name of the Storage Lens group that you want to update.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the Storage Lens group owner.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The JSON file that contains the Storage Lens group configuration.</p>
    pub storage_lens_group: ::std::option::Option<crate::types::StorageLensGroup>,
}
impl UpdateStorageLensGroupInput {
    /// <p>The name of the Storage Lens group that you want to update.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the Storage Lens group owner.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The JSON file that contains the Storage Lens group configuration.</p>
    pub fn storage_lens_group(&self) -> ::std::option::Option<&crate::types::StorageLensGroup> {
        self.storage_lens_group.as_ref()
    }
}
impl UpdateStorageLensGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateStorageLensGroupInput`](crate::operation::update_storage_lens_group::UpdateStorageLensGroupInput).
    pub fn builder() -> crate::operation::update_storage_lens_group::builders::UpdateStorageLensGroupInputBuilder {
        crate::operation::update_storage_lens_group::builders::UpdateStorageLensGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateStorageLensGroupInput`](crate::operation::update_storage_lens_group::UpdateStorageLensGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateStorageLensGroupInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) storage_lens_group: ::std::option::Option<crate::types::StorageLensGroup>,
}
impl UpdateStorageLensGroupInputBuilder {
    /// <p>The name of the Storage Lens group that you want to update.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Storage Lens group that you want to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Storage Lens group that you want to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Web Services account ID of the Storage Lens group owner.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the Storage Lens group owner.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the Storage Lens group owner.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The JSON file that contains the Storage Lens group configuration.</p>
    /// This field is required.
    pub fn storage_lens_group(mut self, input: crate::types::StorageLensGroup) -> Self {
        self.storage_lens_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>The JSON file that contains the Storage Lens group configuration.</p>
    pub fn set_storage_lens_group(mut self, input: ::std::option::Option<crate::types::StorageLensGroup>) -> Self {
        self.storage_lens_group = input;
        self
    }
    /// <p>The JSON file that contains the Storage Lens group configuration.</p>
    pub fn get_storage_lens_group(&self) -> &::std::option::Option<crate::types::StorageLensGroup> {
        &self.storage_lens_group
    }
    /// Consumes the builder and constructs a [`UpdateStorageLensGroupInput`](crate::operation::update_storage_lens_group::UpdateStorageLensGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_storage_lens_group::UpdateStorageLensGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_storage_lens_group::UpdateStorageLensGroupInput {
            name: self.name,
            account_id: self.account_id,
            storage_lens_group: self.storage_lens_group,
        })
    }
}
