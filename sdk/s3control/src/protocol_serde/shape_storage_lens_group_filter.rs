// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_storage_lens_group_filter(
    input: &crate::types::StorageLensGroupFilter,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.match_any_prefix {
        let mut inner_writer = scope.start_el("MatchAnyPrefix").finish();
        for list_item_2 in var_1 {
            {
                let mut inner_writer = inner_writer.start_el("Prefix").finish();
                inner_writer.data(list_item_2.as_str());
            }
        }
    }
    if let Some(var_3) = &input.match_any_suffix {
        let mut inner_writer = scope.start_el("MatchAnySuffix").finish();
        for list_item_4 in var_3 {
            {
                let mut inner_writer = inner_writer.start_el("Suffix").finish();
                inner_writer.data(list_item_4.as_str());
            }
        }
    }
    if let Some(var_5) = &input.match_any_tag {
        let mut inner_writer = scope.start_el("MatchAnyTag").finish();
        for list_item_6 in var_5 {
            {
                let inner_writer = inner_writer.start_el("Tag");
                crate::protocol_serde::shape_s3_tag::ser_s3_tag(list_item_6, inner_writer)?
            }
        }
    }
    if let Some(var_7) = &input.match_object_age {
        let inner_writer = scope.start_el("MatchObjectAge");
        crate::protocol_serde::shape_match_object_age::ser_match_object_age(var_7, inner_writer)?
    }
    if let Some(var_8) = &input.match_object_size {
        let inner_writer = scope.start_el("MatchObjectSize");
        crate::protocol_serde::shape_match_object_size::ser_match_object_size(var_8, inner_writer)?
    }
    if let Some(var_9) = &input.and {
        let inner_writer = scope.start_el("And");
        crate::protocol_serde::shape_storage_lens_group_and_operator::ser_storage_lens_group_and_operator(var_9, inner_writer)?
    }
    if let Some(var_10) = &input.or {
        let inner_writer = scope.start_el("Or");
        crate::protocol_serde::shape_storage_lens_group_or_operator::ser_storage_lens_group_or_operator(var_10, inner_writer)?
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_storage_lens_group_filter(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::StorageLensGroupFilter, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::StorageLensGroupFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MatchAnyPrefix") /* MatchAnyPrefix com.amazonaws.s3control#StorageLensGroupFilter$MatchAnyPrefix */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_match_any_prefix::de_match_any_prefix(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_any_prefix(var_11);
            }
            ,
            s if s.matches("MatchAnySuffix") /* MatchAnySuffix com.amazonaws.s3control#StorageLensGroupFilter$MatchAnySuffix */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_match_any_suffix::de_match_any_suffix(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_any_suffix(var_12);
            }
            ,
            s if s.matches("MatchAnyTag") /* MatchAnyTag com.amazonaws.s3control#StorageLensGroupFilter$MatchAnyTag */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_match_any_tag::de_match_any_tag(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_any_tag(var_13);
            }
            ,
            s if s.matches("MatchObjectAge") /* MatchObjectAge com.amazonaws.s3control#StorageLensGroupFilter$MatchObjectAge */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_match_object_age::de_match_object_age(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_object_age(var_14);
            }
            ,
            s if s.matches("MatchObjectSize") /* MatchObjectSize com.amazonaws.s3control#StorageLensGroupFilter$MatchObjectSize */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_match_object_size::de_match_object_size(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_object_size(var_15);
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3control#StorageLensGroupFilter$And */ =>  {
                let var_16 =
                    Some(
                        crate::protocol_serde::shape_storage_lens_group_and_operator::de_storage_lens_group_and_operator(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_and(var_16);
            }
            ,
            s if s.matches("Or") /* Or com.amazonaws.s3control#StorageLensGroupFilter$Or */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_storage_lens_group_or_operator::de_storage_lens_group_or_operator(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_or(var_17);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
