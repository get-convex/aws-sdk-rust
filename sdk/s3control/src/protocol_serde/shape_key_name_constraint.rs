// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_key_name_constraint(
    input: &crate::types::KeyNameConstraint,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.match_any_prefix {
        let mut inner_writer = scope.start_el("MatchAnyPrefix").finish();
        for list_item_2 in var_1 {
            {
                let mut inner_writer = inner_writer.start_el("member").finish();
                inner_writer.data(list_item_2.as_str());
            }
        }
    }
    if let Some(var_3) = &input.match_any_suffix {
        let mut inner_writer = scope.start_el("MatchAnySuffix").finish();
        for list_item_4 in var_3 {
            {
                let mut inner_writer = inner_writer.start_el("member").finish();
                inner_writer.data(list_item_4.as_str());
            }
        }
    }
    if let Some(var_5) = &input.match_any_substring {
        let mut inner_writer = scope.start_el("MatchAnySubstring").finish();
        for list_item_6 in var_5 {
            {
                let mut inner_writer = inner_writer.start_el("member").finish();
                inner_writer.data(list_item_6.as_str());
            }
        }
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_key_name_constraint(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::KeyNameConstraint, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::KeyNameConstraint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MatchAnyPrefix") /* MatchAnyPrefix com.amazonaws.s3control#KeyNameConstraint$MatchAnyPrefix */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_non_empty_max_length1024_string_list::de_non_empty_max_length1024_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_any_prefix(var_7);
            }
            ,
            s if s.matches("MatchAnySuffix") /* MatchAnySuffix com.amazonaws.s3control#KeyNameConstraint$MatchAnySuffix */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_non_empty_max_length1024_string_list::de_non_empty_max_length1024_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_any_suffix(var_8);
            }
            ,
            s if s.matches("MatchAnySubstring") /* MatchAnySubstring com.amazonaws.s3control#KeyNameConstraint$MatchAnySubstring */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_non_empty_max_length1024_string_list::de_non_empty_max_length1024_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_any_substring(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
