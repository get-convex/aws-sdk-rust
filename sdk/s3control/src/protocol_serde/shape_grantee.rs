// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_grantee(decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::types::Grantee, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Grantee::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("GranteeType") /* GranteeType com.amazonaws.s3control#Grantee$GranteeType */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::GranteeType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::GranteeType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_grantee_type(var_1);
            }
            ,
            s if s.matches("GranteeIdentifier") /* GranteeIdentifier com.amazonaws.s3control#Grantee$GranteeIdentifier */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_grantee_identifier(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn ser_grantee(
    input: &crate::types::Grantee,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_3) = &input.grantee_type {
        let mut inner_writer = scope.start_el("GranteeType").finish();
        inner_writer.data(var_3.as_str());
    }
    if let Some(var_4) = &input.grantee_identifier {
        let mut inner_writer = scope.start_el("GranteeIdentifier").finish();
        inner_writer.data(var_4.as_str());
    }
    scope.finish();
    Ok(())
}
