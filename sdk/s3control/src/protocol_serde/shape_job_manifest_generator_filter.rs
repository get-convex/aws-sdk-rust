// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_job_manifest_generator_filter(
    input: &crate::types::JobManifestGeneratorFilter,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.eligible_for_replication {
        let mut inner_writer = scope.start_el("EligibleForReplication").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(*var_1).encode());
    }
    if let Some(var_2) = &input.created_after {
        let mut inner_writer = scope.start_el("CreatedAfter").finish();
        inner_writer.data(var_2.fmt(::aws_smithy_types::date_time::Format::DateTimeWithOffset)?.as_ref());
    }
    if let Some(var_3) = &input.created_before {
        let mut inner_writer = scope.start_el("CreatedBefore").finish();
        inner_writer.data(var_3.fmt(::aws_smithy_types::date_time::Format::DateTimeWithOffset)?.as_ref());
    }
    if let Some(var_4) = &input.object_replication_statuses {
        let mut inner_writer = scope.start_el("ObjectReplicationStatuses").finish();
        for list_item_5 in var_4 {
            {
                let mut inner_writer = inner_writer.start_el("member").finish();
                inner_writer.data(list_item_5.as_str());
            }
        }
    }
    if let Some(var_6) = &input.key_name_constraint {
        let inner_writer = scope.start_el("KeyNameConstraint");
        crate::protocol_serde::shape_key_name_constraint::ser_key_name_constraint(var_6, inner_writer)?
    }
    if let Some(var_7) = &input.object_size_greater_than_bytes {
        let mut inner_writer = scope.start_el("ObjectSizeGreaterThanBytes").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(*var_7).encode());
    }
    if let Some(var_8) = &input.object_size_less_than_bytes {
        let mut inner_writer = scope.start_el("ObjectSizeLessThanBytes").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(*var_8).encode());
    }
    if let Some(var_9) = &input.match_any_storage_class {
        let mut inner_writer = scope.start_el("MatchAnyStorageClass").finish();
        for list_item_10 in var_9 {
            {
                let mut inner_writer = inner_writer.start_el("member").finish();
                inner_writer.data(list_item_10.as_str());
            }
        }
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_job_manifest_generator_filter(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::JobManifestGeneratorFilter, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::JobManifestGeneratorFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("EligibleForReplication") /* EligibleForReplication com.amazonaws.s3control#JobManifestGeneratorFilter$EligibleForReplication */ =>  {
                let var_11 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.s3control#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_eligible_for_replication(var_11);
            }
            ,
            s if s.matches("CreatedAfter") /* CreatedAfter com.amazonaws.s3control#JobManifestGeneratorFilter$CreatedAfter */ =>  {
                let var_12 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.s3control#ObjectCreationTime`)"))
                        ?
                    )
                ;
                builder = builder.set_created_after(var_12);
            }
            ,
            s if s.matches("CreatedBefore") /* CreatedBefore com.amazonaws.s3control#JobManifestGeneratorFilter$CreatedBefore */ =>  {
                let var_13 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.s3control#ObjectCreationTime`)"))
                        ?
                    )
                ;
                builder = builder.set_created_before(var_13);
            }
            ,
            s if s.matches("ObjectReplicationStatuses") /* ObjectReplicationStatuses com.amazonaws.s3control#JobManifestGeneratorFilter$ObjectReplicationStatuses */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_replication_status_filter_list::de_replication_status_filter_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_object_replication_statuses(var_14);
            }
            ,
            s if s.matches("KeyNameConstraint") /* KeyNameConstraint com.amazonaws.s3control#JobManifestGeneratorFilter$KeyNameConstraint */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_key_name_constraint::de_key_name_constraint(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_key_name_constraint(var_15);
            }
            ,
            s if s.matches("ObjectSizeGreaterThanBytes") /* ObjectSizeGreaterThanBytes com.amazonaws.s3control#JobManifestGeneratorFilter$ObjectSizeGreaterThanBytes */ =>  {
                let var_16 =
                    Some(
                         {
                            <i64 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.s3control#ObjectSizeGreaterThanBytes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_object_size_greater_than_bytes(var_16);
            }
            ,
            s if s.matches("ObjectSizeLessThanBytes") /* ObjectSizeLessThanBytes com.amazonaws.s3control#JobManifestGeneratorFilter$ObjectSizeLessThanBytes */ =>  {
                let var_17 =
                    Some(
                         {
                            <i64 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.s3control#ObjectSizeLessThanBytes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_object_size_less_than_bytes(var_17);
            }
            ,
            s if s.matches("MatchAnyStorageClass") /* MatchAnyStorageClass com.amazonaws.s3control#JobManifestGeneratorFilter$MatchAnyStorageClass */ =>  {
                let var_18 =
                    Some(
                        crate::protocol_serde::shape_storage_class_list::de_storage_class_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_any_storage_class(var_18);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
