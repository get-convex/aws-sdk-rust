// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Reserved for future use.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbClusterStatusInfo {
    /// <p>Reserved for future use.</p>
    pub status_type: ::std::option::Option<::std::string::String>,
    /// <p>Reserved for future use.</p>
    pub normal: ::std::option::Option<bool>,
    /// <p>Reserved for future use.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Reserved for future use.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl DbClusterStatusInfo {
    /// <p>Reserved for future use.</p>
    pub fn status_type(&self) -> ::std::option::Option<&str> {
        self.status_type.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn normal(&self) -> ::std::option::Option<bool> {
        self.normal
    }
    /// <p>Reserved for future use.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl DbClusterStatusInfo {
    /// Creates a new builder-style object to manufacture [`DbClusterStatusInfo`](crate::types::DbClusterStatusInfo).
    pub fn builder() -> crate::types::builders::DbClusterStatusInfoBuilder {
        crate::types::builders::DbClusterStatusInfoBuilder::default()
    }
}

/// A builder for [`DbClusterStatusInfo`](crate::types::DbClusterStatusInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DbClusterStatusInfoBuilder {
    pub(crate) status_type: ::std::option::Option<::std::string::String>,
    pub(crate) normal: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl DbClusterStatusInfoBuilder {
    /// <p>Reserved for future use.</p>
    pub fn status_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_status_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_type = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_status_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_type
    }
    /// <p>Reserved for future use.</p>
    pub fn normal(mut self, input: bool) -> Self {
        self.normal = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_normal(mut self, input: ::std::option::Option<bool>) -> Self {
        self.normal = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_normal(&self) -> &::std::option::Option<bool> {
        &self.normal
    }
    /// <p>Reserved for future use.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Reserved for future use.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`DbClusterStatusInfo`](crate::types::DbClusterStatusInfo).
    pub fn build(self) -> crate::types::DbClusterStatusInfo {
        crate::types::DbClusterStatusInfo {
            status_type: self.status_type,
            normal: self.normal,
            status: self.status,
            message: self.message,
        }
    }
}
