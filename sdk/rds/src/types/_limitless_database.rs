// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details for Aurora Limitless Database.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LimitlessDatabase {
    /// <p>The status of Aurora Limitless Database.</p>
    pub status: ::std::option::Option<crate::types::LimitlessDatabaseStatus>,
    /// <p>The minimum required capacity for Aurora Limitless Database in Aurora capacity units (ACUs).</p>
    pub min_required_acu: ::std::option::Option<f64>,
}
impl LimitlessDatabase {
    /// <p>The status of Aurora Limitless Database.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LimitlessDatabaseStatus> {
        self.status.as_ref()
    }
    /// <p>The minimum required capacity for Aurora Limitless Database in Aurora capacity units (ACUs).</p>
    pub fn min_required_acu(&self) -> ::std::option::Option<f64> {
        self.min_required_acu
    }
}
impl LimitlessDatabase {
    /// Creates a new builder-style object to manufacture [`LimitlessDatabase`](crate::types::LimitlessDatabase).
    pub fn builder() -> crate::types::builders::LimitlessDatabaseBuilder {
        crate::types::builders::LimitlessDatabaseBuilder::default()
    }
}

/// A builder for [`LimitlessDatabase`](crate::types::LimitlessDatabase).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LimitlessDatabaseBuilder {
    pub(crate) status: ::std::option::Option<crate::types::LimitlessDatabaseStatus>,
    pub(crate) min_required_acu: ::std::option::Option<f64>,
}
impl LimitlessDatabaseBuilder {
    /// <p>The status of Aurora Limitless Database.</p>
    pub fn status(mut self, input: crate::types::LimitlessDatabaseStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of Aurora Limitless Database.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LimitlessDatabaseStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of Aurora Limitless Database.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LimitlessDatabaseStatus> {
        &self.status
    }
    /// <p>The minimum required capacity for Aurora Limitless Database in Aurora capacity units (ACUs).</p>
    pub fn min_required_acu(mut self, input: f64) -> Self {
        self.min_required_acu = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum required capacity for Aurora Limitless Database in Aurora capacity units (ACUs).</p>
    pub fn set_min_required_acu(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min_required_acu = input;
        self
    }
    /// <p>The minimum required capacity for Aurora Limitless Database in Aurora capacity units (ACUs).</p>
    pub fn get_min_required_acu(&self) -> &::std::option::Option<f64> {
        &self.min_required_acu
    }
    /// Consumes the builder and constructs a [`LimitlessDatabase`](crate::types::LimitlessDatabase).
    pub fn build(self) -> crate::types::LimitlessDatabase {
        crate::types::LimitlessDatabase {
            status: self.status,
            min_required_acu: self.min_required_acu,
        }
    }
}
