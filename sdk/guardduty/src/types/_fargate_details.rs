// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about Amazon Web Services Fargate details associated with an Amazon ECS cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FargateDetails {
    /// <p>Runtime coverage issues identified for the resource running on Amazon Web Services Fargate.</p>
    pub issues: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> indicates that the deployment of the GuardDuty security agent is disabled for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>MANUAL</code> status doesn't apply to the Amazon Web Services Fargate (Amazon ECS only) woprkloads.</p>
    /// </note>
    pub management_type: ::std::option::Option<crate::types::ManagementType>,
}
impl FargateDetails {
    /// <p>Runtime coverage issues identified for the resource running on Amazon Web Services Fargate.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.issues.is_none()`.
    pub fn issues(&self) -> &[::std::string::String] {
        self.issues.as_deref().unwrap_or_default()
    }
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> indicates that the deployment of the GuardDuty security agent is disabled for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>MANUAL</code> status doesn't apply to the Amazon Web Services Fargate (Amazon ECS only) woprkloads.</p>
    /// </note>
    pub fn management_type(&self) -> ::std::option::Option<&crate::types::ManagementType> {
        self.management_type.as_ref()
    }
}
impl FargateDetails {
    /// Creates a new builder-style object to manufacture [`FargateDetails`](crate::types::FargateDetails).
    pub fn builder() -> crate::types::builders::FargateDetailsBuilder {
        crate::types::builders::FargateDetailsBuilder::default()
    }
}

/// A builder for [`FargateDetails`](crate::types::FargateDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FargateDetailsBuilder {
    pub(crate) issues: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) management_type: ::std::option::Option<crate::types::ManagementType>,
}
impl FargateDetailsBuilder {
    /// Appends an item to `issues`.
    ///
    /// To override the contents of this collection use [`set_issues`](Self::set_issues).
    ///
    /// <p>Runtime coverage issues identified for the resource running on Amazon Web Services Fargate.</p>
    pub fn issues(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.issues.unwrap_or_default();
        v.push(input.into());
        self.issues = ::std::option::Option::Some(v);
        self
    }
    /// <p>Runtime coverage issues identified for the resource running on Amazon Web Services Fargate.</p>
    pub fn set_issues(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.issues = input;
        self
    }
    /// <p>Runtime coverage issues identified for the resource running on Amazon Web Services Fargate.</p>
    pub fn get_issues(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.issues
    }
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> indicates that the deployment of the GuardDuty security agent is disabled for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>MANUAL</code> status doesn't apply to the Amazon Web Services Fargate (Amazon ECS only) woprkloads.</p>
    /// </note>
    pub fn management_type(mut self, input: crate::types::ManagementType) -> Self {
        self.management_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> indicates that the deployment of the GuardDuty security agent is disabled for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>MANUAL</code> status doesn't apply to the Amazon Web Services Fargate (Amazon ECS only) woprkloads.</p>
    /// </note>
    pub fn set_management_type(mut self, input: ::std::option::Option<crate::types::ManagementType>) -> Self {
        self.management_type = input;
        self
    }
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> indicates that the deployment of the GuardDuty security agent is disabled for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>MANUAL</code> status doesn't apply to the Amazon Web Services Fargate (Amazon ECS only) woprkloads.</p>
    /// </note>
    pub fn get_management_type(&self) -> &::std::option::Option<crate::types::ManagementType> {
        &self.management_type
    }
    /// Consumes the builder and constructs a [`FargateDetails`](crate::types::FargateDetails).
    pub fn build(self) -> crate::types::FargateDetails {
        crate::types::FargateDetails {
            issues: self.issues,
            management_type: self.management_type,
        }
    }
}
