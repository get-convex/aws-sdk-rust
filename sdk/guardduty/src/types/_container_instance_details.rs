// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the Amazon EC2 instance that is running the Amazon ECS container.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerInstanceDetails {
    /// <p>Represents the nodes in the Amazon ECS cluster that has a <code>HEALTHY</code> coverage status.</p>
    pub covered_container_instances: ::std::option::Option<i64>,
    /// <p>Represents total number of nodes in the Amazon ECS cluster.</p>
    pub compatible_container_instances: ::std::option::Option<i64>,
}
impl ContainerInstanceDetails {
    /// <p>Represents the nodes in the Amazon ECS cluster that has a <code>HEALTHY</code> coverage status.</p>
    pub fn covered_container_instances(&self) -> ::std::option::Option<i64> {
        self.covered_container_instances
    }
    /// <p>Represents total number of nodes in the Amazon ECS cluster.</p>
    pub fn compatible_container_instances(&self) -> ::std::option::Option<i64> {
        self.compatible_container_instances
    }
}
impl ContainerInstanceDetails {
    /// Creates a new builder-style object to manufacture [`ContainerInstanceDetails`](crate::types::ContainerInstanceDetails).
    pub fn builder() -> crate::types::builders::ContainerInstanceDetailsBuilder {
        crate::types::builders::ContainerInstanceDetailsBuilder::default()
    }
}

/// A builder for [`ContainerInstanceDetails`](crate::types::ContainerInstanceDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerInstanceDetailsBuilder {
    pub(crate) covered_container_instances: ::std::option::Option<i64>,
    pub(crate) compatible_container_instances: ::std::option::Option<i64>,
}
impl ContainerInstanceDetailsBuilder {
    /// <p>Represents the nodes in the Amazon ECS cluster that has a <code>HEALTHY</code> coverage status.</p>
    pub fn covered_container_instances(mut self, input: i64) -> Self {
        self.covered_container_instances = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the nodes in the Amazon ECS cluster that has a <code>HEALTHY</code> coverage status.</p>
    pub fn set_covered_container_instances(mut self, input: ::std::option::Option<i64>) -> Self {
        self.covered_container_instances = input;
        self
    }
    /// <p>Represents the nodes in the Amazon ECS cluster that has a <code>HEALTHY</code> coverage status.</p>
    pub fn get_covered_container_instances(&self) -> &::std::option::Option<i64> {
        &self.covered_container_instances
    }
    /// <p>Represents total number of nodes in the Amazon ECS cluster.</p>
    pub fn compatible_container_instances(mut self, input: i64) -> Self {
        self.compatible_container_instances = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents total number of nodes in the Amazon ECS cluster.</p>
    pub fn set_compatible_container_instances(mut self, input: ::std::option::Option<i64>) -> Self {
        self.compatible_container_instances = input;
        self
    }
    /// <p>Represents total number of nodes in the Amazon ECS cluster.</p>
    pub fn get_compatible_container_instances(&self) -> &::std::option::Option<i64> {
        &self.compatible_container_instances
    }
    /// Consumes the builder and constructs a [`ContainerInstanceDetails`](crate::types::ContainerInstanceDetails).
    pub fn build(self) -> crate::types::ContainerInstanceDetails {
        crate::types::ContainerInstanceDetails {
            covered_container_instances: self.covered_container_instances,
            compatible_container_instances: self.compatible_container_instances,
        }
    }
}
