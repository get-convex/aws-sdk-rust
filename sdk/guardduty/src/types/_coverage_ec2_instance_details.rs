// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This API is also used when you use GuardDuty Runtime Monitoring for your Amazon EC2 instances (currently in preview release) and is subject to change. The use of this API is subject to Section 2 of the <a href="http://aws.amazon.com/service-terms/">Amazon Web Services Service Terms</a> ("Betas and Previews").</p>
/// </note>
/// <p>Contains information about the Amazon EC2 instance runtime coverage details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoverageEc2InstanceDetails {
    /// <p>The Amazon EC2 instance ID.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The instance type of the Amazon EC2 instance.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The cluster ARN of the Amazon ECS cluster running on the Amazon EC2 instance.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>Information about the installed security agent.</p>
    pub agent_details: ::std::option::Option<crate::types::AgentDetails>,
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the GuardDuty security agent updates for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>DISABLED</code> status doesn't apply to Amazon EC2 instances and Amazon EKS clusters.</p>
    /// </note>
    pub management_type: ::std::option::Option<crate::types::ManagementType>,
}
impl CoverageEc2InstanceDetails {
    /// <p>The Amazon EC2 instance ID.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The instance type of the Amazon EC2 instance.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The cluster ARN of the Amazon ECS cluster running on the Amazon EC2 instance.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>Information about the installed security agent.</p>
    pub fn agent_details(&self) -> ::std::option::Option<&crate::types::AgentDetails> {
        self.agent_details.as_ref()
    }
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the GuardDuty security agent updates for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>DISABLED</code> status doesn't apply to Amazon EC2 instances and Amazon EKS clusters.</p>
    /// </note>
    pub fn management_type(&self) -> ::std::option::Option<&crate::types::ManagementType> {
        self.management_type.as_ref()
    }
}
impl CoverageEc2InstanceDetails {
    /// Creates a new builder-style object to manufacture [`CoverageEc2InstanceDetails`](crate::types::CoverageEc2InstanceDetails).
    pub fn builder() -> crate::types::builders::CoverageEc2InstanceDetailsBuilder {
        crate::types::builders::CoverageEc2InstanceDetailsBuilder::default()
    }
}

/// A builder for [`CoverageEc2InstanceDetails`](crate::types::CoverageEc2InstanceDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoverageEc2InstanceDetailsBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) agent_details: ::std::option::Option<crate::types::AgentDetails>,
    pub(crate) management_type: ::std::option::Option<crate::types::ManagementType>,
}
impl CoverageEc2InstanceDetailsBuilder {
    /// <p>The Amazon EC2 instance ID.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon EC2 instance ID.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The Amazon EC2 instance ID.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The instance type of the Amazon EC2 instance.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type of the Amazon EC2 instance.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type of the Amazon EC2 instance.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The cluster ARN of the Amazon ECS cluster running on the Amazon EC2 instance.</p>
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster ARN of the Amazon ECS cluster running on the Amazon EC2 instance.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The cluster ARN of the Amazon ECS cluster running on the Amazon EC2 instance.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>Information about the installed security agent.</p>
    pub fn agent_details(mut self, input: crate::types::AgentDetails) -> Self {
        self.agent_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the installed security agent.</p>
    pub fn set_agent_details(mut self, input: ::std::option::Option<crate::types::AgentDetails>) -> Self {
        self.agent_details = input;
        self
    }
    /// <p>Information about the installed security agent.</p>
    pub fn get_agent_details(&self) -> &::std::option::Option<crate::types::AgentDetails> {
        &self.agent_details
    }
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the GuardDuty security agent updates for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>DISABLED</code> status doesn't apply to Amazon EC2 instances and Amazon EKS clusters.</p>
    /// </note>
    pub fn management_type(mut self, input: crate::types::ManagementType) -> Self {
        self.management_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the GuardDuty security agent updates for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>DISABLED</code> status doesn't apply to Amazon EC2 instances and Amazon EKS clusters.</p>
    /// </note>
    pub fn set_management_type(mut self, input: ::std::option::Option<crate::types::ManagementType>) -> Self {
        self.management_type = input;
        self
    }
    /// <p>Indicates how the GuardDuty security agent is managed for this resource.</p>
    /// <ul>
    /// <li>
    /// <p><code>AUTO_MANAGED</code> indicates that GuardDuty deploys and manages updates for this resource.</p></li>
    /// <li>
    /// <p><code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the GuardDuty security agent updates for this resource.</p></li>
    /// </ul><note>
    /// <p>The <code>DISABLED</code> status doesn't apply to Amazon EC2 instances and Amazon EKS clusters.</p>
    /// </note>
    pub fn get_management_type(&self) -> &::std::option::Option<crate::types::ManagementType> {
        &self.management_type
    }
    /// Consumes the builder and constructs a [`CoverageEc2InstanceDetails`](crate::types::CoverageEc2InstanceDetails).
    pub fn build(self) -> crate::types::CoverageEc2InstanceDetails {
        crate::types::CoverageEc2InstanceDetails {
            instance_id: self.instance_id,
            instance_type: self.instance_type,
            cluster_arn: self.cluster_arn,
            agent_details: self.agent_details,
            management_type: self.management_type,
        }
    }
}
