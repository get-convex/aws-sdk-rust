// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the coverage statistic for the additional configuration of the feature.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrganizationFeatureStatisticsAdditionalConfiguration {
    /// <p>Name of the additional configuration within a feature.</p>
    pub name: ::std::option::Option<crate::types::OrgFeatureAdditionalConfiguration>,
    /// <p>Total number of accounts that have enabled the additional configuration.</p>
    pub enabled_accounts_count: ::std::option::Option<i32>,
}
impl OrganizationFeatureStatisticsAdditionalConfiguration {
    /// <p>Name of the additional configuration within a feature.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::OrgFeatureAdditionalConfiguration> {
        self.name.as_ref()
    }
    /// <p>Total number of accounts that have enabled the additional configuration.</p>
    pub fn enabled_accounts_count(&self) -> ::std::option::Option<i32> {
        self.enabled_accounts_count
    }
}
impl OrganizationFeatureStatisticsAdditionalConfiguration {
    /// Creates a new builder-style object to manufacture [`OrganizationFeatureStatisticsAdditionalConfiguration`](crate::types::OrganizationFeatureStatisticsAdditionalConfiguration).
    pub fn builder() -> crate::types::builders::OrganizationFeatureStatisticsAdditionalConfigurationBuilder {
        crate::types::builders::OrganizationFeatureStatisticsAdditionalConfigurationBuilder::default()
    }
}

/// A builder for [`OrganizationFeatureStatisticsAdditionalConfiguration`](crate::types::OrganizationFeatureStatisticsAdditionalConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrganizationFeatureStatisticsAdditionalConfigurationBuilder {
    pub(crate) name: ::std::option::Option<crate::types::OrgFeatureAdditionalConfiguration>,
    pub(crate) enabled_accounts_count: ::std::option::Option<i32>,
}
impl OrganizationFeatureStatisticsAdditionalConfigurationBuilder {
    /// <p>Name of the additional configuration within a feature.</p>
    pub fn name(mut self, input: crate::types::OrgFeatureAdditionalConfiguration) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Name of the additional configuration within a feature.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::OrgFeatureAdditionalConfiguration>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the additional configuration within a feature.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::OrgFeatureAdditionalConfiguration> {
        &self.name
    }
    /// <p>Total number of accounts that have enabled the additional configuration.</p>
    pub fn enabled_accounts_count(mut self, input: i32) -> Self {
        self.enabled_accounts_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total number of accounts that have enabled the additional configuration.</p>
    pub fn set_enabled_accounts_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.enabled_accounts_count = input;
        self
    }
    /// <p>Total number of accounts that have enabled the additional configuration.</p>
    pub fn get_enabled_accounts_count(&self) -> &::std::option::Option<i32> {
        &self.enabled_accounts_count
    }
    /// Consumes the builder and constructs a [`OrganizationFeatureStatisticsAdditionalConfiguration`](crate::types::OrganizationFeatureStatisticsAdditionalConfiguration).
    pub fn build(self) -> crate::types::OrganizationFeatureStatisticsAdditionalConfiguration {
        crate::types::OrganizationFeatureStatisticsAdditionalConfiguration {
            name: self.name,
            enabled_accounts_count: self.enabled_accounts_count,
        }
    }
}
