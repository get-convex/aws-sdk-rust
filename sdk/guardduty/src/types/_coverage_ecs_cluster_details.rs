// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about Amazon ECS cluster runtime coverage details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoverageEcsClusterDetails {
    /// <p>The name of the Amazon ECS cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the Fargate details associated with the Amazon ECS cluster.</p>
    pub fargate_details: ::std::option::Option<crate::types::FargateDetails>,
    /// <p>Information about the Amazon ECS container running on Amazon EC2 instance.</p>
    pub container_instance_details: ::std::option::Option<crate::types::ContainerInstanceDetails>,
}
impl CoverageEcsClusterDetails {
    /// <p>The name of the Amazon ECS cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>Information about the Fargate details associated with the Amazon ECS cluster.</p>
    pub fn fargate_details(&self) -> ::std::option::Option<&crate::types::FargateDetails> {
        self.fargate_details.as_ref()
    }
    /// <p>Information about the Amazon ECS container running on Amazon EC2 instance.</p>
    pub fn container_instance_details(&self) -> ::std::option::Option<&crate::types::ContainerInstanceDetails> {
        self.container_instance_details.as_ref()
    }
}
impl CoverageEcsClusterDetails {
    /// Creates a new builder-style object to manufacture [`CoverageEcsClusterDetails`](crate::types::CoverageEcsClusterDetails).
    pub fn builder() -> crate::types::builders::CoverageEcsClusterDetailsBuilder {
        crate::types::builders::CoverageEcsClusterDetailsBuilder::default()
    }
}

/// A builder for [`CoverageEcsClusterDetails`](crate::types::CoverageEcsClusterDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoverageEcsClusterDetailsBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) fargate_details: ::std::option::Option<crate::types::FargateDetails>,
    pub(crate) container_instance_details: ::std::option::Option<crate::types::ContainerInstanceDetails>,
}
impl CoverageEcsClusterDetailsBuilder {
    /// <p>The name of the Amazon ECS cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon ECS cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the Amazon ECS cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>Information about the Fargate details associated with the Amazon ECS cluster.</p>
    pub fn fargate_details(mut self, input: crate::types::FargateDetails) -> Self {
        self.fargate_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the Fargate details associated with the Amazon ECS cluster.</p>
    pub fn set_fargate_details(mut self, input: ::std::option::Option<crate::types::FargateDetails>) -> Self {
        self.fargate_details = input;
        self
    }
    /// <p>Information about the Fargate details associated with the Amazon ECS cluster.</p>
    pub fn get_fargate_details(&self) -> &::std::option::Option<crate::types::FargateDetails> {
        &self.fargate_details
    }
    /// <p>Information about the Amazon ECS container running on Amazon EC2 instance.</p>
    pub fn container_instance_details(mut self, input: crate::types::ContainerInstanceDetails) -> Self {
        self.container_instance_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the Amazon ECS container running on Amazon EC2 instance.</p>
    pub fn set_container_instance_details(mut self, input: ::std::option::Option<crate::types::ContainerInstanceDetails>) -> Self {
        self.container_instance_details = input;
        self
    }
    /// <p>Information about the Amazon ECS container running on Amazon EC2 instance.</p>
    pub fn get_container_instance_details(&self) -> &::std::option::Option<crate::types::ContainerInstanceDetails> {
        &self.container_instance_details
    }
    /// Consumes the builder and constructs a [`CoverageEcsClusterDetails`](crate::types::CoverageEcsClusterDetails).
    pub fn build(self) -> crate::types::CoverageEcsClusterDetails {
        crate::types::CoverageEcsClusterDetails {
            cluster_name: self.cluster_name,
            fargate_details: self.fargate_details,
            container_instance_details: self.container_instance_details,
        }
    }
}
