// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the usage statistics, calculated by top accounts by feature.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsageTopAccountsResult {
    /// <p>Features by which you can generate the usage statistics.</p>
    /// <p><code>RDS_LOGIN_EVENTS</code> is currently not supported with <code>topAccountsByFeature</code>.</p>
    pub feature: ::std::option::Option<crate::types::UsageFeature>,
    /// <p>The accounts that contributed to the total usage cost.</p>
    pub accounts: ::std::option::Option<::std::vec::Vec<crate::types::UsageTopAccountResult>>,
}
impl UsageTopAccountsResult {
    /// <p>Features by which you can generate the usage statistics.</p>
    /// <p><code>RDS_LOGIN_EVENTS</code> is currently not supported with <code>topAccountsByFeature</code>.</p>
    pub fn feature(&self) -> ::std::option::Option<&crate::types::UsageFeature> {
        self.feature.as_ref()
    }
    /// <p>The accounts that contributed to the total usage cost.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.accounts.is_none()`.
    pub fn accounts(&self) -> &[crate::types::UsageTopAccountResult] {
        self.accounts.as_deref().unwrap_or_default()
    }
}
impl UsageTopAccountsResult {
    /// Creates a new builder-style object to manufacture [`UsageTopAccountsResult`](crate::types::UsageTopAccountsResult).
    pub fn builder() -> crate::types::builders::UsageTopAccountsResultBuilder {
        crate::types::builders::UsageTopAccountsResultBuilder::default()
    }
}

/// A builder for [`UsageTopAccountsResult`](crate::types::UsageTopAccountsResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UsageTopAccountsResultBuilder {
    pub(crate) feature: ::std::option::Option<crate::types::UsageFeature>,
    pub(crate) accounts: ::std::option::Option<::std::vec::Vec<crate::types::UsageTopAccountResult>>,
}
impl UsageTopAccountsResultBuilder {
    /// <p>Features by which you can generate the usage statistics.</p>
    /// <p><code>RDS_LOGIN_EVENTS</code> is currently not supported with <code>topAccountsByFeature</code>.</p>
    pub fn feature(mut self, input: crate::types::UsageFeature) -> Self {
        self.feature = ::std::option::Option::Some(input);
        self
    }
    /// <p>Features by which you can generate the usage statistics.</p>
    /// <p><code>RDS_LOGIN_EVENTS</code> is currently not supported with <code>topAccountsByFeature</code>.</p>
    pub fn set_feature(mut self, input: ::std::option::Option<crate::types::UsageFeature>) -> Self {
        self.feature = input;
        self
    }
    /// <p>Features by which you can generate the usage statistics.</p>
    /// <p><code>RDS_LOGIN_EVENTS</code> is currently not supported with <code>topAccountsByFeature</code>.</p>
    pub fn get_feature(&self) -> &::std::option::Option<crate::types::UsageFeature> {
        &self.feature
    }
    /// Appends an item to `accounts`.
    ///
    /// To override the contents of this collection use [`set_accounts`](Self::set_accounts).
    ///
    /// <p>The accounts that contributed to the total usage cost.</p>
    pub fn accounts(mut self, input: crate::types::UsageTopAccountResult) -> Self {
        let mut v = self.accounts.unwrap_or_default();
        v.push(input);
        self.accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The accounts that contributed to the total usage cost.</p>
    pub fn set_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UsageTopAccountResult>>) -> Self {
        self.accounts = input;
        self
    }
    /// <p>The accounts that contributed to the total usage cost.</p>
    pub fn get_accounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UsageTopAccountResult>> {
        &self.accounts
    }
    /// Consumes the builder and constructs a [`UsageTopAccountsResult`](crate::types::UsageTopAccountsResult).
    pub fn build(self) -> crate::types::UsageTopAccountsResult {
        crate::types::UsageTopAccountsResult {
            feature: self.feature,
            accounts: self.accounts,
        }
    }
}
