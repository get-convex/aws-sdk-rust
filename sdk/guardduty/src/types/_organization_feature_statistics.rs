// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the number of accounts that have enabled a specific feature.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrganizationFeatureStatistics {
    /// <p>Name of the feature.</p>
    pub name: ::std::option::Option<crate::types::OrgFeature>,
    /// <p>Total number of accounts that have enabled a specific feature.</p>
    pub enabled_accounts_count: ::std::option::Option<i32>,
    /// <p>Name of the additional configuration.</p>
    pub additional_configuration: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureStatisticsAdditionalConfiguration>>,
}
impl OrganizationFeatureStatistics {
    /// <p>Name of the feature.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::OrgFeature> {
        self.name.as_ref()
    }
    /// <p>Total number of accounts that have enabled a specific feature.</p>
    pub fn enabled_accounts_count(&self) -> ::std::option::Option<i32> {
        self.enabled_accounts_count
    }
    /// <p>Name of the additional configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_configuration.is_none()`.
    pub fn additional_configuration(&self) -> &[crate::types::OrganizationFeatureStatisticsAdditionalConfiguration] {
        self.additional_configuration.as_deref().unwrap_or_default()
    }
}
impl OrganizationFeatureStatistics {
    /// Creates a new builder-style object to manufacture [`OrganizationFeatureStatistics`](crate::types::OrganizationFeatureStatistics).
    pub fn builder() -> crate::types::builders::OrganizationFeatureStatisticsBuilder {
        crate::types::builders::OrganizationFeatureStatisticsBuilder::default()
    }
}

/// A builder for [`OrganizationFeatureStatistics`](crate::types::OrganizationFeatureStatistics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrganizationFeatureStatisticsBuilder {
    pub(crate) name: ::std::option::Option<crate::types::OrgFeature>,
    pub(crate) enabled_accounts_count: ::std::option::Option<i32>,
    pub(crate) additional_configuration: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureStatisticsAdditionalConfiguration>>,
}
impl OrganizationFeatureStatisticsBuilder {
    /// <p>Name of the feature.</p>
    pub fn name(mut self, input: crate::types::OrgFeature) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Name of the feature.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::OrgFeature>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the feature.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::OrgFeature> {
        &self.name
    }
    /// <p>Total number of accounts that have enabled a specific feature.</p>
    pub fn enabled_accounts_count(mut self, input: i32) -> Self {
        self.enabled_accounts_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total number of accounts that have enabled a specific feature.</p>
    pub fn set_enabled_accounts_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.enabled_accounts_count = input;
        self
    }
    /// <p>Total number of accounts that have enabled a specific feature.</p>
    pub fn get_enabled_accounts_count(&self) -> &::std::option::Option<i32> {
        &self.enabled_accounts_count
    }
    /// Appends an item to `additional_configuration`.
    ///
    /// To override the contents of this collection use [`set_additional_configuration`](Self::set_additional_configuration).
    ///
    /// <p>Name of the additional configuration.</p>
    pub fn additional_configuration(mut self, input: crate::types::OrganizationFeatureStatisticsAdditionalConfiguration) -> Self {
        let mut v = self.additional_configuration.unwrap_or_default();
        v.push(input);
        self.additional_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>Name of the additional configuration.</p>
    pub fn set_additional_configuration(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureStatisticsAdditionalConfiguration>>,
    ) -> Self {
        self.additional_configuration = input;
        self
    }
    /// <p>Name of the additional configuration.</p>
    pub fn get_additional_configuration(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureStatisticsAdditionalConfiguration>> {
        &self.additional_configuration
    }
    /// Consumes the builder and constructs a [`OrganizationFeatureStatistics`](crate::types::OrganizationFeatureStatistics).
    pub fn build(self) -> crate::types::OrganizationFeatureStatistics {
        crate::types::OrganizationFeatureStatistics {
            name: self.name,
            enabled_accounts_count: self.enabled_accounts_count,
            additional_configuration: self.additional_configuration,
        }
    }
}
