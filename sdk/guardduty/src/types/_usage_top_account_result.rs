// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the total of usage based on the topmost 50 account IDs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsageTopAccountResult {
    /// <p>The unique account ID.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub total: ::std::option::Option<crate::types::Total>,
}
impl UsageTopAccountResult {
    /// <p>The unique account ID.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub fn total(&self) -> ::std::option::Option<&crate::types::Total> {
        self.total.as_ref()
    }
}
impl UsageTopAccountResult {
    /// Creates a new builder-style object to manufacture [`UsageTopAccountResult`](crate::types::UsageTopAccountResult).
    pub fn builder() -> crate::types::builders::UsageTopAccountResultBuilder {
        crate::types::builders::UsageTopAccountResultBuilder::default()
    }
}

/// A builder for [`UsageTopAccountResult`](crate::types::UsageTopAccountResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UsageTopAccountResultBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) total: ::std::option::Option<crate::types::Total>,
}
impl UsageTopAccountResultBuilder {
    /// <p>The unique account ID.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The unique account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub fn total(mut self, input: crate::types::Total) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub fn set_total(mut self, input: ::std::option::Option<crate::types::Total>) -> Self {
        self.total = input;
        self
    }
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub fn get_total(&self) -> &::std::option::Option<crate::types::Total> {
        &self.total
    }
    /// Consumes the builder and constructs a [`UsageTopAccountResult`](crate::types::UsageTopAccountResult).
    pub fn build(self) -> crate::types::UsageTopAccountResult {
        crate::types::UsageTopAccountResult {
            account_id: self.account_id,
            total: self.total,
        }
    }
}
