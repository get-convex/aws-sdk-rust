// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains additional details about the state's execution, including its input and output data processing flow, and HTTP request information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InspectionDataRequest {
    /// <p>The protocol used to make the HTTP request.</p>
    pub protocol: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP method used for the HTTP request.</p>
    pub method: ::std::option::Option<::std::string::String>,
    /// <p>The API endpoint used for the HTTP request.</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>The request headers associated with the HTTP request.</p>
    pub headers: ::std::option::Option<::std::string::String>,
    /// <p>The request body for the HTTP request.</p>
    pub body: ::std::option::Option<::std::string::String>,
}
impl InspectionDataRequest {
    /// <p>The protocol used to make the HTTP request.</p>
    pub fn protocol(&self) -> ::std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The HTTP method used for the HTTP request.</p>
    pub fn method(&self) -> ::std::option::Option<&str> {
        self.method.as_deref()
    }
    /// <p>The API endpoint used for the HTTP request.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The request headers associated with the HTTP request.</p>
    pub fn headers(&self) -> ::std::option::Option<&str> {
        self.headers.as_deref()
    }
    /// <p>The request body for the HTTP request.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
}
impl InspectionDataRequest {
    /// Creates a new builder-style object to manufacture [`InspectionDataRequest`](crate::types::InspectionDataRequest).
    pub fn builder() -> crate::types::builders::InspectionDataRequestBuilder {
        crate::types::builders::InspectionDataRequestBuilder::default()
    }
}

/// A builder for [`InspectionDataRequest`](crate::types::InspectionDataRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InspectionDataRequestBuilder {
    pub(crate) protocol: ::std::option::Option<::std::string::String>,
    pub(crate) method: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) headers: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
}
impl InspectionDataRequestBuilder {
    /// <p>The protocol used to make the HTTP request.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The protocol used to make the HTTP request.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol used to make the HTTP request.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol
    }
    /// <p>The HTTP method used for the HTTP request.</p>
    pub fn method(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.method = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP method used for the HTTP request.</p>
    pub fn set_method(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.method = input;
        self
    }
    /// <p>The HTTP method used for the HTTP request.</p>
    pub fn get_method(&self) -> &::std::option::Option<::std::string::String> {
        &self.method
    }
    /// <p>The API endpoint used for the HTTP request.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API endpoint used for the HTTP request.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The API endpoint used for the HTTP request.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The request headers associated with the HTTP request.</p>
    pub fn headers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.headers = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request headers associated with the HTTP request.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.headers = input;
        self
    }
    /// <p>The request headers associated with the HTTP request.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::string::String> {
        &self.headers
    }
    /// <p>The request body for the HTTP request.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request body for the HTTP request.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The request body for the HTTP request.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// Consumes the builder and constructs a [`InspectionDataRequest`](crate::types::InspectionDataRequest).
    pub fn build(self) -> crate::types::InspectionDataRequest {
        crate::types::InspectionDataRequest {
            protocol: self.protocol,
            method: self.method,
            url: self.url,
            headers: self.headers,
            body: self.body,
        }
    }
}
