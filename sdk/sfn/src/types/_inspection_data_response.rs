// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains additional details about the state's execution, including its input and output data processing flow, and HTTP response information. The <code>inspectionLevel</code> request parameter specifies which details are returned.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InspectionDataResponse {
    /// <p>The protocol used to return the HTTP response.</p>
    pub protocol: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP response status code for the HTTP response.</p>
    pub status_code: ::std::option::Option<::std::string::String>,
    /// <p>The message associated with the HTTP status code.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The response headers associated with the HTTP response.</p>
    pub headers: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP response returned.</p>
    pub body: ::std::option::Option<::std::string::String>,
}
impl InspectionDataResponse {
    /// <p>The protocol used to return the HTTP response.</p>
    pub fn protocol(&self) -> ::std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The HTTP response status code for the HTTP response.</p>
    pub fn status_code(&self) -> ::std::option::Option<&str> {
        self.status_code.as_deref()
    }
    /// <p>The message associated with the HTTP status code.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The response headers associated with the HTTP response.</p>
    pub fn headers(&self) -> ::std::option::Option<&str> {
        self.headers.as_deref()
    }
    /// <p>The HTTP response returned.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
}
impl InspectionDataResponse {
    /// Creates a new builder-style object to manufacture [`InspectionDataResponse`](crate::types::InspectionDataResponse).
    pub fn builder() -> crate::types::builders::InspectionDataResponseBuilder {
        crate::types::builders::InspectionDataResponseBuilder::default()
    }
}

/// A builder for [`InspectionDataResponse`](crate::types::InspectionDataResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InspectionDataResponseBuilder {
    pub(crate) protocol: ::std::option::Option<::std::string::String>,
    pub(crate) status_code: ::std::option::Option<::std::string::String>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) headers: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
}
impl InspectionDataResponseBuilder {
    /// <p>The protocol used to return the HTTP response.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The protocol used to return the HTTP response.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol used to return the HTTP response.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol
    }
    /// <p>The HTTP response status code for the HTTP response.</p>
    pub fn status_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP response status code for the HTTP response.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The HTTP response status code for the HTTP response.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_code
    }
    /// <p>The message associated with the HTTP status code.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message associated with the HTTP status code.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The message associated with the HTTP status code.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The response headers associated with the HTTP response.</p>
    pub fn headers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.headers = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The response headers associated with the HTTP response.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.headers = input;
        self
    }
    /// <p>The response headers associated with the HTTP response.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::string::String> {
        &self.headers
    }
    /// <p>The HTTP response returned.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP response returned.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The HTTP response returned.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// Consumes the builder and constructs a [`InspectionDataResponse`](crate::types::InspectionDataResponse).
    pub fn build(self) -> crate::types::InspectionDataResponse {
        crate::types::InspectionDataResponse {
            protocol: self.protocol,
            status_code: self.status_code,
            status_message: self.status_message,
            headers: self.headers,
            body: self.body,
        }
    }
}
