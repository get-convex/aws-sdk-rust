// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TestStateInput {
    /// <p>The <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL) definition of the state.</p>
    pub definition: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the execution role with the required IAM permissions for the state.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A string that contains the JSON input data for the state.</p>
    pub input: ::std::option::Option<::std::string::String>,
    /// <p>Determines the values to return when a state is tested. You can specify one of the following types:</p>
    /// <ul>
    /// <li>
    /// <p><code>INFO</code>: Shows the final state output. By default, Step Functions sets <code>inspectionLevel</code> to <code>INFO</code> if you don't specify a level.</p></li>
    /// <li>
    /// <p><code>DEBUG</code>: Shows the final state output along with the input and output data processing result.</p></li>
    /// <li>
    /// <p><code>TRACE</code>: Shows the HTTP request and response for an HTTP Task. This level also shows the final state output along with the input and output data processing result.</p></li>
    /// </ul>
    /// <p>Each of these levels also provide information about the status of the state execution and the next state to transition to.</p>
    pub inspection_level: ::std::option::Option<crate::types::InspectionLevel>,
    /// <p>Specifies whether or not to include secret information in the test result. For HTTP Tasks, a secret includes the data that an EventBridge connection adds to modify the HTTP request headers, query parameters, and body. Step Functions doesn't omit any information included in the state definition or the HTTP response.</p>
    /// <p>If you set <code>revealSecrets</code> to <code>true</code>, you must make sure that the IAM user that calls the <code>TestState</code> API has permission for the <code>states:RevealSecrets</code> action. For an example of IAM policy that sets the <code>states:RevealSecrets</code> permission, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/test-state-isolation.html#test-state-permissions">IAM permissions to test a state</a>. Without this permission, Step Functions throws an access denied error.</p>
    /// <p>By default, <code>revealSecrets</code> is set to <code>false</code>.</p>
    pub reveal_secrets: ::std::option::Option<bool>,
}
impl TestStateInput {
    /// <p>The <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL) definition of the state.</p>
    pub fn definition(&self) -> ::std::option::Option<&str> {
        self.definition.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role with the required IAM permissions for the state.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A string that contains the JSON input data for the state.</p>
    pub fn input(&self) -> ::std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>Determines the values to return when a state is tested. You can specify one of the following types:</p>
    /// <ul>
    /// <li>
    /// <p><code>INFO</code>: Shows the final state output. By default, Step Functions sets <code>inspectionLevel</code> to <code>INFO</code> if you don't specify a level.</p></li>
    /// <li>
    /// <p><code>DEBUG</code>: Shows the final state output along with the input and output data processing result.</p></li>
    /// <li>
    /// <p><code>TRACE</code>: Shows the HTTP request and response for an HTTP Task. This level also shows the final state output along with the input and output data processing result.</p></li>
    /// </ul>
    /// <p>Each of these levels also provide information about the status of the state execution and the next state to transition to.</p>
    pub fn inspection_level(&self) -> ::std::option::Option<&crate::types::InspectionLevel> {
        self.inspection_level.as_ref()
    }
    /// <p>Specifies whether or not to include secret information in the test result. For HTTP Tasks, a secret includes the data that an EventBridge connection adds to modify the HTTP request headers, query parameters, and body. Step Functions doesn't omit any information included in the state definition or the HTTP response.</p>
    /// <p>If you set <code>revealSecrets</code> to <code>true</code>, you must make sure that the IAM user that calls the <code>TestState</code> API has permission for the <code>states:RevealSecrets</code> action. For an example of IAM policy that sets the <code>states:RevealSecrets</code> permission, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/test-state-isolation.html#test-state-permissions">IAM permissions to test a state</a>. Without this permission, Step Functions throws an access denied error.</p>
    /// <p>By default, <code>revealSecrets</code> is set to <code>false</code>.</p>
    pub fn reveal_secrets(&self) -> ::std::option::Option<bool> {
        self.reveal_secrets
    }
}
impl ::std::fmt::Debug for TestStateInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TestStateInput");
        formatter.field("definition", &"*** Sensitive Data Redacted ***");
        formatter.field("role_arn", &self.role_arn);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("inspection_level", &self.inspection_level);
        formatter.field("reveal_secrets", &self.reveal_secrets);
        formatter.finish()
    }
}
impl TestStateInput {
    /// Creates a new builder-style object to manufacture [`TestStateInput`](crate::operation::test_state::TestStateInput).
    pub fn builder() -> crate::operation::test_state::builders::TestStateInputBuilder {
        crate::operation::test_state::builders::TestStateInputBuilder::default()
    }
}

/// A builder for [`TestStateInput`](crate::operation::test_state::TestStateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TestStateInputBuilder {
    pub(crate) definition: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) inspection_level: ::std::option::Option<crate::types::InspectionLevel>,
    pub(crate) reveal_secrets: ::std::option::Option<bool>,
}
impl TestStateInputBuilder {
    /// <p>The <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL) definition of the state.</p>
    /// This field is required.
    pub fn definition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.definition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL) definition of the state.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL) definition of the state.</p>
    pub fn get_definition(&self) -> &::std::option::Option<::std::string::String> {
        &self.definition
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role with the required IAM permissions for the state.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role with the required IAM permissions for the state.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role with the required IAM permissions for the state.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>A string that contains the JSON input data for the state.</p>
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that contains the JSON input data for the state.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>A string that contains the JSON input data for the state.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }
    /// <p>Determines the values to return when a state is tested. You can specify one of the following types:</p>
    /// <ul>
    /// <li>
    /// <p><code>INFO</code>: Shows the final state output. By default, Step Functions sets <code>inspectionLevel</code> to <code>INFO</code> if you don't specify a level.</p></li>
    /// <li>
    /// <p><code>DEBUG</code>: Shows the final state output along with the input and output data processing result.</p></li>
    /// <li>
    /// <p><code>TRACE</code>: Shows the HTTP request and response for an HTTP Task. This level also shows the final state output along with the input and output data processing result.</p></li>
    /// </ul>
    /// <p>Each of these levels also provide information about the status of the state execution and the next state to transition to.</p>
    pub fn inspection_level(mut self, input: crate::types::InspectionLevel) -> Self {
        self.inspection_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the values to return when a state is tested. You can specify one of the following types:</p>
    /// <ul>
    /// <li>
    /// <p><code>INFO</code>: Shows the final state output. By default, Step Functions sets <code>inspectionLevel</code> to <code>INFO</code> if you don't specify a level.</p></li>
    /// <li>
    /// <p><code>DEBUG</code>: Shows the final state output along with the input and output data processing result.</p></li>
    /// <li>
    /// <p><code>TRACE</code>: Shows the HTTP request and response for an HTTP Task. This level also shows the final state output along with the input and output data processing result.</p></li>
    /// </ul>
    /// <p>Each of these levels also provide information about the status of the state execution and the next state to transition to.</p>
    pub fn set_inspection_level(mut self, input: ::std::option::Option<crate::types::InspectionLevel>) -> Self {
        self.inspection_level = input;
        self
    }
    /// <p>Determines the values to return when a state is tested. You can specify one of the following types:</p>
    /// <ul>
    /// <li>
    /// <p><code>INFO</code>: Shows the final state output. By default, Step Functions sets <code>inspectionLevel</code> to <code>INFO</code> if you don't specify a level.</p></li>
    /// <li>
    /// <p><code>DEBUG</code>: Shows the final state output along with the input and output data processing result.</p></li>
    /// <li>
    /// <p><code>TRACE</code>: Shows the HTTP request and response for an HTTP Task. This level also shows the final state output along with the input and output data processing result.</p></li>
    /// </ul>
    /// <p>Each of these levels also provide information about the status of the state execution and the next state to transition to.</p>
    pub fn get_inspection_level(&self) -> &::std::option::Option<crate::types::InspectionLevel> {
        &self.inspection_level
    }
    /// <p>Specifies whether or not to include secret information in the test result. For HTTP Tasks, a secret includes the data that an EventBridge connection adds to modify the HTTP request headers, query parameters, and body. Step Functions doesn't omit any information included in the state definition or the HTTP response.</p>
    /// <p>If you set <code>revealSecrets</code> to <code>true</code>, you must make sure that the IAM user that calls the <code>TestState</code> API has permission for the <code>states:RevealSecrets</code> action. For an example of IAM policy that sets the <code>states:RevealSecrets</code> permission, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/test-state-isolation.html#test-state-permissions">IAM permissions to test a state</a>. Without this permission, Step Functions throws an access denied error.</p>
    /// <p>By default, <code>revealSecrets</code> is set to <code>false</code>.</p>
    pub fn reveal_secrets(mut self, input: bool) -> Self {
        self.reveal_secrets = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether or not to include secret information in the test result. For HTTP Tasks, a secret includes the data that an EventBridge connection adds to modify the HTTP request headers, query parameters, and body. Step Functions doesn't omit any information included in the state definition or the HTTP response.</p>
    /// <p>If you set <code>revealSecrets</code> to <code>true</code>, you must make sure that the IAM user that calls the <code>TestState</code> API has permission for the <code>states:RevealSecrets</code> action. For an example of IAM policy that sets the <code>states:RevealSecrets</code> permission, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/test-state-isolation.html#test-state-permissions">IAM permissions to test a state</a>. Without this permission, Step Functions throws an access denied error.</p>
    /// <p>By default, <code>revealSecrets</code> is set to <code>false</code>.</p>
    pub fn set_reveal_secrets(mut self, input: ::std::option::Option<bool>) -> Self {
        self.reveal_secrets = input;
        self
    }
    /// <p>Specifies whether or not to include secret information in the test result. For HTTP Tasks, a secret includes the data that an EventBridge connection adds to modify the HTTP request headers, query parameters, and body. Step Functions doesn't omit any information included in the state definition or the HTTP response.</p>
    /// <p>If you set <code>revealSecrets</code> to <code>true</code>, you must make sure that the IAM user that calls the <code>TestState</code> API has permission for the <code>states:RevealSecrets</code> action. For an example of IAM policy that sets the <code>states:RevealSecrets</code> permission, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/test-state-isolation.html#test-state-permissions">IAM permissions to test a state</a>. Without this permission, Step Functions throws an access denied error.</p>
    /// <p>By default, <code>revealSecrets</code> is set to <code>false</code>.</p>
    pub fn get_reveal_secrets(&self) -> &::std::option::Option<bool> {
        &self.reveal_secrets
    }
    /// Consumes the builder and constructs a [`TestStateInput`](crate::operation::test_state::TestStateInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::test_state::TestStateInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::test_state::TestStateInput {
            definition: self.definition,
            role_arn: self.role_arn,
            input: self.input,
            inspection_level: self.inspection_level,
            reveal_secrets: self.reveal_secrets,
        })
    }
}
impl ::std::fmt::Debug for TestStateInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TestStateInputBuilder");
        formatter.field("definition", &"*** Sensitive Data Redacted ***");
        formatter.field("role_arn", &self.role_arn);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("inspection_level", &self.inspection_level);
        formatter.field("reveal_secrets", &self.reveal_secrets);
        formatter.finish()
    }
}
