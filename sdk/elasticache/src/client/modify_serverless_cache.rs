// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ModifyServerlessCache`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`serverless_cache_name(impl Into<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::serverless_cache_name) / [`set_serverless_cache_name(Option<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::set_serverless_cache_name):<br>required: **true**<br><p>User-provided identifier for the serverless cache to be modified.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::set_description):<br>required: **false**<br><p>User provided description for the serverless cache. Default = NULL, i.e. the existing description is not removed/modified. The description has a maximum length of 255 characters.</p><br>
    ///   - [`cache_usage_limits(CacheUsageLimits)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::cache_usage_limits) / [`set_cache_usage_limits(Option<CacheUsageLimits>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::set_cache_usage_limits):<br>required: **false**<br><p>Modify the cache usage limit for the serverless cache.</p><br>
    ///   - [`remove_user_group(bool)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::remove_user_group) / [`set_remove_user_group(Option<bool>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::set_remove_user_group):<br>required: **false**<br><p>The identifier of the UserGroup to be removed from association with the Redis serverless cache. Available for Redis only. Default is NULL.</p><br>
    ///   - [`user_group_id(impl Into<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::user_group_id) / [`set_user_group_id(Option<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::set_user_group_id):<br>required: **false**<br><p>The identifier of the UserGroup to be associated with the serverless cache. Available for Redis only. Default is NULL - the existing UserGroup is not removed.</p><br>
    ///   - [`security_group_ids(impl Into<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::security_group_ids) / [`set_security_group_ids(Option<Vec::<String>>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::set_security_group_ids):<br>required: **false**<br><p>The new list of VPC security groups to be associated with the serverless cache. Populating this list means the current VPC security groups will be removed. This security group is used to authorize traffic access for the VPC end-point (private-link). Default = NULL - the existing list of VPC security groups is not removed.</p><br>
    ///   - [`snapshot_retention_limit(i32)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::snapshot_retention_limit) / [`set_snapshot_retention_limit(Option<i32>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::set_snapshot_retention_limit):<br>required: **false**<br><p>The number of days for which Elasticache retains automatic snapshots before deleting them. Available for Redis only. Default = NULL, i.e. the existing snapshot-retention-limit will not be removed or modified. The maximum value allowed is 35 days.</p><br>
    ///   - [`daily_snapshot_time(impl Into<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::daily_snapshot_time) / [`set_daily_snapshot_time(Option<String>)`](crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::set_daily_snapshot_time):<br>required: **false**<br><p>The daily time during which Elasticache begins taking a daily snapshot of the serverless cache. Available for Redis only. The default is NULL, i.e. the existing snapshot time configured for the cluster is not removed.</p><br>
    /// - On success, responds with [`ModifyServerlessCacheOutput`](crate::operation::modify_serverless_cache::ModifyServerlessCacheOutput) with field(s):
    ///   - [`serverless_cache(Option<ServerlessCache>)`](crate::operation::modify_serverless_cache::ModifyServerlessCacheOutput::serverless_cache): <p>The response for the attempt to modify the serverless cache.</p>
    /// - On failure, responds with [`SdkError<ModifyServerlessCacheError>`](crate::operation::modify_serverless_cache::ModifyServerlessCacheError)
    pub fn modify_serverless_cache(&self) -> crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder {
        crate::operation::modify_serverless_cache::builders::ModifyServerlessCacheFluentBuilder::new(self.handle.clone())
    }
}
