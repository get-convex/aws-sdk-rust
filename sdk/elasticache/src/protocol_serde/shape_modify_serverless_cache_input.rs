// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_serverless_cache_input_input_input(
    input: &crate::operation::modify_serverless_cache::ModifyServerlessCacheInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "ModifyServerlessCache", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ServerlessCacheName");
    if let Some(var_2) = &input.serverless_cache_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Description");
    if let Some(var_4) = &input.description {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("CacheUsageLimits");
    if let Some(var_6) = &input.cache_usage_limits {
        crate::protocol_serde::shape_cache_usage_limits::ser_cache_usage_limits(scope_5, var_6)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("RemoveUserGroup");
    if let Some(var_8) = &input.remove_user_group {
        scope_7.boolean(*var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("UserGroupId");
    if let Some(var_10) = &input.user_group_id {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("SecurityGroupIds");
    if let Some(var_12) = &input.security_group_ids {
        let mut list_14 = scope_11.start_list(false, Some("SecurityGroupId"));
        for item_13 in var_12 {
            #[allow(unused_mut)]
            let mut entry_15 = list_14.entry();
            entry_15.string(item_13);
        }
        list_14.finish();
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_17) = &input.snapshot_retention_limit {
        scope_16.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("DailySnapshotTime");
    if let Some(var_19) = &input.daily_snapshot_time {
        scope_18.string(var_19);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
