// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_serverless_cache(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ServerlessCache, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ServerlessCache::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ServerlessCacheName") /* ServerlessCacheName com.amazonaws.elasticache#ServerlessCache$ServerlessCacheName */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_serverless_cache_name(var_1);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.elasticache#ServerlessCache$Description */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2);
            }
            ,
            s if s.matches("CreateTime") /* CreateTime com.amazonaws.elasticache#ServerlessCache$CreateTime */ =>  {
                let var_3 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.elasticache#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_3);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.elasticache#ServerlessCache$Status */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_4);
            }
            ,
            s if s.matches("Engine") /* Engine com.amazonaws.elasticache#ServerlessCache$Engine */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine(var_5);
            }
            ,
            s if s.matches("MajorEngineVersion") /* MajorEngineVersion com.amazonaws.elasticache#ServerlessCache$MajorEngineVersion */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_major_engine_version(var_6);
            }
            ,
            s if s.matches("FullEngineVersion") /* FullEngineVersion com.amazonaws.elasticache#ServerlessCache$FullEngineVersion */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_full_engine_version(var_7);
            }
            ,
            s if s.matches("CacheUsageLimits") /* CacheUsageLimits com.amazonaws.elasticache#ServerlessCache$CacheUsageLimits */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_cache_usage_limits::de_cache_usage_limits(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cache_usage_limits(var_8);
            }
            ,
            s if s.matches("KmsKeyId") /* KmsKeyId com.amazonaws.elasticache#ServerlessCache$KmsKeyId */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_9);
            }
            ,
            s if s.matches("SecurityGroupIds") /* SecurityGroupIds com.amazonaws.elasticache#ServerlessCache$SecurityGroupIds */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_security_group_ids_list::de_security_group_ids_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_ids(var_10);
            }
            ,
            s if s.matches("Endpoint") /* Endpoint com.amazonaws.elasticache#ServerlessCache$Endpoint */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_endpoint::de_endpoint(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_11);
            }
            ,
            s if s.matches("ReaderEndpoint") /* ReaderEndpoint com.amazonaws.elasticache#ServerlessCache$ReaderEndpoint */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_endpoint::de_endpoint(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reader_endpoint(var_12);
            }
            ,
            s if s.matches("ARN") /* ARN com.amazonaws.elasticache#ServerlessCache$ARN */ =>  {
                let var_13 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_13);
            }
            ,
            s if s.matches("UserGroupId") /* UserGroupId com.amazonaws.elasticache#ServerlessCache$UserGroupId */ =>  {
                let var_14 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_group_id(var_14);
            }
            ,
            s if s.matches("SubnetIds") /* SubnetIds com.amazonaws.elasticache#ServerlessCache$SubnetIds */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_subnet_ids_list::de_subnet_ids_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_ids(var_15);
            }
            ,
            s if s.matches("SnapshotRetentionLimit") /* SnapshotRetentionLimit com.amazonaws.elasticache#ServerlessCache$SnapshotRetentionLimit */ =>  {
                let var_16 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticache#IntegerOptional`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_snapshot_retention_limit(var_16);
            }
            ,
            s if s.matches("DailySnapshotTime") /* DailySnapshotTime com.amazonaws.elasticache#ServerlessCache$DailySnapshotTime */ =>  {
                let var_17 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_daily_snapshot_time(var_17);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
