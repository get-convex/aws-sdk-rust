// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource representing a serverless cache snapshot. Available for Redis only.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerlessCacheSnapshot {
    /// <p>The identifier of a serverless cache snapshot. Available for Redis only.</p>
    pub serverless_cache_snapshot_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a serverless cache snapshot. Available for Redis only.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services Key Management Service (KMS) key of a serverless cache snapshot. Available for Redis only.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of snapshot of serverless cache. Available for Redis only.</p>
    pub snapshot_type: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the serverless cache. Available for Redis only.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the source serverless cache's metadata and cache data set was obtained for the snapshot. Available for Redis only.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the serverless cache snapshot will expire. Available for Redis only.</p>
    pub expiry_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The total size of a serverless cache snapshot, in bytes. Available for Redis only.</p>
    pub bytes_used_for_cache: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of the serverless cache, at the time the snapshot was taken. Available for Redis only.</p>
    pub serverless_cache_configuration: ::std::option::Option<crate::types::ServerlessCacheConfiguration>,
}
impl ServerlessCacheSnapshot {
    /// <p>The identifier of a serverless cache snapshot. Available for Redis only.</p>
    pub fn serverless_cache_snapshot_name(&self) -> ::std::option::Option<&str> {
        self.serverless_cache_snapshot_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a serverless cache snapshot. Available for Redis only.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the Amazon Web Services Key Management Service (KMS) key of a serverless cache snapshot. Available for Redis only.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The type of snapshot of serverless cache. Available for Redis only.</p>
    pub fn snapshot_type(&self) -> ::std::option::Option<&str> {
        self.snapshot_type.as_deref()
    }
    /// <p>The current status of the serverless cache. Available for Redis only.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The date and time that the source serverless cache's metadata and cache data set was obtained for the snapshot. Available for Redis only.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The time that the serverless cache snapshot will expire. Available for Redis only.</p>
    pub fn expiry_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiry_time.as_ref()
    }
    /// <p>The total size of a serverless cache snapshot, in bytes. Available for Redis only.</p>
    pub fn bytes_used_for_cache(&self) -> ::std::option::Option<&str> {
        self.bytes_used_for_cache.as_deref()
    }
    /// <p>The configuration of the serverless cache, at the time the snapshot was taken. Available for Redis only.</p>
    pub fn serverless_cache_configuration(&self) -> ::std::option::Option<&crate::types::ServerlessCacheConfiguration> {
        self.serverless_cache_configuration.as_ref()
    }
}
impl ServerlessCacheSnapshot {
    /// Creates a new builder-style object to manufacture [`ServerlessCacheSnapshot`](crate::types::ServerlessCacheSnapshot).
    pub fn builder() -> crate::types::builders::ServerlessCacheSnapshotBuilder {
        crate::types::builders::ServerlessCacheSnapshotBuilder::default()
    }
}

/// A builder for [`ServerlessCacheSnapshot`](crate::types::ServerlessCacheSnapshot).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServerlessCacheSnapshotBuilder {
    pub(crate) serverless_cache_snapshot_name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) snapshot_type: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiry_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) bytes_used_for_cache: ::std::option::Option<::std::string::String>,
    pub(crate) serverless_cache_configuration: ::std::option::Option<crate::types::ServerlessCacheConfiguration>,
}
impl ServerlessCacheSnapshotBuilder {
    /// <p>The identifier of a serverless cache snapshot. Available for Redis only.</p>
    pub fn serverless_cache_snapshot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serverless_cache_snapshot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a serverless cache snapshot. Available for Redis only.</p>
    pub fn set_serverless_cache_snapshot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serverless_cache_snapshot_name = input;
        self
    }
    /// <p>The identifier of a serverless cache snapshot. Available for Redis only.</p>
    pub fn get_serverless_cache_snapshot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.serverless_cache_snapshot_name
    }
    /// <p>The Amazon Resource Name (ARN) of a serverless cache snapshot. Available for Redis only.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a serverless cache snapshot. Available for Redis only.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a serverless cache snapshot. Available for Redis only.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of the Amazon Web Services Key Management Service (KMS) key of a serverless cache snapshot. Available for Redis only.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services Key Management Service (KMS) key of a serverless cache snapshot. Available for Redis only.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services Key Management Service (KMS) key of a serverless cache snapshot. Available for Redis only.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The type of snapshot of serverless cache. Available for Redis only.</p>
    pub fn snapshot_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of snapshot of serverless cache. Available for Redis only.</p>
    pub fn set_snapshot_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_type = input;
        self
    }
    /// <p>The type of snapshot of serverless cache. Available for Redis only.</p>
    pub fn get_snapshot_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_type
    }
    /// <p>The current status of the serverless cache. Available for Redis only.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the serverless cache. Available for Redis only.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the serverless cache. Available for Redis only.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The date and time that the source serverless cache's metadata and cache data set was obtained for the snapshot. Available for Redis only.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the source serverless cache's metadata and cache data set was obtained for the snapshot. Available for Redis only.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The date and time that the source serverless cache's metadata and cache data set was obtained for the snapshot. Available for Redis only.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The time that the serverless cache snapshot will expire. Available for Redis only.</p>
    pub fn expiry_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiry_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the serverless cache snapshot will expire. Available for Redis only.</p>
    pub fn set_expiry_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiry_time = input;
        self
    }
    /// <p>The time that the serverless cache snapshot will expire. Available for Redis only.</p>
    pub fn get_expiry_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiry_time
    }
    /// <p>The total size of a serverless cache snapshot, in bytes. Available for Redis only.</p>
    pub fn bytes_used_for_cache(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bytes_used_for_cache = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The total size of a serverless cache snapshot, in bytes. Available for Redis only.</p>
    pub fn set_bytes_used_for_cache(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bytes_used_for_cache = input;
        self
    }
    /// <p>The total size of a serverless cache snapshot, in bytes. Available for Redis only.</p>
    pub fn get_bytes_used_for_cache(&self) -> &::std::option::Option<::std::string::String> {
        &self.bytes_used_for_cache
    }
    /// <p>The configuration of the serverless cache, at the time the snapshot was taken. Available for Redis only.</p>
    pub fn serverless_cache_configuration(mut self, input: crate::types::ServerlessCacheConfiguration) -> Self {
        self.serverless_cache_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the serverless cache, at the time the snapshot was taken. Available for Redis only.</p>
    pub fn set_serverless_cache_configuration(mut self, input: ::std::option::Option<crate::types::ServerlessCacheConfiguration>) -> Self {
        self.serverless_cache_configuration = input;
        self
    }
    /// <p>The configuration of the serverless cache, at the time the snapshot was taken. Available for Redis only.</p>
    pub fn get_serverless_cache_configuration(&self) -> &::std::option::Option<crate::types::ServerlessCacheConfiguration> {
        &self.serverless_cache_configuration
    }
    /// Consumes the builder and constructs a [`ServerlessCacheSnapshot`](crate::types::ServerlessCacheSnapshot).
    pub fn build(self) -> crate::types::ServerlessCacheSnapshot {
        crate::types::ServerlessCacheSnapshot {
            serverless_cache_snapshot_name: self.serverless_cache_snapshot_name,
            arn: self.arn,
            kms_key_id: self.kms_key_id,
            snapshot_type: self.snapshot_type,
            status: self.status,
            create_time: self.create_time,
            expiry_time: self.expiry_time,
            bytes_used_for_cache: self.bytes_used_for_cache,
            serverless_cache_configuration: self.serverless_cache_configuration,
        }
    }
}
