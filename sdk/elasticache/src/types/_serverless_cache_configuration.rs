// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration settings for a specific serverless cache.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerlessCacheConfiguration {
    /// <p>The identifier of a serverless cache.</p>
    pub serverless_cache_name: ::std::option::Option<::std::string::String>,
    /// <p>The engine that the serverless cache is configured with.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The engine version number that the serverless cache is configured with.</p>
    pub major_engine_version: ::std::option::Option<::std::string::String>,
}
impl ServerlessCacheConfiguration {
    /// <p>The identifier of a serverless cache.</p>
    pub fn serverless_cache_name(&self) -> ::std::option::Option<&str> {
        self.serverless_cache_name.as_deref()
    }
    /// <p>The engine that the serverless cache is configured with.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The engine version number that the serverless cache is configured with.</p>
    pub fn major_engine_version(&self) -> ::std::option::Option<&str> {
        self.major_engine_version.as_deref()
    }
}
impl ServerlessCacheConfiguration {
    /// Creates a new builder-style object to manufacture [`ServerlessCacheConfiguration`](crate::types::ServerlessCacheConfiguration).
    pub fn builder() -> crate::types::builders::ServerlessCacheConfigurationBuilder {
        crate::types::builders::ServerlessCacheConfigurationBuilder::default()
    }
}

/// A builder for [`ServerlessCacheConfiguration`](crate::types::ServerlessCacheConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServerlessCacheConfigurationBuilder {
    pub(crate) serverless_cache_name: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) major_engine_version: ::std::option::Option<::std::string::String>,
}
impl ServerlessCacheConfigurationBuilder {
    /// <p>The identifier of a serverless cache.</p>
    pub fn serverless_cache_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serverless_cache_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a serverless cache.</p>
    pub fn set_serverless_cache_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serverless_cache_name = input;
        self
    }
    /// <p>The identifier of a serverless cache.</p>
    pub fn get_serverless_cache_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.serverless_cache_name
    }
    /// <p>The engine that the serverless cache is configured with.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The engine that the serverless cache is configured with.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The engine that the serverless cache is configured with.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The engine version number that the serverless cache is configured with.</p>
    pub fn major_engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.major_engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The engine version number that the serverless cache is configured with.</p>
    pub fn set_major_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.major_engine_version = input;
        self
    }
    /// <p>The engine version number that the serverless cache is configured with.</p>
    pub fn get_major_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.major_engine_version
    }
    /// Consumes the builder and constructs a [`ServerlessCacheConfiguration`](crate::types::ServerlessCacheConfiguration).
    pub fn build(self) -> crate::types::ServerlessCacheConfiguration {
        crate::types::ServerlessCacheConfiguration {
            serverless_cache_name: self.serverless_cache_name,
            engine: self.engine,
            major_engine_version: self.major_engine_version,
        }
    }
}
