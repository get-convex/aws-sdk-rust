// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data storage limit.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataStorage {
    /// <p>The upper limit for data storage the cache is set to use.</p>
    pub maximum: ::std::option::Option<i32>,
    /// <p>The unit that the storage is measured in, in GB.</p>
    pub unit: ::std::option::Option<crate::types::DataStorageUnit>,
}
impl DataStorage {
    /// <p>The upper limit for data storage the cache is set to use.</p>
    pub fn maximum(&self) -> ::std::option::Option<i32> {
        self.maximum
    }
    /// <p>The unit that the storage is measured in, in GB.</p>
    pub fn unit(&self) -> ::std::option::Option<&crate::types::DataStorageUnit> {
        self.unit.as_ref()
    }
}
impl DataStorage {
    /// Creates a new builder-style object to manufacture [`DataStorage`](crate::types::DataStorage).
    pub fn builder() -> crate::types::builders::DataStorageBuilder {
        crate::types::builders::DataStorageBuilder::default()
    }
}

/// A builder for [`DataStorage`](crate::types::DataStorage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataStorageBuilder {
    pub(crate) maximum: ::std::option::Option<i32>,
    pub(crate) unit: ::std::option::Option<crate::types::DataStorageUnit>,
}
impl DataStorageBuilder {
    /// <p>The upper limit for data storage the cache is set to use.</p>
    /// This field is required.
    pub fn maximum(mut self, input: i32) -> Self {
        self.maximum = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upper limit for data storage the cache is set to use.</p>
    pub fn set_maximum(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum = input;
        self
    }
    /// <p>The upper limit for data storage the cache is set to use.</p>
    pub fn get_maximum(&self) -> &::std::option::Option<i32> {
        &self.maximum
    }
    /// <p>The unit that the storage is measured in, in GB.</p>
    /// This field is required.
    pub fn unit(mut self, input: crate::types::DataStorageUnit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unit that the storage is measured in, in GB.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::DataStorageUnit>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The unit that the storage is measured in, in GB.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::DataStorageUnit> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`DataStorage`](crate::types::DataStorage).
    pub fn build(self) -> crate::types::DataStorage {
        crate::types::DataStorage {
            maximum: self.maximum,
            unit: self.unit,
        }
    }
}
