// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteServerlessCacheInput {
    /// <p>The identifier of the serverless cache to be deleted.</p>
    pub serverless_cache_name: ::std::option::Option<::std::string::String>,
    /// <p>Name of the final snapshot to be taken before the serverless cache is deleted. Available for Redis only. Default: NULL, i.e. a final snapshot is not taken.</p>
    pub final_snapshot_name: ::std::option::Option<::std::string::String>,
}
impl DeleteServerlessCacheInput {
    /// <p>The identifier of the serverless cache to be deleted.</p>
    pub fn serverless_cache_name(&self) -> ::std::option::Option<&str> {
        self.serverless_cache_name.as_deref()
    }
    /// <p>Name of the final snapshot to be taken before the serverless cache is deleted. Available for Redis only. Default: NULL, i.e. a final snapshot is not taken.</p>
    pub fn final_snapshot_name(&self) -> ::std::option::Option<&str> {
        self.final_snapshot_name.as_deref()
    }
}
impl DeleteServerlessCacheInput {
    /// Creates a new builder-style object to manufacture [`DeleteServerlessCacheInput`](crate::operation::delete_serverless_cache::DeleteServerlessCacheInput).
    pub fn builder() -> crate::operation::delete_serverless_cache::builders::DeleteServerlessCacheInputBuilder {
        crate::operation::delete_serverless_cache::builders::DeleteServerlessCacheInputBuilder::default()
    }
}

/// A builder for [`DeleteServerlessCacheInput`](crate::operation::delete_serverless_cache::DeleteServerlessCacheInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteServerlessCacheInputBuilder {
    pub(crate) serverless_cache_name: ::std::option::Option<::std::string::String>,
    pub(crate) final_snapshot_name: ::std::option::Option<::std::string::String>,
}
impl DeleteServerlessCacheInputBuilder {
    /// <p>The identifier of the serverless cache to be deleted.</p>
    /// This field is required.
    pub fn serverless_cache_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serverless_cache_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the serverless cache to be deleted.</p>
    pub fn set_serverless_cache_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serverless_cache_name = input;
        self
    }
    /// <p>The identifier of the serverless cache to be deleted.</p>
    pub fn get_serverless_cache_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.serverless_cache_name
    }
    /// <p>Name of the final snapshot to be taken before the serverless cache is deleted. Available for Redis only. Default: NULL, i.e. a final snapshot is not taken.</p>
    pub fn final_snapshot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.final_snapshot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the final snapshot to be taken before the serverless cache is deleted. Available for Redis only. Default: NULL, i.e. a final snapshot is not taken.</p>
    pub fn set_final_snapshot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.final_snapshot_name = input;
        self
    }
    /// <p>Name of the final snapshot to be taken before the serverless cache is deleted. Available for Redis only. Default: NULL, i.e. a final snapshot is not taken.</p>
    pub fn get_final_snapshot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.final_snapshot_name
    }
    /// Consumes the builder and constructs a [`DeleteServerlessCacheInput`](crate::operation::delete_serverless_cache::DeleteServerlessCacheInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_serverless_cache::DeleteServerlessCacheInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_serverless_cache::DeleteServerlessCacheInput {
            serverless_cache_name: self.serverless_cache_name,
            final_snapshot_name: self.final_snapshot_name,
        })
    }
}
