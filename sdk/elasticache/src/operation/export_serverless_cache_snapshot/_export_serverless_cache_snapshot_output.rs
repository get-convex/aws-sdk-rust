// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportServerlessCacheSnapshotOutput {
    /// <p>The state of a serverless cache at a specific point in time, to the millisecond. Available for Redis only.</p>
    pub serverless_cache_snapshot: ::std::option::Option<crate::types::ServerlessCacheSnapshot>,
    _request_id: Option<String>,
}
impl ExportServerlessCacheSnapshotOutput {
    /// <p>The state of a serverless cache at a specific point in time, to the millisecond. Available for Redis only.</p>
    pub fn serverless_cache_snapshot(&self) -> ::std::option::Option<&crate::types::ServerlessCacheSnapshot> {
        self.serverless_cache_snapshot.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for ExportServerlessCacheSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ExportServerlessCacheSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`ExportServerlessCacheSnapshotOutput`](crate::operation::export_serverless_cache_snapshot::ExportServerlessCacheSnapshotOutput).
    pub fn builder() -> crate::operation::export_serverless_cache_snapshot::builders::ExportServerlessCacheSnapshotOutputBuilder {
        crate::operation::export_serverless_cache_snapshot::builders::ExportServerlessCacheSnapshotOutputBuilder::default()
    }
}

/// A builder for [`ExportServerlessCacheSnapshotOutput`](crate::operation::export_serverless_cache_snapshot::ExportServerlessCacheSnapshotOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportServerlessCacheSnapshotOutputBuilder {
    pub(crate) serverless_cache_snapshot: ::std::option::Option<crate::types::ServerlessCacheSnapshot>,
    _request_id: Option<String>,
}
impl ExportServerlessCacheSnapshotOutputBuilder {
    /// <p>The state of a serverless cache at a specific point in time, to the millisecond. Available for Redis only.</p>
    pub fn serverless_cache_snapshot(mut self, input: crate::types::ServerlessCacheSnapshot) -> Self {
        self.serverless_cache_snapshot = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of a serverless cache at a specific point in time, to the millisecond. Available for Redis only.</p>
    pub fn set_serverless_cache_snapshot(mut self, input: ::std::option::Option<crate::types::ServerlessCacheSnapshot>) -> Self {
        self.serverless_cache_snapshot = input;
        self
    }
    /// <p>The state of a serverless cache at a specific point in time, to the millisecond. Available for Redis only.</p>
    pub fn get_serverless_cache_snapshot(&self) -> &::std::option::Option<crate::types::ServerlessCacheSnapshot> {
        &self.serverless_cache_snapshot
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ExportServerlessCacheSnapshotOutput`](crate::operation::export_serverless_cache_snapshot::ExportServerlessCacheSnapshotOutput).
    pub fn build(self) -> crate::operation::export_serverless_cache_snapshot::ExportServerlessCacheSnapshotOutput {
        crate::operation::export_serverless_cache_snapshot::ExportServerlessCacheSnapshotOutput {
            serverless_cache_snapshot: self.serverless_cache_snapshot,
            _request_id: self._request_id,
        }
    }
}
