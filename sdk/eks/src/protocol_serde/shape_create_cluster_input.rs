// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cluster_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_cluster::CreateClusterInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("accessConfig").start_object();
        crate::protocol_serde::shape_create_access_config_request::ser_create_access_config_request(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_request_token {
        object.key("clientRequestToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.encryption_config {
        let mut array_5 = object.key("encryptionConfig").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_encryption_config::ser_encryption_config(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.kubernetes_network_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("kubernetesNetworkConfig").start_object();
        crate::protocol_serde::shape_kubernetes_network_config_request::ser_kubernetes_network_config_request(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.logging {
        #[allow(unused_mut)]
        let mut object_11 = object.key("logging").start_object();
        crate::protocol_serde::shape_logging::ser_logging(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.name {
        object.key("name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.outpost_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("outpostConfig").start_object();
        crate::protocol_serde::shape_outpost_config_request::ser_outpost_config_request(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.resources_vpc_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("resourcesVpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config_request::ser_vpc_config_request(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.role_arn {
        object.key("roleArn").string(var_17.as_str());
    }
    if let Some(var_18) = &input.tags {
        #[allow(unused_mut)]
        let mut object_19 = object.key("tags").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    if let Some(var_22) = &input.version {
        object.key("version").string(var_22.as_str());
    }
    Ok(())
}
