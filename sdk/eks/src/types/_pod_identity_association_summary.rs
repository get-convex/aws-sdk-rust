// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summarized description of the association.</p>
/// <p>Each summary is simplified by removing these fields compared to the full <code> <code>PodIdentityAssociation</code> </code>:</p>
/// <ul>
/// <li>
/// <p>The IAM role: <code>roleArn</code></p></li>
/// <li>
/// <p>The timestamp that the association was created at: <code>createdAt</code></p></li>
/// <li>
/// <p>The most recent timestamp that the association was modified at:. <code>modifiedAt</code></p></li>
/// <li>
/// <p>The tags on the association: <code>tags</code></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PodIdentityAssociationSummary {
    /// <p>The name of the cluster that the association is in.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub service_account: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub association_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the association.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
}
impl PodIdentityAssociationSummary {
    /// <p>The name of the cluster that the association is in.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub fn service_account(&self) -> ::std::option::Option<&str> {
        self.service_account.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn association_arn(&self) -> ::std::option::Option<&str> {
        self.association_arn.as_deref()
    }
    /// <p>The ID of the association.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
}
impl PodIdentityAssociationSummary {
    /// Creates a new builder-style object to manufacture [`PodIdentityAssociationSummary`](crate::types::PodIdentityAssociationSummary).
    pub fn builder() -> crate::types::builders::PodIdentityAssociationSummaryBuilder {
        crate::types::builders::PodIdentityAssociationSummaryBuilder::default()
    }
}

/// A builder for [`PodIdentityAssociationSummary`](crate::types::PodIdentityAssociationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PodIdentityAssociationSummaryBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) service_account: ::std::option::Option<::std::string::String>,
    pub(crate) association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
}
impl PodIdentityAssociationSummaryBuilder {
    /// <p>The name of the cluster that the association is in.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cluster that the association is in.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the cluster that the association is in.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub fn service_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub fn set_service_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_account = input;
        self
    }
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub fn get_service_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_account
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn set_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn get_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_arn
    }
    /// <p>The ID of the association.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID of the association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// Consumes the builder and constructs a [`PodIdentityAssociationSummary`](crate::types::PodIdentityAssociationSummary).
    pub fn build(self) -> crate::types::PodIdentityAssociationSummary {
        crate::types::PodIdentityAssociationSummary {
            cluster_name: self.cluster_name,
            namespace: self.namespace,
            service_account: self.service_account,
            association_arn: self.association_arn,
            association_id: self.association_id,
        }
    }
}
