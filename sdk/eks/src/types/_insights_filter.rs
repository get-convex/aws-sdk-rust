// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The criteria to use for the insights.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InsightsFilter {
    /// <p>The categories to use to filter insights.</p>
    pub categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
    /// <p>The Kubernetes versions to use to filter the insights.</p>
    pub kubernetes_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The statuses to use to filter the insights.</p>
    pub statuses: ::std::option::Option<::std::vec::Vec<crate::types::InsightStatusValue>>,
}
impl InsightsFilter {
    /// <p>The categories to use to filter insights.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.categories.is_none()`.
    pub fn categories(&self) -> &[crate::types::Category] {
        self.categories.as_deref().unwrap_or_default()
    }
    /// <p>The Kubernetes versions to use to filter the insights.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.kubernetes_versions.is_none()`.
    pub fn kubernetes_versions(&self) -> &[::std::string::String] {
        self.kubernetes_versions.as_deref().unwrap_or_default()
    }
    /// <p>The statuses to use to filter the insights.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.statuses.is_none()`.
    pub fn statuses(&self) -> &[crate::types::InsightStatusValue] {
        self.statuses.as_deref().unwrap_or_default()
    }
}
impl InsightsFilter {
    /// Creates a new builder-style object to manufacture [`InsightsFilter`](crate::types::InsightsFilter).
    pub fn builder() -> crate::types::builders::InsightsFilterBuilder {
        crate::types::builders::InsightsFilterBuilder::default()
    }
}

/// A builder for [`InsightsFilter`](crate::types::InsightsFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InsightsFilterBuilder {
    pub(crate) categories: ::std::option::Option<::std::vec::Vec<crate::types::Category>>,
    pub(crate) kubernetes_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) statuses: ::std::option::Option<::std::vec::Vec<crate::types::InsightStatusValue>>,
}
impl InsightsFilterBuilder {
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>The categories to use to filter insights.</p>
    pub fn categories(mut self, input: crate::types::Category) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input);
        self.categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The categories to use to filter insights.</p>
    pub fn set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Category>>) -> Self {
        self.categories = input;
        self
    }
    /// <p>The categories to use to filter insights.</p>
    pub fn get_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Category>> {
        &self.categories
    }
    /// Appends an item to `kubernetes_versions`.
    ///
    /// To override the contents of this collection use [`set_kubernetes_versions`](Self::set_kubernetes_versions).
    ///
    /// <p>The Kubernetes versions to use to filter the insights.</p>
    pub fn kubernetes_versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.kubernetes_versions.unwrap_or_default();
        v.push(input.into());
        self.kubernetes_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Kubernetes versions to use to filter the insights.</p>
    pub fn set_kubernetes_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.kubernetes_versions = input;
        self
    }
    /// <p>The Kubernetes versions to use to filter the insights.</p>
    pub fn get_kubernetes_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.kubernetes_versions
    }
    /// Appends an item to `statuses`.
    ///
    /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
    ///
    /// <p>The statuses to use to filter the insights.</p>
    pub fn statuses(mut self, input: crate::types::InsightStatusValue) -> Self {
        let mut v = self.statuses.unwrap_or_default();
        v.push(input);
        self.statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The statuses to use to filter the insights.</p>
    pub fn set_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InsightStatusValue>>) -> Self {
        self.statuses = input;
        self
    }
    /// <p>The statuses to use to filter the insights.</p>
    pub fn get_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InsightStatusValue>> {
        &self.statuses
    }
    /// Consumes the builder and constructs a [`InsightsFilter`](crate::types::InsightsFilter).
    pub fn build(self) -> crate::types::InsightsFilter {
        crate::types::InsightsFilter {
            categories: self.categories,
            kubernetes_versions: self.kubernetes_versions,
            statuses: self.statuses,
        }
    }
}
