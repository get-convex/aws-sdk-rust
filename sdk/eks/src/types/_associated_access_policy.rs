// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An access policy association.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociatedAccessPolicy {
    /// <p>The ARN of the <code>AccessPolicy</code>.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The scope of the access policy.</p>
    pub access_scope: ::std::option::Option<crate::types::AccessScope>,
    /// <p>The date and time the <code>AccessPolicy</code> was associated with an <code>AccessEntry</code>.</p>
    pub associated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Unix epoch timestamp for the last modification to the object.</p>
    pub modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AssociatedAccessPolicy {
    /// <p>The ARN of the <code>AccessPolicy</code>.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The scope of the access policy.</p>
    pub fn access_scope(&self) -> ::std::option::Option<&crate::types::AccessScope> {
        self.access_scope.as_ref()
    }
    /// <p>The date and time the <code>AccessPolicy</code> was associated with an <code>AccessEntry</code>.</p>
    pub fn associated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.associated_at.as_ref()
    }
    /// <p>The Unix epoch timestamp for the last modification to the object.</p>
    pub fn modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_at.as_ref()
    }
}
impl AssociatedAccessPolicy {
    /// Creates a new builder-style object to manufacture [`AssociatedAccessPolicy`](crate::types::AssociatedAccessPolicy).
    pub fn builder() -> crate::types::builders::AssociatedAccessPolicyBuilder {
        crate::types::builders::AssociatedAccessPolicyBuilder::default()
    }
}

/// A builder for [`AssociatedAccessPolicy`](crate::types::AssociatedAccessPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociatedAccessPolicyBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) access_scope: ::std::option::Option<crate::types::AccessScope>,
    pub(crate) associated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AssociatedAccessPolicyBuilder {
    /// <p>The ARN of the <code>AccessPolicy</code>.</p>
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>AccessPolicy</code>.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The ARN of the <code>AccessPolicy</code>.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The scope of the access policy.</p>
    pub fn access_scope(mut self, input: crate::types::AccessScope) -> Self {
        self.access_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the access policy.</p>
    pub fn set_access_scope(mut self, input: ::std::option::Option<crate::types::AccessScope>) -> Self {
        self.access_scope = input;
        self
    }
    /// <p>The scope of the access policy.</p>
    pub fn get_access_scope(&self) -> &::std::option::Option<crate::types::AccessScope> {
        &self.access_scope
    }
    /// <p>The date and time the <code>AccessPolicy</code> was associated with an <code>AccessEntry</code>.</p>
    pub fn associated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.associated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the <code>AccessPolicy</code> was associated with an <code>AccessEntry</code>.</p>
    pub fn set_associated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.associated_at = input;
        self
    }
    /// <p>The date and time the <code>AccessPolicy</code> was associated with an <code>AccessEntry</code>.</p>
    pub fn get_associated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.associated_at
    }
    /// <p>The Unix epoch timestamp for the last modification to the object.</p>
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix epoch timestamp for the last modification to the object.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The Unix epoch timestamp for the last modification to the object.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// Consumes the builder and constructs a [`AssociatedAccessPolicy`](crate::types::AssociatedAccessPolicy).
    pub fn build(self) -> crate::types::AssociatedAccessPolicy {
        crate::types::AssociatedAccessPolicy {
            policy_arn: self.policy_arn,
            access_scope: self.access_scope,
            associated_at: self.associated_at,
            modified_at: self.modified_at,
        }
    }
}
