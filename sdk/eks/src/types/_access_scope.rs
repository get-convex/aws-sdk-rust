// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scope of an <code>AccessPolicy</code> that's associated to an <code>AccessEntry</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessScope {
    /// <p>The scope type of an access policy.</p>
    pub r#type: ::std::option::Option<crate::types::AccessScopeType>,
    /// <p>A Kubernetes <code>namespace</code> that an access policy is scoped to. A value is required if you specified <code>namespace</code> for <code>Type</code>.</p>
    pub namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AccessScope {
    /// <p>The scope type of an access policy.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::AccessScopeType> {
        self.r#type.as_ref()
    }
    /// <p>A Kubernetes <code>namespace</code> that an access policy is scoped to. A value is required if you specified <code>namespace</code> for <code>Type</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.namespaces.is_none()`.
    pub fn namespaces(&self) -> &[::std::string::String] {
        self.namespaces.as_deref().unwrap_or_default()
    }
}
impl AccessScope {
    /// Creates a new builder-style object to manufacture [`AccessScope`](crate::types::AccessScope).
    pub fn builder() -> crate::types::builders::AccessScopeBuilder {
        crate::types::builders::AccessScopeBuilder::default()
    }
}

/// A builder for [`AccessScope`](crate::types::AccessScope).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccessScopeBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AccessScopeType>,
    pub(crate) namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AccessScopeBuilder {
    /// <p>The scope type of an access policy.</p>
    pub fn r#type(mut self, input: crate::types::AccessScopeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope type of an access policy.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AccessScopeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The scope type of an access policy.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AccessScopeType> {
        &self.r#type
    }
    /// Appends an item to `namespaces`.
    ///
    /// To override the contents of this collection use [`set_namespaces`](Self::set_namespaces).
    ///
    /// <p>A Kubernetes <code>namespace</code> that an access policy is scoped to. A value is required if you specified <code>namespace</code> for <code>Type</code>.</p>
    pub fn namespaces(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespaces.unwrap_or_default();
        v.push(input.into());
        self.namespaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>A Kubernetes <code>namespace</code> that an access policy is scoped to. A value is required if you specified <code>namespace</code> for <code>Type</code>.</p>
    pub fn set_namespaces(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespaces = input;
        self
    }
    /// <p>A Kubernetes <code>namespace</code> that an access policy is scoped to. A value is required if you specified <code>namespace</code> for <code>Type</code>.</p>
    pub fn get_namespaces(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespaces
    }
    /// Consumes the builder and constructs a [`AccessScope`](crate::types::AccessScope).
    pub fn build(self) -> crate::types::AccessScope {
        crate::types::AccessScope {
            r#type: self.r#type,
            namespaces: self.namespaces,
        }
    }
}
