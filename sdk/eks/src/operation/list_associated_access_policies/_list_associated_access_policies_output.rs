// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAssociatedAccessPoliciesOutput {
    /// <p>The name of your cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM principal for the <code>AccessEntry</code>.</p>
    pub principal_arn: ::std::option::Option<::std::string::String>,
    /// <p>The <code>nextToken</code> value returned from a previous paginated request, where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is null when there are no more results to return.</p><note>
    /// <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The list of access policies associated with the access entry.</p>
    pub associated_access_policies: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedAccessPolicy>>,
    _request_id: Option<String>,
}
impl ListAssociatedAccessPoliciesOutput {
    /// <p>The name of your cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The ARN of the IAM principal for the <code>AccessEntry</code>.</p>
    pub fn principal_arn(&self) -> ::std::option::Option<&str> {
        self.principal_arn.as_deref()
    }
    /// <p>The <code>nextToken</code> value returned from a previous paginated request, where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is null when there are no more results to return.</p><note>
    /// <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of access policies associated with the access entry.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_access_policies.is_none()`.
    pub fn associated_access_policies(&self) -> &[crate::types::AssociatedAccessPolicy] {
        self.associated_access_policies.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListAssociatedAccessPoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAssociatedAccessPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListAssociatedAccessPoliciesOutput`](crate::operation::list_associated_access_policies::ListAssociatedAccessPoliciesOutput).
    pub fn builder() -> crate::operation::list_associated_access_policies::builders::ListAssociatedAccessPoliciesOutputBuilder {
        crate::operation::list_associated_access_policies::builders::ListAssociatedAccessPoliciesOutputBuilder::default()
    }
}

/// A builder for [`ListAssociatedAccessPoliciesOutput`](crate::operation::list_associated_access_policies::ListAssociatedAccessPoliciesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAssociatedAccessPoliciesOutputBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) principal_arn: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) associated_access_policies: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedAccessPolicy>>,
    _request_id: Option<String>,
}
impl ListAssociatedAccessPoliciesOutputBuilder {
    /// <p>The name of your cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of your cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of your cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The ARN of the IAM principal for the <code>AccessEntry</code>.</p>
    pub fn principal_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM principal for the <code>AccessEntry</code>.</p>
    pub fn set_principal_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_arn = input;
        self
    }
    /// <p>The ARN of the IAM principal for the <code>AccessEntry</code>.</p>
    pub fn get_principal_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_arn
    }
    /// <p>The <code>nextToken</code> value returned from a previous paginated request, where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is null when there are no more results to return.</p><note>
    /// <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>nextToken</code> value returned from a previous paginated request, where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is null when there are no more results to return.</p><note>
    /// <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The <code>nextToken</code> value returned from a previous paginated request, where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is null when there are no more results to return.</p><note>
    /// <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p>
    /// </note>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `associated_access_policies`.
    ///
    /// To override the contents of this collection use [`set_associated_access_policies`](Self::set_associated_access_policies).
    ///
    /// <p>The list of access policies associated with the access entry.</p>
    pub fn associated_access_policies(mut self, input: crate::types::AssociatedAccessPolicy) -> Self {
        let mut v = self.associated_access_policies.unwrap_or_default();
        v.push(input);
        self.associated_access_policies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of access policies associated with the access entry.</p>
    pub fn set_associated_access_policies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedAccessPolicy>>) -> Self {
        self.associated_access_policies = input;
        self
    }
    /// <p>The list of access policies associated with the access entry.</p>
    pub fn get_associated_access_policies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssociatedAccessPolicy>> {
        &self.associated_access_policies
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAssociatedAccessPoliciesOutput`](crate::operation::list_associated_access_policies::ListAssociatedAccessPoliciesOutput).
    pub fn build(self) -> crate::operation::list_associated_access_policies::ListAssociatedAccessPoliciesOutput {
        crate::operation::list_associated_access_policies::ListAssociatedAccessPoliciesOutput {
            cluster_name: self.cluster_name,
            principal_arn: self.principal_arn,
            next_token: self.next_token,
            associated_access_policies: self.associated_access_policies,
            _request_id: self._request_id,
        }
    }
}
