// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePodIdentityAssociationOutput {
    /// <p>The full description of your new association.</p>
    /// <p>The description includes an ID for the association. Use the ID of the association in further actions to manage the association.</p>
    pub association: ::std::option::Option<crate::types::PodIdentityAssociation>,
    _request_id: Option<String>,
}
impl CreatePodIdentityAssociationOutput {
    /// <p>The full description of your new association.</p>
    /// <p>The description includes an ID for the association. Use the ID of the association in further actions to manage the association.</p>
    pub fn association(&self) -> ::std::option::Option<&crate::types::PodIdentityAssociation> {
        self.association.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreatePodIdentityAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreatePodIdentityAssociationOutput {
    /// Creates a new builder-style object to manufacture [`CreatePodIdentityAssociationOutput`](crate::operation::create_pod_identity_association::CreatePodIdentityAssociationOutput).
    pub fn builder() -> crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationOutputBuilder {
        crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationOutputBuilder::default()
    }
}

/// A builder for [`CreatePodIdentityAssociationOutput`](crate::operation::create_pod_identity_association::CreatePodIdentityAssociationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreatePodIdentityAssociationOutputBuilder {
    pub(crate) association: ::std::option::Option<crate::types::PodIdentityAssociation>,
    _request_id: Option<String>,
}
impl CreatePodIdentityAssociationOutputBuilder {
    /// <p>The full description of your new association.</p>
    /// <p>The description includes an ID for the association. Use the ID of the association in further actions to manage the association.</p>
    pub fn association(mut self, input: crate::types::PodIdentityAssociation) -> Self {
        self.association = ::std::option::Option::Some(input);
        self
    }
    /// <p>The full description of your new association.</p>
    /// <p>The description includes an ID for the association. Use the ID of the association in further actions to manage the association.</p>
    pub fn set_association(mut self, input: ::std::option::Option<crate::types::PodIdentityAssociation>) -> Self {
        self.association = input;
        self
    }
    /// <p>The full description of your new association.</p>
    /// <p>The description includes an ID for the association. Use the ID of the association in further actions to manage the association.</p>
    pub fn get_association(&self) -> &::std::option::Option<crate::types::PodIdentityAssociation> {
        &self.association
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreatePodIdentityAssociationOutput`](crate::operation::create_pod_identity_association::CreatePodIdentityAssociationOutput).
    pub fn build(self) -> crate::operation::create_pod_identity_association::CreatePodIdentityAssociationOutput {
        crate::operation::create_pod_identity_association::CreatePodIdentityAssociationOutput {
            association: self.association,
            _request_id: self._request_id,
        }
    }
}
