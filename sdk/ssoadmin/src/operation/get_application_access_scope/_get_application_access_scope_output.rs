// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetApplicationAccessScopeOutput {
    /// <p>The name of the access scope that can be used with the authorized targets.</p>
    pub scope: ::std::string::String,
    /// <p>An array of authorized targets associated with this access scope.</p>
    pub authorized_targets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetApplicationAccessScopeOutput {
    /// <p>The name of the access scope that can be used with the authorized targets.</p>
    pub fn scope(&self) -> &str {
        use std::ops::Deref;
        self.scope.deref()
    }
    /// <p>An array of authorized targets associated with this access scope.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.authorized_targets.is_none()`.
    pub fn authorized_targets(&self) -> &[::std::string::String] {
        self.authorized_targets.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetApplicationAccessScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetApplicationAccessScopeOutput {
    /// Creates a new builder-style object to manufacture [`GetApplicationAccessScopeOutput`](crate::operation::get_application_access_scope::GetApplicationAccessScopeOutput).
    pub fn builder() -> crate::operation::get_application_access_scope::builders::GetApplicationAccessScopeOutputBuilder {
        crate::operation::get_application_access_scope::builders::GetApplicationAccessScopeOutputBuilder::default()
    }
}

/// A builder for [`GetApplicationAccessScopeOutput`](crate::operation::get_application_access_scope::GetApplicationAccessScopeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetApplicationAccessScopeOutputBuilder {
    pub(crate) scope: ::std::option::Option<::std::string::String>,
    pub(crate) authorized_targets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetApplicationAccessScopeOutputBuilder {
    /// <p>The name of the access scope that can be used with the authorized targets.</p>
    /// This field is required.
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the access scope that can be used with the authorized targets.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The name of the access scope that can be used with the authorized targets.</p>
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }
    /// Appends an item to `authorized_targets`.
    ///
    /// To override the contents of this collection use [`set_authorized_targets`](Self::set_authorized_targets).
    ///
    /// <p>An array of authorized targets associated with this access scope.</p>
    pub fn authorized_targets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.authorized_targets.unwrap_or_default();
        v.push(input.into());
        self.authorized_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of authorized targets associated with this access scope.</p>
    pub fn set_authorized_targets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.authorized_targets = input;
        self
    }
    /// <p>An array of authorized targets associated with this access scope.</p>
    pub fn get_authorized_targets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.authorized_targets
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetApplicationAccessScopeOutput`](crate::operation::get_application_access_scope::GetApplicationAccessScopeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`scope`](crate::operation::get_application_access_scope::builders::GetApplicationAccessScopeOutputBuilder::scope)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_application_access_scope::GetApplicationAccessScopeOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_application_access_scope::GetApplicationAccessScopeOutput {
            scope: self.scope.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scope",
                    "scope was not specified but it is required when building GetApplicationAccessScopeOutput",
                )
            })?,
            authorized_targets: self.authorized_targets,
            _request_id: self._request_id,
        })
    }
}
