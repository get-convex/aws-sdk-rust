// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeApplicationProviderOutput {
    /// <p>The ARN of the application provider.</p>
    pub application_provider_arn: ::std::string::String,
    /// <p>The protocol used to federate to the application provider.</p>
    pub federation_protocol: ::std::option::Option<crate::types::FederationProtocol>,
    /// <p>A structure with details about the display data for the application provider.</p>
    pub display_data: ::std::option::Option<crate::types::DisplayData>,
    /// <p>A structure with details about the receiving application.</p>
    pub resource_server_config: ::std::option::Option<crate::types::ResourceServerConfig>,
    _request_id: Option<String>,
}
impl DescribeApplicationProviderOutput {
    /// <p>The ARN of the application provider.</p>
    pub fn application_provider_arn(&self) -> &str {
        use std::ops::Deref;
        self.application_provider_arn.deref()
    }
    /// <p>The protocol used to federate to the application provider.</p>
    pub fn federation_protocol(&self) -> ::std::option::Option<&crate::types::FederationProtocol> {
        self.federation_protocol.as_ref()
    }
    /// <p>A structure with details about the display data for the application provider.</p>
    pub fn display_data(&self) -> ::std::option::Option<&crate::types::DisplayData> {
        self.display_data.as_ref()
    }
    /// <p>A structure with details about the receiving application.</p>
    pub fn resource_server_config(&self) -> ::std::option::Option<&crate::types::ResourceServerConfig> {
        self.resource_server_config.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeApplicationProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeApplicationProviderOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationProviderOutput`](crate::operation::describe_application_provider::DescribeApplicationProviderOutput).
    pub fn builder() -> crate::operation::describe_application_provider::builders::DescribeApplicationProviderOutputBuilder {
        crate::operation::describe_application_provider::builders::DescribeApplicationProviderOutputBuilder::default()
    }
}

/// A builder for [`DescribeApplicationProviderOutput`](crate::operation::describe_application_provider::DescribeApplicationProviderOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeApplicationProviderOutputBuilder {
    pub(crate) application_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) federation_protocol: ::std::option::Option<crate::types::FederationProtocol>,
    pub(crate) display_data: ::std::option::Option<crate::types::DisplayData>,
    pub(crate) resource_server_config: ::std::option::Option<crate::types::ResourceServerConfig>,
    _request_id: Option<String>,
}
impl DescribeApplicationProviderOutputBuilder {
    /// <p>The ARN of the application provider.</p>
    /// This field is required.
    pub fn application_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the application provider.</p>
    pub fn set_application_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_provider_arn = input;
        self
    }
    /// <p>The ARN of the application provider.</p>
    pub fn get_application_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_provider_arn
    }
    /// <p>The protocol used to federate to the application provider.</p>
    pub fn federation_protocol(mut self, input: crate::types::FederationProtocol) -> Self {
        self.federation_protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol used to federate to the application provider.</p>
    pub fn set_federation_protocol(mut self, input: ::std::option::Option<crate::types::FederationProtocol>) -> Self {
        self.federation_protocol = input;
        self
    }
    /// <p>The protocol used to federate to the application provider.</p>
    pub fn get_federation_protocol(&self) -> &::std::option::Option<crate::types::FederationProtocol> {
        &self.federation_protocol
    }
    /// <p>A structure with details about the display data for the application provider.</p>
    pub fn display_data(mut self, input: crate::types::DisplayData) -> Self {
        self.display_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure with details about the display data for the application provider.</p>
    pub fn set_display_data(mut self, input: ::std::option::Option<crate::types::DisplayData>) -> Self {
        self.display_data = input;
        self
    }
    /// <p>A structure with details about the display data for the application provider.</p>
    pub fn get_display_data(&self) -> &::std::option::Option<crate::types::DisplayData> {
        &self.display_data
    }
    /// <p>A structure with details about the receiving application.</p>
    pub fn resource_server_config(mut self, input: crate::types::ResourceServerConfig) -> Self {
        self.resource_server_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure with details about the receiving application.</p>
    pub fn set_resource_server_config(mut self, input: ::std::option::Option<crate::types::ResourceServerConfig>) -> Self {
        self.resource_server_config = input;
        self
    }
    /// <p>A structure with details about the receiving application.</p>
    pub fn get_resource_server_config(&self) -> &::std::option::Option<crate::types::ResourceServerConfig> {
        &self.resource_server_config
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeApplicationProviderOutput`](crate::operation::describe_application_provider::DescribeApplicationProviderOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_provider_arn`](crate::operation::describe_application_provider::builders::DescribeApplicationProviderOutputBuilder::application_provider_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_application_provider::DescribeApplicationProviderOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_application_provider::DescribeApplicationProviderOutput {
            application_provider_arn: self.application_provider_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_provider_arn",
                    "application_provider_arn was not specified but it is required when building DescribeApplicationProviderOutput",
                )
            })?,
            federation_protocol: self.federation_protocol,
            display_data: self.display_data,
            resource_server_config: self.resource_server_config,
            _request_id: self._request_id,
        })
    }
}
