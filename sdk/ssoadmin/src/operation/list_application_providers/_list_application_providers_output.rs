// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListApplicationProvidersOutput {
    /// <p>An array list of structures that describe application providers.</p>
    pub application_providers: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationProvider>>,
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListApplicationProvidersOutput {
    /// <p>An array list of structures that describe application providers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.application_providers.is_none()`.
    pub fn application_providers(&self) -> &[crate::types::ApplicationProvider] {
        self.application_providers.as_deref().unwrap_or_default()
    }
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListApplicationProvidersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListApplicationProvidersOutput {
    /// Creates a new builder-style object to manufacture [`ListApplicationProvidersOutput`](crate::operation::list_application_providers::ListApplicationProvidersOutput).
    pub fn builder() -> crate::operation::list_application_providers::builders::ListApplicationProvidersOutputBuilder {
        crate::operation::list_application_providers::builders::ListApplicationProvidersOutputBuilder::default()
    }
}

/// A builder for [`ListApplicationProvidersOutput`](crate::operation::list_application_providers::ListApplicationProvidersOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListApplicationProvidersOutputBuilder {
    pub(crate) application_providers: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationProvider>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListApplicationProvidersOutputBuilder {
    /// Appends an item to `application_providers`.
    ///
    /// To override the contents of this collection use [`set_application_providers`](Self::set_application_providers).
    ///
    /// <p>An array list of structures that describe application providers.</p>
    pub fn application_providers(mut self, input: crate::types::ApplicationProvider) -> Self {
        let mut v = self.application_providers.unwrap_or_default();
        v.push(input);
        self.application_providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array list of structures that describe application providers.</p>
    pub fn set_application_providers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationProvider>>) -> Self {
        self.application_providers = input;
        self
    }
    /// <p>An array list of structures that describe application providers.</p>
    pub fn get_application_providers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationProvider>> {
        &self.application_providers
    }
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListApplicationProvidersOutput`](crate::operation::list_application_providers::ListApplicationProvidersOutput).
    pub fn build(self) -> crate::operation::list_application_providers::ListApplicationProvidersOutput {
        crate::operation::list_application_providers::ListApplicationProvidersOutput {
            application_providers: self.application_providers,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
