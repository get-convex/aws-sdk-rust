// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTrustedTokenIssuerInput {
    /// <p>Specifies the ARN of the instance of IAM Identity Center to contain the new trusted token issuer configuration.</p>
    pub instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the name of the new trusted token issuer configuration.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of the new trusted token issuer.</p>
    pub trusted_token_issuer_type: ::std::option::Option<crate::types::TrustedTokenIssuerType>,
    /// <p>Specifies settings that apply to the new trusted token issuer configuration. The settings that are available depend on what <code>TrustedTokenIssuerType</code> you specify.</p>
    pub trusted_token_issuer_configuration: ::std::option::Option<crate::types::TrustedTokenIssuerConfiguration>,
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies tags to be attached to the new trusted token issuer configuration.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateTrustedTokenIssuerInput {
    /// <p>Specifies the ARN of the instance of IAM Identity Center to contain the new trusted token issuer configuration.</p>
    pub fn instance_arn(&self) -> ::std::option::Option<&str> {
        self.instance_arn.as_deref()
    }
    /// <p>Specifies the name of the new trusted token issuer configuration.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the type of the new trusted token issuer.</p>
    pub fn trusted_token_issuer_type(&self) -> ::std::option::Option<&crate::types::TrustedTokenIssuerType> {
        self.trusted_token_issuer_type.as_ref()
    }
    /// <p>Specifies settings that apply to the new trusted token issuer configuration. The settings that are available depend on what <code>TrustedTokenIssuerType</code> you specify.</p>
    pub fn trusted_token_issuer_configuration(&self) -> ::std::option::Option<&crate::types::TrustedTokenIssuerConfiguration> {
        self.trusted_token_issuer_configuration.as_ref()
    }
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Specifies tags to be attached to the new trusted token issuer configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateTrustedTokenIssuerInput {
    /// Creates a new builder-style object to manufacture [`CreateTrustedTokenIssuerInput`](crate::operation::create_trusted_token_issuer::CreateTrustedTokenIssuerInput).
    pub fn builder() -> crate::operation::create_trusted_token_issuer::builders::CreateTrustedTokenIssuerInputBuilder {
        crate::operation::create_trusted_token_issuer::builders::CreateTrustedTokenIssuerInputBuilder::default()
    }
}

/// A builder for [`CreateTrustedTokenIssuerInput`](crate::operation::create_trusted_token_issuer::CreateTrustedTokenIssuerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateTrustedTokenIssuerInputBuilder {
    pub(crate) instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) trusted_token_issuer_type: ::std::option::Option<crate::types::TrustedTokenIssuerType>,
    pub(crate) trusted_token_issuer_configuration: ::std::option::Option<crate::types::TrustedTokenIssuerConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateTrustedTokenIssuerInputBuilder {
    /// <p>Specifies the ARN of the instance of IAM Identity Center to contain the new trusted token issuer configuration.</p>
    /// This field is required.
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ARN of the instance of IAM Identity Center to contain the new trusted token issuer configuration.</p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_arn = input;
        self
    }
    /// <p>Specifies the ARN of the instance of IAM Identity Center to contain the new trusted token issuer configuration.</p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_arn
    }
    /// <p>Specifies the name of the new trusted token issuer configuration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the new trusted token issuer configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies the name of the new trusted token issuer configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies the type of the new trusted token issuer.</p>
    /// This field is required.
    pub fn trusted_token_issuer_type(mut self, input: crate::types::TrustedTokenIssuerType) -> Self {
        self.trusted_token_issuer_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of the new trusted token issuer.</p>
    pub fn set_trusted_token_issuer_type(mut self, input: ::std::option::Option<crate::types::TrustedTokenIssuerType>) -> Self {
        self.trusted_token_issuer_type = input;
        self
    }
    /// <p>Specifies the type of the new trusted token issuer.</p>
    pub fn get_trusted_token_issuer_type(&self) -> &::std::option::Option<crate::types::TrustedTokenIssuerType> {
        &self.trusted_token_issuer_type
    }
    /// <p>Specifies settings that apply to the new trusted token issuer configuration. The settings that are available depend on what <code>TrustedTokenIssuerType</code> you specify.</p>
    /// This field is required.
    pub fn trusted_token_issuer_configuration(mut self, input: crate::types::TrustedTokenIssuerConfiguration) -> Self {
        self.trusted_token_issuer_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies settings that apply to the new trusted token issuer configuration. The settings that are available depend on what <code>TrustedTokenIssuerType</code> you specify.</p>
    pub fn set_trusted_token_issuer_configuration(mut self, input: ::std::option::Option<crate::types::TrustedTokenIssuerConfiguration>) -> Self {
        self.trusted_token_issuer_configuration = input;
        self
    }
    /// <p>Specifies settings that apply to the new trusted token issuer configuration. The settings that are available depend on what <code>TrustedTokenIssuerType</code> you specify.</p>
    pub fn get_trusted_token_issuer_configuration(&self) -> &::std::option::Option<crate::types::TrustedTokenIssuerConfiguration> {
        &self.trusted_token_issuer_configuration
    }
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies tags to be attached to the new trusted token issuer configuration.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies tags to be attached to the new trusted token issuer configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies tags to be attached to the new trusted token issuer configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateTrustedTokenIssuerInput`](crate::operation::create_trusted_token_issuer::CreateTrustedTokenIssuerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_trusted_token_issuer::CreateTrustedTokenIssuerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_trusted_token_issuer::CreateTrustedTokenIssuerInput {
            instance_arn: self.instance_arn,
            name: self.name,
            trusted_token_issuer_type: self.trusted_token_issuer_type,
            trusted_token_issuer_configuration: self.trusted_token_issuer_configuration,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
