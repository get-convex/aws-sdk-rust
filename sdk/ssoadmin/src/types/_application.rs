// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes an application that uses IAM Identity Center for access management.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Application {
    /// <p>The ARN of the application.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the application provider for this application.</p>
    pub application_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the application.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID number of the application.</p>
    pub application_account: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the instance of IAM Identity Center that is configured with this application.</p>
    pub instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the application in this instance of IAM Identity Center.</p>
    pub status: ::std::option::Option<crate::types::ApplicationStatus>,
    /// <p>A structure that describes the options for the access portal associated with this application.</p>
    pub portal_options: ::std::option::Option<crate::types::PortalOptions>,
    /// <p>The description of the application.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the application was originally created.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Application {
    /// <p>The ARN of the application.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The ARN of the application provider for this application.</p>
    pub fn application_provider_arn(&self) -> ::std::option::Option<&str> {
        self.application_provider_arn.as_deref()
    }
    /// <p>The name of the application.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Web Services account ID number of the application.</p>
    pub fn application_account(&self) -> ::std::option::Option<&str> {
        self.application_account.as_deref()
    }
    /// <p>The ARN of the instance of IAM Identity Center that is configured with this application.</p>
    pub fn instance_arn(&self) -> ::std::option::Option<&str> {
        self.instance_arn.as_deref()
    }
    /// <p>The current status of the application in this instance of IAM Identity Center.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ApplicationStatus> {
        self.status.as_ref()
    }
    /// <p>A structure that describes the options for the access portal associated with this application.</p>
    pub fn portal_options(&self) -> ::std::option::Option<&crate::types::PortalOptions> {
        self.portal_options.as_ref()
    }
    /// <p>The description of the application.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time when the application was originally created.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
}
impl Application {
    /// Creates a new builder-style object to manufacture [`Application`](crate::types::Application).
    pub fn builder() -> crate::types::builders::ApplicationBuilder {
        crate::types::builders::ApplicationBuilder::default()
    }
}

/// A builder for [`Application`](crate::types::Application).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationBuilder {
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) application_account: ::std::option::Option<::std::string::String>,
    pub(crate) instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ApplicationStatus>,
    pub(crate) portal_options: ::std::option::Option<crate::types::PortalOptions>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ApplicationBuilder {
    /// <p>The ARN of the application.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The ARN of the application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The ARN of the application provider for this application.</p>
    pub fn application_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the application provider for this application.</p>
    pub fn set_application_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_provider_arn = input;
        self
    }
    /// <p>The ARN of the application provider for this application.</p>
    pub fn get_application_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_provider_arn
    }
    /// <p>The name of the application.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Web Services account ID number of the application.</p>
    pub fn application_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID number of the application.</p>
    pub fn set_application_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_account = input;
        self
    }
    /// <p>The Amazon Web Services account ID number of the application.</p>
    pub fn get_application_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_account
    }
    /// <p>The ARN of the instance of IAM Identity Center that is configured with this application.</p>
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the instance of IAM Identity Center that is configured with this application.</p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_arn = input;
        self
    }
    /// <p>The ARN of the instance of IAM Identity Center that is configured with this application.</p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_arn
    }
    /// <p>The current status of the application in this instance of IAM Identity Center.</p>
    pub fn status(mut self, input: crate::types::ApplicationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the application in this instance of IAM Identity Center.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApplicationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the application in this instance of IAM Identity Center.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApplicationStatus> {
        &self.status
    }
    /// <p>A structure that describes the options for the access portal associated with this application.</p>
    pub fn portal_options(mut self, input: crate::types::PortalOptions) -> Self {
        self.portal_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that describes the options for the access portal associated with this application.</p>
    pub fn set_portal_options(mut self, input: ::std::option::Option<crate::types::PortalOptions>) -> Self {
        self.portal_options = input;
        self
    }
    /// <p>A structure that describes the options for the access portal associated with this application.</p>
    pub fn get_portal_options(&self) -> &::std::option::Option<crate::types::PortalOptions> {
        &self.portal_options
    }
    /// <p>The description of the application.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the application.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the application.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time when the application was originally created.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the application was originally created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date and time when the application was originally created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// Consumes the builder and constructs a [`Application`](crate::types::Application).
    pub fn build(self) -> crate::types::Application {
        crate::types::Application {
            application_arn: self.application_arn,
            application_provider_arn: self.application_provider_arn,
            name: self.name,
            application_account: self.application_account,
            instance_arn: self.instance_arn,
            status: self.status,
            portal_options: self.portal_options,
            description: self.description,
            created_date: self.created_date,
        }
    }
}
