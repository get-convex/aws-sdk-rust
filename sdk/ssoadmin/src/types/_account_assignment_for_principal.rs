// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes an assignment of an Amazon Web Services account to a principal and the permissions that principal has in the account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountAssignmentForPrincipal {
    /// <p>The account ID number of the Amazon Web Services account.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM Identity Center permission set assigned to this principal for this Amazon Web Services account.</p>
    pub permission_set_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the principal.</p>
    pub principal_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the principal.</p>
    pub principal_type: ::std::option::Option<crate::types::PrincipalType>,
}
impl AccountAssignmentForPrincipal {
    /// <p>The account ID number of the Amazon Web Services account.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The ARN of the IAM Identity Center permission set assigned to this principal for this Amazon Web Services account.</p>
    pub fn permission_set_arn(&self) -> ::std::option::Option<&str> {
        self.permission_set_arn.as_deref()
    }
    /// <p>The ID of the principal.</p>
    pub fn principal_id(&self) -> ::std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The type of the principal.</p>
    pub fn principal_type(&self) -> ::std::option::Option<&crate::types::PrincipalType> {
        self.principal_type.as_ref()
    }
}
impl AccountAssignmentForPrincipal {
    /// Creates a new builder-style object to manufacture [`AccountAssignmentForPrincipal`](crate::types::AccountAssignmentForPrincipal).
    pub fn builder() -> crate::types::builders::AccountAssignmentForPrincipalBuilder {
        crate::types::builders::AccountAssignmentForPrincipalBuilder::default()
    }
}

/// A builder for [`AccountAssignmentForPrincipal`](crate::types::AccountAssignmentForPrincipal).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccountAssignmentForPrincipalBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) permission_set_arn: ::std::option::Option<::std::string::String>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_type: ::std::option::Option<crate::types::PrincipalType>,
}
impl AccountAssignmentForPrincipalBuilder {
    /// <p>The account ID number of the Amazon Web Services account.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID number of the Amazon Web Services account.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID number of the Amazon Web Services account.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The ARN of the IAM Identity Center permission set assigned to this principal for this Amazon Web Services account.</p>
    pub fn permission_set_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.permission_set_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM Identity Center permission set assigned to this principal for this Amazon Web Services account.</p>
    pub fn set_permission_set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.permission_set_arn = input;
        self
    }
    /// <p>The ARN of the IAM Identity Center permission set assigned to this principal for this Amazon Web Services account.</p>
    pub fn get_permission_set_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.permission_set_arn
    }
    /// <p>The ID of the principal.</p>
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the principal.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The ID of the principal.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// <p>The type of the principal.</p>
    pub fn principal_type(mut self, input: crate::types::PrincipalType) -> Self {
        self.principal_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the principal.</p>
    pub fn set_principal_type(mut self, input: ::std::option::Option<crate::types::PrincipalType>) -> Self {
        self.principal_type = input;
        self
    }
    /// <p>The type of the principal.</p>
    pub fn get_principal_type(&self) -> &::std::option::Option<crate::types::PrincipalType> {
        &self.principal_type
    }
    /// Consumes the builder and constructs a [`AccountAssignmentForPrincipal`](crate::types::AccountAssignmentForPrincipal).
    pub fn build(self) -> crate::types::AccountAssignmentForPrincipal {
        crate::types::AccountAssignmentForPrincipal {
            account_id: self.account_id,
            permission_set_arn: self.permission_set_arn,
            principal_id: self.principal_id,
            principal_type: self.principal_type,
        }
    }
}
