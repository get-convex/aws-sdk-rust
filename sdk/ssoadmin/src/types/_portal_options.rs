// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes the options for the access portal associated with an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PortalOptions {
    /// <p>A structure that describes the sign-in options for the access portal.</p>
    pub sign_in_options: ::std::option::Option<crate::types::SignInOptions>,
    /// <p>Indicates whether this application is visible in the access portal.</p>
    pub visibility: crate::types::ApplicationVisibility,
}
impl PortalOptions {
    /// <p>A structure that describes the sign-in options for the access portal.</p>
    pub fn sign_in_options(&self) -> ::std::option::Option<&crate::types::SignInOptions> {
        self.sign_in_options.as_ref()
    }
    /// <p>Indicates whether this application is visible in the access portal.</p>
    pub fn visibility(&self) -> &crate::types::ApplicationVisibility {
        &self.visibility
    }
}
impl PortalOptions {
    /// Creates a new builder-style object to manufacture [`PortalOptions`](crate::types::PortalOptions).
    pub fn builder() -> crate::types::builders::PortalOptionsBuilder {
        crate::types::builders::PortalOptionsBuilder::default()
    }
}

/// A builder for [`PortalOptions`](crate::types::PortalOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PortalOptionsBuilder {
    pub(crate) sign_in_options: ::std::option::Option<crate::types::SignInOptions>,
    pub(crate) visibility: ::std::option::Option<crate::types::ApplicationVisibility>,
}
impl PortalOptionsBuilder {
    /// <p>A structure that describes the sign-in options for the access portal.</p>
    pub fn sign_in_options(mut self, input: crate::types::SignInOptions) -> Self {
        self.sign_in_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that describes the sign-in options for the access portal.</p>
    pub fn set_sign_in_options(mut self, input: ::std::option::Option<crate::types::SignInOptions>) -> Self {
        self.sign_in_options = input;
        self
    }
    /// <p>A structure that describes the sign-in options for the access portal.</p>
    pub fn get_sign_in_options(&self) -> &::std::option::Option<crate::types::SignInOptions> {
        &self.sign_in_options
    }
    /// <p>Indicates whether this application is visible in the access portal.</p>
    pub fn visibility(mut self, input: crate::types::ApplicationVisibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether this application is visible in the access portal.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::ApplicationVisibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Indicates whether this application is visible in the access portal.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::ApplicationVisibility> {
        &self.visibility
    }
    /// Consumes the builder and constructs a [`PortalOptions`](crate::types::PortalOptions).
    pub fn build(self) -> crate::types::PortalOptions {
        crate::types::PortalOptions {
            sign_in_options: self.sign_in_options,
            visibility: self.visibility.unwrap_or(
                "ENABLED"
                    .parse::<crate::types::ApplicationVisibility>()
                    .expect("static value validated to member"),
            ),
        }
    }
}
