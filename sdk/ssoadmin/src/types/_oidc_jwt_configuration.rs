// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes configuration settings for a trusted token issuer that supports OpenID Connect (OIDC) and JSON Web Tokens (JWTs).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OidcJwtConfiguration {
    /// <p>The URL that IAM Identity Center uses for OpenID Discovery. OpenID Discovery is used to obtain the information required to verify the tokens that the trusted token issuer generates.</p>
    pub issuer_url: ::std::string::String,
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub claim_attribute_path: ::std::string::String,
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub identity_store_attribute_path: ::std::string::String,
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub jwks_retrieval_option: crate::types::JwksRetrievalOption,
}
impl OidcJwtConfiguration {
    /// <p>The URL that IAM Identity Center uses for OpenID Discovery. OpenID Discovery is used to obtain the information required to verify the tokens that the trusted token issuer generates.</p>
    pub fn issuer_url(&self) -> &str {
        use std::ops::Deref;
        self.issuer_url.deref()
    }
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn claim_attribute_path(&self) -> &str {
        use std::ops::Deref;
        self.claim_attribute_path.deref()
    }
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn identity_store_attribute_path(&self) -> &str {
        use std::ops::Deref;
        self.identity_store_attribute_path.deref()
    }
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub fn jwks_retrieval_option(&self) -> &crate::types::JwksRetrievalOption {
        &self.jwks_retrieval_option
    }
}
impl OidcJwtConfiguration {
    /// Creates a new builder-style object to manufacture [`OidcJwtConfiguration`](crate::types::OidcJwtConfiguration).
    pub fn builder() -> crate::types::builders::OidcJwtConfigurationBuilder {
        crate::types::builders::OidcJwtConfigurationBuilder::default()
    }
}

/// A builder for [`OidcJwtConfiguration`](crate::types::OidcJwtConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OidcJwtConfigurationBuilder {
    pub(crate) issuer_url: ::std::option::Option<::std::string::String>,
    pub(crate) claim_attribute_path: ::std::option::Option<::std::string::String>,
    pub(crate) identity_store_attribute_path: ::std::option::Option<::std::string::String>,
    pub(crate) jwks_retrieval_option: ::std::option::Option<crate::types::JwksRetrievalOption>,
}
impl OidcJwtConfigurationBuilder {
    /// <p>The URL that IAM Identity Center uses for OpenID Discovery. OpenID Discovery is used to obtain the information required to verify the tokens that the trusted token issuer generates.</p>
    /// This field is required.
    pub fn issuer_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL that IAM Identity Center uses for OpenID Discovery. OpenID Discovery is used to obtain the information required to verify the tokens that the trusted token issuer generates.</p>
    pub fn set_issuer_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer_url = input;
        self
    }
    /// <p>The URL that IAM Identity Center uses for OpenID Discovery. OpenID Discovery is used to obtain the information required to verify the tokens that the trusted token issuer generates.</p>
    pub fn get_issuer_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer_url
    }
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    /// This field is required.
    pub fn claim_attribute_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.claim_attribute_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn set_claim_attribute_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.claim_attribute_path = input;
        self
    }
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn get_claim_attribute_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.claim_attribute_path
    }
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    /// This field is required.
    pub fn identity_store_attribute_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_store_attribute_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn set_identity_store_attribute_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_store_attribute_path = input;
        self
    }
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn get_identity_store_attribute_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_store_attribute_path
    }
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    /// This field is required.
    pub fn jwks_retrieval_option(mut self, input: crate::types::JwksRetrievalOption) -> Self {
        self.jwks_retrieval_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub fn set_jwks_retrieval_option(mut self, input: ::std::option::Option<crate::types::JwksRetrievalOption>) -> Self {
        self.jwks_retrieval_option = input;
        self
    }
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub fn get_jwks_retrieval_option(&self) -> &::std::option::Option<crate::types::JwksRetrievalOption> {
        &self.jwks_retrieval_option
    }
    /// Consumes the builder and constructs a [`OidcJwtConfiguration`](crate::types::OidcJwtConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`issuer_url`](crate::types::builders::OidcJwtConfigurationBuilder::issuer_url)
    /// - [`claim_attribute_path`](crate::types::builders::OidcJwtConfigurationBuilder::claim_attribute_path)
    /// - [`identity_store_attribute_path`](crate::types::builders::OidcJwtConfigurationBuilder::identity_store_attribute_path)
    /// - [`jwks_retrieval_option`](crate::types::builders::OidcJwtConfigurationBuilder::jwks_retrieval_option)
    pub fn build(self) -> ::std::result::Result<crate::types::OidcJwtConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OidcJwtConfiguration {
            issuer_url: self.issuer_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "issuer_url",
                    "issuer_url was not specified but it is required when building OidcJwtConfiguration",
                )
            })?,
            claim_attribute_path: self.claim_attribute_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "claim_attribute_path",
                    "claim_attribute_path was not specified but it is required when building OidcJwtConfiguration",
                )
            })?,
            identity_store_attribute_path: self.identity_store_attribute_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identity_store_attribute_path",
                    "identity_store_attribute_path was not specified but it is required when building OidcJwtConfiguration",
                )
            })?,
            jwks_retrieval_option: self.jwks_retrieval_option.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "jwks_retrieval_option",
                    "jwks_retrieval_option was not specified but it is required when building OidcJwtConfiguration",
                )
            })?,
        })
    }
}
