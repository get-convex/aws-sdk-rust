// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes an assignment of a principal to an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationAssignment {
    /// <p>The ARN of the application that has principals assigned.</p>
    pub application_arn: ::std::string::String,
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub principal_id: ::std::string::String,
    /// <p>The type of the principal assigned to the application.</p>
    pub principal_type: crate::types::PrincipalType,
}
impl ApplicationAssignment {
    /// <p>The ARN of the application that has principals assigned.</p>
    pub fn application_arn(&self) -> &str {
        use std::ops::Deref;
        self.application_arn.deref()
    }
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub fn principal_id(&self) -> &str {
        use std::ops::Deref;
        self.principal_id.deref()
    }
    /// <p>The type of the principal assigned to the application.</p>
    pub fn principal_type(&self) -> &crate::types::PrincipalType {
        &self.principal_type
    }
}
impl ApplicationAssignment {
    /// Creates a new builder-style object to manufacture [`ApplicationAssignment`](crate::types::ApplicationAssignment).
    pub fn builder() -> crate::types::builders::ApplicationAssignmentBuilder {
        crate::types::builders::ApplicationAssignmentBuilder::default()
    }
}

/// A builder for [`ApplicationAssignment`](crate::types::ApplicationAssignment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationAssignmentBuilder {
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_type: ::std::option::Option<crate::types::PrincipalType>,
}
impl ApplicationAssignmentBuilder {
    /// <p>The ARN of the application that has principals assigned.</p>
    /// This field is required.
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the application that has principals assigned.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The ARN of the application that has principals assigned.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The unique identifier of the principal assigned to the application.</p>
    /// This field is required.
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// <p>The type of the principal assigned to the application.</p>
    /// This field is required.
    pub fn principal_type(mut self, input: crate::types::PrincipalType) -> Self {
        self.principal_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the principal assigned to the application.</p>
    pub fn set_principal_type(mut self, input: ::std::option::Option<crate::types::PrincipalType>) -> Self {
        self.principal_type = input;
        self
    }
    /// <p>The type of the principal assigned to the application.</p>
    pub fn get_principal_type(&self) -> &::std::option::Option<crate::types::PrincipalType> {
        &self.principal_type
    }
    /// Consumes the builder and constructs a [`ApplicationAssignment`](crate::types::ApplicationAssignment).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_arn`](crate::types::builders::ApplicationAssignmentBuilder::application_arn)
    /// - [`principal_id`](crate::types::builders::ApplicationAssignmentBuilder::principal_id)
    /// - [`principal_type`](crate::types::builders::ApplicationAssignmentBuilder::principal_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ApplicationAssignment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationAssignment {
            application_arn: self.application_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_arn",
                    "application_arn was not specified but it is required when building ApplicationAssignment",
                )
            })?,
            principal_id: self.principal_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal_id",
                    "principal_id was not specified but it is required when building ApplicationAssignment",
                )
            })?,
            principal_type: self.principal_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal_type",
                    "principal_type was not specified but it is required when building ApplicationAssignment",
                )
            })?,
        })
    }
}
