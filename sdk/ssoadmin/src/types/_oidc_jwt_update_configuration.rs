// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes updated configuration settings for a trusted token issuer that supports OpenID Connect (OIDC) and JSON Web Tokens (JWTs).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OidcJwtUpdateConfiguration {
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub claim_attribute_path: ::std::option::Option<::std::string::String>,
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub identity_store_attribute_path: ::std::option::Option<::std::string::String>,
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub jwks_retrieval_option: ::std::option::Option<crate::types::JwksRetrievalOption>,
}
impl OidcJwtUpdateConfiguration {
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn claim_attribute_path(&self) -> ::std::option::Option<&str> {
        self.claim_attribute_path.as_deref()
    }
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn identity_store_attribute_path(&self) -> ::std::option::Option<&str> {
        self.identity_store_attribute_path.as_deref()
    }
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub fn jwks_retrieval_option(&self) -> ::std::option::Option<&crate::types::JwksRetrievalOption> {
        self.jwks_retrieval_option.as_ref()
    }
}
impl OidcJwtUpdateConfiguration {
    /// Creates a new builder-style object to manufacture [`OidcJwtUpdateConfiguration`](crate::types::OidcJwtUpdateConfiguration).
    pub fn builder() -> crate::types::builders::OidcJwtUpdateConfigurationBuilder {
        crate::types::builders::OidcJwtUpdateConfigurationBuilder::default()
    }
}

/// A builder for [`OidcJwtUpdateConfiguration`](crate::types::OidcJwtUpdateConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OidcJwtUpdateConfigurationBuilder {
    pub(crate) claim_attribute_path: ::std::option::Option<::std::string::String>,
    pub(crate) identity_store_attribute_path: ::std::option::Option<::std::string::String>,
    pub(crate) jwks_retrieval_option: ::std::option::Option<crate::types::JwksRetrievalOption>,
}
impl OidcJwtUpdateConfigurationBuilder {
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn claim_attribute_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.claim_attribute_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn set_claim_attribute_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.claim_attribute_path = input;
        self
    }
    /// <p>The path of the source attribute in the JWT from the trusted token issuer. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>IdentityStoreAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn get_claim_attribute_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.claim_attribute_path
    }
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn identity_store_attribute_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_store_attribute_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn set_identity_store_attribute_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_store_attribute_path = input;
        self
    }
    /// <p>The path of the destination attribute in a JWT from IAM Identity Center. The attribute mapped by this JMESPath expression is compared against the attribute mapped by <code>ClaimAttributePath</code> when a trusted token issuer token is exchanged for an IAM Identity Center token.</p>
    pub fn get_identity_store_attribute_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_store_attribute_path
    }
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub fn jwks_retrieval_option(mut self, input: crate::types::JwksRetrievalOption) -> Self {
        self.jwks_retrieval_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub fn set_jwks_retrieval_option(mut self, input: ::std::option::Option<crate::types::JwksRetrievalOption>) -> Self {
        self.jwks_retrieval_option = input;
        self
    }
    /// <p>The method that the trusted token issuer can use to retrieve the JSON Web Key Set used to verify a JWT.</p>
    pub fn get_jwks_retrieval_option(&self) -> &::std::option::Option<crate::types::JwksRetrievalOption> {
        &self.jwks_retrieval_option
    }
    /// Consumes the builder and constructs a [`OidcJwtUpdateConfiguration`](crate::types::OidcJwtUpdateConfiguration).
    pub fn build(self) -> crate::types::OidcJwtUpdateConfiguration {
        crate::types::OidcJwtUpdateConfiguration {
            claim_attribute_path: self.claim_attribute_path,
            identity_store_attribute_path: self.identity_store_attribute_path,
            jwks_retrieval_option: self.jwks_retrieval_option,
        }
    }
}
