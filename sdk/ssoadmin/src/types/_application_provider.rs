// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes a provider that can be used to connect an Amazon Web Services managed application or customer managed application to IAM Identity Center.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationProvider {
    /// <p>The ARN of the application provider.</p>
    pub application_provider_arn: ::std::string::String,
    /// <p>The protocol that the application provider uses to perform federation.</p>
    pub federation_protocol: ::std::option::Option<crate::types::FederationProtocol>,
    /// <p>A structure that describes how IAM Identity Center represents the application provider in the portal.</p>
    pub display_data: ::std::option::Option<crate::types::DisplayData>,
    /// <p>A structure that describes the application provider's resource server.</p>
    pub resource_server_config: ::std::option::Option<crate::types::ResourceServerConfig>,
}
impl ApplicationProvider {
    /// <p>The ARN of the application provider.</p>
    pub fn application_provider_arn(&self) -> &str {
        use std::ops::Deref;
        self.application_provider_arn.deref()
    }
    /// <p>The protocol that the application provider uses to perform federation.</p>
    pub fn federation_protocol(&self) -> ::std::option::Option<&crate::types::FederationProtocol> {
        self.federation_protocol.as_ref()
    }
    /// <p>A structure that describes how IAM Identity Center represents the application provider in the portal.</p>
    pub fn display_data(&self) -> ::std::option::Option<&crate::types::DisplayData> {
        self.display_data.as_ref()
    }
    /// <p>A structure that describes the application provider's resource server.</p>
    pub fn resource_server_config(&self) -> ::std::option::Option<&crate::types::ResourceServerConfig> {
        self.resource_server_config.as_ref()
    }
}
impl ApplicationProvider {
    /// Creates a new builder-style object to manufacture [`ApplicationProvider`](crate::types::ApplicationProvider).
    pub fn builder() -> crate::types::builders::ApplicationProviderBuilder {
        crate::types::builders::ApplicationProviderBuilder::default()
    }
}

/// A builder for [`ApplicationProvider`](crate::types::ApplicationProvider).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationProviderBuilder {
    pub(crate) application_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) federation_protocol: ::std::option::Option<crate::types::FederationProtocol>,
    pub(crate) display_data: ::std::option::Option<crate::types::DisplayData>,
    pub(crate) resource_server_config: ::std::option::Option<crate::types::ResourceServerConfig>,
}
impl ApplicationProviderBuilder {
    /// <p>The ARN of the application provider.</p>
    /// This field is required.
    pub fn application_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the application provider.</p>
    pub fn set_application_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_provider_arn = input;
        self
    }
    /// <p>The ARN of the application provider.</p>
    pub fn get_application_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_provider_arn
    }
    /// <p>The protocol that the application provider uses to perform federation.</p>
    pub fn federation_protocol(mut self, input: crate::types::FederationProtocol) -> Self {
        self.federation_protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol that the application provider uses to perform federation.</p>
    pub fn set_federation_protocol(mut self, input: ::std::option::Option<crate::types::FederationProtocol>) -> Self {
        self.federation_protocol = input;
        self
    }
    /// <p>The protocol that the application provider uses to perform federation.</p>
    pub fn get_federation_protocol(&self) -> &::std::option::Option<crate::types::FederationProtocol> {
        &self.federation_protocol
    }
    /// <p>A structure that describes how IAM Identity Center represents the application provider in the portal.</p>
    pub fn display_data(mut self, input: crate::types::DisplayData) -> Self {
        self.display_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that describes how IAM Identity Center represents the application provider in the portal.</p>
    pub fn set_display_data(mut self, input: ::std::option::Option<crate::types::DisplayData>) -> Self {
        self.display_data = input;
        self
    }
    /// <p>A structure that describes how IAM Identity Center represents the application provider in the portal.</p>
    pub fn get_display_data(&self) -> &::std::option::Option<crate::types::DisplayData> {
        &self.display_data
    }
    /// <p>A structure that describes the application provider's resource server.</p>
    pub fn resource_server_config(mut self, input: crate::types::ResourceServerConfig) -> Self {
        self.resource_server_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that describes the application provider's resource server.</p>
    pub fn set_resource_server_config(mut self, input: ::std::option::Option<crate::types::ResourceServerConfig>) -> Self {
        self.resource_server_config = input;
        self
    }
    /// <p>A structure that describes the application provider's resource server.</p>
    pub fn get_resource_server_config(&self) -> &::std::option::Option<crate::types::ResourceServerConfig> {
        &self.resource_server_config
    }
    /// Consumes the builder and constructs a [`ApplicationProvider`](crate::types::ApplicationProvider).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_provider_arn`](crate::types::builders::ApplicationProviderBuilder::application_provider_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ApplicationProvider, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationProvider {
            application_provider_arn: self.application_provider_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_provider_arn",
                    "application_provider_arn was not specified but it is required when building ApplicationProvider",
                )
            })?,
            federation_protocol: self.federation_protocol,
            display_data: self.display_data,
            resource_server_config: self.resource_server_config,
        })
    }
}
