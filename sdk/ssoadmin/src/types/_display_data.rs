// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes how the portal represents an application provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisplayData {
    /// <p>The name of the application provider that appears in the portal.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>A URL that points to an icon that represents the application provider.</p>
    pub icon_url: ::std::option::Option<::std::string::String>,
    /// <p>The description of the application provider that appears in the portal.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl DisplayData {
    /// <p>The name of the application provider that appears in the portal.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A URL that points to an icon that represents the application provider.</p>
    pub fn icon_url(&self) -> ::std::option::Option<&str> {
        self.icon_url.as_deref()
    }
    /// <p>The description of the application provider that appears in the portal.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl DisplayData {
    /// Creates a new builder-style object to manufacture [`DisplayData`](crate::types::DisplayData).
    pub fn builder() -> crate::types::builders::DisplayDataBuilder {
        crate::types::builders::DisplayDataBuilder::default()
    }
}

/// A builder for [`DisplayData`](crate::types::DisplayData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DisplayDataBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) icon_url: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl DisplayDataBuilder {
    /// <p>The name of the application provider that appears in the portal.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application provider that appears in the portal.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of the application provider that appears in the portal.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>A URL that points to an icon that represents the application provider.</p>
    pub fn icon_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.icon_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL that points to an icon that represents the application provider.</p>
    pub fn set_icon_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.icon_url = input;
        self
    }
    /// <p>A URL that points to an icon that represents the application provider.</p>
    pub fn get_icon_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.icon_url
    }
    /// <p>The description of the application provider that appears in the portal.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the application provider that appears in the portal.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the application provider that appears in the portal.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`DisplayData`](crate::types::DisplayData).
    pub fn build(self) -> crate::types::DisplayData {
        crate::types::DisplayData {
            display_name: self.display_name,
            icon_url: self.icon_url,
            description: self.description,
        }
    }
}
