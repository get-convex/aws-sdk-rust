// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes an application to which a principal is assigned.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationAssignmentForPrincipal {
    /// <p>The ARN of the application to which the specified principal is assigned.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub principal_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the principal assigned to the application.</p>
    pub principal_type: ::std::option::Option<crate::types::PrincipalType>,
}
impl ApplicationAssignmentForPrincipal {
    /// <p>The ARN of the application to which the specified principal is assigned.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub fn principal_id(&self) -> ::std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The type of the principal assigned to the application.</p>
    pub fn principal_type(&self) -> ::std::option::Option<&crate::types::PrincipalType> {
        self.principal_type.as_ref()
    }
}
impl ApplicationAssignmentForPrincipal {
    /// Creates a new builder-style object to manufacture [`ApplicationAssignmentForPrincipal`](crate::types::ApplicationAssignmentForPrincipal).
    pub fn builder() -> crate::types::builders::ApplicationAssignmentForPrincipalBuilder {
        crate::types::builders::ApplicationAssignmentForPrincipalBuilder::default()
    }
}

/// A builder for [`ApplicationAssignmentForPrincipal`](crate::types::ApplicationAssignmentForPrincipal).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationAssignmentForPrincipalBuilder {
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_type: ::std::option::Option<crate::types::PrincipalType>,
}
impl ApplicationAssignmentForPrincipalBuilder {
    /// <p>The ARN of the application to which the specified principal is assigned.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the application to which the specified principal is assigned.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The ARN of the application to which the specified principal is assigned.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The unique identifier of the principal assigned to the application.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// <p>The type of the principal assigned to the application.</p>
    pub fn principal_type(mut self, input: crate::types::PrincipalType) -> Self {
        self.principal_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the principal assigned to the application.</p>
    pub fn set_principal_type(mut self, input: ::std::option::Option<crate::types::PrincipalType>) -> Self {
        self.principal_type = input;
        self
    }
    /// <p>The type of the principal assigned to the application.</p>
    pub fn get_principal_type(&self) -> &::std::option::Option<crate::types::PrincipalType> {
        &self.principal_type
    }
    /// Consumes the builder and constructs a [`ApplicationAssignmentForPrincipal`](crate::types::ApplicationAssignmentForPrincipal).
    pub fn build(self) -> crate::types::ApplicationAssignmentForPrincipal {
        crate::types::ApplicationAssignmentForPrincipal {
            application_arn: self.application_arn,
            principal_id: self.principal_id,
            principal_type: self.principal_type,
        }
    }
}
