// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes a filter for applications.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListApplicationsFilter {
    /// <p>An Amazon Web Services account ID number that filters the results in the response.</p>
    pub application_account: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of an application provider that can filter the results in the response.</p>
    pub application_provider: ::std::option::Option<::std::string::String>,
}
impl ListApplicationsFilter {
    /// <p>An Amazon Web Services account ID number that filters the results in the response.</p>
    pub fn application_account(&self) -> ::std::option::Option<&str> {
        self.application_account.as_deref()
    }
    /// <p>The ARN of an application provider that can filter the results in the response.</p>
    pub fn application_provider(&self) -> ::std::option::Option<&str> {
        self.application_provider.as_deref()
    }
}
impl ListApplicationsFilter {
    /// Creates a new builder-style object to manufacture [`ListApplicationsFilter`](crate::types::ListApplicationsFilter).
    pub fn builder() -> crate::types::builders::ListApplicationsFilterBuilder {
        crate::types::builders::ListApplicationsFilterBuilder::default()
    }
}

/// A builder for [`ListApplicationsFilter`](crate::types::ListApplicationsFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListApplicationsFilterBuilder {
    pub(crate) application_account: ::std::option::Option<::std::string::String>,
    pub(crate) application_provider: ::std::option::Option<::std::string::String>,
}
impl ListApplicationsFilterBuilder {
    /// <p>An Amazon Web Services account ID number that filters the results in the response.</p>
    pub fn application_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services account ID number that filters the results in the response.</p>
    pub fn set_application_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_account = input;
        self
    }
    /// <p>An Amazon Web Services account ID number that filters the results in the response.</p>
    pub fn get_application_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_account
    }
    /// <p>The ARN of an application provider that can filter the results in the response.</p>
    pub fn application_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an application provider that can filter the results in the response.</p>
    pub fn set_application_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_provider = input;
        self
    }
    /// <p>The ARN of an application provider that can filter the results in the response.</p>
    pub fn get_application_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_provider
    }
    /// Consumes the builder and constructs a [`ListApplicationsFilter`](crate::types::ListApplicationsFilter).
    pub fn build(self) -> crate::types::ListApplicationsFilter {
        crate::types::ListApplicationsFilter {
            application_account: self.application_account,
            application_provider: self.application_provider,
        }
    }
}
