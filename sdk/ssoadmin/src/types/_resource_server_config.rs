// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes the configuration of a resource server.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceServerConfig {
    /// <p>A list of the IAM Identity Center access scopes that are associated with this resource server.</p>
    pub scopes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ResourceServerScopeDetails>>,
}
impl ResourceServerConfig {
    /// <p>A list of the IAM Identity Center access scopes that are associated with this resource server.</p>
    pub fn scopes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ResourceServerScopeDetails>> {
        self.scopes.as_ref()
    }
}
impl ResourceServerConfig {
    /// Creates a new builder-style object to manufacture [`ResourceServerConfig`](crate::types::ResourceServerConfig).
    pub fn builder() -> crate::types::builders::ResourceServerConfigBuilder {
        crate::types::builders::ResourceServerConfigBuilder::default()
    }
}

/// A builder for [`ResourceServerConfig`](crate::types::ResourceServerConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceServerConfigBuilder {
    pub(crate) scopes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ResourceServerScopeDetails>>,
}
impl ResourceServerConfigBuilder {
    /// Adds a key-value pair to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>A list of the IAM Identity Center access scopes that are associated with this resource server.</p>
    pub fn scopes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ResourceServerScopeDetails) -> Self {
        let mut hash_map = self.scopes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.scopes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of the IAM Identity Center access scopes that are associated with this resource server.</p>
    pub fn set_scopes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ResourceServerScopeDetails>>,
    ) -> Self {
        self.scopes = input;
        self
    }
    /// <p>A list of the IAM Identity Center access scopes that are associated with this resource server.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ResourceServerScopeDetails>> {
        &self.scopes
    }
    /// Consumes the builder and constructs a [`ResourceServerConfig`](crate::types::ResourceServerConfig).
    pub fn build(self) -> crate::types::ResourceServerConfig {
        crate::types::ResourceServerConfig { scopes: self.scopes }
    }
}
