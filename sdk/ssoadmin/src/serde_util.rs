// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn describe_application_provider_output_output_correct_errors(
    mut builder: crate::operation::describe_application_provider::builders::DescribeApplicationProviderOutputBuilder,
) -> crate::operation::describe_application_provider::builders::DescribeApplicationProviderOutputBuilder {
    if builder.application_provider_arn.is_none() {
        builder.application_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_application_access_scope_output_output_correct_errors(
    mut builder: crate::operation::get_application_access_scope::builders::GetApplicationAccessScopeOutputBuilder,
) -> crate::operation::get_application_access_scope::builders::GetApplicationAccessScopeOutputBuilder {
    if builder.scope.is_none() {
        builder.scope = Some(Default::default())
    }
    builder
}

pub(crate) fn get_application_assignment_configuration_output_output_correct_errors(
    mut builder: crate::operation::get_application_assignment_configuration::builders::GetApplicationAssignmentConfigurationOutputBuilder,
) -> crate::operation::get_application_assignment_configuration::builders::GetApplicationAssignmentConfigurationOutputBuilder {
    if builder.assignment_required.is_none() {
        builder.assignment_required = Some(Default::default())
    }
    builder
}

pub(crate) fn get_application_grant_output_output_correct_errors(
    mut builder: crate::operation::get_application_grant::builders::GetApplicationGrantOutputBuilder,
) -> crate::operation::get_application_grant::builders::GetApplicationGrantOutputBuilder {
    if builder.grant.is_none() {
        builder.grant = Some(crate::types::Grant::Unknown)
    }
    builder
}

pub(crate) fn list_application_access_scopes_output_output_correct_errors(
    mut builder: crate::operation::list_application_access_scopes::builders::ListApplicationAccessScopesOutputBuilder,
) -> crate::operation::list_application_access_scopes::builders::ListApplicationAccessScopesOutputBuilder {
    if builder.scopes.is_none() {
        builder.scopes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_application_grants_output_output_correct_errors(
    mut builder: crate::operation::list_application_grants::builders::ListApplicationGrantsOutputBuilder,
) -> crate::operation::list_application_grants::builders::ListApplicationGrantsOutputBuilder {
    if builder.grants.is_none() {
        builder.grants = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_access_control_attribute_configuration_correct_errors(
    mut builder: crate::types::builders::InstanceAccessControlAttributeConfigurationBuilder,
) -> crate::types::builders::InstanceAccessControlAttributeConfigurationBuilder {
    if builder.access_control_attributes.is_none() {
        builder.access_control_attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn application_assignment_correct_errors(
    mut builder: crate::types::builders::ApplicationAssignmentBuilder,
) -> crate::types::builders::ApplicationAssignmentBuilder {
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    if builder.principal_id.is_none() {
        builder.principal_id = Some(Default::default())
    }
    if builder.principal_type.is_none() {
        builder.principal_type = "no value was set".parse::<crate::types::PrincipalType>().ok()
    }
    builder
}

pub(crate) fn application_provider_correct_errors(
    mut builder: crate::types::builders::ApplicationProviderBuilder,
) -> crate::types::builders::ApplicationProviderBuilder {
    if builder.application_provider_arn.is_none() {
        builder.application_provider_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_managed_policy_reference_correct_errors(
    mut builder: crate::types::builders::CustomerManagedPolicyReferenceBuilder,
) -> crate::types::builders::CustomerManagedPolicyReferenceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn grant_item_correct_errors(mut builder: crate::types::builders::GrantItemBuilder) -> crate::types::builders::GrantItemBuilder {
    if builder.grant_type.is_none() {
        builder.grant_type = "no value was set".parse::<crate::types::GrantType>().ok()
    }
    if builder.grant.is_none() {
        builder.grant = Some(crate::types::Grant::Unknown)
    }
    builder
}

pub(crate) fn iam_authentication_method_correct_errors(
    mut builder: crate::types::builders::IamAuthenticationMethodBuilder,
) -> crate::types::builders::IamAuthenticationMethodBuilder {
    if builder.actor_policy.is_none() {
        builder.actor_policy = Some(Default::default())
    }
    builder
}

pub(crate) fn oidc_jwt_configuration_correct_errors(
    mut builder: crate::types::builders::OidcJwtConfigurationBuilder,
) -> crate::types::builders::OidcJwtConfigurationBuilder {
    if builder.issuer_url.is_none() {
        builder.issuer_url = Some(Default::default())
    }
    if builder.claim_attribute_path.is_none() {
        builder.claim_attribute_path = Some(Default::default())
    }
    if builder.identity_store_attribute_path.is_none() {
        builder.identity_store_attribute_path = Some(Default::default())
    }
    if builder.jwks_retrieval_option.is_none() {
        builder.jwks_retrieval_option = "no value was set".parse::<crate::types::JwksRetrievalOption>().ok()
    }
    builder
}

pub(crate) fn scope_details_correct_errors(mut builder: crate::types::builders::ScopeDetailsBuilder) -> crate::types::builders::ScopeDetailsBuilder {
    if builder.scope.is_none() {
        builder.scope = Some(Default::default())
    }
    builder
}

pub(crate) fn sign_in_options_correct_errors(
    mut builder: crate::types::builders::SignInOptionsBuilder,
) -> crate::types::builders::SignInOptionsBuilder {
    if builder.origin.is_none() {
        builder.origin = "no value was set".parse::<crate::types::SignInOrigin>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn access_control_attribute_correct_errors(
    mut builder: crate::types::builders::AccessControlAttributeBuilder,
) -> crate::types::builders::AccessControlAttributeBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::AccessControlAttributeValueBuilder::default();
            crate::serde_util::access_control_attribute_value_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn access_control_attribute_value_correct_errors(
    mut builder: crate::types::builders::AccessControlAttributeValueBuilder,
) -> crate::types::builders::AccessControlAttributeValueBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    builder
}
