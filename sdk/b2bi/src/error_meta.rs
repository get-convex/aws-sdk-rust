// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>A conflict exception is thrown when you attempt to delete a resource (such as a profile or a capability) that is being used by other resources.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>This exception is thrown when an error occurs in the Amazon Web Services B2B Data Interchange service.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Occurs when the requested resource does not exist, or cannot be found. In some cases, the resource exists in a region other than the region specified in the API call.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Occurs when the calling command attempts to exceed one of the service quotas, for example trying to create a capability when you already have the maximum number of capabilities allowed.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to throttling: the data speed and rendering may be limited depending on various parameters and conditions.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>Occurs when a B2BI object cannot be validated against a request from another object.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_capability::CreateCapabilityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_capability::CreateCapabilityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_capability::CreateCapabilityError> for Error {
    fn from(err: crate::operation::create_capability::CreateCapabilityError) -> Self {
        match err {
            crate::operation::create_capability::CreateCapabilityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_capability::CreateCapabilityError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_capability::CreateCapabilityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_capability::CreateCapabilityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_capability::CreateCapabilityError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_capability::CreateCapabilityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_capability::CreateCapabilityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_capability::CreateCapabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_partnership::CreatePartnershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_partnership::CreatePartnershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_partnership::CreatePartnershipError> for Error {
    fn from(err: crate::operation::create_partnership::CreatePartnershipError) -> Self {
        match err {
            crate::operation::create_partnership::CreatePartnershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_partnership::CreatePartnershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_partnership::CreatePartnershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_partnership::CreatePartnershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_partnership::CreatePartnershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_partnership::CreatePartnershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_partnership::CreatePartnershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_partnership::CreatePartnershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_profile::CreateProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_profile::CreateProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_profile::CreateProfileError> for Error {
    fn from(err: crate::operation::create_profile::CreateProfileError) -> Self {
        match err {
            crate::operation::create_profile::CreateProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_profile::CreateProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_profile::CreateProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_profile::CreateProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_profile::CreateProfileError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_profile::CreateProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_profile::CreateProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_profile::CreateProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_transformer::CreateTransformerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_transformer::CreateTransformerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_transformer::CreateTransformerError> for Error {
    fn from(err: crate::operation::create_transformer::CreateTransformerError) -> Self {
        match err {
            crate::operation::create_transformer::CreateTransformerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_transformer::CreateTransformerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_transformer::CreateTransformerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_transformer::CreateTransformerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_transformer::CreateTransformerError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_transformer::CreateTransformerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_transformer::CreateTransformerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_transformer::CreateTransformerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_capability::DeleteCapabilityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_capability::DeleteCapabilityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_capability::DeleteCapabilityError> for Error {
    fn from(err: crate::operation::delete_capability::DeleteCapabilityError) -> Self {
        match err {
            crate::operation::delete_capability::DeleteCapabilityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_capability::DeleteCapabilityError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_capability::DeleteCapabilityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_capability::DeleteCapabilityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_capability::DeleteCapabilityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_capability::DeleteCapabilityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_capability::DeleteCapabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_partnership::DeletePartnershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_partnership::DeletePartnershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_partnership::DeletePartnershipError> for Error {
    fn from(err: crate::operation::delete_partnership::DeletePartnershipError) -> Self {
        match err {
            crate::operation::delete_partnership::DeletePartnershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_partnership::DeletePartnershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_partnership::DeletePartnershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_partnership::DeletePartnershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_partnership::DeletePartnershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_partnership::DeletePartnershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_partnership::DeletePartnershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_profile::DeleteProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_profile::DeleteProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_profile::DeleteProfileError> for Error {
    fn from(err: crate::operation::delete_profile::DeleteProfileError) -> Self {
        match err {
            crate::operation::delete_profile::DeleteProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_profile::DeleteProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_profile::DeleteProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_profile::DeleteProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_profile::DeleteProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_profile::DeleteProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_profile::DeleteProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_transformer::DeleteTransformerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_transformer::DeleteTransformerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_transformer::DeleteTransformerError> for Error {
    fn from(err: crate::operation::delete_transformer::DeleteTransformerError) -> Self {
        match err {
            crate::operation::delete_transformer::DeleteTransformerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_transformer::DeleteTransformerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_transformer::DeleteTransformerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_transformer::DeleteTransformerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_transformer::DeleteTransformerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_transformer::DeleteTransformerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_transformer::DeleteTransformerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_capability::GetCapabilityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_capability::GetCapabilityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_capability::GetCapabilityError> for Error {
    fn from(err: crate::operation::get_capability::GetCapabilityError) -> Self {
        match err {
            crate::operation::get_capability::GetCapabilityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_capability::GetCapabilityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_capability::GetCapabilityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_capability::GetCapabilityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_capability::GetCapabilityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_capability::GetCapabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_partnership::GetPartnershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_partnership::GetPartnershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_partnership::GetPartnershipError> for Error {
    fn from(err: crate::operation::get_partnership::GetPartnershipError) -> Self {
        match err {
            crate::operation::get_partnership::GetPartnershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_partnership::GetPartnershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_partnership::GetPartnershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_partnership::GetPartnershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_partnership::GetPartnershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_partnership::GetPartnershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_profile::GetProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_profile::GetProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_profile::GetProfileError> for Error {
    fn from(err: crate::operation::get_profile::GetProfileError) -> Self {
        match err {
            crate::operation::get_profile::GetProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_profile::GetProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_profile::GetProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_profile::GetProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_profile::GetProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_profile::GetProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_transformer::GetTransformerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_transformer::GetTransformerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_transformer::GetTransformerError> for Error {
    fn from(err: crate::operation::get_transformer::GetTransformerError) -> Self {
        match err {
            crate::operation::get_transformer::GetTransformerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_transformer::GetTransformerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_transformer::GetTransformerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_transformer::GetTransformerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_transformer::GetTransformerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_transformer::GetTransformerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_transformer_job::GetTransformerJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_transformer_job::GetTransformerJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_transformer_job::GetTransformerJobError> for Error {
    fn from(err: crate::operation::get_transformer_job::GetTransformerJobError) -> Self {
        match err {
            crate::operation::get_transformer_job::GetTransformerJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_transformer_job::GetTransformerJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_transformer_job::GetTransformerJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_transformer_job::GetTransformerJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_transformer_job::GetTransformerJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_transformer_job::GetTransformerJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_capabilities::ListCapabilitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_capabilities::ListCapabilitiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_capabilities::ListCapabilitiesError> for Error {
    fn from(err: crate::operation::list_capabilities::ListCapabilitiesError) -> Self {
        match err {
            crate::operation::list_capabilities::ListCapabilitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_partnerships::ListPartnershipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_partnerships::ListPartnershipsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_partnerships::ListPartnershipsError> for Error {
    fn from(err: crate::operation::list_partnerships::ListPartnershipsError) -> Self {
        match err {
            crate::operation::list_partnerships::ListPartnershipsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_partnerships::ListPartnershipsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_partnerships::ListPartnershipsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_partnerships::ListPartnershipsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_partnerships::ListPartnershipsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_partnerships::ListPartnershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profiles::ListProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profiles::ListProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_profiles::ListProfilesError> for Error {
    fn from(err: crate::operation::list_profiles::ListProfilesError) -> Self {
        match err {
            crate::operation::list_profiles::ListProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_transformers::ListTransformersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_transformers::ListTransformersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_transformers::ListTransformersError> for Error {
    fn from(err: crate::operation::list_transformers::ListTransformersError) -> Self {
        match err {
            crate::operation::list_transformers::ListTransformersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_transformer_job::StartTransformerJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_transformer_job::StartTransformerJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_transformer_job::StartTransformerJobError> for Error {
    fn from(err: crate::operation::start_transformer_job::StartTransformerJobError) -> Self {
        match err {
            crate::operation::start_transformer_job::StartTransformerJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_transformer_job::StartTransformerJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_transformer_job::StartTransformerJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_transformer_job::StartTransformerJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_transformer_job::StartTransformerJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_transformer_job::StartTransformerJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_mapping::TestMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_mapping::TestMappingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::test_mapping::TestMappingError> for Error {
    fn from(err: crate::operation::test_mapping::TestMappingError) -> Self {
        match err {
            crate::operation::test_mapping::TestMappingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::test_mapping::TestMappingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::test_mapping::TestMappingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::test_mapping::TestMappingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::test_mapping::TestMappingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::test_mapping::TestMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_parsing::TestParsingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_parsing::TestParsingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::test_parsing::TestParsingError> for Error {
    fn from(err: crate::operation::test_parsing::TestParsingError) -> Self {
        match err {
            crate::operation::test_parsing::TestParsingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::test_parsing::TestParsingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::test_parsing::TestParsingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::test_parsing::TestParsingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::test_parsing::TestParsingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::test_parsing::TestParsingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_capability::UpdateCapabilityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_capability::UpdateCapabilityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_capability::UpdateCapabilityError> for Error {
    fn from(err: crate::operation::update_capability::UpdateCapabilityError) -> Self {
        match err {
            crate::operation::update_capability::UpdateCapabilityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_capability::UpdateCapabilityError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_capability::UpdateCapabilityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_capability::UpdateCapabilityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_capability::UpdateCapabilityError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_capability::UpdateCapabilityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_capability::UpdateCapabilityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_capability::UpdateCapabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_partnership::UpdatePartnershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_partnership::UpdatePartnershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_partnership::UpdatePartnershipError> for Error {
    fn from(err: crate::operation::update_partnership::UpdatePartnershipError) -> Self {
        match err {
            crate::operation::update_partnership::UpdatePartnershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_partnership::UpdatePartnershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_partnership::UpdatePartnershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_partnership::UpdatePartnershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_partnership::UpdatePartnershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_partnership::UpdatePartnershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_partnership::UpdatePartnershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_partnership::UpdatePartnershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_profile::UpdateProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_profile::UpdateProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_profile::UpdateProfileError> for Error {
    fn from(err: crate::operation::update_profile::UpdateProfileError) -> Self {
        match err {
            crate::operation::update_profile::UpdateProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_profile::UpdateProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_profile::UpdateProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_profile::UpdateProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_profile::UpdateProfileError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_profile::UpdateProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_profile::UpdateProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_profile::UpdateProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_transformer::UpdateTransformerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_transformer::UpdateTransformerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_transformer::UpdateTransformerError> for Error {
    fn from(err: crate::operation::update_transformer::UpdateTransformerError) -> Self {
        match err {
            crate::operation::update_transformer::UpdateTransformerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_transformer::UpdateTransformerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_transformer::UpdateTransformerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_transformer::UpdateTransformerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_transformer::UpdateTransformerError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_transformer::UpdateTransformerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_transformer::UpdateTransformerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_transformer::UpdateTransformerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
