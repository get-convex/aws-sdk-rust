// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_capabilities_output_output_next_token(
    input: &crate::operation::list_capabilities::ListCapabilitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_partnerships_output_output_next_token(
    input: &crate::operation::list_partnerships::ListPartnershipsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_profiles_output_output_next_token(
    input: &crate::operation::list_profiles::ListProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_transformers_output_output_next_token(
    input: &crate::operation::list_transformers::ListTransformersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_capabilities_output_output_capabilities(
    input: crate::operation::list_capabilities::ListCapabilitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CapabilitySummary>> {
    let input = input.capabilities;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_partnerships_output_output_partnerships(
    input: crate::operation::list_partnerships::ListPartnershipsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PartnershipSummary>> {
    let input = input.partnerships;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_profiles_output_output_profiles(
    input: crate::operation::list_profiles::ListProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProfileSummary>> {
    let input = input.profiles;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_transformers_output_output_transformers(
    input: crate::operation::list_transformers::ListTransformersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TransformerSummary>> {
    let input = input.transformers;
    ::std::option::Option::Some(input)
}
