// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_transformer_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_transformer::CreateTransformerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.file_format {
        object.key("fileFormat").string(var_2.as_str());
    }
    if let Some(var_3) = &input.mapping_template {
        object.key("mappingTemplate").string(var_3.as_str());
    }
    if let Some(var_4) = &input.edi_type {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ediType").start_object();
        crate::protocol_serde::shape_edi_type::ser_edi_type(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.sample_document {
        object.key("sampleDocument").string(var_6.as_str());
    }
    if let Some(var_7) = &input.client_token {
        object.key("clientToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
