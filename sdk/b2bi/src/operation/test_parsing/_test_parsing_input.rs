// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestParsingInput {
    /// <p>Specifies an <code>S3Location</code> object, which contains the Amazon S3 bucket and prefix for the location of the input file.</p>
    pub input_file: ::std::option::Option<crate::types::S3Location>,
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub file_format: ::std::option::Option<crate::types::FileFormat>,
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub edi_type: ::std::option::Option<crate::types::EdiType>,
}
impl TestParsingInput {
    /// <p>Specifies an <code>S3Location</code> object, which contains the Amazon S3 bucket and prefix for the location of the input file.</p>
    pub fn input_file(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.input_file.as_ref()
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn file_format(&self) -> ::std::option::Option<&crate::types::FileFormat> {
        self.file_format.as_ref()
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn edi_type(&self) -> ::std::option::Option<&crate::types::EdiType> {
        self.edi_type.as_ref()
    }
}
impl TestParsingInput {
    /// Creates a new builder-style object to manufacture [`TestParsingInput`](crate::operation::test_parsing::TestParsingInput).
    pub fn builder() -> crate::operation::test_parsing::builders::TestParsingInputBuilder {
        crate::operation::test_parsing::builders::TestParsingInputBuilder::default()
    }
}

/// A builder for [`TestParsingInput`](crate::operation::test_parsing::TestParsingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestParsingInputBuilder {
    pub(crate) input_file: ::std::option::Option<crate::types::S3Location>,
    pub(crate) file_format: ::std::option::Option<crate::types::FileFormat>,
    pub(crate) edi_type: ::std::option::Option<crate::types::EdiType>,
}
impl TestParsingInputBuilder {
    /// <p>Specifies an <code>S3Location</code> object, which contains the Amazon S3 bucket and prefix for the location of the input file.</p>
    /// This field is required.
    pub fn input_file(mut self, input: crate::types::S3Location) -> Self {
        self.input_file = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies an <code>S3Location</code> object, which contains the Amazon S3 bucket and prefix for the location of the input file.</p>
    pub fn set_input_file(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.input_file = input;
        self
    }
    /// <p>Specifies an <code>S3Location</code> object, which contains the Amazon S3 bucket and prefix for the location of the input file.</p>
    pub fn get_input_file(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.input_file
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    /// This field is required.
    pub fn file_format(mut self, input: crate::types::FileFormat) -> Self {
        self.file_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn set_file_format(mut self, input: ::std::option::Option<crate::types::FileFormat>) -> Self {
        self.file_format = input;
        self
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn get_file_format(&self) -> &::std::option::Option<crate::types::FileFormat> {
        &self.file_format
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    /// This field is required.
    pub fn edi_type(mut self, input: crate::types::EdiType) -> Self {
        self.edi_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn set_edi_type(mut self, input: ::std::option::Option<crate::types::EdiType>) -> Self {
        self.edi_type = input;
        self
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn get_edi_type(&self) -> &::std::option::Option<crate::types::EdiType> {
        &self.edi_type
    }
    /// Consumes the builder and constructs a [`TestParsingInput`](crate::operation::test_parsing::TestParsingInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::test_parsing::TestParsingInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::test_parsing::TestParsingInput {
            input_file: self.input_file,
            file_format: self.file_format,
            edi_type: self.edi_type,
        })
    }
}
