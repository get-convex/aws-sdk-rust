// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCapabilityInput {
    /// <p>Specifies a system-assigned unique identifier for the capability.</p>
    pub capability_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a new name for the capability, to replace the existing name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub configuration: ::std::option::Option<crate::types::CapabilityConfiguration>,
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    pub instructions_documents: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>,
}
impl UpdateCapabilityInput {
    /// <p>Specifies a system-assigned unique identifier for the capability.</p>
    pub fn capability_id(&self) -> ::std::option::Option<&str> {
        self.capability_id.as_deref()
    }
    /// <p>Specifies a new name for the capability, to replace the existing name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::CapabilityConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instructions_documents.is_none()`.
    pub fn instructions_documents(&self) -> &[crate::types::S3Location] {
        self.instructions_documents.as_deref().unwrap_or_default()
    }
}
impl UpdateCapabilityInput {
    /// Creates a new builder-style object to manufacture [`UpdateCapabilityInput`](crate::operation::update_capability::UpdateCapabilityInput).
    pub fn builder() -> crate::operation::update_capability::builders::UpdateCapabilityInputBuilder {
        crate::operation::update_capability::builders::UpdateCapabilityInputBuilder::default()
    }
}

/// A builder for [`UpdateCapabilityInput`](crate::operation::update_capability::UpdateCapabilityInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateCapabilityInputBuilder {
    pub(crate) capability_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::CapabilityConfiguration>,
    pub(crate) instructions_documents: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>,
}
impl UpdateCapabilityInputBuilder {
    /// <p>Specifies a system-assigned unique identifier for the capability.</p>
    /// This field is required.
    pub fn capability_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capability_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a system-assigned unique identifier for the capability.</p>
    pub fn set_capability_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capability_id = input;
        self
    }
    /// <p>Specifies a system-assigned unique identifier for the capability.</p>
    pub fn get_capability_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capability_id
    }
    /// <p>Specifies a new name for the capability, to replace the existing name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a new name for the capability, to replace the existing name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies a new name for the capability, to replace the existing name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub fn configuration(mut self, input: crate::types::CapabilityConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::CapabilityConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::CapabilityConfiguration> {
        &self.configuration
    }
    /// Appends an item to `instructions_documents`.
    ///
    /// To override the contents of this collection use [`set_instructions_documents`](Self::set_instructions_documents).
    ///
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    pub fn instructions_documents(mut self, input: crate::types::S3Location) -> Self {
        let mut v = self.instructions_documents.unwrap_or_default();
        v.push(input);
        self.instructions_documents = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    pub fn set_instructions_documents(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>) -> Self {
        self.instructions_documents = input;
        self
    }
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    pub fn get_instructions_documents(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::S3Location>> {
        &self.instructions_documents
    }
    /// Consumes the builder and constructs a [`UpdateCapabilityInput`](crate::operation::update_capability::UpdateCapabilityInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_capability::UpdateCapabilityInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_capability::UpdateCapabilityInput {
            capability_id: self.capability_id,
            name: self.name,
            configuration: self.configuration,
            instructions_documents: self.instructions_documents,
        })
    }
}
