// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTransformerInput {
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub transformer_id: ::std::option::Option<::std::string::String>,
    /// <p>Specify a new name for the transformer, if you want to update it.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub file_format: ::std::option::Option<crate::types::FileFormat>,
    /// <p>Specifies the name of the mapping template for the transformer. This template is used to convert the input document into the correct set of objects.</p>
    pub mapping_template: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the transformer's status. You can update the state of the transformer, from <code>active</code> to <code>inactive</code>, or <code>inactive</code> to <code>active</code>.</p>
    pub status: ::std::option::Option<crate::types::TransformerStatus>,
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub edi_type: ::std::option::Option<crate::types::EdiType>,
    /// <p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    pub sample_document: ::std::option::Option<::std::string::String>,
}
impl UpdateTransformerInput {
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn transformer_id(&self) -> ::std::option::Option<&str> {
        self.transformer_id.as_deref()
    }
    /// <p>Specify a new name for the transformer, if you want to update it.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn file_format(&self) -> ::std::option::Option<&crate::types::FileFormat> {
        self.file_format.as_ref()
    }
    /// <p>Specifies the name of the mapping template for the transformer. This template is used to convert the input document into the correct set of objects.</p>
    pub fn mapping_template(&self) -> ::std::option::Option<&str> {
        self.mapping_template.as_deref()
    }
    /// <p>Specifies the transformer's status. You can update the state of the transformer, from <code>active</code> to <code>inactive</code>, or <code>inactive</code> to <code>active</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TransformerStatus> {
        self.status.as_ref()
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn edi_type(&self) -> ::std::option::Option<&crate::types::EdiType> {
        self.edi_type.as_ref()
    }
    /// <p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    pub fn sample_document(&self) -> ::std::option::Option<&str> {
        self.sample_document.as_deref()
    }
}
impl UpdateTransformerInput {
    /// Creates a new builder-style object to manufacture [`UpdateTransformerInput`](crate::operation::update_transformer::UpdateTransformerInput).
    pub fn builder() -> crate::operation::update_transformer::builders::UpdateTransformerInputBuilder {
        crate::operation::update_transformer::builders::UpdateTransformerInputBuilder::default()
    }
}

/// A builder for [`UpdateTransformerInput`](crate::operation::update_transformer::UpdateTransformerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTransformerInputBuilder {
    pub(crate) transformer_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) file_format: ::std::option::Option<crate::types::FileFormat>,
    pub(crate) mapping_template: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TransformerStatus>,
    pub(crate) edi_type: ::std::option::Option<crate::types::EdiType>,
    pub(crate) sample_document: ::std::option::Option<::std::string::String>,
}
impl UpdateTransformerInputBuilder {
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    /// This field is required.
    pub fn transformer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transformer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn set_transformer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transformer_id = input;
        self
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn get_transformer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transformer_id
    }
    /// <p>Specify a new name for the transformer, if you want to update it.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify a new name for the transformer, if you want to update it.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specify a new name for the transformer, if you want to update it.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn file_format(mut self, input: crate::types::FileFormat) -> Self {
        self.file_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn set_file_format(mut self, input: ::std::option::Option<crate::types::FileFormat>) -> Self {
        self.file_format = input;
        self
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn get_file_format(&self) -> &::std::option::Option<crate::types::FileFormat> {
        &self.file_format
    }
    /// <p>Specifies the name of the mapping template for the transformer. This template is used to convert the input document into the correct set of objects.</p>
    pub fn mapping_template(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mapping_template = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the mapping template for the transformer. This template is used to convert the input document into the correct set of objects.</p>
    pub fn set_mapping_template(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mapping_template = input;
        self
    }
    /// <p>Specifies the name of the mapping template for the transformer. This template is used to convert the input document into the correct set of objects.</p>
    pub fn get_mapping_template(&self) -> &::std::option::Option<::std::string::String> {
        &self.mapping_template
    }
    /// <p>Specifies the transformer's status. You can update the state of the transformer, from <code>active</code> to <code>inactive</code>, or <code>inactive</code> to <code>active</code>.</p>
    pub fn status(mut self, input: crate::types::TransformerStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the transformer's status. You can update the state of the transformer, from <code>active</code> to <code>inactive</code>, or <code>inactive</code> to <code>active</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TransformerStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies the transformer's status. You can update the state of the transformer, from <code>active</code> to <code>inactive</code>, or <code>inactive</code> to <code>active</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TransformerStatus> {
        &self.status
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn edi_type(mut self, input: crate::types::EdiType) -> Self {
        self.edi_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn set_edi_type(mut self, input: ::std::option::Option<crate::types::EdiType>) -> Self {
        self.edi_type = input;
        self
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn get_edi_type(&self) -> &::std::option::Option<crate::types::EdiType> {
        &self.edi_type
    }
    /// <p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    pub fn sample_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sample_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    pub fn set_sample_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sample_document = input;
        self
    }
    /// <p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    pub fn get_sample_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.sample_document
    }
    /// Consumes the builder and constructs a [`UpdateTransformerInput`](crate::operation::update_transformer::UpdateTransformerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_transformer::UpdateTransformerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_transformer::UpdateTransformerInput {
            transformer_id: self.transformer_id,
            name: self.name,
            file_format: self.file_format,
            mapping_template: self.mapping_template,
            status: self.status,
            edi_type: self.edi_type,
            sample_document: self.sample_document,
        })
    }
}
