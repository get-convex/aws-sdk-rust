// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartTransformerJobInput {
    /// <p>Specifies the location of the input file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    pub input_file: ::std::option::Option<crate::types::S3Location>,
    /// <p>Specifies the location of the output file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    pub output_location: ::std::option::Option<crate::types::S3Location>,
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub transformer_id: ::std::option::Option<::std::string::String>,
    /// <p>Reserved for future use.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl StartTransformerJobInput {
    /// <p>Specifies the location of the input file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    pub fn input_file(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.input_file.as_ref()
    }
    /// <p>Specifies the location of the output file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    pub fn output_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.output_location.as_ref()
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn transformer_id(&self) -> ::std::option::Option<&str> {
        self.transformer_id.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl StartTransformerJobInput {
    /// Creates a new builder-style object to manufacture [`StartTransformerJobInput`](crate::operation::start_transformer_job::StartTransformerJobInput).
    pub fn builder() -> crate::operation::start_transformer_job::builders::StartTransformerJobInputBuilder {
        crate::operation::start_transformer_job::builders::StartTransformerJobInputBuilder::default()
    }
}

/// A builder for [`StartTransformerJobInput`](crate::operation::start_transformer_job::StartTransformerJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartTransformerJobInputBuilder {
    pub(crate) input_file: ::std::option::Option<crate::types::S3Location>,
    pub(crate) output_location: ::std::option::Option<crate::types::S3Location>,
    pub(crate) transformer_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl StartTransformerJobInputBuilder {
    /// <p>Specifies the location of the input file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    /// This field is required.
    pub fn input_file(mut self, input: crate::types::S3Location) -> Self {
        self.input_file = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the location of the input file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    pub fn set_input_file(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.input_file = input;
        self
    }
    /// <p>Specifies the location of the input file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    pub fn get_input_file(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.input_file
    }
    /// <p>Specifies the location of the output file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    /// This field is required.
    pub fn output_location(mut self, input: crate::types::S3Location) -> Self {
        self.output_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the location of the output file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    pub fn set_output_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.output_location = input;
        self
    }
    /// <p>Specifies the location of the output file for the transformation. The location consists of an Amazon S3 bucket and prefix.</p>
    pub fn get_output_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.output_location
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    /// This field is required.
    pub fn transformer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transformer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn set_transformer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transformer_id = input;
        self
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn get_transformer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transformer_id
    }
    /// <p>Reserved for future use.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`StartTransformerJobInput`](crate::operation::start_transformer_job::StartTransformerJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_transformer_job::StartTransformerJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_transformer_job::StartTransformerJobInput {
            input_file: self.input_file,
            output_location: self.output_location,
            transformer_id: self.transformer_id,
            client_token: self.client_token,
        })
    }
}
