// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCapabilityInput {
    /// <p>Specifies the name of the capability, used to identify it.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of the capability. Currently, only <code>edi</code> is supported.</p>
    pub r#type: ::std::option::Option<crate::types::CapabilityType>,
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub configuration: ::std::option::Option<crate::types::CapabilityConfiguration>,
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    pub instructions_documents: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>,
    /// <p>Reserved for future use.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to resources (capabilities, partnerships, and so on) for any purpose.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateCapabilityInput {
    /// <p>Specifies the name of the capability, used to identify it.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the type of the capability. Currently, only <code>edi</code> is supported.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::CapabilityType> {
        self.r#type.as_ref()
    }
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::CapabilityConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instructions_documents.is_none()`.
    pub fn instructions_documents(&self) -> &[crate::types::S3Location] {
        self.instructions_documents.as_deref().unwrap_or_default()
    }
    /// <p>Reserved for future use.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Specifies the key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to resources (capabilities, partnerships, and so on) for any purpose.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateCapabilityInput {
    /// Creates a new builder-style object to manufacture [`CreateCapabilityInput`](crate::operation::create_capability::CreateCapabilityInput).
    pub fn builder() -> crate::operation::create_capability::builders::CreateCapabilityInputBuilder {
        crate::operation::create_capability::builders::CreateCapabilityInputBuilder::default()
    }
}

/// A builder for [`CreateCapabilityInput`](crate::operation::create_capability::CreateCapabilityInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateCapabilityInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::CapabilityType>,
    pub(crate) configuration: ::std::option::Option<crate::types::CapabilityConfiguration>,
    pub(crate) instructions_documents: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateCapabilityInputBuilder {
    /// <p>Specifies the name of the capability, used to identify it.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the capability, used to identify it.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies the name of the capability, used to identify it.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies the type of the capability. Currently, only <code>edi</code> is supported.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::CapabilityType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of the capability. Currently, only <code>edi</code> is supported.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CapabilityType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies the type of the capability. Currently, only <code>edi</code> is supported.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CapabilityType> {
        &self.r#type
    }
    /// <p>Specifies a structure that contains the details for a capability.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::CapabilityConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::CapabilityConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Specifies a structure that contains the details for a capability.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::CapabilityConfiguration> {
        &self.configuration
    }
    /// Appends an item to `instructions_documents`.
    ///
    /// To override the contents of this collection use [`set_instructions_documents`](Self::set_instructions_documents).
    ///
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    pub fn instructions_documents(mut self, input: crate::types::S3Location) -> Self {
        let mut v = self.instructions_documents.unwrap_or_default();
        v.push(input);
        self.instructions_documents = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    pub fn set_instructions_documents(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>) -> Self {
        self.instructions_documents = input;
        self
    }
    /// <p>Specifies one or more locations in Amazon S3, each specifying an EDI document that can be used with this capability. Each item contains the name of the bucket and the key, to identify the document's location.</p>
    pub fn get_instructions_documents(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::S3Location>> {
        &self.instructions_documents
    }
    /// <p>Reserved for future use.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies the key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to resources (capabilities, partnerships, and so on) for any purpose.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to resources (capabilities, partnerships, and so on) for any purpose.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies the key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to resources (capabilities, partnerships, and so on) for any purpose.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateCapabilityInput`](crate::operation::create_capability::CreateCapabilityInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_capability::CreateCapabilityInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_capability::CreateCapabilityInput {
            name: self.name,
            r#type: self.r#type,
            configuration: self.configuration,
            instructions_documents: self.instructions_documents,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
