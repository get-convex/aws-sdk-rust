// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTransformerJobOutput {
    /// <p>Returns the current state of the transformer job, either <code>running</code>, <code>succeeded</code>, or <code>failed</code>.</p>
    pub status: crate::types::TransformerJobStatus,
    /// <p>Returns the location for the output files. If the caller specified a directory for the output, then this contains the full path to the output file, including the file name generated by the service.</p>
    pub output_files: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>,
    /// <p>Returns an optional error message, which gets populated when the job is not run successfully.</p>
    pub message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTransformerJobOutput {
    /// <p>Returns the current state of the transformer job, either <code>running</code>, <code>succeeded</code>, or <code>failed</code>.</p>
    pub fn status(&self) -> &crate::types::TransformerJobStatus {
        &self.status
    }
    /// <p>Returns the location for the output files. If the caller specified a directory for the output, then this contains the full path to the output file, including the file name generated by the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_files.is_none()`.
    pub fn output_files(&self) -> &[crate::types::S3Location] {
        self.output_files.as_deref().unwrap_or_default()
    }
    /// <p>Returns an optional error message, which gets populated when the job is not run successfully.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetTransformerJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTransformerJobOutput {
    /// Creates a new builder-style object to manufacture [`GetTransformerJobOutput`](crate::operation::get_transformer_job::GetTransformerJobOutput).
    pub fn builder() -> crate::operation::get_transformer_job::builders::GetTransformerJobOutputBuilder {
        crate::operation::get_transformer_job::builders::GetTransformerJobOutputBuilder::default()
    }
}

/// A builder for [`GetTransformerJobOutput`](crate::operation::get_transformer_job::GetTransformerJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTransformerJobOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::TransformerJobStatus>,
    pub(crate) output_files: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTransformerJobOutputBuilder {
    /// <p>Returns the current state of the transformer job, either <code>running</code>, <code>succeeded</code>, or <code>failed</code>.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TransformerJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the current state of the transformer job, either <code>running</code>, <code>succeeded</code>, or <code>failed</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TransformerJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Returns the current state of the transformer job, either <code>running</code>, <code>succeeded</code>, or <code>failed</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TransformerJobStatus> {
        &self.status
    }
    /// Appends an item to `output_files`.
    ///
    /// To override the contents of this collection use [`set_output_files`](Self::set_output_files).
    ///
    /// <p>Returns the location for the output files. If the caller specified a directory for the output, then this contains the full path to the output file, including the file name generated by the service.</p>
    pub fn output_files(mut self, input: crate::types::S3Location) -> Self {
        let mut v = self.output_files.unwrap_or_default();
        v.push(input);
        self.output_files = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns the location for the output files. If the caller specified a directory for the output, then this contains the full path to the output file, including the file name generated by the service.</p>
    pub fn set_output_files(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::S3Location>>) -> Self {
        self.output_files = input;
        self
    }
    /// <p>Returns the location for the output files. If the caller specified a directory for the output, then this contains the full path to the output file, including the file name generated by the service.</p>
    pub fn get_output_files(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::S3Location>> {
        &self.output_files
    }
    /// <p>Returns an optional error message, which gets populated when the job is not run successfully.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns an optional error message, which gets populated when the job is not run successfully.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Returns an optional error message, which gets populated when the job is not run successfully.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTransformerJobOutput`](crate::operation::get_transformer_job::GetTransformerJobOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::operation::get_transformer_job::builders::GetTransformerJobOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_transformer_job::GetTransformerJobOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_transformer_job::GetTransformerJobOutput {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetTransformerJobOutput",
                )
            })?,
            output_files: self.output_files,
            message: self.message,
            _request_id: self._request_id,
        })
    }
}
