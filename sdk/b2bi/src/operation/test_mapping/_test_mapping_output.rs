// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestMappingOutput {
    /// <p>Returns a string for the mapping that can be used to identify the mapping. Similar to a fingerprint</p>
    pub mapped_file_content: ::std::string::String,
    _request_id: Option<String>,
}
impl TestMappingOutput {
    /// <p>Returns a string for the mapping that can be used to identify the mapping. Similar to a fingerprint</p>
    pub fn mapped_file_content(&self) -> &str {
        use std::ops::Deref;
        self.mapped_file_content.deref()
    }
}
impl ::aws_types::request_id::RequestId for TestMappingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TestMappingOutput {
    /// Creates a new builder-style object to manufacture [`TestMappingOutput`](crate::operation::test_mapping::TestMappingOutput).
    pub fn builder() -> crate::operation::test_mapping::builders::TestMappingOutputBuilder {
        crate::operation::test_mapping::builders::TestMappingOutputBuilder::default()
    }
}

/// A builder for [`TestMappingOutput`](crate::operation::test_mapping::TestMappingOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestMappingOutputBuilder {
    pub(crate) mapped_file_content: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl TestMappingOutputBuilder {
    /// <p>Returns a string for the mapping that can be used to identify the mapping. Similar to a fingerprint</p>
    /// This field is required.
    pub fn mapped_file_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mapped_file_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns a string for the mapping that can be used to identify the mapping. Similar to a fingerprint</p>
    pub fn set_mapped_file_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mapped_file_content = input;
        self
    }
    /// <p>Returns a string for the mapping that can be used to identify the mapping. Similar to a fingerprint</p>
    pub fn get_mapped_file_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.mapped_file_content
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`TestMappingOutput`](crate::operation::test_mapping::TestMappingOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`mapped_file_content`](crate::operation::test_mapping::builders::TestMappingOutputBuilder::mapped_file_content)
    pub fn build(self) -> ::std::result::Result<crate::operation::test_mapping::TestMappingOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::test_mapping::TestMappingOutput {
            mapped_file_content: self.mapped_file_content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mapped_file_content",
                    "mapped_file_content was not specified but it is required when building TestMappingOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
