// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_capability;

pub(crate) mod shape_create_partnership;

pub(crate) mod shape_create_profile;

pub(crate) mod shape_create_transformer;

pub(crate) mod shape_delete_capability;

pub(crate) mod shape_delete_partnership;

pub(crate) mod shape_delete_profile;

pub(crate) mod shape_delete_transformer;

pub(crate) mod shape_get_capability;

pub(crate) mod shape_get_partnership;

pub(crate) mod shape_get_profile;

pub(crate) mod shape_get_transformer;

pub(crate) mod shape_get_transformer_job;

pub(crate) mod shape_list_capabilities;

pub(crate) mod shape_list_partnerships;

pub(crate) mod shape_list_profiles;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_transformers;

pub(crate) mod shape_start_transformer_job;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_test_mapping;

pub(crate) mod shape_test_parsing;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_capability;

pub(crate) mod shape_update_partnership;

pub(crate) mod shape_update_profile;

pub(crate) mod shape_update_transformer;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_capability_input;

pub(crate) mod shape_create_partnership_input;

pub(crate) mod shape_create_profile_input;

pub(crate) mod shape_create_transformer_input;

pub(crate) mod shape_delete_capability_input;

pub(crate) mod shape_delete_partnership_input;

pub(crate) mod shape_delete_profile_input;

pub(crate) mod shape_delete_transformer_input;

pub(crate) mod shape_get_capability_input;

pub(crate) mod shape_get_partnership_input;

pub(crate) mod shape_get_profile_input;

pub(crate) mod shape_get_transformer_input;

pub(crate) mod shape_get_transformer_job_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_capabilities_input;

pub(crate) mod shape_list_partnerships_input;

pub(crate) mod shape_list_profiles_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_list_transformers_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_start_transformer_job_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_test_mapping_input;

pub(crate) mod shape_test_parsing_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_capability_input;

pub(crate) mod shape_update_partnership_input;

pub(crate) mod shape_update_profile_input;

pub(crate) mod shape_update_transformer_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_capability_configuration;

pub(crate) mod shape_capability_list;

pub(crate) mod shape_edi_type;

pub(crate) mod shape_instructions_documents;

pub(crate) mod shape_partnership_capabilities;

pub(crate) mod shape_partnership_list;

pub(crate) mod shape_profile_list;

pub(crate) mod shape_s3_location;

pub(crate) mod shape_s3_location_list;

pub(crate) mod shape_tag;

pub(crate) mod shape_tag_list;

pub(crate) mod shape_transformer_list;

pub(crate) mod shape_capability_summary;

pub(crate) mod shape_edi_configuration;

pub(crate) mod shape_partnership_summary;

pub(crate) mod shape_profile_summary;

pub(crate) mod shape_transformer_summary;

pub(crate) mod shape_x12_details;
