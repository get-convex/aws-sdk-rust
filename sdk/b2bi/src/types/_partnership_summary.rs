// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the details for a partnership. A partnership represents the connection between you and your trading partner. It ties together a profile and one or more trading capabilities.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartnershipSummary {
    /// <p>Returns the unique, system-generated identifier for the profile connected to this partnership.</p>
    pub profile_id: ::std::string::String,
    /// <p>Returns the unique, system-generated identifier for a partnership.</p>
    pub partnership_id: ::std::string::String,
    /// <p>Returns the name of the partnership.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Returns one or more capabilities associated with this partnership.</p>
    pub capabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Returns the unique, system-generated identifier for a trading partner.</p>
    pub trading_partner_id: ::std::option::Option<::std::string::String>,
    /// <p>Returns a timestamp for creation date and time of the partnership.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>Returns a timestamp that identifies the most recent date and time that the partnership was modified.</p>
    pub modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PartnershipSummary {
    /// <p>Returns the unique, system-generated identifier for the profile connected to this partnership.</p>
    pub fn profile_id(&self) -> &str {
        use std::ops::Deref;
        self.profile_id.deref()
    }
    /// <p>Returns the unique, system-generated identifier for a partnership.</p>
    pub fn partnership_id(&self) -> &str {
        use std::ops::Deref;
        self.partnership_id.deref()
    }
    /// <p>Returns the name of the partnership.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Returns one or more capabilities associated with this partnership.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capabilities.is_none()`.
    pub fn capabilities(&self) -> &[::std::string::String] {
        self.capabilities.as_deref().unwrap_or_default()
    }
    /// <p>Returns the unique, system-generated identifier for a trading partner.</p>
    pub fn trading_partner_id(&self) -> ::std::option::Option<&str> {
        self.trading_partner_id.as_deref()
    }
    /// <p>Returns a timestamp for creation date and time of the partnership.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>Returns a timestamp that identifies the most recent date and time that the partnership was modified.</p>
    pub fn modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_at.as_ref()
    }
}
impl PartnershipSummary {
    /// Creates a new builder-style object to manufacture [`PartnershipSummary`](crate::types::PartnershipSummary).
    pub fn builder() -> crate::types::builders::PartnershipSummaryBuilder {
        crate::types::builders::PartnershipSummaryBuilder::default()
    }
}

/// A builder for [`PartnershipSummary`](crate::types::PartnershipSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PartnershipSummaryBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) partnership_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) capabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) trading_partner_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PartnershipSummaryBuilder {
    /// <p>Returns the unique, system-generated identifier for the profile connected to this partnership.</p>
    /// This field is required.
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the unique, system-generated identifier for the profile connected to this partnership.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>Returns the unique, system-generated identifier for the profile connected to this partnership.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>Returns the unique, system-generated identifier for a partnership.</p>
    /// This field is required.
    pub fn partnership_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partnership_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the unique, system-generated identifier for a partnership.</p>
    pub fn set_partnership_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partnership_id = input;
        self
    }
    /// <p>Returns the unique, system-generated identifier for a partnership.</p>
    pub fn get_partnership_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.partnership_id
    }
    /// <p>Returns the name of the partnership.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the name of the partnership.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Returns the name of the partnership.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>Returns one or more capabilities associated with this partnership.</p>
    pub fn capabilities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input.into());
        self.capabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns one or more capabilities associated with this partnership.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>Returns one or more capabilities associated with this partnership.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.capabilities
    }
    /// <p>Returns the unique, system-generated identifier for a trading partner.</p>
    pub fn trading_partner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trading_partner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the unique, system-generated identifier for a trading partner.</p>
    pub fn set_trading_partner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trading_partner_id = input;
        self
    }
    /// <p>Returns the unique, system-generated identifier for a trading partner.</p>
    pub fn get_trading_partner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trading_partner_id
    }
    /// <p>Returns a timestamp for creation date and time of the partnership.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns a timestamp for creation date and time of the partnership.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Returns a timestamp for creation date and time of the partnership.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>Returns a timestamp that identifies the most recent date and time that the partnership was modified.</p>
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns a timestamp that identifies the most recent date and time that the partnership was modified.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>Returns a timestamp that identifies the most recent date and time that the partnership was modified.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// Consumes the builder and constructs a [`PartnershipSummary`](crate::types::PartnershipSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`profile_id`](crate::types::builders::PartnershipSummaryBuilder::profile_id)
    /// - [`partnership_id`](crate::types::builders::PartnershipSummaryBuilder::partnership_id)
    /// - [`created_at`](crate::types::builders::PartnershipSummaryBuilder::created_at)
    pub fn build(self) -> ::std::result::Result<crate::types::PartnershipSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PartnershipSummary {
            profile_id: self.profile_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "profile_id",
                    "profile_id was not specified but it is required when building PartnershipSummary",
                )
            })?,
            partnership_id: self.partnership_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "partnership_id",
                    "partnership_id was not specified but it is required when building PartnershipSummary",
                )
            })?,
            name: self.name,
            capabilities: self.capabilities,
            trading_partner_id: self.trading_partner_id,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building PartnershipSummary",
                )
            })?,
            modified_at: self.modified_at,
        })
    }
}
