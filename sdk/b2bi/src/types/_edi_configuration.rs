// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the details for the EDI (electronic data interchange) transformation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EdiConfiguration {
    /// <p>Returns the type of the capability. Currently, only <code>edi</code> is supported.</p>
    pub r#type: ::std::option::Option<crate::types::EdiType>,
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the input file, which is contained in an <code>S3Location</code> object.</p>
    pub input_location: ::std::option::Option<crate::types::S3Location>,
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the output file, which is contained in an <code>S3Location</code> object.</p>
    pub output_location: ::std::option::Option<crate::types::S3Location>,
    /// <p>Returns the system-assigned unique identifier for the transformer.</p>
    pub transformer_id: ::std::string::String,
}
impl EdiConfiguration {
    /// <p>Returns the type of the capability. Currently, only <code>edi</code> is supported.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::EdiType> {
        self.r#type.as_ref()
    }
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the input file, which is contained in an <code>S3Location</code> object.</p>
    pub fn input_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.input_location.as_ref()
    }
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the output file, which is contained in an <code>S3Location</code> object.</p>
    pub fn output_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.output_location.as_ref()
    }
    /// <p>Returns the system-assigned unique identifier for the transformer.</p>
    pub fn transformer_id(&self) -> &str {
        use std::ops::Deref;
        self.transformer_id.deref()
    }
}
impl EdiConfiguration {
    /// Creates a new builder-style object to manufacture [`EdiConfiguration`](crate::types::EdiConfiguration).
    pub fn builder() -> crate::types::builders::EdiConfigurationBuilder {
        crate::types::builders::EdiConfigurationBuilder::default()
    }
}

/// A builder for [`EdiConfiguration`](crate::types::EdiConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EdiConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::EdiType>,
    pub(crate) input_location: ::std::option::Option<crate::types::S3Location>,
    pub(crate) output_location: ::std::option::Option<crate::types::S3Location>,
    pub(crate) transformer_id: ::std::option::Option<::std::string::String>,
}
impl EdiConfigurationBuilder {
    /// <p>Returns the type of the capability. Currently, only <code>edi</code> is supported.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::EdiType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the type of the capability. Currently, only <code>edi</code> is supported.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::EdiType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Returns the type of the capability. Currently, only <code>edi</code> is supported.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::EdiType> {
        &self.r#type
    }
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the input file, which is contained in an <code>S3Location</code> object.</p>
    /// This field is required.
    pub fn input_location(mut self, input: crate::types::S3Location) -> Self {
        self.input_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the input file, which is contained in an <code>S3Location</code> object.</p>
    pub fn set_input_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.input_location = input;
        self
    }
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the input file, which is contained in an <code>S3Location</code> object.</p>
    pub fn get_input_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.input_location
    }
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the output file, which is contained in an <code>S3Location</code> object.</p>
    /// This field is required.
    pub fn output_location(mut self, input: crate::types::S3Location) -> Self {
        self.output_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the output file, which is contained in an <code>S3Location</code> object.</p>
    pub fn set_output_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.output_location = input;
        self
    }
    /// <p>Contains the Amazon S3 bucket and prefix for the location of the output file, which is contained in an <code>S3Location</code> object.</p>
    pub fn get_output_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.output_location
    }
    /// <p>Returns the system-assigned unique identifier for the transformer.</p>
    /// This field is required.
    pub fn transformer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transformer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the system-assigned unique identifier for the transformer.</p>
    pub fn set_transformer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transformer_id = input;
        self
    }
    /// <p>Returns the system-assigned unique identifier for the transformer.</p>
    pub fn get_transformer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transformer_id
    }
    /// Consumes the builder and constructs a [`EdiConfiguration`](crate::types::EdiConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`transformer_id`](crate::types::builders::EdiConfigurationBuilder::transformer_id)
    pub fn build(self) -> ::std::result::Result<crate::types::EdiConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EdiConfiguration {
            r#type: self.r#type,
            input_location: self.input_location,
            output_location: self.output_location,
            transformer_id: self.transformer_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transformer_id",
                    "transformer_id was not specified but it is required when building EdiConfiguration",
                )
            })?,
        })
    }
}
