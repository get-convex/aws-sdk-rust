// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the X12 transaction set and version. The X12 structure is used when the system transforms an EDI (electronic data interchange) file.</p><note>
/// <p>If an EDI input file contains more than one transaction, each transaction must have the same transaction set and version, for example 214/4010. If not, the transformer cannot parse the file.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12Details {
    /// <p>Returns an enumerated type where each value identifies an X12 transaction set. Transaction sets are maintained by the X12 Accredited Standards Committee.</p>
    pub transaction_set: ::std::option::Option<crate::types::X12TransactionSet>,
    /// <p>Returns the version to use for the specified X12 transaction set. Supported versions are <code>4010</code>, <code>4030</code>, and <code>5010</code>.</p>
    pub version: ::std::option::Option<crate::types::X12Version>,
}
impl X12Details {
    /// <p>Returns an enumerated type where each value identifies an X12 transaction set. Transaction sets are maintained by the X12 Accredited Standards Committee.</p>
    pub fn transaction_set(&self) -> ::std::option::Option<&crate::types::X12TransactionSet> {
        self.transaction_set.as_ref()
    }
    /// <p>Returns the version to use for the specified X12 transaction set. Supported versions are <code>4010</code>, <code>4030</code>, and <code>5010</code>.</p>
    pub fn version(&self) -> ::std::option::Option<&crate::types::X12Version> {
        self.version.as_ref()
    }
}
impl X12Details {
    /// Creates a new builder-style object to manufacture [`X12Details`](crate::types::X12Details).
    pub fn builder() -> crate::types::builders::X12DetailsBuilder {
        crate::types::builders::X12DetailsBuilder::default()
    }
}

/// A builder for [`X12Details`](crate::types::X12Details).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct X12DetailsBuilder {
    pub(crate) transaction_set: ::std::option::Option<crate::types::X12TransactionSet>,
    pub(crate) version: ::std::option::Option<crate::types::X12Version>,
}
impl X12DetailsBuilder {
    /// <p>Returns an enumerated type where each value identifies an X12 transaction set. Transaction sets are maintained by the X12 Accredited Standards Committee.</p>
    pub fn transaction_set(mut self, input: crate::types::X12TransactionSet) -> Self {
        self.transaction_set = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns an enumerated type where each value identifies an X12 transaction set. Transaction sets are maintained by the X12 Accredited Standards Committee.</p>
    pub fn set_transaction_set(mut self, input: ::std::option::Option<crate::types::X12TransactionSet>) -> Self {
        self.transaction_set = input;
        self
    }
    /// <p>Returns an enumerated type where each value identifies an X12 transaction set. Transaction sets are maintained by the X12 Accredited Standards Committee.</p>
    pub fn get_transaction_set(&self) -> &::std::option::Option<crate::types::X12TransactionSet> {
        &self.transaction_set
    }
    /// <p>Returns the version to use for the specified X12 transaction set. Supported versions are <code>4010</code>, <code>4030</code>, and <code>5010</code>.</p>
    pub fn version(mut self, input: crate::types::X12Version) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the version to use for the specified X12 transaction set. Supported versions are <code>4010</code>, <code>4030</code>, and <code>5010</code>.</p>
    pub fn set_version(mut self, input: ::std::option::Option<crate::types::X12Version>) -> Self {
        self.version = input;
        self
    }
    /// <p>Returns the version to use for the specified X12 transaction set. Supported versions are <code>4010</code>, <code>4030</code>, and <code>5010</code>.</p>
    pub fn get_version(&self) -> &::std::option::Option<crate::types::X12Version> {
        &self.version
    }
    /// Consumes the builder and constructs a [`X12Details`](crate::types::X12Details).
    pub fn build(self) -> crate::types::X12Details {
        crate::types::X12Details {
            transaction_set: self.transaction_set,
            version: self.version,
        }
    }
}
