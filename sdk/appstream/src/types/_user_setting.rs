// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action and whether the action is enabled or disabled for users during their streaming sessions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserSetting {
    /// <p>The action that is enabled or disabled.</p>
    pub action: ::std::option::Option<crate::types::Action>,
    /// <p>Indicates whether the action is enabled or disabled.</p>
    pub permission: ::std::option::Option<crate::types::Permission>,
    /// <p>Specifies the number of characters that can be copied by end users from the local device to the remote session, and to the local device from the remote session.</p>
    /// <p>This can be specified only for the <code>CLIPBOARD_COPY_FROM_LOCAL_DEVICE</code> and <code>CLIPBOARD_COPY_TO_LOCAL_DEVICE</code> actions.</p>
    /// <p>This defaults to 20,971,520 (20 MB) when unspecified and the permission is <code>ENABLED</code>. This can't be specified when the permission is <code>DISABLED</code>.</p>
    /// <p>This can only be specified for AlwaysOn and OnDemand fleets. The attribute is not supported on Elastic fleets.</p>
    /// <p>The value can be between 1 and 20,971,520 (20 MB).</p>
    pub maximum_length: ::std::option::Option<i32>,
}
impl UserSetting {
    /// <p>The action that is enabled or disabled.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>Indicates whether the action is enabled or disabled.</p>
    pub fn permission(&self) -> ::std::option::Option<&crate::types::Permission> {
        self.permission.as_ref()
    }
    /// <p>Specifies the number of characters that can be copied by end users from the local device to the remote session, and to the local device from the remote session.</p>
    /// <p>This can be specified only for the <code>CLIPBOARD_COPY_FROM_LOCAL_DEVICE</code> and <code>CLIPBOARD_COPY_TO_LOCAL_DEVICE</code> actions.</p>
    /// <p>This defaults to 20,971,520 (20 MB) when unspecified and the permission is <code>ENABLED</code>. This can't be specified when the permission is <code>DISABLED</code>.</p>
    /// <p>This can only be specified for AlwaysOn and OnDemand fleets. The attribute is not supported on Elastic fleets.</p>
    /// <p>The value can be between 1 and 20,971,520 (20 MB).</p>
    pub fn maximum_length(&self) -> ::std::option::Option<i32> {
        self.maximum_length
    }
}
impl UserSetting {
    /// Creates a new builder-style object to manufacture [`UserSetting`](crate::types::UserSetting).
    pub fn builder() -> crate::types::builders::UserSettingBuilder {
        crate::types::builders::UserSettingBuilder::default()
    }
}

/// A builder for [`UserSetting`](crate::types::UserSetting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserSettingBuilder {
    pub(crate) action: ::std::option::Option<crate::types::Action>,
    pub(crate) permission: ::std::option::Option<crate::types::Permission>,
    pub(crate) maximum_length: ::std::option::Option<i32>,
}
impl UserSettingBuilder {
    /// <p>The action that is enabled or disabled.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that is enabled or disabled.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action that is enabled or disabled.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.action
    }
    /// <p>Indicates whether the action is enabled or disabled.</p>
    /// This field is required.
    pub fn permission(mut self, input: crate::types::Permission) -> Self {
        self.permission = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the action is enabled or disabled.</p>
    pub fn set_permission(mut self, input: ::std::option::Option<crate::types::Permission>) -> Self {
        self.permission = input;
        self
    }
    /// <p>Indicates whether the action is enabled or disabled.</p>
    pub fn get_permission(&self) -> &::std::option::Option<crate::types::Permission> {
        &self.permission
    }
    /// <p>Specifies the number of characters that can be copied by end users from the local device to the remote session, and to the local device from the remote session.</p>
    /// <p>This can be specified only for the <code>CLIPBOARD_COPY_FROM_LOCAL_DEVICE</code> and <code>CLIPBOARD_COPY_TO_LOCAL_DEVICE</code> actions.</p>
    /// <p>This defaults to 20,971,520 (20 MB) when unspecified and the permission is <code>ENABLED</code>. This can't be specified when the permission is <code>DISABLED</code>.</p>
    /// <p>This can only be specified for AlwaysOn and OnDemand fleets. The attribute is not supported on Elastic fleets.</p>
    /// <p>The value can be between 1 and 20,971,520 (20 MB).</p>
    pub fn maximum_length(mut self, input: i32) -> Self {
        self.maximum_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the number of characters that can be copied by end users from the local device to the remote session, and to the local device from the remote session.</p>
    /// <p>This can be specified only for the <code>CLIPBOARD_COPY_FROM_LOCAL_DEVICE</code> and <code>CLIPBOARD_COPY_TO_LOCAL_DEVICE</code> actions.</p>
    /// <p>This defaults to 20,971,520 (20 MB) when unspecified and the permission is <code>ENABLED</code>. This can't be specified when the permission is <code>DISABLED</code>.</p>
    /// <p>This can only be specified for AlwaysOn and OnDemand fleets. The attribute is not supported on Elastic fleets.</p>
    /// <p>The value can be between 1 and 20,971,520 (20 MB).</p>
    pub fn set_maximum_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_length = input;
        self
    }
    /// <p>Specifies the number of characters that can be copied by end users from the local device to the remote session, and to the local device from the remote session.</p>
    /// <p>This can be specified only for the <code>CLIPBOARD_COPY_FROM_LOCAL_DEVICE</code> and <code>CLIPBOARD_COPY_TO_LOCAL_DEVICE</code> actions.</p>
    /// <p>This defaults to 20,971,520 (20 MB) when unspecified and the permission is <code>ENABLED</code>. This can't be specified when the permission is <code>DISABLED</code>.</p>
    /// <p>This can only be specified for AlwaysOn and OnDemand fleets. The attribute is not supported on Elastic fleets.</p>
    /// <p>The value can be between 1 and 20,971,520 (20 MB).</p>
    pub fn get_maximum_length(&self) -> &::std::option::Option<i32> {
        &self.maximum_length
    }
    /// Consumes the builder and constructs a [`UserSetting`](crate::types::UserSetting).
    pub fn build(self) -> crate::types::UserSetting {
        crate::types::UserSetting {
            action: self.action,
            permission: self.permission,
            maximum_length: self.maximum_length,
        }
    }
}
