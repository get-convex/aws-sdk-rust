// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a specific CodeDeploy deployment or CloudFormation stack creation or update that occurred around the time of a reported incident. These activities can be investigated as a potential cause of the incident.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Finding {
    /// <p>The ID assigned to the finding.</p>
    pub id: ::std::string::String,
    /// <p>The timestamp for when a finding was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp for when the finding was most recently updated with additional information.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>Details about the finding.</p>
    pub details: ::std::option::Option<crate::types::FindingDetails>,
}
impl Finding {
    /// <p>The ID assigned to the finding.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The timestamp for when a finding was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The timestamp for when the finding was most recently updated with additional information.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>Details about the finding.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::FindingDetails> {
        self.details.as_ref()
    }
}
impl Finding {
    /// Creates a new builder-style object to manufacture [`Finding`](crate::types::Finding).
    pub fn builder() -> crate::types::builders::FindingBuilder {
        crate::types::builders::FindingBuilder::default()
    }
}

/// A builder for [`Finding`](crate::types::Finding).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FindingBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) details: ::std::option::Option<crate::types::FindingDetails>,
}
impl FindingBuilder {
    /// <p>The ID assigned to the finding.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID assigned to the finding.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID assigned to the finding.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The timestamp for when a finding was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when a finding was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The timestamp for when a finding was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The timestamp for when the finding was most recently updated with additional information.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the finding was most recently updated with additional information.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp for when the finding was most recently updated with additional information.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>Details about the finding.</p>
    pub fn details(mut self, input: crate::types::FindingDetails) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the finding.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::FindingDetails>) -> Self {
        self.details = input;
        self
    }
    /// <p>Details about the finding.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::FindingDetails> {
        &self.details
    }
    /// Consumes the builder and constructs a [`Finding`](crate::types::Finding).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::FindingBuilder::id)
    /// - [`creation_time`](crate::types::builders::FindingBuilder::creation_time)
    /// - [`last_modified_time`](crate::types::builders::FindingBuilder::last_modified_time)
    pub fn build(self) -> ::std::result::Result<crate::types::Finding, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Finding {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field("id", "id was not specified but it is required when building Finding")
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building Finding",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building Finding",
                )
            })?,
            details: self.details,
        })
    }
}
