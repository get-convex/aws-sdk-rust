// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the timeout configurations for Service Connect.</p><note>
/// <p>If <code>idleTimeout</code> is set to a time that is less than <code>perRequestTimeout</code>, the connection will close when the <code>idleTimeout</code> is reached and not the <code>perRequestTimeout</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeoutConfiguration {
    /// <p>The amount of time in seconds a connection will stay active while idle. A value of <code>0</code> can be set to disable <code>idleTimeout</code>.</p>
    /// <p>The <code>idleTimeout</code> default for <code>HTTP</code>/<code>HTTP2</code>/<code>GRPC</code> is 5 minutes.</p>
    /// <p>The <code>idleTimeout</code> default for <code>TCP</code> is 1 hour.</p>
    pub idle_timeout_seconds: ::std::option::Option<i32>,
    /// <p>The amount of time waiting for the upstream to respond with a complete response per request. A value of <code>0</code> can be set to disable <code>perRequestTimeout</code>. <code>perRequestTimeout</code> can only be set if Service Connect <code>appProtocol</code> isn't <code>TCP</code>. Only <code>idleTimeout</code> is allowed for <code>TCP</code> <code>appProtocol</code>.</p>
    pub per_request_timeout_seconds: ::std::option::Option<i32>,
}
impl TimeoutConfiguration {
    /// <p>The amount of time in seconds a connection will stay active while idle. A value of <code>0</code> can be set to disable <code>idleTimeout</code>.</p>
    /// <p>The <code>idleTimeout</code> default for <code>HTTP</code>/<code>HTTP2</code>/<code>GRPC</code> is 5 minutes.</p>
    /// <p>The <code>idleTimeout</code> default for <code>TCP</code> is 1 hour.</p>
    pub fn idle_timeout_seconds(&self) -> ::std::option::Option<i32> {
        self.idle_timeout_seconds
    }
    /// <p>The amount of time waiting for the upstream to respond with a complete response per request. A value of <code>0</code> can be set to disable <code>perRequestTimeout</code>. <code>perRequestTimeout</code> can only be set if Service Connect <code>appProtocol</code> isn't <code>TCP</code>. Only <code>idleTimeout</code> is allowed for <code>TCP</code> <code>appProtocol</code>.</p>
    pub fn per_request_timeout_seconds(&self) -> ::std::option::Option<i32> {
        self.per_request_timeout_seconds
    }
}
impl TimeoutConfiguration {
    /// Creates a new builder-style object to manufacture [`TimeoutConfiguration`](crate::types::TimeoutConfiguration).
    pub fn builder() -> crate::types::builders::TimeoutConfigurationBuilder {
        crate::types::builders::TimeoutConfigurationBuilder::default()
    }
}

/// A builder for [`TimeoutConfiguration`](crate::types::TimeoutConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimeoutConfigurationBuilder {
    pub(crate) idle_timeout_seconds: ::std::option::Option<i32>,
    pub(crate) per_request_timeout_seconds: ::std::option::Option<i32>,
}
impl TimeoutConfigurationBuilder {
    /// <p>The amount of time in seconds a connection will stay active while idle. A value of <code>0</code> can be set to disable <code>idleTimeout</code>.</p>
    /// <p>The <code>idleTimeout</code> default for <code>HTTP</code>/<code>HTTP2</code>/<code>GRPC</code> is 5 minutes.</p>
    /// <p>The <code>idleTimeout</code> default for <code>TCP</code> is 1 hour.</p>
    pub fn idle_timeout_seconds(mut self, input: i32) -> Self {
        self.idle_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time in seconds a connection will stay active while idle. A value of <code>0</code> can be set to disable <code>idleTimeout</code>.</p>
    /// <p>The <code>idleTimeout</code> default for <code>HTTP</code>/<code>HTTP2</code>/<code>GRPC</code> is 5 minutes.</p>
    /// <p>The <code>idleTimeout</code> default for <code>TCP</code> is 1 hour.</p>
    pub fn set_idle_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_timeout_seconds = input;
        self
    }
    /// <p>The amount of time in seconds a connection will stay active while idle. A value of <code>0</code> can be set to disable <code>idleTimeout</code>.</p>
    /// <p>The <code>idleTimeout</code> default for <code>HTTP</code>/<code>HTTP2</code>/<code>GRPC</code> is 5 minutes.</p>
    /// <p>The <code>idleTimeout</code> default for <code>TCP</code> is 1 hour.</p>
    pub fn get_idle_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.idle_timeout_seconds
    }
    /// <p>The amount of time waiting for the upstream to respond with a complete response per request. A value of <code>0</code> can be set to disable <code>perRequestTimeout</code>. <code>perRequestTimeout</code> can only be set if Service Connect <code>appProtocol</code> isn't <code>TCP</code>. Only <code>idleTimeout</code> is allowed for <code>TCP</code> <code>appProtocol</code>.</p>
    pub fn per_request_timeout_seconds(mut self, input: i32) -> Self {
        self.per_request_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time waiting for the upstream to respond with a complete response per request. A value of <code>0</code> can be set to disable <code>perRequestTimeout</code>. <code>perRequestTimeout</code> can only be set if Service Connect <code>appProtocol</code> isn't <code>TCP</code>. Only <code>idleTimeout</code> is allowed for <code>TCP</code> <code>appProtocol</code>.</p>
    pub fn set_per_request_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.per_request_timeout_seconds = input;
        self
    }
    /// <p>The amount of time waiting for the upstream to respond with a complete response per request. A value of <code>0</code> can be set to disable <code>perRequestTimeout</code>. <code>perRequestTimeout</code> can only be set if Service Connect <code>appProtocol</code> isn't <code>TCP</code>. Only <code>idleTimeout</code> is allowed for <code>TCP</code> <code>appProtocol</code>.</p>
    pub fn get_per_request_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.per_request_timeout_seconds
    }
    /// Consumes the builder and constructs a [`TimeoutConfiguration`](crate::types::TimeoutConfiguration).
    pub fn build(self) -> crate::types::TimeoutConfiguration {
        crate::types::TimeoutConfiguration {
            idle_timeout_seconds: self.idle_timeout_seconds,
            per_request_timeout_seconds: self.per_request_timeout_seconds,
        }
    }
}
