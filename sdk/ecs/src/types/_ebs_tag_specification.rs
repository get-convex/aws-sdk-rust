// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The tag specifications of an Amazon EBS volume.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EbsTagSpecification {
    /// <p>The type of volume resource.</p>
    pub resource_type: crate::types::EbsResourceType,
    /// <p>The tags applied to this Amazon EBS volume. <code>AmazonECSCreated</code> and <code>AmazonECSManaged</code> are reserved tags that can't be used.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Determines whether to propagate the tags from the task definition to  the Amazon EBS volume. Tags can only propagate to a <code>SERVICE</code> specified in  <code>ServiceVolumeConfiguration</code>. If no value is specified, the tags aren't  propagated.</p>
    pub propagate_tags: ::std::option::Option<crate::types::PropagateTags>,
}
impl EbsTagSpecification {
    /// <p>The type of volume resource.</p>
    pub fn resource_type(&self) -> &crate::types::EbsResourceType {
        &self.resource_type
    }
    /// <p>The tags applied to this Amazon EBS volume. <code>AmazonECSCreated</code> and <code>AmazonECSManaged</code> are reserved tags that can't be used.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Determines whether to propagate the tags from the task definition to  the Amazon EBS volume. Tags can only propagate to a <code>SERVICE</code> specified in  <code>ServiceVolumeConfiguration</code>. If no value is specified, the tags aren't  propagated.</p>
    pub fn propagate_tags(&self) -> ::std::option::Option<&crate::types::PropagateTags> {
        self.propagate_tags.as_ref()
    }
}
impl EbsTagSpecification {
    /// Creates a new builder-style object to manufacture [`EbsTagSpecification`](crate::types::EbsTagSpecification).
    pub fn builder() -> crate::types::builders::EbsTagSpecificationBuilder {
        crate::types::builders::EbsTagSpecificationBuilder::default()
    }
}

/// A builder for [`EbsTagSpecification`](crate::types::EbsTagSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EbsTagSpecificationBuilder {
    pub(crate) resource_type: ::std::option::Option<crate::types::EbsResourceType>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) propagate_tags: ::std::option::Option<crate::types::PropagateTags>,
}
impl EbsTagSpecificationBuilder {
    /// <p>The type of volume resource.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::EbsResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of volume resource.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::EbsResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of volume resource.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::EbsResourceType> {
        &self.resource_type
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags applied to this Amazon EBS volume. <code>AmazonECSCreated</code> and <code>AmazonECSManaged</code> are reserved tags that can't be used.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags applied to this Amazon EBS volume. <code>AmazonECSCreated</code> and <code>AmazonECSManaged</code> are reserved tags that can't be used.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags applied to this Amazon EBS volume. <code>AmazonECSCreated</code> and <code>AmazonECSManaged</code> are reserved tags that can't be used.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Determines whether to propagate the tags from the task definition to  the Amazon EBS volume. Tags can only propagate to a <code>SERVICE</code> specified in  <code>ServiceVolumeConfiguration</code>. If no value is specified, the tags aren't  propagated.</p>
    pub fn propagate_tags(mut self, input: crate::types::PropagateTags) -> Self {
        self.propagate_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether to propagate the tags from the task definition to  the Amazon EBS volume. Tags can only propagate to a <code>SERVICE</code> specified in  <code>ServiceVolumeConfiguration</code>. If no value is specified, the tags aren't  propagated.</p>
    pub fn set_propagate_tags(mut self, input: ::std::option::Option<crate::types::PropagateTags>) -> Self {
        self.propagate_tags = input;
        self
    }
    /// <p>Determines whether to propagate the tags from the task definition to  the Amazon EBS volume. Tags can only propagate to a <code>SERVICE</code> specified in  <code>ServiceVolumeConfiguration</code>. If no value is specified, the tags aren't  propagated.</p>
    pub fn get_propagate_tags(&self) -> &::std::option::Option<crate::types::PropagateTags> {
        &self.propagate_tags
    }
    /// Consumes the builder and constructs a [`EbsTagSpecification`](crate::types::EbsTagSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource_type`](crate::types::builders::EbsTagSpecificationBuilder::resource_type)
    pub fn build(self) -> ::std::result::Result<crate::types::EbsTagSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EbsTagSpecification {
            resource_type: self.resource_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_type",
                    "resource_type was not specified but it is required when building EbsTagSpecification",
                )
            })?,
            tags: self.tags,
            propagate_tags: self.propagate_tags,
        })
    }
}
