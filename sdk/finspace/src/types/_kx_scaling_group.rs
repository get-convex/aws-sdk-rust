// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure for storing metadata of scaling group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KxScalingGroup {
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub scaling_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    pub host_type: ::std::option::Option<::std::string::String>,
    /// <p>The list of clusters currently active in a given scaling group.</p>
    pub clusters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The identifier of the availability zones.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of scaling groups.</p>
    pub status: ::std::option::Option<crate::types::KxScalingGroupStatus>,
    /// <p>The error message when a failed state occurs.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The last time that the scaling group was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp at which the scaling group was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KxScalingGroup {
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub fn scaling_group_name(&self) -> ::std::option::Option<&str> {
        self.scaling_group_name.as_deref()
    }
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    pub fn host_type(&self) -> ::std::option::Option<&str> {
        self.host_type.as_deref()
    }
    /// <p>The list of clusters currently active in a given scaling group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.clusters.is_none()`.
    pub fn clusters(&self) -> &[::std::string::String] {
        self.clusters.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The status of scaling groups.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::KxScalingGroupStatus> {
        self.status.as_ref()
    }
    /// <p>The error message when a failed state occurs.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The last time that the scaling group was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_timestamp.as_ref()
    }
    /// <p>The timestamp at which the scaling group was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
}
impl KxScalingGroup {
    /// Creates a new builder-style object to manufacture [`KxScalingGroup`](crate::types::KxScalingGroup).
    pub fn builder() -> crate::types::builders::KxScalingGroupBuilder {
        crate::types::builders::KxScalingGroupBuilder::default()
    }
}

/// A builder for [`KxScalingGroup`](crate::types::KxScalingGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KxScalingGroupBuilder {
    pub(crate) scaling_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) host_type: ::std::option::Option<::std::string::String>,
    pub(crate) clusters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::KxScalingGroupStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KxScalingGroupBuilder {
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub fn scaling_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scaling_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub fn set_scaling_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scaling_group_name = input;
        self
    }
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub fn get_scaling_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scaling_group_name
    }
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    pub fn host_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    pub fn set_host_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_type = input;
        self
    }
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    pub fn get_host_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_type
    }
    /// Appends an item to `clusters`.
    ///
    /// To override the contents of this collection use [`set_clusters`](Self::set_clusters).
    ///
    /// <p>The list of clusters currently active in a given scaling group.</p>
    pub fn clusters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.clusters.unwrap_or_default();
        v.push(input.into());
        self.clusters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of clusters currently active in a given scaling group.</p>
    pub fn set_clusters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.clusters = input;
        self
    }
    /// <p>The list of clusters currently active in a given scaling group.</p>
    pub fn get_clusters(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.clusters
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// <p>The status of scaling groups.</p>
    pub fn status(mut self, input: crate::types::KxScalingGroupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of scaling groups.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::KxScalingGroupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of scaling groups.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::KxScalingGroupStatus> {
        &self.status
    }
    /// <p>The error message when a failed state occurs.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message when a failed state occurs.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The error message when a failed state occurs.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The last time that the scaling group was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the scaling group was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_last_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_timestamp = input;
        self
    }
    /// <p>The last time that the scaling group was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_last_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_timestamp
    }
    /// <p>The timestamp at which the scaling group was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the scaling group was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp at which the scaling group was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// Consumes the builder and constructs a [`KxScalingGroup`](crate::types::KxScalingGroup).
    pub fn build(self) -> crate::types::KxScalingGroup {
        crate::types::KxScalingGroup {
            scaling_group_name: self.scaling_group_name,
            host_type: self.host_type,
            clusters: self.clusters,
            availability_zone_id: self.availability_zone_id,
            status: self.status,
            status_reason: self.status_reason,
            last_modified_timestamp: self.last_modified_timestamp,
            created_timestamp: self.created_timestamp,
        }
    }
}
