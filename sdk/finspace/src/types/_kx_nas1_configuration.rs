// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure containing the size and type of the network attached storage (NAS_1) file system volume.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KxNas1Configuration {
    /// <p>The type of the network attached storage.</p>
    pub r#type: ::std::option::Option<crate::types::KxNas1Type>,
    /// <p>The size of the network attached storage.</p>
    pub size: ::std::option::Option<i32>,
}
impl KxNas1Configuration {
    /// <p>The type of the network attached storage.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::KxNas1Type> {
        self.r#type.as_ref()
    }
    /// <p>The size of the network attached storage.</p>
    pub fn size(&self) -> ::std::option::Option<i32> {
        self.size
    }
}
impl KxNas1Configuration {
    /// Creates a new builder-style object to manufacture [`KxNas1Configuration`](crate::types::KxNas1Configuration).
    pub fn builder() -> crate::types::builders::KxNas1ConfigurationBuilder {
        crate::types::builders::KxNas1ConfigurationBuilder::default()
    }
}

/// A builder for [`KxNas1Configuration`](crate::types::KxNas1Configuration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KxNas1ConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::KxNas1Type>,
    pub(crate) size: ::std::option::Option<i32>,
}
impl KxNas1ConfigurationBuilder {
    /// <p>The type of the network attached storage.</p>
    pub fn r#type(mut self, input: crate::types::KxNas1Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the network attached storage.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::KxNas1Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the network attached storage.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::KxNas1Type> {
        &self.r#type
    }
    /// <p>The size of the network attached storage.</p>
    pub fn size(mut self, input: i32) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the network attached storage.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of the network attached storage.</p>
    pub fn get_size(&self) -> &::std::option::Option<i32> {
        &self.size
    }
    /// Consumes the builder and constructs a [`KxNas1Configuration`](crate::types::KxNas1Configuration).
    pub fn build(self) -> crate::types::KxNas1Configuration {
        crate::types::KxNas1Configuration {
            r#type: self.r#type,
            size: self.size,
        }
    }
}
