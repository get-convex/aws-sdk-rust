// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure that contains the metadata of the volume.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KxVolume {
    /// <p>A unique identifier for the volume.</p>
    pub volume_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub volume_type: ::std::option::Option<crate::types::KxVolumeType>,
    /// <p>The status of volume.</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The volume creation is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The volume creation has failed.</p></li>
    /// <li>
    /// <p>ACTIVE – The volume is active.</p></li>
    /// <li>
    /// <p>UPDATING – The volume is in the process of being updated.</p></li>
    /// <li>
    /// <p>UPDATE_FAILED – The update action failed.</p></li>
    /// <li>
    /// <p>UPDATED – The volume is successfully updated.</p></li>
    /// <li>
    /// <p>DELETING – The volume is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The system failed to delete the volume.</p></li>
    /// <li>
    /// <p>DELETED – The volume is successfully deleted.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::KxVolumeStatus>,
    /// <p>A description of the volume.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The error message when a failed state occurs.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The number of availability zones assigned to the volume. Currently, only <code>SINGLE</code> is supported.</p>
    pub az_mode: ::std::option::Option<crate::types::KxAzMode>,
    /// <p>The identifier of the availability zones.</p>
    pub availability_zone_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time that the volume was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KxVolume {
    /// <p>A unique identifier for the volume.</p>
    pub fn volume_name(&self) -> ::std::option::Option<&str> {
        self.volume_name.as_deref()
    }
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub fn volume_type(&self) -> ::std::option::Option<&crate::types::KxVolumeType> {
        self.volume_type.as_ref()
    }
    /// <p>The status of volume.</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The volume creation is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The volume creation has failed.</p></li>
    /// <li>
    /// <p>ACTIVE – The volume is active.</p></li>
    /// <li>
    /// <p>UPDATING – The volume is in the process of being updated.</p></li>
    /// <li>
    /// <p>UPDATE_FAILED – The update action failed.</p></li>
    /// <li>
    /// <p>UPDATED – The volume is successfully updated.</p></li>
    /// <li>
    /// <p>DELETING – The volume is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The system failed to delete the volume.</p></li>
    /// <li>
    /// <p>DELETED – The volume is successfully deleted.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::KxVolumeStatus> {
        self.status.as_ref()
    }
    /// <p>A description of the volume.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The error message when a failed state occurs.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The number of availability zones assigned to the volume. Currently, only <code>SINGLE</code> is supported.</p>
    pub fn az_mode(&self) -> ::std::option::Option<&crate::types::KxAzMode> {
        self.az_mode.as_ref()
    }
    /// <p>The identifier of the availability zones.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zone_ids.is_none()`.
    pub fn availability_zone_ids(&self) -> &[::std::string::String] {
        self.availability_zone_ids.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The last time that the volume was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_timestamp.as_ref()
    }
}
impl KxVolume {
    /// Creates a new builder-style object to manufacture [`KxVolume`](crate::types::KxVolume).
    pub fn builder() -> crate::types::builders::KxVolumeBuilder {
        crate::types::builders::KxVolumeBuilder::default()
    }
}

/// A builder for [`KxVolume`](crate::types::KxVolume).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KxVolumeBuilder {
    pub(crate) volume_name: ::std::option::Option<::std::string::String>,
    pub(crate) volume_type: ::std::option::Option<crate::types::KxVolumeType>,
    pub(crate) status: ::std::option::Option<crate::types::KxVolumeStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) az_mode: ::std::option::Option<crate::types::KxAzMode>,
    pub(crate) availability_zone_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KxVolumeBuilder {
    /// <p>A unique identifier for the volume.</p>
    pub fn volume_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the volume.</p>
    pub fn set_volume_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_name = input;
        self
    }
    /// <p>A unique identifier for the volume.</p>
    pub fn get_volume_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_name
    }
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub fn volume_type(mut self, input: crate::types::KxVolumeType) -> Self {
        self.volume_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub fn set_volume_type(mut self, input: ::std::option::Option<crate::types::KxVolumeType>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub fn get_volume_type(&self) -> &::std::option::Option<crate::types::KxVolumeType> {
        &self.volume_type
    }
    /// <p>The status of volume.</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The volume creation is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The volume creation has failed.</p></li>
    /// <li>
    /// <p>ACTIVE – The volume is active.</p></li>
    /// <li>
    /// <p>UPDATING – The volume is in the process of being updated.</p></li>
    /// <li>
    /// <p>UPDATE_FAILED – The update action failed.</p></li>
    /// <li>
    /// <p>UPDATED – The volume is successfully updated.</p></li>
    /// <li>
    /// <p>DELETING – The volume is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The system failed to delete the volume.</p></li>
    /// <li>
    /// <p>DELETED – The volume is successfully deleted.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::KxVolumeStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of volume.</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The volume creation is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The volume creation has failed.</p></li>
    /// <li>
    /// <p>ACTIVE – The volume is active.</p></li>
    /// <li>
    /// <p>UPDATING – The volume is in the process of being updated.</p></li>
    /// <li>
    /// <p>UPDATE_FAILED – The update action failed.</p></li>
    /// <li>
    /// <p>UPDATED – The volume is successfully updated.</p></li>
    /// <li>
    /// <p>DELETING – The volume is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The system failed to delete the volume.</p></li>
    /// <li>
    /// <p>DELETED – The volume is successfully deleted.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::KxVolumeStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of volume.</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The volume creation is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The volume creation has failed.</p></li>
    /// <li>
    /// <p>ACTIVE – The volume is active.</p></li>
    /// <li>
    /// <p>UPDATING – The volume is in the process of being updated.</p></li>
    /// <li>
    /// <p>UPDATE_FAILED – The update action failed.</p></li>
    /// <li>
    /// <p>UPDATED – The volume is successfully updated.</p></li>
    /// <li>
    /// <p>DELETING – The volume is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The system failed to delete the volume.</p></li>
    /// <li>
    /// <p>DELETED – The volume is successfully deleted.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::KxVolumeStatus> {
        &self.status
    }
    /// <p>A description of the volume.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the volume.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the volume.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The error message when a failed state occurs.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message when a failed state occurs.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The error message when a failed state occurs.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The number of availability zones assigned to the volume. Currently, only <code>SINGLE</code> is supported.</p>
    pub fn az_mode(mut self, input: crate::types::KxAzMode) -> Self {
        self.az_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of availability zones assigned to the volume. Currently, only <code>SINGLE</code> is supported.</p>
    pub fn set_az_mode(mut self, input: ::std::option::Option<crate::types::KxAzMode>) -> Self {
        self.az_mode = input;
        self
    }
    /// <p>The number of availability zones assigned to the volume. Currently, only <code>SINGLE</code> is supported.</p>
    pub fn get_az_mode(&self) -> &::std::option::Option<crate::types::KxAzMode> {
        &self.az_mode
    }
    /// Appends an item to `availability_zone_ids`.
    ///
    /// To override the contents of this collection use [`set_availability_zone_ids`](Self::set_availability_zone_ids).
    ///
    /// <p>The identifier of the availability zones.</p>
    pub fn availability_zone_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.availability_zone_ids.unwrap_or_default();
        v.push(input.into());
        self.availability_zone_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn set_availability_zone_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.availability_zone_ids = input;
        self
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn get_availability_zone_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.availability_zone_ids
    }
    /// <p>The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The last time that the volume was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the volume was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_last_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_timestamp = input;
        self
    }
    /// <p>The last time that the volume was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_last_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_timestamp
    }
    /// Consumes the builder and constructs a [`KxVolume`](crate::types::KxVolume).
    pub fn build(self) -> crate::types::KxVolume {
        crate::types::KxVolume {
            volume_name: self.volume_name,
            volume_type: self.volume_type,
            status: self.status,
            description: self.description,
            status_reason: self.status_reason,
            az_mode: self.az_mode,
            availability_zone_ids: self.availability_zone_ids,
            created_timestamp: self.created_timestamp,
            last_modified_timestamp: self.last_modified_timestamp,
        }
    }
}
