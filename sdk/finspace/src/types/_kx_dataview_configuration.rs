// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure that stores the configuration details of a dataview.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KxDataviewConfiguration {
    /// <p>The unique identifier of the dataview.</p>
    pub dataview_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the dataview corresponding to a given changeset.</p>
    pub dataview_version_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the changeset.</p>
    pub changeset_id: ::std::option::Option<::std::string::String>,
    /// <p>The db path and volume configuration for the segmented database.</p>
    pub segment_configurations: ::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>>,
}
impl KxDataviewConfiguration {
    /// <p>The unique identifier of the dataview.</p>
    pub fn dataview_name(&self) -> ::std::option::Option<&str> {
        self.dataview_name.as_deref()
    }
    /// <p>The version of the dataview corresponding to a given changeset.</p>
    pub fn dataview_version_id(&self) -> ::std::option::Option<&str> {
        self.dataview_version_id.as_deref()
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn changeset_id(&self) -> ::std::option::Option<&str> {
        self.changeset_id.as_deref()
    }
    /// <p>The db path and volume configuration for the segmented database.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.segment_configurations.is_none()`.
    pub fn segment_configurations(&self) -> &[crate::types::KxDataviewSegmentConfiguration] {
        self.segment_configurations.as_deref().unwrap_or_default()
    }
}
impl KxDataviewConfiguration {
    /// Creates a new builder-style object to manufacture [`KxDataviewConfiguration`](crate::types::KxDataviewConfiguration).
    pub fn builder() -> crate::types::builders::KxDataviewConfigurationBuilder {
        crate::types::builders::KxDataviewConfigurationBuilder::default()
    }
}

/// A builder for [`KxDataviewConfiguration`](crate::types::KxDataviewConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KxDataviewConfigurationBuilder {
    pub(crate) dataview_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataview_version_id: ::std::option::Option<::std::string::String>,
    pub(crate) changeset_id: ::std::option::Option<::std::string::String>,
    pub(crate) segment_configurations: ::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>>,
}
impl KxDataviewConfigurationBuilder {
    /// <p>The unique identifier of the dataview.</p>
    pub fn dataview_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataview_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the dataview.</p>
    pub fn set_dataview_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataview_name = input;
        self
    }
    /// <p>The unique identifier of the dataview.</p>
    pub fn get_dataview_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataview_name
    }
    /// <p>The version of the dataview corresponding to a given changeset.</p>
    pub fn dataview_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataview_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the dataview corresponding to a given changeset.</p>
    pub fn set_dataview_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataview_version_id = input;
        self
    }
    /// <p>The version of the dataview corresponding to a given changeset.</p>
    pub fn get_dataview_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataview_version_id
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn changeset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.changeset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn set_changeset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.changeset_id = input;
        self
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn get_changeset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.changeset_id
    }
    /// Appends an item to `segment_configurations`.
    ///
    /// To override the contents of this collection use [`set_segment_configurations`](Self::set_segment_configurations).
    ///
    /// <p>The db path and volume configuration for the segmented database.</p>
    pub fn segment_configurations(mut self, input: crate::types::KxDataviewSegmentConfiguration) -> Self {
        let mut v = self.segment_configurations.unwrap_or_default();
        v.push(input);
        self.segment_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The db path and volume configuration for the segmented database.</p>
    pub fn set_segment_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>>) -> Self {
        self.segment_configurations = input;
        self
    }
    /// <p>The db path and volume configuration for the segmented database.</p>
    pub fn get_segment_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>> {
        &self.segment_configurations
    }
    /// Consumes the builder and constructs a [`KxDataviewConfiguration`](crate::types::KxDataviewConfiguration).
    pub fn build(self) -> crate::types::KxDataviewConfiguration {
        crate::types::KxDataviewConfiguration {
            dataview_name: self.dataview_name,
            dataview_version_id: self.dataview_version_id,
            changeset_id: self.changeset_id,
            segment_configurations: self.segment_configurations,
        }
    }
}
