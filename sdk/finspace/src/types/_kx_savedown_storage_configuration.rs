// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The size and type of temporary storage that is used to hold data during the savedown process. All the data written to this storage space is lost when the cluster node is restarted.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KxSavedownStorageConfiguration {
    /// <p>The type of writeable storage space for temporarily storing your savedown data. The valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>SDS01 – This type represents 3000 IOPS and io2 ebs volume type.</p></li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::KxSavedownStorageType>,
    /// <p>The size of temporary storage in gibibytes.</p>
    pub size: ::std::option::Option<i32>,
    /// <p>The name of the kdb volume that you want to use as writeable save-down storage for clusters.</p>
    pub volume_name: ::std::option::Option<::std::string::String>,
}
impl KxSavedownStorageConfiguration {
    /// <p>The type of writeable storage space for temporarily storing your savedown data. The valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>SDS01 – This type represents 3000 IOPS and io2 ebs volume type.</p></li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::KxSavedownStorageType> {
        self.r#type.as_ref()
    }
    /// <p>The size of temporary storage in gibibytes.</p>
    pub fn size(&self) -> ::std::option::Option<i32> {
        self.size
    }
    /// <p>The name of the kdb volume that you want to use as writeable save-down storage for clusters.</p>
    pub fn volume_name(&self) -> ::std::option::Option<&str> {
        self.volume_name.as_deref()
    }
}
impl KxSavedownStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`KxSavedownStorageConfiguration`](crate::types::KxSavedownStorageConfiguration).
    pub fn builder() -> crate::types::builders::KxSavedownStorageConfigurationBuilder {
        crate::types::builders::KxSavedownStorageConfigurationBuilder::default()
    }
}

/// A builder for [`KxSavedownStorageConfiguration`](crate::types::KxSavedownStorageConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KxSavedownStorageConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::KxSavedownStorageType>,
    pub(crate) size: ::std::option::Option<i32>,
    pub(crate) volume_name: ::std::option::Option<::std::string::String>,
}
impl KxSavedownStorageConfigurationBuilder {
    /// <p>The type of writeable storage space for temporarily storing your savedown data. The valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>SDS01 – This type represents 3000 IOPS and io2 ebs volume type.</p></li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::KxSavedownStorageType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of writeable storage space for temporarily storing your savedown data. The valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>SDS01 – This type represents 3000 IOPS and io2 ebs volume type.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::KxSavedownStorageType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of writeable storage space for temporarily storing your savedown data. The valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>SDS01 – This type represents 3000 IOPS and io2 ebs volume type.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::KxSavedownStorageType> {
        &self.r#type
    }
    /// <p>The size of temporary storage in gibibytes.</p>
    pub fn size(mut self, input: i32) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of temporary storage in gibibytes.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of temporary storage in gibibytes.</p>
    pub fn get_size(&self) -> &::std::option::Option<i32> {
        &self.size
    }
    /// <p>The name of the kdb volume that you want to use as writeable save-down storage for clusters.</p>
    pub fn volume_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the kdb volume that you want to use as writeable save-down storage for clusters.</p>
    pub fn set_volume_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_name = input;
        self
    }
    /// <p>The name of the kdb volume that you want to use as writeable save-down storage for clusters.</p>
    pub fn get_volume_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_name
    }
    /// Consumes the builder and constructs a [`KxSavedownStorageConfiguration`](crate::types::KxSavedownStorageConfiguration).
    pub fn build(self) -> crate::types::KxSavedownStorageConfiguration {
        crate::types::KxSavedownStorageConfiguration {
            r#type: self.r#type,
            size: self.size,
            volume_name: self.volume_name,
        }
    }
}
