// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure containing the metadata of the attached clusters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KxAttachedCluster {
    /// <p>A unique name for the attached cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of cluster. The volume for TP and RDB cluster types will be used for TP logs.</p>
    pub cluster_type: ::std::option::Option<crate::types::KxClusterType>,
    /// <p>The status of the attached cluster.</p>
    /// <ul>
    /// <li>
    /// <p>PENDING – The cluster is pending creation.</p></li>
    /// <li>
    /// <p>CREATING – The cluster creation process is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The cluster creation process has failed.</p></li>
    /// <li>
    /// <p>RUNNING – The cluster creation process is running.</p></li>
    /// <li>
    /// <p>UPDATING – The cluster is in the process of being updated.</p></li>
    /// <li>
    /// <p>DELETING – The cluster is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETED – The cluster has been deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The cluster failed to delete.</p></li>
    /// </ul>
    pub cluster_status: ::std::option::Option<crate::types::KxClusterStatus>,
}
impl KxAttachedCluster {
    /// <p>A unique name for the attached cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>Specifies the type of cluster. The volume for TP and RDB cluster types will be used for TP logs.</p>
    pub fn cluster_type(&self) -> ::std::option::Option<&crate::types::KxClusterType> {
        self.cluster_type.as_ref()
    }
    /// <p>The status of the attached cluster.</p>
    /// <ul>
    /// <li>
    /// <p>PENDING – The cluster is pending creation.</p></li>
    /// <li>
    /// <p>CREATING – The cluster creation process is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The cluster creation process has failed.</p></li>
    /// <li>
    /// <p>RUNNING – The cluster creation process is running.</p></li>
    /// <li>
    /// <p>UPDATING – The cluster is in the process of being updated.</p></li>
    /// <li>
    /// <p>DELETING – The cluster is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETED – The cluster has been deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The cluster failed to delete.</p></li>
    /// </ul>
    pub fn cluster_status(&self) -> ::std::option::Option<&crate::types::KxClusterStatus> {
        self.cluster_status.as_ref()
    }
}
impl KxAttachedCluster {
    /// Creates a new builder-style object to manufacture [`KxAttachedCluster`](crate::types::KxAttachedCluster).
    pub fn builder() -> crate::types::builders::KxAttachedClusterBuilder {
        crate::types::builders::KxAttachedClusterBuilder::default()
    }
}

/// A builder for [`KxAttachedCluster`](crate::types::KxAttachedCluster).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KxAttachedClusterBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_type: ::std::option::Option<crate::types::KxClusterType>,
    pub(crate) cluster_status: ::std::option::Option<crate::types::KxClusterStatus>,
}
impl KxAttachedClusterBuilder {
    /// <p>A unique name for the attached cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name for the attached cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>A unique name for the attached cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>Specifies the type of cluster. The volume for TP and RDB cluster types will be used for TP logs.</p>
    pub fn cluster_type(mut self, input: crate::types::KxClusterType) -> Self {
        self.cluster_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of cluster. The volume for TP and RDB cluster types will be used for TP logs.</p>
    pub fn set_cluster_type(mut self, input: ::std::option::Option<crate::types::KxClusterType>) -> Self {
        self.cluster_type = input;
        self
    }
    /// <p>Specifies the type of cluster. The volume for TP and RDB cluster types will be used for TP logs.</p>
    pub fn get_cluster_type(&self) -> &::std::option::Option<crate::types::KxClusterType> {
        &self.cluster_type
    }
    /// <p>The status of the attached cluster.</p>
    /// <ul>
    /// <li>
    /// <p>PENDING – The cluster is pending creation.</p></li>
    /// <li>
    /// <p>CREATING – The cluster creation process is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The cluster creation process has failed.</p></li>
    /// <li>
    /// <p>RUNNING – The cluster creation process is running.</p></li>
    /// <li>
    /// <p>UPDATING – The cluster is in the process of being updated.</p></li>
    /// <li>
    /// <p>DELETING – The cluster is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETED – The cluster has been deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The cluster failed to delete.</p></li>
    /// </ul>
    pub fn cluster_status(mut self, input: crate::types::KxClusterStatus) -> Self {
        self.cluster_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the attached cluster.</p>
    /// <ul>
    /// <li>
    /// <p>PENDING – The cluster is pending creation.</p></li>
    /// <li>
    /// <p>CREATING – The cluster creation process is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The cluster creation process has failed.</p></li>
    /// <li>
    /// <p>RUNNING – The cluster creation process is running.</p></li>
    /// <li>
    /// <p>UPDATING – The cluster is in the process of being updated.</p></li>
    /// <li>
    /// <p>DELETING – The cluster is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETED – The cluster has been deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The cluster failed to delete.</p></li>
    /// </ul>
    pub fn set_cluster_status(mut self, input: ::std::option::Option<crate::types::KxClusterStatus>) -> Self {
        self.cluster_status = input;
        self
    }
    /// <p>The status of the attached cluster.</p>
    /// <ul>
    /// <li>
    /// <p>PENDING – The cluster is pending creation.</p></li>
    /// <li>
    /// <p>CREATING – The cluster creation process is in progress.</p></li>
    /// <li>
    /// <p>CREATE_FAILED – The cluster creation process has failed.</p></li>
    /// <li>
    /// <p>RUNNING – The cluster creation process is running.</p></li>
    /// <li>
    /// <p>UPDATING – The cluster is in the process of being updated.</p></li>
    /// <li>
    /// <p>DELETING – The cluster is in the process of being deleted.</p></li>
    /// <li>
    /// <p>DELETED – The cluster has been deleted.</p></li>
    /// <li>
    /// <p>DELETE_FAILED – The cluster failed to delete.</p></li>
    /// </ul>
    pub fn get_cluster_status(&self) -> &::std::option::Option<crate::types::KxClusterStatus> {
        &self.cluster_status
    }
    /// Consumes the builder and constructs a [`KxAttachedCluster`](crate::types::KxAttachedCluster).
    pub fn build(self) -> crate::types::KxAttachedCluster {
        crate::types::KxAttachedCluster {
            cluster_name: self.cluster_name,
            cluster_type: self.cluster_type,
            cluster_status: self.cluster_status,
        }
    }
}
