// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetKxDataview`](crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`environment_id(impl Into<String>)`](crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder::environment_id) / [`set_environment_id(Option<String>)`](crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder::set_environment_id):<br>required: **true**<br><p>A unique identifier for the kdb environment, from where you want to retrieve the dataview details.</p><br>
    ///   - [`database_name(impl Into<String>)`](crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder::database_name) / [`set_database_name(Option<String>)`](crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder::set_database_name):<br>required: **true**<br><p>The name of the database where you created the dataview.</p><br>
    ///   - [`dataview_name(impl Into<String>)`](crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder::dataview_name) / [`set_dataview_name(Option<String>)`](crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder::set_dataview_name):<br>required: **true**<br><p>A unique identifier for the dataview.</p><br>
    /// - On success, responds with [`GetKxDataviewOutput`](crate::operation::get_kx_dataview::GetKxDataviewOutput) with field(s):
    ///   - [`database_name(Option<String>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::database_name): <p>The name of the database where you created the dataview.</p>
    ///   - [`dataview_name(Option<String>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::dataview_name): <p>A unique identifier for the dataview.</p>
    ///   - [`az_mode(Option<KxAzMode>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::az_mode): <p>The number of availability zones you want to assign per cluster. This can be one of the following</p> <ul>  <li>   <p><code>SINGLE</code> – Assigns one availability zone per cluster.</p></li>  <li>   <p><code>MULTI</code> – Assigns all the availability zones per cluster.</p></li> </ul>
    ///   - [`availability_zone_id(Option<String>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::availability_zone_id): <p>The identifier of the availability zones.</p>
    ///   - [`changeset_id(Option<String>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::changeset_id): <p>A unique identifier of the changeset that you want to use to ingest data.</p>
    ///   - [`segment_configurations(Option<Vec::<KxDataviewSegmentConfiguration>>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::segment_configurations): <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    ///   - [`active_versions(Option<Vec::<KxDataviewActiveVersion>>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::active_versions): <p>The current active changeset versions of the database on the given dataview.</p>
    ///   - [`description(Option<String>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::description): <p>A description of the dataview.</p>
    ///   - [`auto_update(bool)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::auto_update): <p>The option to specify whether you want to apply all the future additions and corrections automatically to the dataview when new changesets are ingested. The default value is false.</p>
    ///   - [`environment_id(Option<String>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::environment_id): <p>A unique identifier for the kdb environment, from where you want to retrieve the dataview details.</p>
    ///   - [`created_timestamp(Option<DateTime>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::created_timestamp): <p>The timestamp at which the dataview was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    ///   - [`last_modified_timestamp(Option<DateTime>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::last_modified_timestamp): <p>The last time that the dataview was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    ///   - [`status(Option<KxDataviewStatus>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::status): <p>The status of dataview creation.</p> <ul>  <li>   <p><code>CREATING</code> – The dataview creation is in progress.</p></li>  <li>   <p><code>UPDATING</code> – The dataview is in the process of being updated.</p></li>  <li>   <p><code>ACTIVE</code> – The dataview is active.</p></li> </ul>
    ///   - [`status_reason(Option<String>)`](crate::operation::get_kx_dataview::GetKxDataviewOutput::status_reason): <p>The error message when a failed state occurs.</p>
    /// - On failure, responds with [`SdkError<GetKxDataviewError>`](crate::operation::get_kx_dataview::GetKxDataviewError)
    pub fn get_kx_dataview(&self) -> crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder {
        crate::operation::get_kx_dataview::builders::GetKxDataviewFluentBuilder::new(self.handle.clone())
    }
}
