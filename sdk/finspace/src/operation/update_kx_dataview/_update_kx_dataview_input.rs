// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateKxDataviewInput {
    /// <p>A unique identifier for the kdb environment, where you want to update the dataview.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the dataview that you want to update.</p>
    pub dataview_name: ::std::option::Option<::std::string::String>,
    /// <p>The description for a dataview.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the changeset.</p>
    pub changeset_id: ::std::option::Option<::std::string::String>,
    /// <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    pub segment_configurations: ::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>>,
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateKxDataviewInput {
    /// <p>A unique identifier for the kdb environment, where you want to update the dataview.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The name of the database.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the dataview that you want to update.</p>
    pub fn dataview_name(&self) -> ::std::option::Option<&str> {
        self.dataview_name.as_deref()
    }
    /// <p>The description for a dataview.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn changeset_id(&self) -> ::std::option::Option<&str> {
        self.changeset_id.as_deref()
    }
    /// <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.segment_configurations.is_none()`.
    pub fn segment_configurations(&self) -> &[crate::types::KxDataviewSegmentConfiguration] {
        self.segment_configurations.as_deref().unwrap_or_default()
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateKxDataviewInput {
    /// Creates a new builder-style object to manufacture [`UpdateKxDataviewInput`](crate::operation::update_kx_dataview::UpdateKxDataviewInput).
    pub fn builder() -> crate::operation::update_kx_dataview::builders::UpdateKxDataviewInputBuilder {
        crate::operation::update_kx_dataview::builders::UpdateKxDataviewInputBuilder::default()
    }
}

/// A builder for [`UpdateKxDataviewInput`](crate::operation::update_kx_dataview::UpdateKxDataviewInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateKxDataviewInputBuilder {
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataview_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) changeset_id: ::std::option::Option<::std::string::String>,
    pub(crate) segment_configurations: ::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateKxDataviewInputBuilder {
    /// <p>A unique identifier for the kdb environment, where you want to update the dataview.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment, where you want to update the dataview.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique identifier for the kdb environment, where you want to update the dataview.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The name of the database.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the dataview that you want to update.</p>
    /// This field is required.
    pub fn dataview_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataview_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataview that you want to update.</p>
    pub fn set_dataview_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataview_name = input;
        self
    }
    /// <p>The name of the dataview that you want to update.</p>
    pub fn get_dataview_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataview_name
    }
    /// <p>The description for a dataview.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for a dataview.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for a dataview.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn changeset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.changeset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn set_changeset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.changeset_id = input;
        self
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn get_changeset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.changeset_id
    }
    /// Appends an item to `segment_configurations`.
    ///
    /// To override the contents of this collection use [`set_segment_configurations`](Self::set_segment_configurations).
    ///
    /// <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    pub fn segment_configurations(mut self, input: crate::types::KxDataviewSegmentConfiguration) -> Self {
        let mut v = self.segment_configurations.unwrap_or_default();
        v.push(input);
        self.segment_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    pub fn set_segment_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>>) -> Self {
        self.segment_configurations = input;
        self
    }
    /// <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    pub fn get_segment_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>> {
        &self.segment_configurations
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateKxDataviewInput`](crate::operation::update_kx_dataview::UpdateKxDataviewInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_kx_dataview::UpdateKxDataviewInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_kx_dataview::UpdateKxDataviewInput {
            environment_id: self.environment_id,
            database_name: self.database_name,
            dataview_name: self.dataview_name,
            description: self.description,
            changeset_id: self.changeset_id,
            segment_configurations: self.segment_configurations,
            client_token: self.client_token,
        })
    }
}
