// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListKxVolumesInput {
    /// <p>A unique identifier for the kdb environment, whose clusters can attach to the volume.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in this request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token that indicates where a results page should begin.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub volume_type: ::std::option::Option<crate::types::KxVolumeType>,
}
impl ListKxVolumesInput {
    /// <p>A unique identifier for the kdb environment, whose clusters can attach to the volume.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token that indicates where a results page should begin.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub fn volume_type(&self) -> ::std::option::Option<&crate::types::KxVolumeType> {
        self.volume_type.as_ref()
    }
}
impl ListKxVolumesInput {
    /// Creates a new builder-style object to manufacture [`ListKxVolumesInput`](crate::operation::list_kx_volumes::ListKxVolumesInput).
    pub fn builder() -> crate::operation::list_kx_volumes::builders::ListKxVolumesInputBuilder {
        crate::operation::list_kx_volumes::builders::ListKxVolumesInputBuilder::default()
    }
}

/// A builder for [`ListKxVolumesInput`](crate::operation::list_kx_volumes::ListKxVolumesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListKxVolumesInputBuilder {
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) volume_type: ::std::option::Option<crate::types::KxVolumeType>,
}
impl ListKxVolumesInputBuilder {
    /// <p>A unique identifier for the kdb environment, whose clusters can attach to the volume.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment, whose clusters can attach to the volume.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique identifier for the kdb environment, whose clusters can attach to the volume.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token that indicates where a results page should begin.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that indicates where a results page should begin.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that indicates where a results page should begin.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub fn volume_type(mut self, input: crate::types::KxVolumeType) -> Self {
        self.volume_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub fn set_volume_type(mut self, input: ::std::option::Option<crate::types::KxVolumeType>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>The type of file system volume. Currently, FinSpace only supports <code>NAS_1</code> volume type.</p>
    pub fn get_volume_type(&self) -> &::std::option::Option<crate::types::KxVolumeType> {
        &self.volume_type
    }
    /// Consumes the builder and constructs a [`ListKxVolumesInput`](crate::operation::list_kx_volumes::ListKxVolumesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_kx_volumes::ListKxVolumesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_kx_volumes::ListKxVolumesInput {
            environment_id: self.environment_id,
            max_results: self.max_results,
            next_token: self.next_token,
            volume_type: self.volume_type,
        })
    }
}
