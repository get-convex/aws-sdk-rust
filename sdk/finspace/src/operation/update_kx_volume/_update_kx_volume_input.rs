// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateKxVolumeInput {
    /// <p>A unique identifier for the kdb environment where you created the storage volume.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the volume.</p>
    pub volume_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the volume.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the configuration for the Network attached storage (NAS_1) file system volume.</p>
    pub nas1_configuration: ::std::option::Option<crate::types::KxNas1Configuration>,
}
impl UpdateKxVolumeInput {
    /// <p>A unique identifier for the kdb environment where you created the storage volume.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>A unique identifier for the volume.</p>
    pub fn volume_name(&self) -> ::std::option::Option<&str> {
        self.volume_name.as_deref()
    }
    /// <p>A description of the volume.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Specifies the configuration for the Network attached storage (NAS_1) file system volume.</p>
    pub fn nas1_configuration(&self) -> ::std::option::Option<&crate::types::KxNas1Configuration> {
        self.nas1_configuration.as_ref()
    }
}
impl UpdateKxVolumeInput {
    /// Creates a new builder-style object to manufacture [`UpdateKxVolumeInput`](crate::operation::update_kx_volume::UpdateKxVolumeInput).
    pub fn builder() -> crate::operation::update_kx_volume::builders::UpdateKxVolumeInputBuilder {
        crate::operation::update_kx_volume::builders::UpdateKxVolumeInputBuilder::default()
    }
}

/// A builder for [`UpdateKxVolumeInput`](crate::operation::update_kx_volume::UpdateKxVolumeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateKxVolumeInputBuilder {
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) nas1_configuration: ::std::option::Option<crate::types::KxNas1Configuration>,
}
impl UpdateKxVolumeInputBuilder {
    /// <p>A unique identifier for the kdb environment where you created the storage volume.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment where you created the storage volume.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique identifier for the kdb environment where you created the storage volume.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>A unique identifier for the volume.</p>
    /// This field is required.
    pub fn volume_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the volume.</p>
    pub fn set_volume_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_name = input;
        self
    }
    /// <p>A unique identifier for the volume.</p>
    pub fn get_volume_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_name
    }
    /// <p>A description of the volume.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the volume.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the volume.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Specifies the configuration for the Network attached storage (NAS_1) file system volume.</p>
    pub fn nas1_configuration(mut self, input: crate::types::KxNas1Configuration) -> Self {
        self.nas1_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configuration for the Network attached storage (NAS_1) file system volume.</p>
    pub fn set_nas1_configuration(mut self, input: ::std::option::Option<crate::types::KxNas1Configuration>) -> Self {
        self.nas1_configuration = input;
        self
    }
    /// <p>Specifies the configuration for the Network attached storage (NAS_1) file system volume.</p>
    pub fn get_nas1_configuration(&self) -> &::std::option::Option<crate::types::KxNas1Configuration> {
        &self.nas1_configuration
    }
    /// Consumes the builder and constructs a [`UpdateKxVolumeInput`](crate::operation::update_kx_volume::UpdateKxVolumeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_kx_volume::UpdateKxVolumeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_kx_volume::UpdateKxVolumeInput {
            environment_id: self.environment_id,
            volume_name: self.volume_name,
            description: self.description,
            client_token: self.client_token,
            nas1_configuration: self.nas1_configuration,
        })
    }
}
