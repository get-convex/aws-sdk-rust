// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_kx_volume_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_kx_volume::CreateKxVolumeInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.availability_zone_ids {
        let mut array_2 = object.key("availabilityZoneIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.az_mode {
        object.key("azMode").string(var_4.as_str());
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.nas1_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("nas1Configuration").start_object();
        crate::protocol_serde::shape_kx_nas1_configuration::ser_kx_nas1_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.volume_name {
        object.key("volumeName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.volume_type {
        object.key("volumeType").string(var_14.as_str());
    }
    Ok(())
}
