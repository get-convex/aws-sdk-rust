// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_kx_dataview_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_kx_dataview::CreateKxDataviewInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auto_update {
        object.key("autoUpdate").boolean(*var_1);
    }
    if let Some(var_2) = &input.availability_zone_id {
        object.key("availabilityZoneId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.az_mode {
        object.key("azMode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.changeset_id {
        object.key("changesetId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.dataview_name {
        object.key("dataviewName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.description {
        object.key("description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.segment_configurations {
        let mut array_9 = object.key("segmentConfigurations").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_kx_dataview_segment_configuration::ser_kx_dataview_segment_configuration(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}
