// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_plugin_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_plugin::CreatePluginInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auth_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("authConfiguration").start_object();
        crate::protocol_serde::shape_plugin_auth_configuration::ser_plugin_auth_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.display_name {
        object.key("displayName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.server_url {
        object.key("serverUrl").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        let mut array_7 = object.key("tags").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.r#type {
        object.key("type").string(var_10.as_str());
    }
    Ok(())
}
