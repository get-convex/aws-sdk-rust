// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_document(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Document,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("id").string(input.id.as_str());
    }
    if let Some(var_1) = &input.attributes {
        let mut array_2 = object.key("attributes").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_document_attribute::ser_document_attribute(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.content {
        #[allow(unused_mut)]
        let mut object_6 = object.key("content").start_object();
        crate::protocol_serde::shape_document_content::ser_document_content(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.content_type {
        object.key("contentType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.title {
        object.key("title").string(var_8.as_str());
    }
    if let Some(var_9) = &input.access_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("accessConfiguration").start_object();
        crate::protocol_serde::shape_access_configuration::ser_access_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.document_enrichment_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("documentEnrichmentConfiguration").start_object();
        crate::protocol_serde::shape_document_enrichment_configuration::ser_document_enrichment_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
