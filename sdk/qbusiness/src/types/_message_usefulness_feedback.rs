// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>End user feedback on an AI-generated web experience chat message usefulness.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageUsefulnessFeedback {
    /// <p>The usefulness value assigned by an end user to a message.</p>
    pub usefulness: crate::types::MessageUsefulness,
    /// <p>The reason for a usefulness rating.</p>
    pub reason: ::std::option::Option<crate::types::MessageUsefulnessReason>,
    /// <p>A comment given by an end user on the usefulness of an AI-generated chat message.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp for when the feedback was submitted.</p>
    pub submitted_at: ::aws_smithy_types::DateTime,
}
impl MessageUsefulnessFeedback {
    /// <p>The usefulness value assigned by an end user to a message.</p>
    pub fn usefulness(&self) -> &crate::types::MessageUsefulness {
        &self.usefulness
    }
    /// <p>The reason for a usefulness rating.</p>
    pub fn reason(&self) -> ::std::option::Option<&crate::types::MessageUsefulnessReason> {
        self.reason.as_ref()
    }
    /// <p>A comment given by an end user on the usefulness of an AI-generated chat message.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The timestamp for when the feedback was submitted.</p>
    pub fn submitted_at(&self) -> &::aws_smithy_types::DateTime {
        &self.submitted_at
    }
}
impl MessageUsefulnessFeedback {
    /// Creates a new builder-style object to manufacture [`MessageUsefulnessFeedback`](crate::types::MessageUsefulnessFeedback).
    pub fn builder() -> crate::types::builders::MessageUsefulnessFeedbackBuilder {
        crate::types::builders::MessageUsefulnessFeedbackBuilder::default()
    }
}

/// A builder for [`MessageUsefulnessFeedback`](crate::types::MessageUsefulnessFeedback).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MessageUsefulnessFeedbackBuilder {
    pub(crate) usefulness: ::std::option::Option<crate::types::MessageUsefulness>,
    pub(crate) reason: ::std::option::Option<crate::types::MessageUsefulnessReason>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) submitted_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MessageUsefulnessFeedbackBuilder {
    /// <p>The usefulness value assigned by an end user to a message.</p>
    /// This field is required.
    pub fn usefulness(mut self, input: crate::types::MessageUsefulness) -> Self {
        self.usefulness = ::std::option::Option::Some(input);
        self
    }
    /// <p>The usefulness value assigned by an end user to a message.</p>
    pub fn set_usefulness(mut self, input: ::std::option::Option<crate::types::MessageUsefulness>) -> Self {
        self.usefulness = input;
        self
    }
    /// <p>The usefulness value assigned by an end user to a message.</p>
    pub fn get_usefulness(&self) -> &::std::option::Option<crate::types::MessageUsefulness> {
        &self.usefulness
    }
    /// <p>The reason for a usefulness rating.</p>
    pub fn reason(mut self, input: crate::types::MessageUsefulnessReason) -> Self {
        self.reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason for a usefulness rating.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<crate::types::MessageUsefulnessReason>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for a usefulness rating.</p>
    pub fn get_reason(&self) -> &::std::option::Option<crate::types::MessageUsefulnessReason> {
        &self.reason
    }
    /// <p>A comment given by an end user on the usefulness of an AI-generated chat message.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A comment given by an end user on the usefulness of an AI-generated chat message.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>A comment given by an end user on the usefulness of an AI-generated chat message.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>The timestamp for when the feedback was submitted.</p>
    /// This field is required.
    pub fn submitted_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.submitted_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the feedback was submitted.</p>
    pub fn set_submitted_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.submitted_at = input;
        self
    }
    /// <p>The timestamp for when the feedback was submitted.</p>
    pub fn get_submitted_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.submitted_at
    }
    /// Consumes the builder and constructs a [`MessageUsefulnessFeedback`](crate::types::MessageUsefulnessFeedback).
    /// This method will fail if any of the following fields are not set:
    /// - [`usefulness`](crate::types::builders::MessageUsefulnessFeedbackBuilder::usefulness)
    /// - [`submitted_at`](crate::types::builders::MessageUsefulnessFeedbackBuilder::submitted_at)
    pub fn build(self) -> ::std::result::Result<crate::types::MessageUsefulnessFeedback, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MessageUsefulnessFeedback {
            usefulness: self.usefulness.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usefulness",
                    "usefulness was not specified but it is required when building MessageUsefulnessFeedback",
                )
            })?,
            reason: self.reason,
            comment: self.comment,
            submitted_at: self.submitted_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "submitted_at",
                    "submitted_at was not specified but it is required when building MessageUsefulnessFeedback",
                )
            })?,
        })
    }
}
