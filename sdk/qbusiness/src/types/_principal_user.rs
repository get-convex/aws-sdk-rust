// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a user associated with a principal.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PrincipalUser {
    /// <p>The identifier of the user.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Provides information about whether to allow or deny access to the principal.</p>
    pub access: crate::types::ReadAccessType,
    /// <p>The type of group.</p>
    pub membership_type: ::std::option::Option<crate::types::MembershipType>,
}
impl PrincipalUser {
    /// <p>The identifier of the user.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Provides information about whether to allow or deny access to the principal.</p>
    pub fn access(&self) -> &crate::types::ReadAccessType {
        &self.access
    }
    /// <p>The type of group.</p>
    pub fn membership_type(&self) -> ::std::option::Option<&crate::types::MembershipType> {
        self.membership_type.as_ref()
    }
}
impl PrincipalUser {
    /// Creates a new builder-style object to manufacture [`PrincipalUser`](crate::types::PrincipalUser).
    pub fn builder() -> crate::types::builders::PrincipalUserBuilder {
        crate::types::builders::PrincipalUserBuilder::default()
    }
}

/// A builder for [`PrincipalUser`](crate::types::PrincipalUser).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PrincipalUserBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) access: ::std::option::Option<crate::types::ReadAccessType>,
    pub(crate) membership_type: ::std::option::Option<crate::types::MembershipType>,
}
impl PrincipalUserBuilder {
    /// <p>The identifier of the user.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the user.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Provides information about whether to allow or deny access to the principal.</p>
    /// This field is required.
    pub fn access(mut self, input: crate::types::ReadAccessType) -> Self {
        self.access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about whether to allow or deny access to the principal.</p>
    pub fn set_access(mut self, input: ::std::option::Option<crate::types::ReadAccessType>) -> Self {
        self.access = input;
        self
    }
    /// <p>Provides information about whether to allow or deny access to the principal.</p>
    pub fn get_access(&self) -> &::std::option::Option<crate::types::ReadAccessType> {
        &self.access
    }
    /// <p>The type of group.</p>
    pub fn membership_type(mut self, input: crate::types::MembershipType) -> Self {
        self.membership_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of group.</p>
    pub fn set_membership_type(mut self, input: ::std::option::Option<crate::types::MembershipType>) -> Self {
        self.membership_type = input;
        self
    }
    /// <p>The type of group.</p>
    pub fn get_membership_type(&self) -> &::std::option::Option<crate::types::MembershipType> {
        &self.membership_type
    }
    /// Consumes the builder and constructs a [`PrincipalUser`](crate::types::PrincipalUser).
    /// This method will fail if any of the following fields are not set:
    /// - [`access`](crate::types::builders::PrincipalUserBuilder::access)
    pub fn build(self) -> ::std::result::Result<crate::types::PrincipalUser, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PrincipalUser {
            id: self.id,
            access: self.access.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "access",
                    "access was not specified but it is required when building PrincipalUser",
                )
            })?,
            membership_type: self.membership_type,
        })
    }
}
