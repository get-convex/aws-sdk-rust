// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPluginInput {
    /// <p>The identifier of the application which contains the plugin.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the plugin.</p>
    pub plugin_id: ::std::option::Option<::std::string::String>,
}
impl GetPluginInput {
    /// <p>The identifier of the application which contains the plugin.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the plugin.</p>
    pub fn plugin_id(&self) -> ::std::option::Option<&str> {
        self.plugin_id.as_deref()
    }
}
impl GetPluginInput {
    /// Creates a new builder-style object to manufacture [`GetPluginInput`](crate::operation::get_plugin::GetPluginInput).
    pub fn builder() -> crate::operation::get_plugin::builders::GetPluginInputBuilder {
        crate::operation::get_plugin::builders::GetPluginInputBuilder::default()
    }
}

/// A builder for [`GetPluginInput`](crate::operation::get_plugin::GetPluginInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetPluginInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) plugin_id: ::std::option::Option<::std::string::String>,
}
impl GetPluginInputBuilder {
    /// <p>The identifier of the application which contains the plugin.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the application which contains the plugin.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the application which contains the plugin.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the plugin.</p>
    /// This field is required.
    pub fn plugin_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the plugin.</p>
    pub fn set_plugin_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_id = input;
        self
    }
    /// <p>The identifier of the plugin.</p>
    pub fn get_plugin_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_id
    }
    /// Consumes the builder and constructs a [`GetPluginInput`](crate::operation::get_plugin::GetPluginInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_plugin::GetPluginInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_plugin::GetPluginInput {
            application_id: self.application_id,
            plugin_id: self.plugin_id,
        })
    }
}
