// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetUserOutput {
    /// <p>A list of user aliases attached to a user.</p>
    pub user_aliases: ::std::option::Option<::std::vec::Vec<crate::types::UserAlias>>,
    _request_id: Option<String>,
}
impl GetUserOutput {
    /// <p>A list of user aliases attached to a user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_aliases.is_none()`.
    pub fn user_aliases(&self) -> &[crate::types::UserAlias] {
        self.user_aliases.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetUserOutput {
    /// Creates a new builder-style object to manufacture [`GetUserOutput`](crate::operation::get_user::GetUserOutput).
    pub fn builder() -> crate::operation::get_user::builders::GetUserOutputBuilder {
        crate::operation::get_user::builders::GetUserOutputBuilder::default()
    }
}

/// A builder for [`GetUserOutput`](crate::operation::get_user::GetUserOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetUserOutputBuilder {
    pub(crate) user_aliases: ::std::option::Option<::std::vec::Vec<crate::types::UserAlias>>,
    _request_id: Option<String>,
}
impl GetUserOutputBuilder {
    /// Appends an item to `user_aliases`.
    ///
    /// To override the contents of this collection use [`set_user_aliases`](Self::set_user_aliases).
    ///
    /// <p>A list of user aliases attached to a user.</p>
    pub fn user_aliases(mut self, input: crate::types::UserAlias) -> Self {
        let mut v = self.user_aliases.unwrap_or_default();
        v.push(input);
        self.user_aliases = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of user aliases attached to a user.</p>
    pub fn set_user_aliases(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserAlias>>) -> Self {
        self.user_aliases = input;
        self
    }
    /// <p>A list of user aliases attached to a user.</p>
    pub fn get_user_aliases(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserAlias>> {
        &self.user_aliases
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetUserOutput`](crate::operation::get_user::GetUserOutput).
    pub fn build(self) -> crate::operation::get_user::GetUserOutput {
        crate::operation::get_user::GetUserOutput {
            user_aliases: self.user_aliases,
            _request_id: self._request_id,
        }
    }
}
