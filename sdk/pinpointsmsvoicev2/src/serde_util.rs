// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_registration_output_output_correct_errors(
    mut builder: crate::operation::create_registration::builders::CreateRegistrationOutputBuilder,
) -> crate::operation::create_registration::builders::CreateRegistrationOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_type.is_none() {
        builder.registration_type = Some(Default::default())
    }
    if builder.registration_status.is_none() {
        builder.registration_status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    if builder.current_version_number.is_none() {
        builder.current_version_number = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_registration_association_output_output_correct_errors(
    mut builder: crate::operation::create_registration_association::builders::CreateRegistrationAssociationOutputBuilder,
) -> crate::operation::create_registration_association::builders::CreateRegistrationAssociationOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_type.is_none() {
        builder.registration_type = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn create_registration_attachment_output_output_correct_errors(
    mut builder: crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentOutputBuilder,
) -> crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentOutputBuilder {
    if builder.registration_attachment_arn.is_none() {
        builder.registration_attachment_arn = Some(Default::default())
    }
    if builder.registration_attachment_id.is_none() {
        builder.registration_attachment_id = Some(Default::default())
    }
    if builder.attachment_status.is_none() {
        builder.attachment_status = "no value was set".parse::<crate::types::AttachmentStatus>().ok()
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_registration_version_output_output_correct_errors(
    mut builder: crate::operation::create_registration_version::builders::CreateRegistrationVersionOutputBuilder,
) -> crate::operation::create_registration_version::builders::CreateRegistrationVersionOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    if builder.registration_version_status.is_none() {
        builder.registration_version_status = "no value was set".parse::<crate::types::RegistrationVersionStatus>().ok()
    }
    if builder.registration_version_status_history.is_none() {
        builder.registration_version_status_history = {
            let builder = crate::types::builders::RegistrationVersionStatusHistoryBuilder::default();
            crate::serde_util::registration_version_status_history_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn create_verified_destination_number_output_output_correct_errors(
    mut builder: crate::operation::create_verified_destination_number::builders::CreateVerifiedDestinationNumberOutputBuilder,
) -> crate::operation::create_verified_destination_number::builders::CreateVerifiedDestinationNumberOutputBuilder {
    if builder.verified_destination_number_arn.is_none() {
        builder.verified_destination_number_arn = Some(Default::default())
    }
    if builder.verified_destination_number_id.is_none() {
        builder.verified_destination_number_id = Some(Default::default())
    }
    if builder.destination_phone_number.is_none() {
        builder.destination_phone_number = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VerificationStatus>().ok()
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_registration_output_output_correct_errors(
    mut builder: crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder,
) -> crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_type.is_none() {
        builder.registration_type = Some(Default::default())
    }
    if builder.registration_status.is_none() {
        builder.registration_status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    if builder.current_version_number.is_none() {
        builder.current_version_number = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_registration_attachment_output_output_correct_errors(
    mut builder: crate::operation::delete_registration_attachment::builders::DeleteRegistrationAttachmentOutputBuilder,
) -> crate::operation::delete_registration_attachment::builders::DeleteRegistrationAttachmentOutputBuilder {
    if builder.registration_attachment_arn.is_none() {
        builder.registration_attachment_arn = Some(Default::default())
    }
    if builder.registration_attachment_id.is_none() {
        builder.registration_attachment_id = Some(Default::default())
    }
    if builder.attachment_status.is_none() {
        builder.attachment_status = "no value was set".parse::<crate::types::AttachmentStatus>().ok()
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_registration_field_value_output_output_correct_errors(
    mut builder: crate::operation::delete_registration_field_value::builders::DeleteRegistrationFieldValueOutputBuilder,
) -> crate::operation::delete_registration_field_value::builders::DeleteRegistrationFieldValueOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    if builder.field_path.is_none() {
        builder.field_path = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_verified_destination_number_output_output_correct_errors(
    mut builder: crate::operation::delete_verified_destination_number::builders::DeleteVerifiedDestinationNumberOutputBuilder,
) -> crate::operation::delete_verified_destination_number::builders::DeleteVerifiedDestinationNumberOutputBuilder {
    if builder.verified_destination_number_arn.is_none() {
        builder.verified_destination_number_arn = Some(Default::default())
    }
    if builder.verified_destination_number_id.is_none() {
        builder.verified_destination_number_id = Some(Default::default())
    }
    if builder.destination_phone_number.is_none() {
        builder.destination_phone_number = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_registration_attachments_output_output_correct_errors(
    mut builder: crate::operation::describe_registration_attachments::builders::DescribeRegistrationAttachmentsOutputBuilder,
) -> crate::operation::describe_registration_attachments::builders::DescribeRegistrationAttachmentsOutputBuilder {
    if builder.registration_attachments.is_none() {
        builder.registration_attachments = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_registration_field_definitions_output_output_correct_errors(
    mut builder: crate::operation::describe_registration_field_definitions::builders::DescribeRegistrationFieldDefinitionsOutputBuilder,
) -> crate::operation::describe_registration_field_definitions::builders::DescribeRegistrationFieldDefinitionsOutputBuilder {
    if builder.registration_type.is_none() {
        builder.registration_type = Some(Default::default())
    }
    if builder.registration_field_definitions.is_none() {
        builder.registration_field_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_registration_field_values_output_output_correct_errors(
    mut builder: crate::operation::describe_registration_field_values::builders::DescribeRegistrationFieldValuesOutputBuilder,
) -> crate::operation::describe_registration_field_values::builders::DescribeRegistrationFieldValuesOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    if builder.registration_field_values.is_none() {
        builder.registration_field_values = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_registration_section_definitions_output_output_correct_errors(
    mut builder: crate::operation::describe_registration_section_definitions::builders::DescribeRegistrationSectionDefinitionsOutputBuilder,
) -> crate::operation::describe_registration_section_definitions::builders::DescribeRegistrationSectionDefinitionsOutputBuilder {
    if builder.registration_type.is_none() {
        builder.registration_type = Some(Default::default())
    }
    if builder.registration_section_definitions.is_none() {
        builder.registration_section_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_registration_type_definitions_output_output_correct_errors(
    mut builder: crate::operation::describe_registration_type_definitions::builders::DescribeRegistrationTypeDefinitionsOutputBuilder,
) -> crate::operation::describe_registration_type_definitions::builders::DescribeRegistrationTypeDefinitionsOutputBuilder {
    if builder.registration_type_definitions.is_none() {
        builder.registration_type_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_registration_versions_output_output_correct_errors(
    mut builder: crate::operation::describe_registration_versions::builders::DescribeRegistrationVersionsOutputBuilder,
) -> crate::operation::describe_registration_versions::builders::DescribeRegistrationVersionsOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_versions.is_none() {
        builder.registration_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_registrations_output_output_correct_errors(
    mut builder: crate::operation::describe_registrations::builders::DescribeRegistrationsOutputBuilder,
) -> crate::operation::describe_registrations::builders::DescribeRegistrationsOutputBuilder {
    if builder.registrations.is_none() {
        builder.registrations = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_verified_destination_numbers_output_output_correct_errors(
    mut builder: crate::operation::describe_verified_destination_numbers::builders::DescribeVerifiedDestinationNumbersOutputBuilder,
) -> crate::operation::describe_verified_destination_numbers::builders::DescribeVerifiedDestinationNumbersOutputBuilder {
    if builder.verified_destination_numbers.is_none() {
        builder.verified_destination_numbers = Some(Default::default())
    }
    builder
}

pub(crate) fn discard_registration_version_output_output_correct_errors(
    mut builder: crate::operation::discard_registration_version::builders::DiscardRegistrationVersionOutputBuilder,
) -> crate::operation::discard_registration_version::builders::DiscardRegistrationVersionOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    if builder.registration_version_status.is_none() {
        builder.registration_version_status = "no value was set".parse::<crate::types::RegistrationVersionStatus>().ok()
    }
    if builder.registration_version_status_history.is_none() {
        builder.registration_version_status_history = {
            let builder = crate::types::builders::RegistrationVersionStatusHistoryBuilder::default();
            crate::serde_util::registration_version_status_history_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn list_registration_associations_output_output_correct_errors(
    mut builder: crate::operation::list_registration_associations::builders::ListRegistrationAssociationsOutputBuilder,
) -> crate::operation::list_registration_associations::builders::ListRegistrationAssociationsOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_type.is_none() {
        builder.registration_type = Some(Default::default())
    }
    if builder.registration_associations.is_none() {
        builder.registration_associations = Some(Default::default())
    }
    builder
}

pub(crate) fn put_registration_field_value_output_output_correct_errors(
    mut builder: crate::operation::put_registration_field_value::builders::PutRegistrationFieldValueOutputBuilder,
) -> crate::operation::put_registration_field_value::builders::PutRegistrationFieldValueOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    if builder.field_path.is_none() {
        builder.field_path = Some(Default::default())
    }
    builder
}

pub(crate) fn release_sender_id_output_output_correct_errors(
    mut builder: crate::operation::release_sender_id::builders::ReleaseSenderIdOutputBuilder,
) -> crate::operation::release_sender_id::builders::ReleaseSenderIdOutputBuilder {
    if builder.sender_id_arn.is_none() {
        builder.sender_id_arn = Some(Default::default())
    }
    if builder.sender_id.is_none() {
        builder.sender_id = Some(Default::default())
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.message_types.is_none() {
        builder.message_types = Some(Default::default())
    }
    if builder.monthly_leasing_price.is_none() {
        builder.monthly_leasing_price = Some(Default::default())
    }
    if builder.registered.is_none() {
        builder.registered = Some(Default::default())
    }
    builder
}

pub(crate) fn request_sender_id_output_output_correct_errors(
    mut builder: crate::operation::request_sender_id::builders::RequestSenderIdOutputBuilder,
) -> crate::operation::request_sender_id::builders::RequestSenderIdOutputBuilder {
    if builder.sender_id_arn.is_none() {
        builder.sender_id_arn = Some(Default::default())
    }
    if builder.sender_id.is_none() {
        builder.sender_id = Some(Default::default())
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.message_types.is_none() {
        builder.message_types = Some(Default::default())
    }
    if builder.monthly_leasing_price.is_none() {
        builder.monthly_leasing_price = Some(Default::default())
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    if builder.registered.is_none() {
        builder.registered = Some(Default::default())
    }
    builder
}

pub(crate) fn send_destination_number_verification_code_output_output_correct_errors(
    mut builder: crate::operation::send_destination_number_verification_code::builders::SendDestinationNumberVerificationCodeOutputBuilder,
) -> crate::operation::send_destination_number_verification_code::builders::SendDestinationNumberVerificationCodeOutputBuilder {
    if builder.message_id.is_none() {
        builder.message_id = Some(Default::default())
    }
    builder
}

pub(crate) fn submit_registration_version_output_output_correct_errors(
    mut builder: crate::operation::submit_registration_version::builders::SubmitRegistrationVersionOutputBuilder,
) -> crate::operation::submit_registration_version::builders::SubmitRegistrationVersionOutputBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    if builder.registration_version_status.is_none() {
        builder.registration_version_status = "no value was set".parse::<crate::types::RegistrationVersionStatus>().ok()
    }
    if builder.registration_version_status_history.is_none() {
        builder.registration_version_status_history = {
            let builder = crate::types::builders::RegistrationVersionStatusHistoryBuilder::default();
            crate::serde_util::registration_version_status_history_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn update_sender_id_output_output_correct_errors(
    mut builder: crate::operation::update_sender_id::builders::UpdateSenderIdOutputBuilder,
) -> crate::operation::update_sender_id::builders::UpdateSenderIdOutputBuilder {
    if builder.sender_id_arn.is_none() {
        builder.sender_id_arn = Some(Default::default())
    }
    if builder.sender_id.is_none() {
        builder.sender_id = Some(Default::default())
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.message_types.is_none() {
        builder.message_types = Some(Default::default())
    }
    if builder.monthly_leasing_price.is_none() {
        builder.monthly_leasing_price = Some(Default::default())
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    if builder.registered.is_none() {
        builder.registered = Some(Default::default())
    }
    builder
}

pub(crate) fn verify_destination_number_output_output_correct_errors(
    mut builder: crate::operation::verify_destination_number::builders::VerifyDestinationNumberOutputBuilder,
) -> crate::operation::verify_destination_number::builders::VerifyDestinationNumberOutputBuilder {
    if builder.verified_destination_number_arn.is_none() {
        builder.verified_destination_number_arn = Some(Default::default())
    }
    if builder.verified_destination_number_id.is_none() {
        builder.verified_destination_number_id = Some(Default::default())
    }
    if builder.destination_phone_number.is_none() {
        builder.destination_phone_number = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VerificationStatus>().ok()
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn registration_version_status_history_correct_errors(
    mut builder: crate::types::builders::RegistrationVersionStatusHistoryBuilder,
) -> crate::types::builders::RegistrationVersionStatusHistoryBuilder {
    if builder.draft_timestamp.is_none() {
        builder.draft_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn event_destination_correct_errors(
    mut builder: crate::types::builders::EventDestinationBuilder,
) -> crate::types::builders::EventDestinationBuilder {
    if builder.event_destination_name.is_none() {
        builder.event_destination_name = Some(Default::default())
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.matching_event_types.is_none() {
        builder.matching_event_types = Some(Default::default())
    }
    builder
}

pub(crate) fn account_attribute_correct_errors(
    mut builder: crate::types::builders::AccountAttributeBuilder,
) -> crate::types::builders::AccountAttributeBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::AccountAttributeName>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn account_limit_correct_errors(mut builder: crate::types::builders::AccountLimitBuilder) -> crate::types::builders::AccountLimitBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::AccountLimitName>().ok()
    }
    if builder.used.is_none() {
        builder.used = Some(Default::default())
    }
    if builder.max.is_none() {
        builder.max = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_logs_destination_correct_errors(
    mut builder: crate::types::builders::CloudWatchLogsDestinationBuilder,
) -> crate::types::builders::CloudWatchLogsDestinationBuilder {
    if builder.iam_role_arn.is_none() {
        builder.iam_role_arn = Some(Default::default())
    }
    if builder.log_group_arn.is_none() {
        builder.log_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_set_information_correct_errors(
    mut builder: crate::types::builders::ConfigurationSetInformationBuilder,
) -> crate::types::builders::ConfigurationSetInformationBuilder {
    if builder.configuration_set_arn.is_none() {
        builder.configuration_set_arn = Some(Default::default())
    }
    if builder.configuration_set_name.is_none() {
        builder.configuration_set_name = Some(Default::default())
    }
    if builder.event_destinations.is_none() {
        builder.event_destinations = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn keyword_information_correct_errors(
    mut builder: crate::types::builders::KeywordInformationBuilder,
) -> crate::types::builders::KeywordInformationBuilder {
    if builder.keyword.is_none() {
        builder.keyword = Some(Default::default())
    }
    if builder.keyword_message.is_none() {
        builder.keyword_message = Some(Default::default())
    }
    if builder.keyword_action.is_none() {
        builder.keyword_action = "no value was set".parse::<crate::types::KeywordAction>().ok()
    }
    builder
}

pub(crate) fn kinesis_firehose_destination_correct_errors(
    mut builder: crate::types::builders::KinesisFirehoseDestinationBuilder,
) -> crate::types::builders::KinesisFirehoseDestinationBuilder {
    if builder.iam_role_arn.is_none() {
        builder.iam_role_arn = Some(Default::default())
    }
    if builder.delivery_stream_arn.is_none() {
        builder.delivery_stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn opt_out_list_information_correct_errors(
    mut builder: crate::types::builders::OptOutListInformationBuilder,
) -> crate::types::builders::OptOutListInformationBuilder {
    if builder.opt_out_list_arn.is_none() {
        builder.opt_out_list_arn = Some(Default::default())
    }
    if builder.opt_out_list_name.is_none() {
        builder.opt_out_list_name = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn opted_out_number_information_correct_errors(
    mut builder: crate::types::builders::OptedOutNumberInformationBuilder,
) -> crate::types::builders::OptedOutNumberInformationBuilder {
    if builder.opted_out_number.is_none() {
        builder.opted_out_number = Some(Default::default())
    }
    if builder.opted_out_timestamp.is_none() {
        builder.opted_out_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_user_opted_out.is_none() {
        builder.end_user_opted_out = Some(Default::default())
    }
    builder
}

pub(crate) fn origination_identity_metadata_correct_errors(
    mut builder: crate::types::builders::OriginationIdentityMetadataBuilder,
) -> crate::types::builders::OriginationIdentityMetadataBuilder {
    if builder.origination_identity_arn.is_none() {
        builder.origination_identity_arn = Some(Default::default())
    }
    if builder.origination_identity.is_none() {
        builder.origination_identity = Some(Default::default())
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.number_capabilities.is_none() {
        builder.number_capabilities = Some(Default::default())
    }
    builder
}

pub(crate) fn phone_number_information_correct_errors(
    mut builder: crate::types::builders::PhoneNumberInformationBuilder,
) -> crate::types::builders::PhoneNumberInformationBuilder {
    if builder.phone_number_arn.is_none() {
        builder.phone_number_arn = Some(Default::default())
    }
    if builder.phone_number.is_none() {
        builder.phone_number = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NumberStatus>().ok()
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.message_type.is_none() {
        builder.message_type = "no value was set".parse::<crate::types::MessageType>().ok()
    }
    if builder.number_capabilities.is_none() {
        builder.number_capabilities = Some(Default::default())
    }
    if builder.number_type.is_none() {
        builder.number_type = "no value was set".parse::<crate::types::NumberType>().ok()
    }
    if builder.monthly_leasing_price.is_none() {
        builder.monthly_leasing_price = Some(Default::default())
    }
    if builder.two_way_enabled.is_none() {
        builder.two_way_enabled = Some(Default::default())
    }
    if builder.self_managed_opt_outs_enabled.is_none() {
        builder.self_managed_opt_outs_enabled = Some(Default::default())
    }
    if builder.opt_out_list_name.is_none() {
        builder.opt_out_list_name = Some(Default::default())
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn pool_information_correct_errors(
    mut builder: crate::types::builders::PoolInformationBuilder,
) -> crate::types::builders::PoolInformationBuilder {
    if builder.pool_arn.is_none() {
        builder.pool_arn = Some(Default::default())
    }
    if builder.pool_id.is_none() {
        builder.pool_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PoolStatus>().ok()
    }
    if builder.message_type.is_none() {
        builder.message_type = "no value was set".parse::<crate::types::MessageType>().ok()
    }
    if builder.two_way_enabled.is_none() {
        builder.two_way_enabled = Some(Default::default())
    }
    if builder.self_managed_opt_outs_enabled.is_none() {
        builder.self_managed_opt_outs_enabled = Some(Default::default())
    }
    if builder.opt_out_list_name.is_none() {
        builder.opt_out_list_name = Some(Default::default())
    }
    if builder.shared_routes_enabled.is_none() {
        builder.shared_routes_enabled = Some(Default::default())
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn registration_association_metadata_correct_errors(
    mut builder: crate::types::builders::RegistrationAssociationMetadataBuilder,
) -> crate::types::builders::RegistrationAssociationMetadataBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn registration_attachments_information_correct_errors(
    mut builder: crate::types::builders::RegistrationAttachmentsInformationBuilder,
) -> crate::types::builders::RegistrationAttachmentsInformationBuilder {
    if builder.registration_attachment_arn.is_none() {
        builder.registration_attachment_arn = Some(Default::default())
    }
    if builder.registration_attachment_id.is_none() {
        builder.registration_attachment_id = Some(Default::default())
    }
    if builder.attachment_status.is_none() {
        builder.attachment_status = "no value was set".parse::<crate::types::AttachmentStatus>().ok()
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn registration_field_definition_correct_errors(
    mut builder: crate::types::builders::RegistrationFieldDefinitionBuilder,
) -> crate::types::builders::RegistrationFieldDefinitionBuilder {
    if builder.section_path.is_none() {
        builder.section_path = Some(Default::default())
    }
    if builder.field_path.is_none() {
        builder.field_path = Some(Default::default())
    }
    if builder.field_type.is_none() {
        builder.field_type = "no value was set".parse::<crate::types::FieldType>().ok()
    }
    if builder.field_requirement.is_none() {
        builder.field_requirement = "no value was set".parse::<crate::types::FieldRequirement>().ok()
    }
    if builder.display_hints.is_none() {
        builder.display_hints = {
            let builder = crate::types::builders::RegistrationFieldDisplayHintsBuilder::default();
            crate::serde_util::registration_field_display_hints_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn registration_field_value_information_correct_errors(
    mut builder: crate::types::builders::RegistrationFieldValueInformationBuilder,
) -> crate::types::builders::RegistrationFieldValueInformationBuilder {
    if builder.field_path.is_none() {
        builder.field_path = Some(Default::default())
    }
    builder
}

pub(crate) fn registration_information_correct_errors(
    mut builder: crate::types::builders::RegistrationInformationBuilder,
) -> crate::types::builders::RegistrationInformationBuilder {
    if builder.registration_arn.is_none() {
        builder.registration_arn = Some(Default::default())
    }
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_type.is_none() {
        builder.registration_type = Some(Default::default())
    }
    if builder.registration_status.is_none() {
        builder.registration_status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    if builder.current_version_number.is_none() {
        builder.current_version_number = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn registration_section_definition_correct_errors(
    mut builder: crate::types::builders::RegistrationSectionDefinitionBuilder,
) -> crate::types::builders::RegistrationSectionDefinitionBuilder {
    if builder.section_path.is_none() {
        builder.section_path = Some(Default::default())
    }
    if builder.display_hints.is_none() {
        builder.display_hints = {
            let builder = crate::types::builders::RegistrationSectionDisplayHintsBuilder::default();
            crate::serde_util::registration_section_display_hints_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn registration_type_definition_correct_errors(
    mut builder: crate::types::builders::RegistrationTypeDefinitionBuilder,
) -> crate::types::builders::RegistrationTypeDefinitionBuilder {
    if builder.registration_type.is_none() {
        builder.registration_type = Some(Default::default())
    }
    if builder.display_hints.is_none() {
        builder.display_hints = {
            let builder = crate::types::builders::RegistrationTypeDisplayHintsBuilder::default();
            crate::serde_util::registration_type_display_hints_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn registration_version_information_correct_errors(
    mut builder: crate::types::builders::RegistrationVersionInformationBuilder,
) -> crate::types::builders::RegistrationVersionInformationBuilder {
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    if builder.registration_version_status.is_none() {
        builder.registration_version_status = "no value was set".parse::<crate::types::RegistrationVersionStatus>().ok()
    }
    if builder.registration_version_status_history.is_none() {
        builder.registration_version_status_history = {
            let builder = crate::types::builders::RegistrationVersionStatusHistoryBuilder::default();
            crate::serde_util::registration_version_status_history_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn sender_id_information_correct_errors(
    mut builder: crate::types::builders::SenderIdInformationBuilder,
) -> crate::types::builders::SenderIdInformationBuilder {
    if builder.sender_id_arn.is_none() {
        builder.sender_id_arn = Some(Default::default())
    }
    if builder.sender_id.is_none() {
        builder.sender_id = Some(Default::default())
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.message_types.is_none() {
        builder.message_types = Some(Default::default())
    }
    if builder.monthly_leasing_price.is_none() {
        builder.monthly_leasing_price = Some(Default::default())
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    if builder.registered.is_none() {
        builder.registered = Some(Default::default())
    }
    builder
}

pub(crate) fn sns_destination_correct_errors(
    mut builder: crate::types::builders::SnsDestinationBuilder,
) -> crate::types::builders::SnsDestinationBuilder {
    if builder.topic_arn.is_none() {
        builder.topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn spend_limit_correct_errors(mut builder: crate::types::builders::SpendLimitBuilder) -> crate::types::builders::SpendLimitBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::SpendLimitName>().ok()
    }
    if builder.enforced_limit.is_none() {
        builder.enforced_limit = Some(Default::default())
    }
    if builder.max_limit.is_none() {
        builder.max_limit = Some(Default::default())
    }
    if builder.overridden.is_none() {
        builder.overridden = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn verified_destination_number_information_correct_errors(
    mut builder: crate::types::builders::VerifiedDestinationNumberInformationBuilder,
) -> crate::types::builders::VerifiedDestinationNumberInformationBuilder {
    if builder.verified_destination_number_arn.is_none() {
        builder.verified_destination_number_arn = Some(Default::default())
    }
    if builder.verified_destination_number_id.is_none() {
        builder.verified_destination_number_id = Some(Default::default())
    }
    if builder.destination_phone_number.is_none() {
        builder.destination_phone_number = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VerificationStatus>().ok()
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn registration_field_display_hints_correct_errors(
    mut builder: crate::types::builders::RegistrationFieldDisplayHintsBuilder,
) -> crate::types::builders::RegistrationFieldDisplayHintsBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.short_description.is_none() {
        builder.short_description = Some(Default::default())
    }
    builder
}

pub(crate) fn registration_section_display_hints_correct_errors(
    mut builder: crate::types::builders::RegistrationSectionDisplayHintsBuilder,
) -> crate::types::builders::RegistrationSectionDisplayHintsBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.short_description.is_none() {
        builder.short_description = Some(Default::default())
    }
    builder
}

pub(crate) fn registration_type_display_hints_correct_errors(
    mut builder: crate::types::builders::RegistrationTypeDisplayHintsBuilder,
) -> crate::types::builders::RegistrationTypeDisplayHintsBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn select_validation_correct_errors(
    mut builder: crate::types::builders::SelectValidationBuilder,
) -> crate::types::builders::SelectValidationBuilder {
    if builder.min_choices.is_none() {
        builder.min_choices = Some(Default::default())
    }
    if builder.max_choices.is_none() {
        builder.max_choices = Some(Default::default())
    }
    if builder.options.is_none() {
        builder.options = Some(Default::default())
    }
    builder
}

pub(crate) fn text_validation_correct_errors(
    mut builder: crate::types::builders::TextValidationBuilder,
) -> crate::types::builders::TextValidationBuilder {
    if builder.min_length.is_none() {
        builder.min_length = Some(Default::default())
    }
    if builder.max_length.is_none() {
        builder.max_length = Some(Default::default())
    }
    if builder.pattern.is_none() {
        builder.pattern = Some(Default::default())
    }
    builder
}

pub(crate) fn registration_denied_reason_information_correct_errors(
    mut builder: crate::types::builders::RegistrationDeniedReasonInformationBuilder,
) -> crate::types::builders::RegistrationDeniedReasonInformationBuilder {
    if builder.reason.is_none() {
        builder.reason = Some(Default::default())
    }
    if builder.short_description.is_none() {
        builder.short_description = Some(Default::default())
    }
    builder
}

pub(crate) fn supported_association_correct_errors(
    mut builder: crate::types::builders::SupportedAssociationBuilder,
) -> crate::types::builders::SupportedAssociationBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.association_behavior.is_none() {
        builder.association_behavior = "no value was set".parse::<crate::types::RegistrationAssociationBehavior>().ok()
    }
    if builder.disassociation_behavior.is_none() {
        builder.disassociation_behavior = "no value was set".parse::<crate::types::RegistrationDisassociationBehavior>().ok()
    }
    builder
}

pub(crate) fn select_option_description_correct_errors(
    mut builder: crate::types::builders::SelectOptionDescriptionBuilder,
) -> crate::types::builders::SelectOptionDescriptionBuilder {
    if builder.option.is_none() {
        builder.option = Some(Default::default())
    }
    builder
}
