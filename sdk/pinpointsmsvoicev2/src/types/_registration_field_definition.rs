// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a description of the specified field.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegistrationFieldDefinition {
    /// <p>The section path of the field.</p>
    pub section_path: ::std::string::String,
    /// <p>The path to the registration form field. You can use <code>DescribeRegistrationFieldDefinitions</code> for a list of <b>FieldPaths</b>.</p>
    pub field_path: ::std::string::String,
    /// <p>The type of field.</p>
    pub field_type: crate::types::FieldType,
    /// <p>Specifies if the field for the registration form is required, conditional or optional.</p>
    pub field_requirement: crate::types::FieldRequirement,
    /// <p>The validation rules for a select field.</p>
    pub select_validation: ::std::option::Option<crate::types::SelectValidation>,
    /// <p>The validation rules for a text field.</p>
    pub text_validation: ::std::option::Option<crate::types::TextValidation>,
    /// <p>An array of RegistrationFieldDisplayHints objects for the field.</p>
    pub display_hints: ::std::option::Option<crate::types::RegistrationFieldDisplayHints>,
}
impl RegistrationFieldDefinition {
    /// <p>The section path of the field.</p>
    pub fn section_path(&self) -> &str {
        use std::ops::Deref;
        self.section_path.deref()
    }
    /// <p>The path to the registration form field. You can use <code>DescribeRegistrationFieldDefinitions</code> for a list of <b>FieldPaths</b>.</p>
    pub fn field_path(&self) -> &str {
        use std::ops::Deref;
        self.field_path.deref()
    }
    /// <p>The type of field.</p>
    pub fn field_type(&self) -> &crate::types::FieldType {
        &self.field_type
    }
    /// <p>Specifies if the field for the registration form is required, conditional or optional.</p>
    pub fn field_requirement(&self) -> &crate::types::FieldRequirement {
        &self.field_requirement
    }
    /// <p>The validation rules for a select field.</p>
    pub fn select_validation(&self) -> ::std::option::Option<&crate::types::SelectValidation> {
        self.select_validation.as_ref()
    }
    /// <p>The validation rules for a text field.</p>
    pub fn text_validation(&self) -> ::std::option::Option<&crate::types::TextValidation> {
        self.text_validation.as_ref()
    }
    /// <p>An array of RegistrationFieldDisplayHints objects for the field.</p>
    pub fn display_hints(&self) -> ::std::option::Option<&crate::types::RegistrationFieldDisplayHints> {
        self.display_hints.as_ref()
    }
}
impl RegistrationFieldDefinition {
    /// Creates a new builder-style object to manufacture [`RegistrationFieldDefinition`](crate::types::RegistrationFieldDefinition).
    pub fn builder() -> crate::types::builders::RegistrationFieldDefinitionBuilder {
        crate::types::builders::RegistrationFieldDefinitionBuilder::default()
    }
}

/// A builder for [`RegistrationFieldDefinition`](crate::types::RegistrationFieldDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegistrationFieldDefinitionBuilder {
    pub(crate) section_path: ::std::option::Option<::std::string::String>,
    pub(crate) field_path: ::std::option::Option<::std::string::String>,
    pub(crate) field_type: ::std::option::Option<crate::types::FieldType>,
    pub(crate) field_requirement: ::std::option::Option<crate::types::FieldRequirement>,
    pub(crate) select_validation: ::std::option::Option<crate::types::SelectValidation>,
    pub(crate) text_validation: ::std::option::Option<crate::types::TextValidation>,
    pub(crate) display_hints: ::std::option::Option<crate::types::RegistrationFieldDisplayHints>,
}
impl RegistrationFieldDefinitionBuilder {
    /// <p>The section path of the field.</p>
    /// This field is required.
    pub fn section_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.section_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The section path of the field.</p>
    pub fn set_section_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.section_path = input;
        self
    }
    /// <p>The section path of the field.</p>
    pub fn get_section_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.section_path
    }
    /// <p>The path to the registration form field. You can use <code>DescribeRegistrationFieldDefinitions</code> for a list of <b>FieldPaths</b>.</p>
    /// This field is required.
    pub fn field_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the registration form field. You can use <code>DescribeRegistrationFieldDefinitions</code> for a list of <b>FieldPaths</b>.</p>
    pub fn set_field_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_path = input;
        self
    }
    /// <p>The path to the registration form field. You can use <code>DescribeRegistrationFieldDefinitions</code> for a list of <b>FieldPaths</b>.</p>
    pub fn get_field_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_path
    }
    /// <p>The type of field.</p>
    /// This field is required.
    pub fn field_type(mut self, input: crate::types::FieldType) -> Self {
        self.field_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of field.</p>
    pub fn set_field_type(mut self, input: ::std::option::Option<crate::types::FieldType>) -> Self {
        self.field_type = input;
        self
    }
    /// <p>The type of field.</p>
    pub fn get_field_type(&self) -> &::std::option::Option<crate::types::FieldType> {
        &self.field_type
    }
    /// <p>Specifies if the field for the registration form is required, conditional or optional.</p>
    /// This field is required.
    pub fn field_requirement(mut self, input: crate::types::FieldRequirement) -> Self {
        self.field_requirement = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies if the field for the registration form is required, conditional or optional.</p>
    pub fn set_field_requirement(mut self, input: ::std::option::Option<crate::types::FieldRequirement>) -> Self {
        self.field_requirement = input;
        self
    }
    /// <p>Specifies if the field for the registration form is required, conditional or optional.</p>
    pub fn get_field_requirement(&self) -> &::std::option::Option<crate::types::FieldRequirement> {
        &self.field_requirement
    }
    /// <p>The validation rules for a select field.</p>
    pub fn select_validation(mut self, input: crate::types::SelectValidation) -> Self {
        self.select_validation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The validation rules for a select field.</p>
    pub fn set_select_validation(mut self, input: ::std::option::Option<crate::types::SelectValidation>) -> Self {
        self.select_validation = input;
        self
    }
    /// <p>The validation rules for a select field.</p>
    pub fn get_select_validation(&self) -> &::std::option::Option<crate::types::SelectValidation> {
        &self.select_validation
    }
    /// <p>The validation rules for a text field.</p>
    pub fn text_validation(mut self, input: crate::types::TextValidation) -> Self {
        self.text_validation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The validation rules for a text field.</p>
    pub fn set_text_validation(mut self, input: ::std::option::Option<crate::types::TextValidation>) -> Self {
        self.text_validation = input;
        self
    }
    /// <p>The validation rules for a text field.</p>
    pub fn get_text_validation(&self) -> &::std::option::Option<crate::types::TextValidation> {
        &self.text_validation
    }
    /// <p>An array of RegistrationFieldDisplayHints objects for the field.</p>
    /// This field is required.
    pub fn display_hints(mut self, input: crate::types::RegistrationFieldDisplayHints) -> Self {
        self.display_hints = ::std::option::Option::Some(input);
        self
    }
    /// <p>An array of RegistrationFieldDisplayHints objects for the field.</p>
    pub fn set_display_hints(mut self, input: ::std::option::Option<crate::types::RegistrationFieldDisplayHints>) -> Self {
        self.display_hints = input;
        self
    }
    /// <p>An array of RegistrationFieldDisplayHints objects for the field.</p>
    pub fn get_display_hints(&self) -> &::std::option::Option<crate::types::RegistrationFieldDisplayHints> {
        &self.display_hints
    }
    /// Consumes the builder and constructs a [`RegistrationFieldDefinition`](crate::types::RegistrationFieldDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`section_path`](crate::types::builders::RegistrationFieldDefinitionBuilder::section_path)
    /// - [`field_path`](crate::types::builders::RegistrationFieldDefinitionBuilder::field_path)
    /// - [`field_type`](crate::types::builders::RegistrationFieldDefinitionBuilder::field_type)
    /// - [`field_requirement`](crate::types::builders::RegistrationFieldDefinitionBuilder::field_requirement)
    pub fn build(self) -> ::std::result::Result<crate::types::RegistrationFieldDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RegistrationFieldDefinition {
            section_path: self.section_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "section_path",
                    "section_path was not specified but it is required when building RegistrationFieldDefinition",
                )
            })?,
            field_path: self.field_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_path",
                    "field_path was not specified but it is required when building RegistrationFieldDefinition",
                )
            })?,
            field_type: self.field_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_type",
                    "field_type was not specified but it is required when building RegistrationFieldDefinition",
                )
            })?,
            field_requirement: self.field_requirement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_requirement",
                    "field_requirement was not specified but it is required when building RegistrationFieldDefinition",
                )
            })?,
            select_validation: self.select_validation,
            text_validation: self.text_validation,
            display_hints: self.display_hints,
        })
    }
}
