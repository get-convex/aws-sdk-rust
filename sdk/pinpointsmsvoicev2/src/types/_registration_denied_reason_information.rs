// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the reason a registration was rejected.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegistrationDeniedReasonInformation {
    /// <p>The reason a registration was rejected.</p>
    pub reason: ::std::string::String,
    /// <p>A short description of the rejection reason.</p>
    pub short_description: ::std::string::String,
    /// <p>A long description of the rejection reason.</p>
    pub long_description: ::std::option::Option<::std::string::String>,
    /// <p>The title of the document.</p>
    pub documentation_title: ::std::option::Option<::std::string::String>,
    /// <p>The link to the document.</p>
    pub documentation_link: ::std::option::Option<::std::string::String>,
}
impl RegistrationDeniedReasonInformation {
    /// <p>The reason a registration was rejected.</p>
    pub fn reason(&self) -> &str {
        use std::ops::Deref;
        self.reason.deref()
    }
    /// <p>A short description of the rejection reason.</p>
    pub fn short_description(&self) -> &str {
        use std::ops::Deref;
        self.short_description.deref()
    }
    /// <p>A long description of the rejection reason.</p>
    pub fn long_description(&self) -> ::std::option::Option<&str> {
        self.long_description.as_deref()
    }
    /// <p>The title of the document.</p>
    pub fn documentation_title(&self) -> ::std::option::Option<&str> {
        self.documentation_title.as_deref()
    }
    /// <p>The link to the document.</p>
    pub fn documentation_link(&self) -> ::std::option::Option<&str> {
        self.documentation_link.as_deref()
    }
}
impl RegistrationDeniedReasonInformation {
    /// Creates a new builder-style object to manufacture [`RegistrationDeniedReasonInformation`](crate::types::RegistrationDeniedReasonInformation).
    pub fn builder() -> crate::types::builders::RegistrationDeniedReasonInformationBuilder {
        crate::types::builders::RegistrationDeniedReasonInformationBuilder::default()
    }
}

/// A builder for [`RegistrationDeniedReasonInformation`](crate::types::RegistrationDeniedReasonInformation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegistrationDeniedReasonInformationBuilder {
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) short_description: ::std::option::Option<::std::string::String>,
    pub(crate) long_description: ::std::option::Option<::std::string::String>,
    pub(crate) documentation_title: ::std::option::Option<::std::string::String>,
    pub(crate) documentation_link: ::std::option::Option<::std::string::String>,
}
impl RegistrationDeniedReasonInformationBuilder {
    /// <p>The reason a registration was rejected.</p>
    /// This field is required.
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason a registration was rejected.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason a registration was rejected.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>A short description of the rejection reason.</p>
    /// This field is required.
    pub fn short_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.short_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short description of the rejection reason.</p>
    pub fn set_short_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.short_description = input;
        self
    }
    /// <p>A short description of the rejection reason.</p>
    pub fn get_short_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.short_description
    }
    /// <p>A long description of the rejection reason.</p>
    pub fn long_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.long_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A long description of the rejection reason.</p>
    pub fn set_long_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.long_description = input;
        self
    }
    /// <p>A long description of the rejection reason.</p>
    pub fn get_long_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.long_description
    }
    /// <p>The title of the document.</p>
    pub fn documentation_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documentation_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the document.</p>
    pub fn set_documentation_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documentation_title = input;
        self
    }
    /// <p>The title of the document.</p>
    pub fn get_documentation_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.documentation_title
    }
    /// <p>The link to the document.</p>
    pub fn documentation_link(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documentation_link = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The link to the document.</p>
    pub fn set_documentation_link(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documentation_link = input;
        self
    }
    /// <p>The link to the document.</p>
    pub fn get_documentation_link(&self) -> &::std::option::Option<::std::string::String> {
        &self.documentation_link
    }
    /// Consumes the builder and constructs a [`RegistrationDeniedReasonInformation`](crate::types::RegistrationDeniedReasonInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`reason`](crate::types::builders::RegistrationDeniedReasonInformationBuilder::reason)
    /// - [`short_description`](crate::types::builders::RegistrationDeniedReasonInformationBuilder::short_description)
    pub fn build(self) -> ::std::result::Result<crate::types::RegistrationDeniedReasonInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RegistrationDeniedReasonInformation {
            reason: self.reason.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "reason",
                    "reason was not specified but it is required when building RegistrationDeniedReasonInformation",
                )
            })?,
            short_description: self.short_description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "short_description",
                    "short_description was not specified but it is required when building RegistrationDeniedReasonInformation",
                )
            })?,
            long_description: self.long_description,
            documentation_title: self.documentation_title,
            documentation_link: self.documentation_link,
        })
    }
}
