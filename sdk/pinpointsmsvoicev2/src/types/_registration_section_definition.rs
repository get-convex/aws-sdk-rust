// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information on the specified section definition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegistrationSectionDefinition {
    /// <p>The path to the section of the registration.</p>
    pub section_path: ::std::string::String,
    /// <p>The path to the section of the registration.</p>
    pub display_hints: ::std::option::Option<crate::types::RegistrationSectionDisplayHints>,
}
impl RegistrationSectionDefinition {
    /// <p>The path to the section of the registration.</p>
    pub fn section_path(&self) -> &str {
        use std::ops::Deref;
        self.section_path.deref()
    }
    /// <p>The path to the section of the registration.</p>
    pub fn display_hints(&self) -> ::std::option::Option<&crate::types::RegistrationSectionDisplayHints> {
        self.display_hints.as_ref()
    }
}
impl RegistrationSectionDefinition {
    /// Creates a new builder-style object to manufacture [`RegistrationSectionDefinition`](crate::types::RegistrationSectionDefinition).
    pub fn builder() -> crate::types::builders::RegistrationSectionDefinitionBuilder {
        crate::types::builders::RegistrationSectionDefinitionBuilder::default()
    }
}

/// A builder for [`RegistrationSectionDefinition`](crate::types::RegistrationSectionDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegistrationSectionDefinitionBuilder {
    pub(crate) section_path: ::std::option::Option<::std::string::String>,
    pub(crate) display_hints: ::std::option::Option<crate::types::RegistrationSectionDisplayHints>,
}
impl RegistrationSectionDefinitionBuilder {
    /// <p>The path to the section of the registration.</p>
    /// This field is required.
    pub fn section_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.section_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the section of the registration.</p>
    pub fn set_section_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.section_path = input;
        self
    }
    /// <p>The path to the section of the registration.</p>
    pub fn get_section_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.section_path
    }
    /// <p>The path to the section of the registration.</p>
    /// This field is required.
    pub fn display_hints(mut self, input: crate::types::RegistrationSectionDisplayHints) -> Self {
        self.display_hints = ::std::option::Option::Some(input);
        self
    }
    /// <p>The path to the section of the registration.</p>
    pub fn set_display_hints(mut self, input: ::std::option::Option<crate::types::RegistrationSectionDisplayHints>) -> Self {
        self.display_hints = input;
        self
    }
    /// <p>The path to the section of the registration.</p>
    pub fn get_display_hints(&self) -> &::std::option::Option<crate::types::RegistrationSectionDisplayHints> {
        &self.display_hints
    }
    /// Consumes the builder and constructs a [`RegistrationSectionDefinition`](crate::types::RegistrationSectionDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`section_path`](crate::types::builders::RegistrationSectionDefinitionBuilder::section_path)
    pub fn build(self) -> ::std::result::Result<crate::types::RegistrationSectionDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RegistrationSectionDefinition {
            section_path: self.section_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "section_path",
                    "section_path was not specified but it is required when building RegistrationSectionDefinition",
                )
            })?,
            display_hints: self.display_hints,
        })
    }
}
