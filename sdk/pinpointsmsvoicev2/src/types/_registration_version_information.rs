// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the specified version of the registration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegistrationVersionInformation {
    /// <p>The version number of the registration.</p>
    pub version_number: i64,
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    pub registration_version_status: crate::types::RegistrationVersionStatus,
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    pub registration_version_status_history: ::std::option::Option<crate::types::RegistrationVersionStatusHistory>,
    /// <p>An array of RegistrationDeniedReasonInformation objects.</p>
    pub denied_reasons: ::std::option::Option<::std::vec::Vec<crate::types::RegistrationDeniedReasonInformation>>,
}
impl RegistrationVersionInformation {
    /// <p>The version number of the registration.</p>
    pub fn version_number(&self) -> i64 {
        self.version_number
    }
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    pub fn registration_version_status(&self) -> &crate::types::RegistrationVersionStatus {
        &self.registration_version_status
    }
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    pub fn registration_version_status_history(&self) -> ::std::option::Option<&crate::types::RegistrationVersionStatusHistory> {
        self.registration_version_status_history.as_ref()
    }
    /// <p>An array of RegistrationDeniedReasonInformation objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.denied_reasons.is_none()`.
    pub fn denied_reasons(&self) -> &[crate::types::RegistrationDeniedReasonInformation] {
        self.denied_reasons.as_deref().unwrap_or_default()
    }
}
impl RegistrationVersionInformation {
    /// Creates a new builder-style object to manufacture [`RegistrationVersionInformation`](crate::types::RegistrationVersionInformation).
    pub fn builder() -> crate::types::builders::RegistrationVersionInformationBuilder {
        crate::types::builders::RegistrationVersionInformationBuilder::default()
    }
}

/// A builder for [`RegistrationVersionInformation`](crate::types::RegistrationVersionInformation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegistrationVersionInformationBuilder {
    pub(crate) version_number: ::std::option::Option<i64>,
    pub(crate) registration_version_status: ::std::option::Option<crate::types::RegistrationVersionStatus>,
    pub(crate) registration_version_status_history: ::std::option::Option<crate::types::RegistrationVersionStatusHistory>,
    pub(crate) denied_reasons: ::std::option::Option<::std::vec::Vec<crate::types::RegistrationDeniedReasonInformation>>,
}
impl RegistrationVersionInformationBuilder {
    /// <p>The version number of the registration.</p>
    /// This field is required.
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the registration.</p>
    pub fn set_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The version number of the registration.</p>
    pub fn get_version_number(&self) -> &::std::option::Option<i64> {
        &self.version_number
    }
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    /// This field is required.
    pub fn registration_version_status(mut self, input: crate::types::RegistrationVersionStatus) -> Self {
        self.registration_version_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    pub fn set_registration_version_status(mut self, input: ::std::option::Option<crate::types::RegistrationVersionStatus>) -> Self {
        self.registration_version_status = input;
        self
    }
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    pub fn get_registration_version_status(&self) -> &::std::option::Option<crate::types::RegistrationVersionStatus> {
        &self.registration_version_status
    }
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    /// This field is required.
    pub fn registration_version_status_history(mut self, input: crate::types::RegistrationVersionStatusHistory) -> Self {
        self.registration_version_status_history = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    pub fn set_registration_version_status_history(mut self, input: ::std::option::Option<crate::types::RegistrationVersionStatusHistory>) -> Self {
        self.registration_version_status_history = input;
        self
    }
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    pub fn get_registration_version_status_history(&self) -> &::std::option::Option<crate::types::RegistrationVersionStatusHistory> {
        &self.registration_version_status_history
    }
    /// Appends an item to `denied_reasons`.
    ///
    /// To override the contents of this collection use [`set_denied_reasons`](Self::set_denied_reasons).
    ///
    /// <p>An array of RegistrationDeniedReasonInformation objects.</p>
    pub fn denied_reasons(mut self, input: crate::types::RegistrationDeniedReasonInformation) -> Self {
        let mut v = self.denied_reasons.unwrap_or_default();
        v.push(input);
        self.denied_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of RegistrationDeniedReasonInformation objects.</p>
    pub fn set_denied_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RegistrationDeniedReasonInformation>>) -> Self {
        self.denied_reasons = input;
        self
    }
    /// <p>An array of RegistrationDeniedReasonInformation objects.</p>
    pub fn get_denied_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RegistrationDeniedReasonInformation>> {
        &self.denied_reasons
    }
    /// Consumes the builder and constructs a [`RegistrationVersionInformation`](crate::types::RegistrationVersionInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`version_number`](crate::types::builders::RegistrationVersionInformationBuilder::version_number)
    /// - [`registration_version_status`](crate::types::builders::RegistrationVersionInformationBuilder::registration_version_status)
    pub fn build(self) -> ::std::result::Result<crate::types::RegistrationVersionInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RegistrationVersionInformation {
            version_number: self.version_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_number",
                    "version_number was not specified but it is required when building RegistrationVersionInformation",
                )
            })?,
            registration_version_status: self.registration_version_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_version_status",
                    "registration_version_status was not specified but it is required when building RegistrationVersionInformation",
                )
            })?,
            registration_version_status_history: self.registration_version_status_history,
            denied_reasons: self.denied_reasons,
        })
    }
}
