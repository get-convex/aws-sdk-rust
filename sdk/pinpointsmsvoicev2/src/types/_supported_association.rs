// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The processing rules for when a registration can be associated with an origination identity and disassociated from an origination identity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SupportedAssociation {
    /// <p>Defines the behavior of when an origination identity and registration can be associated with each other.</p>
    pub resource_type: ::std::string::String,
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub iso_country_code: ::std::option::Option<::std::string::String>,
    /// <p>The association behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>ASSOCIATE_BEFORE_SUBMIT</code> The origination identity has to be supplied when creating a registration.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_ON_APPROVAL</code> This applies to all short code registrations. The short code will be automatically provisioned once the registration is approved.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_AFTER_COMPLETE</code> This applies to phone number registrations when you must complete a registration first, then associate one or more phone numbers later. For example 10DLC campaigns and long codes.</p></li>
    /// </ul>
    pub association_behavior: crate::types::RegistrationAssociationBehavior,
    /// <p>The disassociation behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_CLOSES_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be closed.</p></li>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_ALLOWS_DELETE_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_REGISTRATION_DISASSOCIATES</code> The registration can be deleted and all origination identities will be disasscoiated.</p></li>
    /// </ul>
    pub disassociation_behavior: crate::types::RegistrationDisassociationBehavior,
}
impl SupportedAssociation {
    /// <p>Defines the behavior of when an origination identity and registration can be associated with each other.</p>
    pub fn resource_type(&self) -> &str {
        use std::ops::Deref;
        self.resource_type.deref()
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub fn iso_country_code(&self) -> ::std::option::Option<&str> {
        self.iso_country_code.as_deref()
    }
    /// <p>The association behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>ASSOCIATE_BEFORE_SUBMIT</code> The origination identity has to be supplied when creating a registration.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_ON_APPROVAL</code> This applies to all short code registrations. The short code will be automatically provisioned once the registration is approved.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_AFTER_COMPLETE</code> This applies to phone number registrations when you must complete a registration first, then associate one or more phone numbers later. For example 10DLC campaigns and long codes.</p></li>
    /// </ul>
    pub fn association_behavior(&self) -> &crate::types::RegistrationAssociationBehavior {
        &self.association_behavior
    }
    /// <p>The disassociation behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_CLOSES_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be closed.</p></li>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_ALLOWS_DELETE_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_REGISTRATION_DISASSOCIATES</code> The registration can be deleted and all origination identities will be disasscoiated.</p></li>
    /// </ul>
    pub fn disassociation_behavior(&self) -> &crate::types::RegistrationDisassociationBehavior {
        &self.disassociation_behavior
    }
}
impl SupportedAssociation {
    /// Creates a new builder-style object to manufacture [`SupportedAssociation`](crate::types::SupportedAssociation).
    pub fn builder() -> crate::types::builders::SupportedAssociationBuilder {
        crate::types::builders::SupportedAssociationBuilder::default()
    }
}

/// A builder for [`SupportedAssociation`](crate::types::SupportedAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SupportedAssociationBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) iso_country_code: ::std::option::Option<::std::string::String>,
    pub(crate) association_behavior: ::std::option::Option<crate::types::RegistrationAssociationBehavior>,
    pub(crate) disassociation_behavior: ::std::option::Option<crate::types::RegistrationDisassociationBehavior>,
}
impl SupportedAssociationBuilder {
    /// <p>Defines the behavior of when an origination identity and registration can be associated with each other.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the behavior of when an origination identity and registration can be associated with each other.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Defines the behavior of when an origination identity and registration can be associated with each other.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub fn iso_country_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iso_country_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub fn set_iso_country_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iso_country_code = input;
        self
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub fn get_iso_country_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.iso_country_code
    }
    /// <p>The association behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>ASSOCIATE_BEFORE_SUBMIT</code> The origination identity has to be supplied when creating a registration.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_ON_APPROVAL</code> This applies to all short code registrations. The short code will be automatically provisioned once the registration is approved.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_AFTER_COMPLETE</code> This applies to phone number registrations when you must complete a registration first, then associate one or more phone numbers later. For example 10DLC campaigns and long codes.</p></li>
    /// </ul>
    /// This field is required.
    pub fn association_behavior(mut self, input: crate::types::RegistrationAssociationBehavior) -> Self {
        self.association_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The association behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>ASSOCIATE_BEFORE_SUBMIT</code> The origination identity has to be supplied when creating a registration.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_ON_APPROVAL</code> This applies to all short code registrations. The short code will be automatically provisioned once the registration is approved.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_AFTER_COMPLETE</code> This applies to phone number registrations when you must complete a registration first, then associate one or more phone numbers later. For example 10DLC campaigns and long codes.</p></li>
    /// </ul>
    pub fn set_association_behavior(mut self, input: ::std::option::Option<crate::types::RegistrationAssociationBehavior>) -> Self {
        self.association_behavior = input;
        self
    }
    /// <p>The association behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>ASSOCIATE_BEFORE_SUBMIT</code> The origination identity has to be supplied when creating a registration.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_ON_APPROVAL</code> This applies to all short code registrations. The short code will be automatically provisioned once the registration is approved.</p></li>
    /// <li>
    /// <p><code>ASSOCIATE_AFTER_COMPLETE</code> This applies to phone number registrations when you must complete a registration first, then associate one or more phone numbers later. For example 10DLC campaigns and long codes.</p></li>
    /// </ul>
    pub fn get_association_behavior(&self) -> &::std::option::Option<crate::types::RegistrationAssociationBehavior> {
        &self.association_behavior
    }
    /// <p>The disassociation behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_CLOSES_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be closed.</p></li>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_ALLOWS_DELETE_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_REGISTRATION_DISASSOCIATES</code> The registration can be deleted and all origination identities will be disasscoiated.</p></li>
    /// </ul>
    /// This field is required.
    pub fn disassociation_behavior(mut self, input: crate::types::RegistrationDisassociationBehavior) -> Self {
        self.disassociation_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The disassociation behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_CLOSES_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be closed.</p></li>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_ALLOWS_DELETE_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_REGISTRATION_DISASSOCIATES</code> The registration can be deleted and all origination identities will be disasscoiated.</p></li>
    /// </ul>
    pub fn set_disassociation_behavior(mut self, input: ::std::option::Option<crate::types::RegistrationDisassociationBehavior>) -> Self {
        self.disassociation_behavior = input;
        self
    }
    /// <p>The disassociation behavior.</p>
    /// <ul>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_CLOSES_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be closed.</p></li>
    /// <li>
    /// <p><code>DISASSOCIATE_ALL_ALLOWS_DELETE_REGISTRATION</code> All origination identities must be disassociated from the registration before the registration can be deleted.</p></li>
    /// <li>
    /// <p><code>DELETE_REGISTRATION_DISASSOCIATES</code> The registration can be deleted and all origination identities will be disasscoiated.</p></li>
    /// </ul>
    pub fn get_disassociation_behavior(&self) -> &::std::option::Option<crate::types::RegistrationDisassociationBehavior> {
        &self.disassociation_behavior
    }
    /// Consumes the builder and constructs a [`SupportedAssociation`](crate::types::SupportedAssociation).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource_type`](crate::types::builders::SupportedAssociationBuilder::resource_type)
    /// - [`association_behavior`](crate::types::builders::SupportedAssociationBuilder::association_behavior)
    /// - [`disassociation_behavior`](crate::types::builders::SupportedAssociationBuilder::disassociation_behavior)
    pub fn build(self) -> ::std::result::Result<crate::types::SupportedAssociation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SupportedAssociation {
            resource_type: self.resource_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_type",
                    "resource_type was not specified but it is required when building SupportedAssociation",
                )
            })?,
            iso_country_code: self.iso_country_code,
            association_behavior: self.association_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "association_behavior",
                    "association_behavior was not specified but it is required when building SupportedAssociation",
                )
            })?,
            disassociation_behavior: self.disassociation_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "disassociation_behavior",
                    "disassociation_behavior was not specified but it is required when building SupportedAssociation",
                )
            })?,
        })
    }
}
