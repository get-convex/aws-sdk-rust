// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_destination_number_verification_code_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_destination_number_verification_code::SendDestinationNumberVerificationCodeInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.verified_destination_number_id {
        object.key("VerifiedDestinationNumberId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.verification_channel {
        object.key("VerificationChannel").string(var_2.as_str());
    }
    if let Some(var_3) = &input.language_code {
        object.key("LanguageCode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_4.as_str());
    }
    if let Some(var_5) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.context {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Context").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.destination_country_parameters {
        #[allow(unused_mut)]
        let mut object_11 = object.key("DestinationCountryParameters").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
