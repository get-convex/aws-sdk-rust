// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeVerifiedDestinationNumbersInput {
    /// <p>An array of VerifiedDestinationNumberid to retreive.</p>
    pub verified_destination_number_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An array of verified destination phone number, in E.164 format.</p>
    pub destination_phone_numbers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An array of VerifiedDestinationNumberFilter objects to filter the results.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedDestinationNumberFilter>>,
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per each request.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl DescribeVerifiedDestinationNumbersInput {
    /// <p>An array of VerifiedDestinationNumberid to retreive.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.verified_destination_number_ids.is_none()`.
    pub fn verified_destination_number_ids(&self) -> &[::std::string::String] {
        self.verified_destination_number_ids.as_deref().unwrap_or_default()
    }
    /// <p>An array of verified destination phone number, in E.164 format.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_phone_numbers.is_none()`.
    pub fn destination_phone_numbers(&self) -> &[::std::string::String] {
        self.destination_phone_numbers.as_deref().unwrap_or_default()
    }
    /// <p>An array of VerifiedDestinationNumberFilter objects to filter the results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::VerifiedDestinationNumberFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl DescribeVerifiedDestinationNumbersInput {
    /// Creates a new builder-style object to manufacture [`DescribeVerifiedDestinationNumbersInput`](crate::operation::describe_verified_destination_numbers::DescribeVerifiedDestinationNumbersInput).
    pub fn builder() -> crate::operation::describe_verified_destination_numbers::builders::DescribeVerifiedDestinationNumbersInputBuilder {
        crate::operation::describe_verified_destination_numbers::builders::DescribeVerifiedDestinationNumbersInputBuilder::default()
    }
}

/// A builder for [`DescribeVerifiedDestinationNumbersInput`](crate::operation::describe_verified_destination_numbers::DescribeVerifiedDestinationNumbersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeVerifiedDestinationNumbersInputBuilder {
    pub(crate) verified_destination_number_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) destination_phone_numbers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedDestinationNumberFilter>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl DescribeVerifiedDestinationNumbersInputBuilder {
    /// Appends an item to `verified_destination_number_ids`.
    ///
    /// To override the contents of this collection use [`set_verified_destination_number_ids`](Self::set_verified_destination_number_ids).
    ///
    /// <p>An array of VerifiedDestinationNumberid to retreive.</p>
    pub fn verified_destination_number_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.verified_destination_number_ids.unwrap_or_default();
        v.push(input.into());
        self.verified_destination_number_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of VerifiedDestinationNumberid to retreive.</p>
    pub fn set_verified_destination_number_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.verified_destination_number_ids = input;
        self
    }
    /// <p>An array of VerifiedDestinationNumberid to retreive.</p>
    pub fn get_verified_destination_number_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.verified_destination_number_ids
    }
    /// Appends an item to `destination_phone_numbers`.
    ///
    /// To override the contents of this collection use [`set_destination_phone_numbers`](Self::set_destination_phone_numbers).
    ///
    /// <p>An array of verified destination phone number, in E.164 format.</p>
    pub fn destination_phone_numbers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.destination_phone_numbers.unwrap_or_default();
        v.push(input.into());
        self.destination_phone_numbers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of verified destination phone number, in E.164 format.</p>
    pub fn set_destination_phone_numbers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.destination_phone_numbers = input;
        self
    }
    /// <p>An array of verified destination phone number, in E.164 format.</p>
    pub fn get_destination_phone_numbers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.destination_phone_numbers
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>An array of VerifiedDestinationNumberFilter objects to filter the results.</p>
    pub fn filters(mut self, input: crate::types::VerifiedDestinationNumberFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of VerifiedDestinationNumberFilter objects to filter the results.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VerifiedDestinationNumberFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>An array of VerifiedDestinationNumberFilter objects to filter the results.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VerifiedDestinationNumberFilter>> {
        &self.filters
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`DescribeVerifiedDestinationNumbersInput`](crate::operation::describe_verified_destination_numbers::DescribeVerifiedDestinationNumbersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_verified_destination_numbers::DescribeVerifiedDestinationNumbersInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_verified_destination_numbers::DescribeVerifiedDestinationNumbersInput {
                verified_destination_number_ids: self.verified_destination_number_ids,
                destination_phone_numbers: self.destination_phone_numbers,
                filters: self.filters,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
