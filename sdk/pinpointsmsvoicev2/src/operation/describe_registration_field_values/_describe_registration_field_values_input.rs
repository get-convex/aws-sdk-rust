// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeRegistrationFieldValuesInput {
    /// <p>The unique identifier for the registration.</p>
    pub registration_id: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the registration.</p>
    pub version_number: ::std::option::Option<i64>,
    /// <p>The path to the section of the registration.</p>
    pub section_path: ::std::option::Option<::std::string::String>,
    /// <p>An array of paths to the registration form field.</p>
    pub field_paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per each request.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl DescribeRegistrationFieldValuesInput {
    /// <p>The unique identifier for the registration.</p>
    pub fn registration_id(&self) -> ::std::option::Option<&str> {
        self.registration_id.as_deref()
    }
    /// <p>The version number of the registration.</p>
    pub fn version_number(&self) -> ::std::option::Option<i64> {
        self.version_number
    }
    /// <p>The path to the section of the registration.</p>
    pub fn section_path(&self) -> ::std::option::Option<&str> {
        self.section_path.as_deref()
    }
    /// <p>An array of paths to the registration form field.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.field_paths.is_none()`.
    pub fn field_paths(&self) -> &[::std::string::String] {
        self.field_paths.as_deref().unwrap_or_default()
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl DescribeRegistrationFieldValuesInput {
    /// Creates a new builder-style object to manufacture [`DescribeRegistrationFieldValuesInput`](crate::operation::describe_registration_field_values::DescribeRegistrationFieldValuesInput).
    pub fn builder() -> crate::operation::describe_registration_field_values::builders::DescribeRegistrationFieldValuesInputBuilder {
        crate::operation::describe_registration_field_values::builders::DescribeRegistrationFieldValuesInputBuilder::default()
    }
}

/// A builder for [`DescribeRegistrationFieldValuesInput`](crate::operation::describe_registration_field_values::DescribeRegistrationFieldValuesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeRegistrationFieldValuesInputBuilder {
    pub(crate) registration_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_number: ::std::option::Option<i64>,
    pub(crate) section_path: ::std::option::Option<::std::string::String>,
    pub(crate) field_paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl DescribeRegistrationFieldValuesInputBuilder {
    /// <p>The unique identifier for the registration.</p>
    /// This field is required.
    pub fn registration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the registration.</p>
    pub fn set_registration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_id = input;
        self
    }
    /// <p>The unique identifier for the registration.</p>
    pub fn get_registration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_id
    }
    /// <p>The version number of the registration.</p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the registration.</p>
    pub fn set_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The version number of the registration.</p>
    pub fn get_version_number(&self) -> &::std::option::Option<i64> {
        &self.version_number
    }
    /// <p>The path to the section of the registration.</p>
    pub fn section_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.section_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the section of the registration.</p>
    pub fn set_section_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.section_path = input;
        self
    }
    /// <p>The path to the section of the registration.</p>
    pub fn get_section_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.section_path
    }
    /// Appends an item to `field_paths`.
    ///
    /// To override the contents of this collection use [`set_field_paths`](Self::set_field_paths).
    ///
    /// <p>An array of paths to the registration form field.</p>
    pub fn field_paths(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.field_paths.unwrap_or_default();
        v.push(input.into());
        self.field_paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of paths to the registration form field.</p>
    pub fn set_field_paths(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.field_paths = input;
        self
    }
    /// <p>An array of paths to the registration form field.</p>
    pub fn get_field_paths(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.field_paths
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`DescribeRegistrationFieldValuesInput`](crate::operation::describe_registration_field_values::DescribeRegistrationFieldValuesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_registration_field_values::DescribeRegistrationFieldValuesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_registration_field_values::DescribeRegistrationFieldValuesInput {
                registration_id: self.registration_id,
                version_number: self.version_number,
                section_path: self.section_path,
                field_paths: self.field_paths,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
