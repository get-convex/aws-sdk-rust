// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteRegistrationOutput {
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    pub registration_arn: ::std::string::String,
    /// <p>The unique identifier for the registration.</p>
    pub registration_id: ::std::string::String,
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    pub registration_type: ::std::string::String,
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code>: Your registration is created but not submitted.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted and is awaiting review.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>PROVISIONING</code>: Your registration has been approved and your origination identity is being created.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code>: Your registration has been approved and and your origination identity has been created.</p></li>
    /// <li>
    /// <p><code>REQUIRES_UPDATES</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>CLOSED</code>: The phone number or sender ID has been deleted and you must also delete the registration for the number.</p></li>
    /// <li>
    /// <p><code>DELETED</code>: The registration has been deleted.</p></li>
    /// </ul>
    pub registration_status: crate::types::RegistrationStatus,
    /// <p>The current version number of the registration.</p>
    pub current_version_number: i64,
    /// <p>The version number of the registration that was approved.</p>
    pub approved_version_number: ::std::option::Option<i64>,
    /// <p>The latest version number of the registration that was denied.</p>
    pub latest_denied_version_number: ::std::option::Option<i64>,
    /// <p>Metadata about a given registration which is specific to that registration type.</p>
    pub additional_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The time when the registration was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub created_timestamp: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl DeleteRegistrationOutput {
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    pub fn registration_arn(&self) -> &str {
        use std::ops::Deref;
        self.registration_arn.deref()
    }
    /// <p>The unique identifier for the registration.</p>
    pub fn registration_id(&self) -> &str {
        use std::ops::Deref;
        self.registration_id.deref()
    }
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    pub fn registration_type(&self) -> &str {
        use std::ops::Deref;
        self.registration_type.deref()
    }
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code>: Your registration is created but not submitted.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted and is awaiting review.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>PROVISIONING</code>: Your registration has been approved and your origination identity is being created.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code>: Your registration has been approved and and your origination identity has been created.</p></li>
    /// <li>
    /// <p><code>REQUIRES_UPDATES</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>CLOSED</code>: The phone number or sender ID has been deleted and you must also delete the registration for the number.</p></li>
    /// <li>
    /// <p><code>DELETED</code>: The registration has been deleted.</p></li>
    /// </ul>
    pub fn registration_status(&self) -> &crate::types::RegistrationStatus {
        &self.registration_status
    }
    /// <p>The current version number of the registration.</p>
    pub fn current_version_number(&self) -> i64 {
        self.current_version_number
    }
    /// <p>The version number of the registration that was approved.</p>
    pub fn approved_version_number(&self) -> ::std::option::Option<i64> {
        self.approved_version_number
    }
    /// <p>The latest version number of the registration that was denied.</p>
    pub fn latest_denied_version_number(&self) -> ::std::option::Option<i64> {
        self.latest_denied_version_number
    }
    /// <p>Metadata about a given registration which is specific to that registration type.</p>
    pub fn additional_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_attributes.as_ref()
    }
    /// <p>The time when the registration was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.created_timestamp
    }
}
impl ::aws_types::request_id::RequestId for DeleteRegistrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteRegistrationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRegistrationOutput`](crate::operation::delete_registration::DeleteRegistrationOutput).
    pub fn builder() -> crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder {
        crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder::default()
    }
}

/// A builder for [`DeleteRegistrationOutput`](crate::operation::delete_registration::DeleteRegistrationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteRegistrationOutputBuilder {
    pub(crate) registration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) registration_id: ::std::option::Option<::std::string::String>,
    pub(crate) registration_type: ::std::option::Option<::std::string::String>,
    pub(crate) registration_status: ::std::option::Option<crate::types::RegistrationStatus>,
    pub(crate) current_version_number: ::std::option::Option<i64>,
    pub(crate) approved_version_number: ::std::option::Option<i64>,
    pub(crate) latest_denied_version_number: ::std::option::Option<i64>,
    pub(crate) additional_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DeleteRegistrationOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    /// This field is required.
    pub fn registration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    pub fn set_registration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    pub fn get_registration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_arn
    }
    /// <p>The unique identifier for the registration.</p>
    /// This field is required.
    pub fn registration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the registration.</p>
    pub fn set_registration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_id = input;
        self
    }
    /// <p>The unique identifier for the registration.</p>
    pub fn get_registration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_id
    }
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    /// This field is required.
    pub fn registration_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    pub fn set_registration_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_type = input;
        self
    }
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    pub fn get_registration_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_type
    }
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code>: Your registration is created but not submitted.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted and is awaiting review.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>PROVISIONING</code>: Your registration has been approved and your origination identity is being created.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code>: Your registration has been approved and and your origination identity has been created.</p></li>
    /// <li>
    /// <p><code>REQUIRES_UPDATES</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>CLOSED</code>: The phone number or sender ID has been deleted and you must also delete the registration for the number.</p></li>
    /// <li>
    /// <p><code>DELETED</code>: The registration has been deleted.</p></li>
    /// </ul>
    /// This field is required.
    pub fn registration_status(mut self, input: crate::types::RegistrationStatus) -> Self {
        self.registration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code>: Your registration is created but not submitted.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted and is awaiting review.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>PROVISIONING</code>: Your registration has been approved and your origination identity is being created.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code>: Your registration has been approved and and your origination identity has been created.</p></li>
    /// <li>
    /// <p><code>REQUIRES_UPDATES</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>CLOSED</code>: The phone number or sender ID has been deleted and you must also delete the registration for the number.</p></li>
    /// <li>
    /// <p><code>DELETED</code>: The registration has been deleted.</p></li>
    /// </ul>
    pub fn set_registration_status(mut self, input: ::std::option::Option<crate::types::RegistrationStatus>) -> Self {
        self.registration_status = input;
        self
    }
    /// <p>The status of the registration.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATED</code>: Your registration is created but not submitted.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted and is awaiting review.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>PROVISIONING</code>: Your registration has been approved and your origination identity is being created.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code>: Your registration has been approved and and your origination identity has been created.</p></li>
    /// <li>
    /// <p><code>REQUIRES_UPDATES</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>CLOSED</code>: The phone number or sender ID has been deleted and you must also delete the registration for the number.</p></li>
    /// <li>
    /// <p><code>DELETED</code>: The registration has been deleted.</p></li>
    /// </ul>
    pub fn get_registration_status(&self) -> &::std::option::Option<crate::types::RegistrationStatus> {
        &self.registration_status
    }
    /// <p>The current version number of the registration.</p>
    /// This field is required.
    pub fn current_version_number(mut self, input: i64) -> Self {
        self.current_version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current version number of the registration.</p>
    pub fn set_current_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.current_version_number = input;
        self
    }
    /// <p>The current version number of the registration.</p>
    pub fn get_current_version_number(&self) -> &::std::option::Option<i64> {
        &self.current_version_number
    }
    /// <p>The version number of the registration that was approved.</p>
    pub fn approved_version_number(mut self, input: i64) -> Self {
        self.approved_version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the registration that was approved.</p>
    pub fn set_approved_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.approved_version_number = input;
        self
    }
    /// <p>The version number of the registration that was approved.</p>
    pub fn get_approved_version_number(&self) -> &::std::option::Option<i64> {
        &self.approved_version_number
    }
    /// <p>The latest version number of the registration that was denied.</p>
    pub fn latest_denied_version_number(mut self, input: i64) -> Self {
        self.latest_denied_version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latest version number of the registration that was denied.</p>
    pub fn set_latest_denied_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.latest_denied_version_number = input;
        self
    }
    /// <p>The latest version number of the registration that was denied.</p>
    pub fn get_latest_denied_version_number(&self) -> &::std::option::Option<i64> {
        &self.latest_denied_version_number
    }
    /// Adds a key-value pair to `additional_attributes`.
    ///
    /// To override the contents of this collection use [`set_additional_attributes`](Self::set_additional_attributes).
    ///
    /// <p>Metadata about a given registration which is specific to that registration type.</p>
    pub fn additional_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Metadata about a given registration which is specific to that registration type.</p>
    pub fn set_additional_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_attributes = input;
        self
    }
    /// <p>Metadata about a given registration which is specific to that registration type.</p>
    pub fn get_additional_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_attributes
    }
    /// <p>The time when the registration was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    /// This field is required.
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the registration was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time when the registration was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteRegistrationOutput`](crate::operation::delete_registration::DeleteRegistrationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`registration_arn`](crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder::registration_arn)
    /// - [`registration_id`](crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder::registration_id)
    /// - [`registration_type`](crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder::registration_type)
    /// - [`registration_status`](crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder::registration_status)
    /// - [`current_version_number`](crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder::current_version_number)
    /// - [`created_timestamp`](crate::operation::delete_registration::builders::DeleteRegistrationOutputBuilder::created_timestamp)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_registration::DeleteRegistrationOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_registration::DeleteRegistrationOutput {
            registration_arn: self.registration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_arn",
                    "registration_arn was not specified but it is required when building DeleteRegistrationOutput",
                )
            })?,
            registration_id: self.registration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_id",
                    "registration_id was not specified but it is required when building DeleteRegistrationOutput",
                )
            })?,
            registration_type: self.registration_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_type",
                    "registration_type was not specified but it is required when building DeleteRegistrationOutput",
                )
            })?,
            registration_status: self.registration_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_status",
                    "registration_status was not specified but it is required when building DeleteRegistrationOutput",
                )
            })?,
            current_version_number: self.current_version_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "current_version_number",
                    "current_version_number was not specified but it is required when building DeleteRegistrationOutput",
                )
            })?,
            approved_version_number: self.approved_version_number,
            latest_denied_version_number: self.latest_denied_version_number,
            additional_attributes: self.additional_attributes,
            created_timestamp: self.created_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_timestamp",
                    "created_timestamp was not specified but it is required when building DeleteRegistrationOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
