// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeRegistrationSectionDefinitionsInput {
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    pub registration_type: ::std::option::Option<::std::string::String>,
    /// <p>An array of paths for the registration form section.</p>
    pub section_paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per each request.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl DescribeRegistrationSectionDefinitionsInput {
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    pub fn registration_type(&self) -> ::std::option::Option<&str> {
        self.registration_type.as_deref()
    }
    /// <p>An array of paths for the registration form section.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.section_paths.is_none()`.
    pub fn section_paths(&self) -> &[::std::string::String] {
        self.section_paths.as_deref().unwrap_or_default()
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl DescribeRegistrationSectionDefinitionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeRegistrationSectionDefinitionsInput`](crate::operation::describe_registration_section_definitions::DescribeRegistrationSectionDefinitionsInput).
    pub fn builder() -> crate::operation::describe_registration_section_definitions::builders::DescribeRegistrationSectionDefinitionsInputBuilder {
        crate::operation::describe_registration_section_definitions::builders::DescribeRegistrationSectionDefinitionsInputBuilder::default()
    }
}

/// A builder for [`DescribeRegistrationSectionDefinitionsInput`](crate::operation::describe_registration_section_definitions::DescribeRegistrationSectionDefinitionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeRegistrationSectionDefinitionsInputBuilder {
    pub(crate) registration_type: ::std::option::Option<::std::string::String>,
    pub(crate) section_paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl DescribeRegistrationSectionDefinitionsInputBuilder {
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    /// This field is required.
    pub fn registration_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    pub fn set_registration_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_type = input;
        self
    }
    /// <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    pub fn get_registration_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_type
    }
    /// Appends an item to `section_paths`.
    ///
    /// To override the contents of this collection use [`set_section_paths`](Self::set_section_paths).
    ///
    /// <p>An array of paths for the registration form section.</p>
    pub fn section_paths(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.section_paths.unwrap_or_default();
        v.push(input.into());
        self.section_paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of paths for the registration form section.</p>
    pub fn set_section_paths(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.section_paths = input;
        self
    }
    /// <p>An array of paths for the registration form section.</p>
    pub fn get_section_paths(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.section_paths
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`DescribeRegistrationSectionDefinitionsInput`](crate::operation::describe_registration_section_definitions::DescribeRegistrationSectionDefinitionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_registration_section_definitions::DescribeRegistrationSectionDefinitionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_registration_section_definitions::DescribeRegistrationSectionDefinitionsInput {
                registration_type: self.registration_type,
                section_paths: self.section_paths,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
