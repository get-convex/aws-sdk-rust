// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubmitRegistrationVersionOutput {
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    pub registration_arn: ::std::string::String,
    /// <p>The unique identifier for the registration.</p>
    pub registration_id: ::std::string::String,
    /// <p>The version number of the registration.</p>
    pub version_number: i64,
    /// <p>The status of the registration version.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    pub registration_version_status: crate::types::RegistrationVersionStatus,
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    pub registration_version_status_history: ::std::option::Option<crate::types::RegistrationVersionStatusHistory>,
    _request_id: Option<String>,
}
impl SubmitRegistrationVersionOutput {
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    pub fn registration_arn(&self) -> &str {
        use std::ops::Deref;
        self.registration_arn.deref()
    }
    /// <p>The unique identifier for the registration.</p>
    pub fn registration_id(&self) -> &str {
        use std::ops::Deref;
        self.registration_id.deref()
    }
    /// <p>The version number of the registration.</p>
    pub fn version_number(&self) -> i64 {
        self.version_number
    }
    /// <p>The status of the registration version.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    pub fn registration_version_status(&self) -> &crate::types::RegistrationVersionStatus {
        &self.registration_version_status
    }
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    pub fn registration_version_status_history(&self) -> ::std::option::Option<&crate::types::RegistrationVersionStatusHistory> {
        self.registration_version_status_history.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for SubmitRegistrationVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SubmitRegistrationVersionOutput {
    /// Creates a new builder-style object to manufacture [`SubmitRegistrationVersionOutput`](crate::operation::submit_registration_version::SubmitRegistrationVersionOutput).
    pub fn builder() -> crate::operation::submit_registration_version::builders::SubmitRegistrationVersionOutputBuilder {
        crate::operation::submit_registration_version::builders::SubmitRegistrationVersionOutputBuilder::default()
    }
}

/// A builder for [`SubmitRegistrationVersionOutput`](crate::operation::submit_registration_version::SubmitRegistrationVersionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubmitRegistrationVersionOutputBuilder {
    pub(crate) registration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) registration_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_number: ::std::option::Option<i64>,
    pub(crate) registration_version_status: ::std::option::Option<crate::types::RegistrationVersionStatus>,
    pub(crate) registration_version_status_history: ::std::option::Option<crate::types::RegistrationVersionStatusHistory>,
    _request_id: Option<String>,
}
impl SubmitRegistrationVersionOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    /// This field is required.
    pub fn registration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    pub fn set_registration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the registration.</p>
    pub fn get_registration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_arn
    }
    /// <p>The unique identifier for the registration.</p>
    /// This field is required.
    pub fn registration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the registration.</p>
    pub fn set_registration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_id = input;
        self
    }
    /// <p>The unique identifier for the registration.</p>
    pub fn get_registration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_id
    }
    /// <p>The version number of the registration.</p>
    /// This field is required.
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the registration.</p>
    pub fn set_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The version number of the registration.</p>
    pub fn get_version_number(&self) -> &::std::option::Option<i64> {
        &self.version_number
    }
    /// <p>The status of the registration version.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    /// This field is required.
    pub fn registration_version_status(mut self, input: crate::types::RegistrationVersionStatus) -> Self {
        self.registration_version_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the registration version.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    pub fn set_registration_version_status(mut self, input: ::std::option::Option<crate::types::RegistrationVersionStatus>) -> Self {
        self.registration_version_status = input;
        self
    }
    /// <p>The status of the registration version.</p>
    /// <ul>
    /// <li>
    /// <p><code>DRAFT</code>: The initial status of a registration version after it’s created.</p></li>
    /// <li>
    /// <p><code>SUBMITTED</code>: Your registration has been submitted.</p></li>
    /// <li>
    /// <p><code>REVIEWING</code>: Your registration has been accepted and is being reviewed.</p></li>
    /// <li>
    /// <p><code>APPROVED</code>: Your registration has been approved.</p></li>
    /// <li>
    /// <p><code>DISCARDED</code>: You've abandon this version of their registration to start over with a new version.</p></li>
    /// <li>
    /// <p><code>DENIED</code>: You must fix your registration and resubmit it.</p></li>
    /// <li>
    /// <p><code>REVOKED</code>: Your previously approved registration has been revoked.</p></li>
    /// <li>
    /// <p><code>ARCHIVED</code>: Your previously approved registration version moves into this status when a more recently submitted version is approved.</p></li>
    /// </ul>
    pub fn get_registration_version_status(&self) -> &::std::option::Option<crate::types::RegistrationVersionStatus> {
        &self.registration_version_status
    }
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    /// This field is required.
    pub fn registration_version_status_history(mut self, input: crate::types::RegistrationVersionStatusHistory) -> Self {
        self.registration_version_status_history = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    pub fn set_registration_version_status_history(mut self, input: ::std::option::Option<crate::types::RegistrationVersionStatusHistory>) -> Self {
        self.registration_version_status_history = input;
        self
    }
    /// <p>The <b>RegistrationVersionStatusHistory</b> object contains the time stamps for when the reservations status changes.</p>
    pub fn get_registration_version_status_history(&self) -> &::std::option::Option<crate::types::RegistrationVersionStatusHistory> {
        &self.registration_version_status_history
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SubmitRegistrationVersionOutput`](crate::operation::submit_registration_version::SubmitRegistrationVersionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`registration_arn`](crate::operation::submit_registration_version::builders::SubmitRegistrationVersionOutputBuilder::registration_arn)
    /// - [`registration_id`](crate::operation::submit_registration_version::builders::SubmitRegistrationVersionOutputBuilder::registration_id)
    /// - [`version_number`](crate::operation::submit_registration_version::builders::SubmitRegistrationVersionOutputBuilder::version_number)
    /// - [`registration_version_status`](crate::operation::submit_registration_version::builders::SubmitRegistrationVersionOutputBuilder::registration_version_status)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::submit_registration_version::SubmitRegistrationVersionOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::submit_registration_version::SubmitRegistrationVersionOutput {
            registration_arn: self.registration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_arn",
                    "registration_arn was not specified but it is required when building SubmitRegistrationVersionOutput",
                )
            })?,
            registration_id: self.registration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_id",
                    "registration_id was not specified but it is required when building SubmitRegistrationVersionOutput",
                )
            })?,
            version_number: self.version_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_number",
                    "version_number was not specified but it is required when building SubmitRegistrationVersionOutput",
                )
            })?,
            registration_version_status: self.registration_version_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_version_status",
                    "registration_version_status was not specified but it is required when building SubmitRegistrationVersionOutput",
                )
            })?,
            registration_version_status_history: self.registration_version_status_history,
            _request_id: self._request_id,
        })
    }
}
