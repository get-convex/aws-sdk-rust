// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListRegistrationAssociations`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`registration_id(impl Into<String>)`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::registration_id) / [`set_registration_id(Option<String>)`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::set_registration_id):<br>required: **true**<br><p>The unique identifier for the registration.</p><br>
    ///   - [`filters(RegistrationAssociationFilter)`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::filters) / [`set_filters(Option<Vec::<RegistrationAssociationFilter>>)`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::set_filters):<br>required: **false**<br><p>An array of RegistrationAssociationFilter to apply to the results that are returned.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::set_next_token):<br>required: **false**<br><p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return per each request.</p><br>
    /// - On success, responds with [`ListRegistrationAssociationsOutput`](crate::operation::list_registration_associations::ListRegistrationAssociationsOutput) with field(s):
    ///   - [`registration_arn(String)`](crate::operation::list_registration_associations::ListRegistrationAssociationsOutput::registration_arn): <p>The Amazon Resource Name (ARN) for the registration.</p>
    ///   - [`registration_id(String)`](crate::operation::list_registration_associations::ListRegistrationAssociationsOutput::registration_id): <p>The unique identifier for the registration.</p>
    ///   - [`registration_type(String)`](crate::operation::list_registration_associations::ListRegistrationAssociationsOutput::registration_type): <p>The type of registration form. The list of <b>RegistrationTypes</b> can be found using the <code>DescribeRegistrationTypeDefinitions</code> action.</p>
    ///   - [`registration_associations(Vec::<RegistrationAssociationMetadata>)`](crate::operation::list_registration_associations::ListRegistrationAssociationsOutput::registration_associations): <p>An array of RegistrationAssociationMetadata objects.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_registration_associations::ListRegistrationAssociationsOutput::next_token): <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    /// - On failure, responds with [`SdkError<ListRegistrationAssociationsError>`](crate::operation::list_registration_associations::ListRegistrationAssociationsError)
    pub fn list_registration_associations(
        &self,
    ) -> crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder {
        crate::operation::list_registration_associations::builders::ListRegistrationAssociationsFluentBuilder::new(self.handle.clone())
    }
}
