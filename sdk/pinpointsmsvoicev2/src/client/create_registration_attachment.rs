// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateRegistrationAttachment`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_body(Blob)`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::attachment_body) / [`set_attachment_body(Option<Blob>)`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::set_attachment_body):<br>required: **false**<br><p>The registration file to upload. The maximum file size is 1MiB and valid file extensions are PDF, JPEG and PNG.</p><br>
    ///   - [`attachment_url(impl Into<String>)`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::attachment_url) / [`set_attachment_url(Option<String>)`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::set_attachment_url):<br>required: **false**<br><p>A URL to the required registration file. For example, you can provide the S3 object URL.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::set_tags):<br>required: **false**<br><p>An array of tags (key and value pairs) to associate with the registration attachment.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::set_client_token):<br>required: **false**<br><p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, a randomly generated token is used for the request to ensure idempotency.</p><br>
    /// - On success, responds with [`CreateRegistrationAttachmentOutput`](crate::operation::create_registration_attachment::CreateRegistrationAttachmentOutput) with field(s):
    ///   - [`registration_attachment_arn(String)`](crate::operation::create_registration_attachment::CreateRegistrationAttachmentOutput::registration_attachment_arn): <p>The Amazon Resource Name (ARN) for the registration attachment.</p>
    ///   - [`registration_attachment_id(String)`](crate::operation::create_registration_attachment::CreateRegistrationAttachmentOutput::registration_attachment_id): <p>The unique identifier for the registration attachment.</p>
    ///   - [`attachment_status(AttachmentStatus)`](crate::operation::create_registration_attachment::CreateRegistrationAttachmentOutput::attachment_status): <p>The status of the registration attachment.</p> <ul>  <li>   <p><code>UPLOAD_IN_PROGRESS</code> The attachment is being uploaded.</p></li>  <li>   <p><code>UPLOAD_COMPLETE</code> The attachment has been uploaded.</p></li>  <li>   <p><code>UPLOAD_FAILED</code> The attachment failed to uploaded.</p></li>  <li>   <p><code>DELETED</code> The attachment has been deleted..</p></li> </ul>
    ///   - [`tags(Option<Vec::<Tag>>)`](crate::operation::create_registration_attachment::CreateRegistrationAttachmentOutput::tags): <p>An array of tags (key and value pairs) to associate with the registration attachment.</p>
    ///   - [`created_timestamp(DateTime)`](crate::operation::create_registration_attachment::CreateRegistrationAttachmentOutput::created_timestamp): <p>The time when the registration attachment was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    /// - On failure, responds with [`SdkError<CreateRegistrationAttachmentError>`](crate::operation::create_registration_attachment::CreateRegistrationAttachmentError)
    pub fn create_registration_attachment(
        &self,
    ) -> crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder {
        crate::operation::create_registration_attachment::builders::CreateRegistrationAttachmentFluentBuilder::new(self.handle.clone())
    }
}
