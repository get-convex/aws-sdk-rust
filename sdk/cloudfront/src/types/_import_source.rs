// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The import source for the Key Value Store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportSource {
    /// <p>The source type of the import source for the Key Value Store.</p>
    pub source_type: crate::types::ImportSourceType,
    /// <p>The Amazon Resource Name (ARN) of the import source for the Key Value Store.</p>
    pub source_arn: ::std::string::String,
}
impl ImportSource {
    /// <p>The source type of the import source for the Key Value Store.</p>
    pub fn source_type(&self) -> &crate::types::ImportSourceType {
        &self.source_type
    }
    /// <p>The Amazon Resource Name (ARN) of the import source for the Key Value Store.</p>
    pub fn source_arn(&self) -> &str {
        use std::ops::Deref;
        self.source_arn.deref()
    }
}
impl ImportSource {
    /// Creates a new builder-style object to manufacture [`ImportSource`](crate::types::ImportSource).
    pub fn builder() -> crate::types::builders::ImportSourceBuilder {
        crate::types::builders::ImportSourceBuilder::default()
    }
}

/// A builder for [`ImportSource`](crate::types::ImportSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportSourceBuilder {
    pub(crate) source_type: ::std::option::Option<crate::types::ImportSourceType>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
}
impl ImportSourceBuilder {
    /// <p>The source type of the import source for the Key Value Store.</p>
    /// This field is required.
    pub fn source_type(mut self, input: crate::types::ImportSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source type of the import source for the Key Value Store.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::ImportSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The source type of the import source for the Key Value Store.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::ImportSourceType> {
        &self.source_type
    }
    /// <p>The Amazon Resource Name (ARN) of the import source for the Key Value Store.</p>
    /// This field is required.
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the import source for the Key Value Store.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the import source for the Key Value Store.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// Consumes the builder and constructs a [`ImportSource`](crate::types::ImportSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_type`](crate::types::builders::ImportSourceBuilder::source_type)
    /// - [`source_arn`](crate::types::builders::ImportSourceBuilder::source_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ImportSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImportSource {
            source_type: self.source_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_type",
                    "source_type was not specified but it is required when building ImportSource",
                )
            })?,
            source_arn: self.source_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_arn",
                    "source_arn was not specified but it is required when building ImportSource",
                )
            })?,
        })
    }
}
