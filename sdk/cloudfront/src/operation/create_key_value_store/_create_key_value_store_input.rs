// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateKeyValueStoreInput {
    /// <p>The name of the Key Value Store. The maximum length of the name is 32 characters.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The comment of the Key Value Store.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>The S3 bucket that provides the source for the import. The source must be in a valid JSON format.</p>
    pub import_source: ::std::option::Option<crate::types::ImportSource>,
}
impl CreateKeyValueStoreInput {
    /// <p>The name of the Key Value Store. The maximum length of the name is 32 characters.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The comment of the Key Value Store.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The S3 bucket that provides the source for the import. The source must be in a valid JSON format.</p>
    pub fn import_source(&self) -> ::std::option::Option<&crate::types::ImportSource> {
        self.import_source.as_ref()
    }
}
impl CreateKeyValueStoreInput {
    /// Creates a new builder-style object to manufacture [`CreateKeyValueStoreInput`](crate::operation::create_key_value_store::CreateKeyValueStoreInput).
    pub fn builder() -> crate::operation::create_key_value_store::builders::CreateKeyValueStoreInputBuilder {
        crate::operation::create_key_value_store::builders::CreateKeyValueStoreInputBuilder::default()
    }
}

/// A builder for [`CreateKeyValueStoreInput`](crate::operation::create_key_value_store::CreateKeyValueStoreInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateKeyValueStoreInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) import_source: ::std::option::Option<crate::types::ImportSource>,
}
impl CreateKeyValueStoreInputBuilder {
    /// <p>The name of the Key Value Store. The maximum length of the name is 32 characters.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Key Value Store. The maximum length of the name is 32 characters.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Key Value Store. The maximum length of the name is 32 characters.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The comment of the Key Value Store.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The comment of the Key Value Store.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The comment of the Key Value Store.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>The S3 bucket that provides the source for the import. The source must be in a valid JSON format.</p>
    pub fn import_source(mut self, input: crate::types::ImportSource) -> Self {
        self.import_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 bucket that provides the source for the import. The source must be in a valid JSON format.</p>
    pub fn set_import_source(mut self, input: ::std::option::Option<crate::types::ImportSource>) -> Self {
        self.import_source = input;
        self
    }
    /// <p>The S3 bucket that provides the source for the import. The source must be in a valid JSON format.</p>
    pub fn get_import_source(&self) -> &::std::option::Option<crate::types::ImportSource> {
        &self.import_source
    }
    /// Consumes the builder and constructs a [`CreateKeyValueStoreInput`](crate::operation::create_key_value_store::CreateKeyValueStoreInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_key_value_store::CreateKeyValueStoreInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_key_value_store::CreateKeyValueStoreInput {
            name: self.name,
            comment: self.comment,
            import_source: self.import_source,
        })
    }
}
