// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetConfigurationPolicyAssociationsOutput {
    /// <p>Describes associations for the target accounts, OUs, or the root.</p>
    pub configuration_policy_associations: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationPolicyAssociationSummary>>,
    /// <p>An array of configuration policy associations, one for each configuration policy association identifier, that was specified in the request but couldn’t be processed due to an error.</p>
    pub unprocessed_configuration_policy_associations:
        ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedConfigurationPolicyAssociation>>,
    _request_id: Option<String>,
}
impl BatchGetConfigurationPolicyAssociationsOutput {
    /// <p>Describes associations for the target accounts, OUs, or the root.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configuration_policy_associations.is_none()`.
    pub fn configuration_policy_associations(&self) -> &[crate::types::ConfigurationPolicyAssociationSummary] {
        self.configuration_policy_associations.as_deref().unwrap_or_default()
    }
    /// <p>An array of configuration policy associations, one for each configuration policy association identifier, that was specified in the request but couldn’t be processed due to an error.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unprocessed_configuration_policy_associations.is_none()`.
    pub fn unprocessed_configuration_policy_associations(&self) -> &[crate::types::UnprocessedConfigurationPolicyAssociation] {
        self.unprocessed_configuration_policy_associations.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for BatchGetConfigurationPolicyAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetConfigurationPolicyAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetConfigurationPolicyAssociationsOutput`](crate::operation::batch_get_configuration_policy_associations::BatchGetConfigurationPolicyAssociationsOutput).
    pub fn builder() -> crate::operation::batch_get_configuration_policy_associations::builders::BatchGetConfigurationPolicyAssociationsOutputBuilder
    {
        crate::operation::batch_get_configuration_policy_associations::builders::BatchGetConfigurationPolicyAssociationsOutputBuilder::default()
    }
}

/// A builder for [`BatchGetConfigurationPolicyAssociationsOutput`](crate::operation::batch_get_configuration_policy_associations::BatchGetConfigurationPolicyAssociationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetConfigurationPolicyAssociationsOutputBuilder {
    pub(crate) configuration_policy_associations: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationPolicyAssociationSummary>>,
    pub(crate) unprocessed_configuration_policy_associations:
        ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedConfigurationPolicyAssociation>>,
    _request_id: Option<String>,
}
impl BatchGetConfigurationPolicyAssociationsOutputBuilder {
    /// Appends an item to `configuration_policy_associations`.
    ///
    /// To override the contents of this collection use [`set_configuration_policy_associations`](Self::set_configuration_policy_associations).
    ///
    /// <p>Describes associations for the target accounts, OUs, or the root.</p>
    pub fn configuration_policy_associations(mut self, input: crate::types::ConfigurationPolicyAssociationSummary) -> Self {
        let mut v = self.configuration_policy_associations.unwrap_or_default();
        v.push(input);
        self.configuration_policy_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes associations for the target accounts, OUs, or the root.</p>
    pub fn set_configuration_policy_associations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationPolicyAssociationSummary>>,
    ) -> Self {
        self.configuration_policy_associations = input;
        self
    }
    /// <p>Describes associations for the target accounts, OUs, or the root.</p>
    pub fn get_configuration_policy_associations(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfigurationPolicyAssociationSummary>> {
        &self.configuration_policy_associations
    }
    /// Appends an item to `unprocessed_configuration_policy_associations`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_configuration_policy_associations`](Self::set_unprocessed_configuration_policy_associations).
    ///
    /// <p>An array of configuration policy associations, one for each configuration policy association identifier, that was specified in the request but couldn’t be processed due to an error.</p>
    pub fn unprocessed_configuration_policy_associations(mut self, input: crate::types::UnprocessedConfigurationPolicyAssociation) -> Self {
        let mut v = self.unprocessed_configuration_policy_associations.unwrap_or_default();
        v.push(input);
        self.unprocessed_configuration_policy_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of configuration policy associations, one for each configuration policy association identifier, that was specified in the request but couldn’t be processed due to an error.</p>
    pub fn set_unprocessed_configuration_policy_associations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedConfigurationPolicyAssociation>>,
    ) -> Self {
        self.unprocessed_configuration_policy_associations = input;
        self
    }
    /// <p>An array of configuration policy associations, one for each configuration policy association identifier, that was specified in the request but couldn’t be processed due to an error.</p>
    pub fn get_unprocessed_configuration_policy_associations(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::UnprocessedConfigurationPolicyAssociation>> {
        &self.unprocessed_configuration_policy_associations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetConfigurationPolicyAssociationsOutput`](crate::operation::batch_get_configuration_policy_associations::BatchGetConfigurationPolicyAssociationsOutput).
    pub fn build(self) -> crate::operation::batch_get_configuration_policy_associations::BatchGetConfigurationPolicyAssociationsOutput {
        crate::operation::batch_get_configuration_policy_associations::BatchGetConfigurationPolicyAssociationsOutput {
            configuration_policy_associations: self.configuration_policy_associations,
            unprocessed_configuration_policy_associations: self.unprocessed_configuration_policy_associations,
            _request_id: self._request_id,
        }
    }
}
