// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateOrganizationConfigurationInput {
    /// <p>Whether to automatically enable Security Hub in new member accounts when they join the organization.</p>
    /// <p>If set to <code>true</code>, then Security Hub is automatically enabled in new accounts. If set to <code>false</code>, then Security Hub isn't enabled in new accounts automatically. The default value is <code>false</code>.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>false</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which Security Hub is enabled and associate the policy with new organization accounts.</p>
    pub auto_enable: ::std::option::Option<bool>,
    /// <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a> in new member accounts when they join the organization.</p>
    /// <p>The default value of this parameter is equal to <code>DEFAULT</code>.</p>
    /// <p>If equal to <code>DEFAULT</code>, then Security Hub default standards are automatically enabled for new member accounts. If equal to <code>NONE</code>, then default standards are not automatically enabled for new member accounts.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>NONE</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which specific security standards are enabled and associate the policy with new organization accounts.</p>
    pub auto_enable_standards: ::std::option::Option<crate::types::AutoEnableStandards>,
    /// <p>Provides information about the way an organization is configured in Security Hub.</p>
    pub organization_configuration: ::std::option::Option<crate::types::OrganizationConfiguration>,
}
impl UpdateOrganizationConfigurationInput {
    /// <p>Whether to automatically enable Security Hub in new member accounts when they join the organization.</p>
    /// <p>If set to <code>true</code>, then Security Hub is automatically enabled in new accounts. If set to <code>false</code>, then Security Hub isn't enabled in new accounts automatically. The default value is <code>false</code>.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>false</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which Security Hub is enabled and associate the policy with new organization accounts.</p>
    pub fn auto_enable(&self) -> ::std::option::Option<bool> {
        self.auto_enable
    }
    /// <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a> in new member accounts when they join the organization.</p>
    /// <p>The default value of this parameter is equal to <code>DEFAULT</code>.</p>
    /// <p>If equal to <code>DEFAULT</code>, then Security Hub default standards are automatically enabled for new member accounts. If equal to <code>NONE</code>, then default standards are not automatically enabled for new member accounts.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>NONE</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which specific security standards are enabled and associate the policy with new organization accounts.</p>
    pub fn auto_enable_standards(&self) -> ::std::option::Option<&crate::types::AutoEnableStandards> {
        self.auto_enable_standards.as_ref()
    }
    /// <p>Provides information about the way an organization is configured in Security Hub.</p>
    pub fn organization_configuration(&self) -> ::std::option::Option<&crate::types::OrganizationConfiguration> {
        self.organization_configuration.as_ref()
    }
}
impl UpdateOrganizationConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateOrganizationConfigurationInput`](crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput).
    pub fn builder() -> crate::operation::update_organization_configuration::builders::UpdateOrganizationConfigurationInputBuilder {
        crate::operation::update_organization_configuration::builders::UpdateOrganizationConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateOrganizationConfigurationInput`](crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateOrganizationConfigurationInputBuilder {
    pub(crate) auto_enable: ::std::option::Option<bool>,
    pub(crate) auto_enable_standards: ::std::option::Option<crate::types::AutoEnableStandards>,
    pub(crate) organization_configuration: ::std::option::Option<crate::types::OrganizationConfiguration>,
}
impl UpdateOrganizationConfigurationInputBuilder {
    /// <p>Whether to automatically enable Security Hub in new member accounts when they join the organization.</p>
    /// <p>If set to <code>true</code>, then Security Hub is automatically enabled in new accounts. If set to <code>false</code>, then Security Hub isn't enabled in new accounts automatically. The default value is <code>false</code>.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>false</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which Security Hub is enabled and associate the policy with new organization accounts.</p>
    /// This field is required.
    pub fn auto_enable(mut self, input: bool) -> Self {
        self.auto_enable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to automatically enable Security Hub in new member accounts when they join the organization.</p>
    /// <p>If set to <code>true</code>, then Security Hub is automatically enabled in new accounts. If set to <code>false</code>, then Security Hub isn't enabled in new accounts automatically. The default value is <code>false</code>.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>false</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which Security Hub is enabled and associate the policy with new organization accounts.</p>
    pub fn set_auto_enable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_enable = input;
        self
    }
    /// <p>Whether to automatically enable Security Hub in new member accounts when they join the organization.</p>
    /// <p>If set to <code>true</code>, then Security Hub is automatically enabled in new accounts. If set to <code>false</code>, then Security Hub isn't enabled in new accounts automatically. The default value is <code>false</code>.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>false</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which Security Hub is enabled and associate the policy with new organization accounts.</p>
    pub fn get_auto_enable(&self) -> &::std::option::Option<bool> {
        &self.auto_enable
    }
    /// <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a> in new member accounts when they join the organization.</p>
    /// <p>The default value of this parameter is equal to <code>DEFAULT</code>.</p>
    /// <p>If equal to <code>DEFAULT</code>, then Security Hub default standards are automatically enabled for new member accounts. If equal to <code>NONE</code>, then default standards are not automatically enabled for new member accounts.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>NONE</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which specific security standards are enabled and associate the policy with new organization accounts.</p>
    pub fn auto_enable_standards(mut self, input: crate::types::AutoEnableStandards) -> Self {
        self.auto_enable_standards = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a> in new member accounts when they join the organization.</p>
    /// <p>The default value of this parameter is equal to <code>DEFAULT</code>.</p>
    /// <p>If equal to <code>DEFAULT</code>, then Security Hub default standards are automatically enabled for new member accounts. If equal to <code>NONE</code>, then default standards are not automatically enabled for new member accounts.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>NONE</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which specific security standards are enabled and associate the policy with new organization accounts.</p>
    pub fn set_auto_enable_standards(mut self, input: ::std::option::Option<crate::types::AutoEnableStandards>) -> Self {
        self.auto_enable_standards = input;
        self
    }
    /// <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a> in new member accounts when they join the organization.</p>
    /// <p>The default value of this parameter is equal to <code>DEFAULT</code>.</p>
    /// <p>If equal to <code>DEFAULT</code>, then Security Hub default standards are automatically enabled for new member accounts. If equal to <code>NONE</code>, then default standards are not automatically enabled for new member accounts.</p>
    /// <p>If the <code>ConfigurationType</code> of your organization is set to <code>CENTRAL</code>, then this field is set to <code>NONE</code> and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which specific security standards are enabled and associate the policy with new organization accounts.</p>
    pub fn get_auto_enable_standards(&self) -> &::std::option::Option<crate::types::AutoEnableStandards> {
        &self.auto_enable_standards
    }
    /// <p>Provides information about the way an organization is configured in Security Hub.</p>
    pub fn organization_configuration(mut self, input: crate::types::OrganizationConfiguration) -> Self {
        self.organization_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about the way an organization is configured in Security Hub.</p>
    pub fn set_organization_configuration(mut self, input: ::std::option::Option<crate::types::OrganizationConfiguration>) -> Self {
        self.organization_configuration = input;
        self
    }
    /// <p>Provides information about the way an organization is configured in Security Hub.</p>
    pub fn get_organization_configuration(&self) -> &::std::option::Option<crate::types::OrganizationConfiguration> {
        &self.organization_configuration
    }
    /// Consumes the builder and constructs a [`UpdateOrganizationConfigurationInput`](crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput {
                auto_enable: self.auto_enable,
                auto_enable_standards: self.auto_enable_standards,
                organization_configuration: self.organization_configuration,
            },
        )
    }
}
