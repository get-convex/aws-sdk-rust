// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that provides the current value of a security control parameter and identifies whether it has been customized.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParameterConfiguration {
    /// <p>Identifies whether a control parameter uses a custom user-defined value or subscribes to the default Security Hub behavior.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>DEFAULT</code>, the default behavior can be a specific Security Hub default value, or the default behavior can be to ignore a specific parameter. When <code>ValueType</code> is set equal to <code>DEFAULT</code>, Security Hub ignores user-provided input for the <code>Value</code> field.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>CUSTOM</code>, the <code>Value</code> field can't be empty.</p>
    pub value_type: ::std::option::Option<crate::types::ParameterValueType>,
    /// <p>The current value of a control parameter.</p>
    pub value: ::std::option::Option<crate::types::ParameterValue>,
}
impl ParameterConfiguration {
    /// <p>Identifies whether a control parameter uses a custom user-defined value or subscribes to the default Security Hub behavior.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>DEFAULT</code>, the default behavior can be a specific Security Hub default value, or the default behavior can be to ignore a specific parameter. When <code>ValueType</code> is set equal to <code>DEFAULT</code>, Security Hub ignores user-provided input for the <code>Value</code> field.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>CUSTOM</code>, the <code>Value</code> field can't be empty.</p>
    pub fn value_type(&self) -> ::std::option::Option<&crate::types::ParameterValueType> {
        self.value_type.as_ref()
    }
    /// <p>The current value of a control parameter.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::ParameterValue> {
        self.value.as_ref()
    }
}
impl ParameterConfiguration {
    /// Creates a new builder-style object to manufacture [`ParameterConfiguration`](crate::types::ParameterConfiguration).
    pub fn builder() -> crate::types::builders::ParameterConfigurationBuilder {
        crate::types::builders::ParameterConfigurationBuilder::default()
    }
}

/// A builder for [`ParameterConfiguration`](crate::types::ParameterConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParameterConfigurationBuilder {
    pub(crate) value_type: ::std::option::Option<crate::types::ParameterValueType>,
    pub(crate) value: ::std::option::Option<crate::types::ParameterValue>,
}
impl ParameterConfigurationBuilder {
    /// <p>Identifies whether a control parameter uses a custom user-defined value or subscribes to the default Security Hub behavior.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>DEFAULT</code>, the default behavior can be a specific Security Hub default value, or the default behavior can be to ignore a specific parameter. When <code>ValueType</code> is set equal to <code>DEFAULT</code>, Security Hub ignores user-provided input for the <code>Value</code> field.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>CUSTOM</code>, the <code>Value</code> field can't be empty.</p>
    /// This field is required.
    pub fn value_type(mut self, input: crate::types::ParameterValueType) -> Self {
        self.value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies whether a control parameter uses a custom user-defined value or subscribes to the default Security Hub behavior.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>DEFAULT</code>, the default behavior can be a specific Security Hub default value, or the default behavior can be to ignore a specific parameter. When <code>ValueType</code> is set equal to <code>DEFAULT</code>, Security Hub ignores user-provided input for the <code>Value</code> field.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>CUSTOM</code>, the <code>Value</code> field can't be empty.</p>
    pub fn set_value_type(mut self, input: ::std::option::Option<crate::types::ParameterValueType>) -> Self {
        self.value_type = input;
        self
    }
    /// <p>Identifies whether a control parameter uses a custom user-defined value or subscribes to the default Security Hub behavior.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>DEFAULT</code>, the default behavior can be a specific Security Hub default value, or the default behavior can be to ignore a specific parameter. When <code>ValueType</code> is set equal to <code>DEFAULT</code>, Security Hub ignores user-provided input for the <code>Value</code> field.</p>
    /// <p>When <code>ValueType</code> is set equal to <code>CUSTOM</code>, the <code>Value</code> field can't be empty.</p>
    pub fn get_value_type(&self) -> &::std::option::Option<crate::types::ParameterValueType> {
        &self.value_type
    }
    /// <p>The current value of a control parameter.</p>
    pub fn value(mut self, input: crate::types::ParameterValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current value of a control parameter.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::ParameterValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The current value of a control parameter.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::ParameterValue> {
        &self.value
    }
    /// Consumes the builder and constructs a [`ParameterConfiguration`](crate::types::ParameterConfiguration).
    pub fn build(self) -> crate::types::ParameterConfiguration {
        crate::types::ParameterConfiguration {
            value_type: self.value_type,
            value: self.value,
        }
    }
}
