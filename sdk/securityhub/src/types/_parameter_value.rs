// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that includes the data type of a security control parameter and its current value.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ParameterValue {
    /// <p>A control parameter that is a boolean.</p>
    Boolean(bool),
    /// <p>A control parameter that is a double.</p>
    Double(f64),
    /// <p>A control parameter that is an enum.</p>
    Enum(::std::string::String),
    /// <p>A control parameter that is a list of enums.</p>
    EnumList(::std::vec::Vec<::std::string::String>),
    /// <p>A control parameter that is an integer.</p>
    Integer(i32),
    /// <p>A control parameter that is a list of integers.</p>
    IntegerList(::std::vec::Vec<i32>),
    /// <p>A control parameter that is a string.</p>
    String(::std::string::String),
    /// <p>A control parameter that is a list of strings.</p>
    StringList(::std::vec::Vec<::std::string::String>),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ParameterValue {
    /// Tries to convert the enum instance into [`Boolean`](crate::types::ParameterValue::Boolean), extracting the inner [`bool`](bool).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_boolean(&self) -> ::std::result::Result<&bool, &Self> {
        if let ParameterValue::Boolean(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Boolean`](crate::types::ParameterValue::Boolean).
    pub fn is_boolean(&self) -> bool {
        self.as_boolean().is_ok()
    }
    /// Tries to convert the enum instance into [`Double`](crate::types::ParameterValue::Double), extracting the inner [`f64`](f64).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_double(&self) -> ::std::result::Result<&f64, &Self> {
        if let ParameterValue::Double(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Double`](crate::types::ParameterValue::Double).
    pub fn is_double(&self) -> bool {
        self.as_double().is_ok()
    }
    /// Tries to convert the enum instance into [`Enum`](crate::types::ParameterValue::Enum), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_enum(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let ParameterValue::Enum(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Enum`](crate::types::ParameterValue::Enum).
    pub fn is_enum(&self) -> bool {
        self.as_enum().is_ok()
    }
    /// Tries to convert the enum instance into [`EnumList`](crate::types::ParameterValue::EnumList), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_enum_list(&self) -> ::std::result::Result<&::std::vec::Vec<::std::string::String>, &Self> {
        if let ParameterValue::EnumList(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EnumList`](crate::types::ParameterValue::EnumList).
    pub fn is_enum_list(&self) -> bool {
        self.as_enum_list().is_ok()
    }
    /// Tries to convert the enum instance into [`Integer`](crate::types::ParameterValue::Integer), extracting the inner [`i32`](i32).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_integer(&self) -> ::std::result::Result<&i32, &Self> {
        if let ParameterValue::Integer(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Integer`](crate::types::ParameterValue::Integer).
    pub fn is_integer(&self) -> bool {
        self.as_integer().is_ok()
    }
    /// Tries to convert the enum instance into [`IntegerList`](crate::types::ParameterValue::IntegerList), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_integer_list(&self) -> ::std::result::Result<&::std::vec::Vec<i32>, &Self> {
        if let ParameterValue::IntegerList(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IntegerList`](crate::types::ParameterValue::IntegerList).
    pub fn is_integer_list(&self) -> bool {
        self.as_integer_list().is_ok()
    }
    /// Tries to convert the enum instance into [`String`](crate::types::ParameterValue::String), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let ParameterValue::String(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`String`](crate::types::ParameterValue::String).
    pub fn is_string(&self) -> bool {
        self.as_string().is_ok()
    }
    /// Tries to convert the enum instance into [`StringList`](crate::types::ParameterValue::StringList), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_list(&self) -> ::std::result::Result<&::std::vec::Vec<::std::string::String>, &Self> {
        if let ParameterValue::StringList(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StringList`](crate::types::ParameterValue::StringList).
    pub fn is_string_list(&self) -> bool {
        self.as_string_list().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
