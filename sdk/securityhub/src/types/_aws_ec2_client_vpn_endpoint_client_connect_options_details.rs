// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options for managing connection authorization for new client connections.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2ClientVpnEndpointClientConnectOptionsDetails {
    /// <p>Indicates whether client connect options are enabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.</p>
    pub lambda_function_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of any updates to the client connect options.</p>
    pub status: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetails>,
}
impl AwsEc2ClientVpnEndpointClientConnectOptionsDetails {
    /// <p>Indicates whether client connect options are enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.</p>
    pub fn lambda_function_arn(&self) -> ::std::option::Option<&str> {
        self.lambda_function_arn.as_deref()
    }
    /// <p>The status of any updates to the client connect options.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetails> {
        self.status.as_ref()
    }
}
impl AwsEc2ClientVpnEndpointClientConnectOptionsDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2ClientVpnEndpointClientConnectOptionsDetails`](crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails).
    pub fn builder() -> crate::types::builders::AwsEc2ClientVpnEndpointClientConnectOptionsDetailsBuilder {
        crate::types::builders::AwsEc2ClientVpnEndpointClientConnectOptionsDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2ClientVpnEndpointClientConnectOptionsDetails`](crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2ClientVpnEndpointClientConnectOptionsDetailsBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) lambda_function_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetails>,
}
impl AwsEc2ClientVpnEndpointClientConnectOptionsDetailsBuilder {
    /// <p>Indicates whether client connect options are enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether client connect options are enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether client connect options are enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.</p>
    pub fn lambda_function_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lambda_function_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.</p>
    pub fn set_lambda_function_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lambda_function_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.</p>
    pub fn get_lambda_function_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lambda_function_arn
    }
    /// <p>The status of any updates to the client connect options.</p>
    pub fn status(mut self, input: crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetails) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of any updates to the client connect options.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetails>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of any updates to the client connect options.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetails> {
        &self.status
    }
    /// Consumes the builder and constructs a [`AwsEc2ClientVpnEndpointClientConnectOptionsDetails`](crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails).
    pub fn build(self) -> crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails {
        crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails {
            enabled: self.enabled,
            lambda_function_arn: self.lambda_function_arn,
            status: self.status,
        }
    }
}
