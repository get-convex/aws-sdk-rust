// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A number filter for querying findings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NumberFilter {
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings.</p>
    pub gte: ::std::option::Option<f64>,
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings.</p>
    pub lte: ::std::option::Option<f64>,
    /// <p>The greater-than condition to be applied to a single field when querying for findings.</p>
    pub gt: ::std::option::Option<f64>,
    /// <p>The less-than condition to be applied to a single field when querying for findings.</p>
    pub lt: ::std::option::Option<f64>,
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    pub eq: ::std::option::Option<f64>,
}
impl NumberFilter {
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings.</p>
    pub fn gte(&self) -> ::std::option::Option<f64> {
        self.gte
    }
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings.</p>
    pub fn lte(&self) -> ::std::option::Option<f64> {
        self.lte
    }
    /// <p>The greater-than condition to be applied to a single field when querying for findings.</p>
    pub fn gt(&self) -> ::std::option::Option<f64> {
        self.gt
    }
    /// <p>The less-than condition to be applied to a single field when querying for findings.</p>
    pub fn lt(&self) -> ::std::option::Option<f64> {
        self.lt
    }
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    pub fn eq(&self) -> ::std::option::Option<f64> {
        self.eq
    }
}
impl NumberFilter {
    /// Creates a new builder-style object to manufacture [`NumberFilter`](crate::types::NumberFilter).
    pub fn builder() -> crate::types::builders::NumberFilterBuilder {
        crate::types::builders::NumberFilterBuilder::default()
    }
}

/// A builder for [`NumberFilter`](crate::types::NumberFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NumberFilterBuilder {
    pub(crate) gte: ::std::option::Option<f64>,
    pub(crate) lte: ::std::option::Option<f64>,
    pub(crate) gt: ::std::option::Option<f64>,
    pub(crate) lt: ::std::option::Option<f64>,
    pub(crate) eq: ::std::option::Option<f64>,
}
impl NumberFilterBuilder {
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings.</p>
    pub fn gte(mut self, input: f64) -> Self {
        self.gte = ::std::option::Option::Some(input);
        self
    }
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings.</p>
    pub fn set_gte(mut self, input: ::std::option::Option<f64>) -> Self {
        self.gte = input;
        self
    }
    /// <p>The greater-than-equal condition to be applied to a single field when querying for findings.</p>
    pub fn get_gte(&self) -> &::std::option::Option<f64> {
        &self.gte
    }
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings.</p>
    pub fn lte(mut self, input: f64) -> Self {
        self.lte = ::std::option::Option::Some(input);
        self
    }
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings.</p>
    pub fn set_lte(mut self, input: ::std::option::Option<f64>) -> Self {
        self.lte = input;
        self
    }
    /// <p>The less-than-equal condition to be applied to a single field when querying for findings.</p>
    pub fn get_lte(&self) -> &::std::option::Option<f64> {
        &self.lte
    }
    /// <p>The greater-than condition to be applied to a single field when querying for findings.</p>
    pub fn gt(mut self, input: f64) -> Self {
        self.gt = ::std::option::Option::Some(input);
        self
    }
    /// <p>The greater-than condition to be applied to a single field when querying for findings.</p>
    pub fn set_gt(mut self, input: ::std::option::Option<f64>) -> Self {
        self.gt = input;
        self
    }
    /// <p>The greater-than condition to be applied to a single field when querying for findings.</p>
    pub fn get_gt(&self) -> &::std::option::Option<f64> {
        &self.gt
    }
    /// <p>The less-than condition to be applied to a single field when querying for findings.</p>
    pub fn lt(mut self, input: f64) -> Self {
        self.lt = ::std::option::Option::Some(input);
        self
    }
    /// <p>The less-than condition to be applied to a single field when querying for findings.</p>
    pub fn set_lt(mut self, input: ::std::option::Option<f64>) -> Self {
        self.lt = input;
        self
    }
    /// <p>The less-than condition to be applied to a single field when querying for findings.</p>
    pub fn get_lt(&self) -> &::std::option::Option<f64> {
        &self.lt
    }
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    pub fn eq(mut self, input: f64) -> Self {
        self.eq = ::std::option::Option::Some(input);
        self
    }
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    pub fn set_eq(mut self, input: ::std::option::Option<f64>) -> Self {
        self.eq = input;
        self
    }
    /// <p>The equal-to condition to be applied to a single field when querying for findings.</p>
    pub fn get_eq(&self) -> &::std::option::Option<f64> {
        &self.eq
    }
    /// Consumes the builder and constructs a [`NumberFilter`](crate::types::NumberFilter).
    pub fn build(self) -> crate::types::NumberFilter {
        crate::types::NumberFilter {
            gte: self.gte,
            lte: self.lte,
            gt: self.gt,
            lt: self.lt,
            eq: self.eq,
        }
    }
}
