// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An array of configuration policy associations, one for each configuration policy association identifier, that was specified in a <code>BatchGetConfigurationPolicyAssociations</code> request but couldn’t be processed due to an error.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UnprocessedConfigurationPolicyAssociation {
    /// <p>Configuration policy association identifiers that were specified in a <code>BatchGetConfigurationPolicyAssociations</code> request but couldn’t be processed due to an error.</p>
    pub configuration_policy_association_identifiers: ::std::option::Option<crate::types::ConfigurationPolicyAssociation>,
    /// <p>An HTTP status code that identifies why the configuration policy association failed.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>A string that identifies why the configuration policy association failed.</p>
    pub error_reason: ::std::option::Option<::std::string::String>,
}
impl UnprocessedConfigurationPolicyAssociation {
    /// <p>Configuration policy association identifiers that were specified in a <code>BatchGetConfigurationPolicyAssociations</code> request but couldn’t be processed due to an error.</p>
    pub fn configuration_policy_association_identifiers(&self) -> ::std::option::Option<&crate::types::ConfigurationPolicyAssociation> {
        self.configuration_policy_association_identifiers.as_ref()
    }
    /// <p>An HTTP status code that identifies why the configuration policy association failed.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>A string that identifies why the configuration policy association failed.</p>
    pub fn error_reason(&self) -> ::std::option::Option<&str> {
        self.error_reason.as_deref()
    }
}
impl UnprocessedConfigurationPolicyAssociation {
    /// Creates a new builder-style object to manufacture [`UnprocessedConfigurationPolicyAssociation`](crate::types::UnprocessedConfigurationPolicyAssociation).
    pub fn builder() -> crate::types::builders::UnprocessedConfigurationPolicyAssociationBuilder {
        crate::types::builders::UnprocessedConfigurationPolicyAssociationBuilder::default()
    }
}

/// A builder for [`UnprocessedConfigurationPolicyAssociation`](crate::types::UnprocessedConfigurationPolicyAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UnprocessedConfigurationPolicyAssociationBuilder {
    pub(crate) configuration_policy_association_identifiers: ::std::option::Option<crate::types::ConfigurationPolicyAssociation>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_reason: ::std::option::Option<::std::string::String>,
}
impl UnprocessedConfigurationPolicyAssociationBuilder {
    /// <p>Configuration policy association identifiers that were specified in a <code>BatchGetConfigurationPolicyAssociations</code> request but couldn’t be processed due to an error.</p>
    pub fn configuration_policy_association_identifiers(mut self, input: crate::types::ConfigurationPolicyAssociation) -> Self {
        self.configuration_policy_association_identifiers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration policy association identifiers that were specified in a <code>BatchGetConfigurationPolicyAssociations</code> request but couldn’t be processed due to an error.</p>
    pub fn set_configuration_policy_association_identifiers(
        mut self,
        input: ::std::option::Option<crate::types::ConfigurationPolicyAssociation>,
    ) -> Self {
        self.configuration_policy_association_identifiers = input;
        self
    }
    /// <p>Configuration policy association identifiers that were specified in a <code>BatchGetConfigurationPolicyAssociations</code> request but couldn’t be processed due to an error.</p>
    pub fn get_configuration_policy_association_identifiers(&self) -> &::std::option::Option<crate::types::ConfigurationPolicyAssociation> {
        &self.configuration_policy_association_identifiers
    }
    /// <p>An HTTP status code that identifies why the configuration policy association failed.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An HTTP status code that identifies why the configuration policy association failed.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>An HTTP status code that identifies why the configuration policy association failed.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>A string that identifies why the configuration policy association failed.</p>
    pub fn error_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that identifies why the configuration policy association failed.</p>
    pub fn set_error_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_reason = input;
        self
    }
    /// <p>A string that identifies why the configuration policy association failed.</p>
    pub fn get_error_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_reason
    }
    /// Consumes the builder and constructs a [`UnprocessedConfigurationPolicyAssociation`](crate::types::UnprocessedConfigurationPolicyAssociation).
    pub fn build(self) -> crate::types::UnprocessedConfigurationPolicyAssociation {
        crate::types::UnprocessedConfigurationPolicyAssociation {
            configuration_policy_association_identifiers: self.configuration_policy_association_identifiers,
            error_code: self.error_code,
            error_reason: self.error_reason,
        }
    }
}
