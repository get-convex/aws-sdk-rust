// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Client VPN endpoint. A Client VPN endpoint is the resource that you create and configure to enable and manage client VPN sessions. It's the termination point for all client VPN sessions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2ClientVpnEndpointDetails {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>A brief description of the endpoint.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.</p>
    pub client_cidr_block: ::std::option::Option<::std::string::String>,
    /// <p>Information about the DNS servers to be used for DNS resolution.</p>
    pub dns_server: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates whether split-tunnel is enabled in the Client VPN endpoint.</p>
    pub split_tunnel: ::std::option::Option<bool>,
    /// <p>The transport protocol used by the Client VPN endpoint.</p>
    pub transport_protocol: ::std::option::Option<::std::string::String>,
    /// <p>The port number for the Client VPN endpoint.</p>
    pub vpn_port: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the server certificate.</p>
    pub server_certificate_arn: ::std::option::Option<::std::string::String>,
    /// <p>Information about the authentication method used by the Client VPN endpoint.</p>
    pub authentication_options: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2ClientVpnEndpointAuthenticationOptionsDetails>>,
    /// <p>Information about the client connection logging options for the Client VPN endpoint.</p>
    pub connection_log_options: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails>,
    /// <p>The IDs of the security groups for the target network.</p>
    pub security_group_id_set: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the self-service portal.</p>
    pub self_service_portal_url: ::std::option::Option<::std::string::String>,
    /// <p>The options for managing connection authorization for new client connections.</p>
    pub client_connect_options: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails>,
    /// <p>The maximum VPN session duration time in hours.</p>
    pub session_timeout_hours: ::std::option::Option<i32>,
    /// <p>Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.</p>
    pub client_login_banner_options: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails>,
}
impl AwsEc2ClientVpnEndpointDetails {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn client_vpn_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.client_vpn_endpoint_id.as_deref()
    }
    /// <p>A brief description of the endpoint.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.</p>
    pub fn client_cidr_block(&self) -> ::std::option::Option<&str> {
        self.client_cidr_block.as_deref()
    }
    /// <p>Information about the DNS servers to be used for DNS resolution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_server.is_none()`.
    pub fn dns_server(&self) -> &[::std::string::String] {
        self.dns_server.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether split-tunnel is enabled in the Client VPN endpoint.</p>
    pub fn split_tunnel(&self) -> ::std::option::Option<bool> {
        self.split_tunnel
    }
    /// <p>The transport protocol used by the Client VPN endpoint.</p>
    pub fn transport_protocol(&self) -> ::std::option::Option<&str> {
        self.transport_protocol.as_deref()
    }
    /// <p>The port number for the Client VPN endpoint.</p>
    pub fn vpn_port(&self) -> ::std::option::Option<i32> {
        self.vpn_port
    }
    /// <p>The Amazon Resource Name (ARN) of the server certificate.</p>
    pub fn server_certificate_arn(&self) -> ::std::option::Option<&str> {
        self.server_certificate_arn.as_deref()
    }
    /// <p>Information about the authentication method used by the Client VPN endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.authentication_options.is_none()`.
    pub fn authentication_options(&self) -> &[crate::types::AwsEc2ClientVpnEndpointAuthenticationOptionsDetails] {
        self.authentication_options.as_deref().unwrap_or_default()
    }
    /// <p>Information about the client connection logging options for the Client VPN endpoint.</p>
    pub fn connection_log_options(&self) -> ::std::option::Option<&crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails> {
        self.connection_log_options.as_ref()
    }
    /// <p>The IDs of the security groups for the target network.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_id_set.is_none()`.
    pub fn security_group_id_set(&self) -> &[::std::string::String] {
        self.security_group_id_set.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The URL of the self-service portal.</p>
    pub fn self_service_portal_url(&self) -> ::std::option::Option<&str> {
        self.self_service_portal_url.as_deref()
    }
    /// <p>The options for managing connection authorization for new client connections.</p>
    pub fn client_connect_options(&self) -> ::std::option::Option<&crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails> {
        self.client_connect_options.as_ref()
    }
    /// <p>The maximum VPN session duration time in hours.</p>
    pub fn session_timeout_hours(&self) -> ::std::option::Option<i32> {
        self.session_timeout_hours
    }
    /// <p>Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.</p>
    pub fn client_login_banner_options(&self) -> ::std::option::Option<&crate::types::AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails> {
        self.client_login_banner_options.as_ref()
    }
}
impl AwsEc2ClientVpnEndpointDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2ClientVpnEndpointDetails`](crate::types::AwsEc2ClientVpnEndpointDetails).
    pub fn builder() -> crate::types::builders::AwsEc2ClientVpnEndpointDetailsBuilder {
        crate::types::builders::AwsEc2ClientVpnEndpointDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2ClientVpnEndpointDetails`](crate::types::AwsEc2ClientVpnEndpointDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2ClientVpnEndpointDetailsBuilder {
    pub(crate) client_vpn_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) client_cidr_block: ::std::option::Option<::std::string::String>,
    pub(crate) dns_server: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) split_tunnel: ::std::option::Option<bool>,
    pub(crate) transport_protocol: ::std::option::Option<::std::string::String>,
    pub(crate) vpn_port: ::std::option::Option<i32>,
    pub(crate) server_certificate_arn: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_options: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2ClientVpnEndpointAuthenticationOptionsDetails>>,
    pub(crate) connection_log_options: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails>,
    pub(crate) security_group_id_set: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) self_service_portal_url: ::std::option::Option<::std::string::String>,
    pub(crate) client_connect_options: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails>,
    pub(crate) session_timeout_hours: ::std::option::Option<i32>,
    pub(crate) client_login_banner_options: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails>,
}
impl AwsEc2ClientVpnEndpointDetailsBuilder {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn client_vpn_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_vpn_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn set_client_vpn_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_vpn_endpoint_id = input;
        self
    }
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn get_client_vpn_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_vpn_endpoint_id
    }
    /// <p>A brief description of the endpoint.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description of the endpoint.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A brief description of the endpoint.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.</p>
    pub fn client_cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_cidr_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.</p>
    pub fn set_client_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_cidr_block = input;
        self
    }
    /// <p>The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.</p>
    pub fn get_client_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_cidr_block
    }
    /// Appends an item to `dns_server`.
    ///
    /// To override the contents of this collection use [`set_dns_server`](Self::set_dns_server).
    ///
    /// <p>Information about the DNS servers to be used for DNS resolution.</p>
    pub fn dns_server(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_server.unwrap_or_default();
        v.push(input.into());
        self.dns_server = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the DNS servers to be used for DNS resolution.</p>
    pub fn set_dns_server(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_server = input;
        self
    }
    /// <p>Information about the DNS servers to be used for DNS resolution.</p>
    pub fn get_dns_server(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_server
    }
    /// <p>Indicates whether split-tunnel is enabled in the Client VPN endpoint.</p>
    pub fn split_tunnel(mut self, input: bool) -> Self {
        self.split_tunnel = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether split-tunnel is enabled in the Client VPN endpoint.</p>
    pub fn set_split_tunnel(mut self, input: ::std::option::Option<bool>) -> Self {
        self.split_tunnel = input;
        self
    }
    /// <p>Indicates whether split-tunnel is enabled in the Client VPN endpoint.</p>
    pub fn get_split_tunnel(&self) -> &::std::option::Option<bool> {
        &self.split_tunnel
    }
    /// <p>The transport protocol used by the Client VPN endpoint.</p>
    pub fn transport_protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transport_protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The transport protocol used by the Client VPN endpoint.</p>
    pub fn set_transport_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transport_protocol = input;
        self
    }
    /// <p>The transport protocol used by the Client VPN endpoint.</p>
    pub fn get_transport_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.transport_protocol
    }
    /// <p>The port number for the Client VPN endpoint.</p>
    pub fn vpn_port(mut self, input: i32) -> Self {
        self.vpn_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number for the Client VPN endpoint.</p>
    pub fn set_vpn_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.vpn_port = input;
        self
    }
    /// <p>The port number for the Client VPN endpoint.</p>
    pub fn get_vpn_port(&self) -> &::std::option::Option<i32> {
        &self.vpn_port
    }
    /// <p>The Amazon Resource Name (ARN) of the server certificate.</p>
    pub fn server_certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_certificate_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the server certificate.</p>
    pub fn set_server_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_certificate_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the server certificate.</p>
    pub fn get_server_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_certificate_arn
    }
    /// Appends an item to `authentication_options`.
    ///
    /// To override the contents of this collection use [`set_authentication_options`](Self::set_authentication_options).
    ///
    /// <p>Information about the authentication method used by the Client VPN endpoint.</p>
    pub fn authentication_options(mut self, input: crate::types::AwsEc2ClientVpnEndpointAuthenticationOptionsDetails) -> Self {
        let mut v = self.authentication_options.unwrap_or_default();
        v.push(input);
        self.authentication_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the authentication method used by the Client VPN endpoint.</p>
    pub fn set_authentication_options(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AwsEc2ClientVpnEndpointAuthenticationOptionsDetails>>,
    ) -> Self {
        self.authentication_options = input;
        self
    }
    /// <p>Information about the authentication method used by the Client VPN endpoint.</p>
    pub fn get_authentication_options(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsEc2ClientVpnEndpointAuthenticationOptionsDetails>> {
        &self.authentication_options
    }
    /// <p>Information about the client connection logging options for the Client VPN endpoint.</p>
    pub fn connection_log_options(mut self, input: crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails) -> Self {
        self.connection_log_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the client connection logging options for the Client VPN endpoint.</p>
    pub fn set_connection_log_options(
        mut self,
        input: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails>,
    ) -> Self {
        self.connection_log_options = input;
        self
    }
    /// <p>Information about the client connection logging options for the Client VPN endpoint.</p>
    pub fn get_connection_log_options(&self) -> &::std::option::Option<crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails> {
        &self.connection_log_options
    }
    /// Appends an item to `security_group_id_set`.
    ///
    /// To override the contents of this collection use [`set_security_group_id_set`](Self::set_security_group_id_set).
    ///
    /// <p>The IDs of the security groups for the target network.</p>
    pub fn security_group_id_set(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_id_set.unwrap_or_default();
        v.push(input.into());
        self.security_group_id_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the security groups for the target network.</p>
    pub fn set_security_group_id_set(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_id_set = input;
        self
    }
    /// <p>The IDs of the security groups for the target network.</p>
    pub fn get_security_group_id_set(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_id_set
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The URL of the self-service portal.</p>
    pub fn self_service_portal_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.self_service_portal_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the self-service portal.</p>
    pub fn set_self_service_portal_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.self_service_portal_url = input;
        self
    }
    /// <p>The URL of the self-service portal.</p>
    pub fn get_self_service_portal_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.self_service_portal_url
    }
    /// <p>The options for managing connection authorization for new client connections.</p>
    pub fn client_connect_options(mut self, input: crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails) -> Self {
        self.client_connect_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The options for managing connection authorization for new client connections.</p>
    pub fn set_client_connect_options(
        mut self,
        input: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails>,
    ) -> Self {
        self.client_connect_options = input;
        self
    }
    /// <p>The options for managing connection authorization for new client connections.</p>
    pub fn get_client_connect_options(&self) -> &::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientConnectOptionsDetails> {
        &self.client_connect_options
    }
    /// <p>The maximum VPN session duration time in hours.</p>
    pub fn session_timeout_hours(mut self, input: i32) -> Self {
        self.session_timeout_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum VPN session duration time in hours.</p>
    pub fn set_session_timeout_hours(mut self, input: ::std::option::Option<i32>) -> Self {
        self.session_timeout_hours = input;
        self
    }
    /// <p>The maximum VPN session duration time in hours.</p>
    pub fn get_session_timeout_hours(&self) -> &::std::option::Option<i32> {
        &self.session_timeout_hours
    }
    /// <p>Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.</p>
    pub fn client_login_banner_options(mut self, input: crate::types::AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails) -> Self {
        self.client_login_banner_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.</p>
    pub fn set_client_login_banner_options(
        mut self,
        input: ::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails>,
    ) -> Self {
        self.client_login_banner_options = input;
        self
    }
    /// <p>Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.</p>
    pub fn get_client_login_banner_options(&self) -> &::std::option::Option<crate::types::AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails> {
        &self.client_login_banner_options
    }
    /// Consumes the builder and constructs a [`AwsEc2ClientVpnEndpointDetails`](crate::types::AwsEc2ClientVpnEndpointDetails).
    pub fn build(self) -> crate::types::AwsEc2ClientVpnEndpointDetails {
        crate::types::AwsEc2ClientVpnEndpointDetails {
            client_vpn_endpoint_id: self.client_vpn_endpoint_id,
            description: self.description,
            client_cidr_block: self.client_cidr_block,
            dns_server: self.dns_server,
            split_tunnel: self.split_tunnel,
            transport_protocol: self.transport_protocol,
            vpn_port: self.vpn_port,
            server_certificate_arn: self.server_certificate_arn,
            authentication_options: self.authentication_options,
            connection_log_options: self.connection_log_options,
            security_group_id_set: self.security_group_id_set,
            vpc_id: self.vpc_id,
            self_service_portal_url: self.self_service_portal_url,
            client_connect_options: self.client_connect_options,
            session_timeout_hours: self.session_timeout_hours,
            client_login_banner_options: self.client_login_banner_options,
        }
    }
}
