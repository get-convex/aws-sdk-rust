// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides metadata for a security control, including its unique standard-agnostic identifier, title, description, severity, availability in Amazon Web Services Regions, and a link to remediation steps.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SecurityControlDefinition {
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number (for example, APIGateway.3). This parameter differs from <code>SecurityControlArn</code>, which is a unique Amazon Resource Name (ARN) assigned to a control. The ARN references the security control ID (for example, arn:aws:securityhub:eu-central-1:123456789012:security-control/APIGateway.3).</p>
    pub security_control_id: ::std::option::Option<::std::string::String>,
    /// <p>The title of a security control.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    pub remediation_url: ::std::option::Option<::std::string::String>,
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    pub severity_rating: ::std::option::Option<crate::types::SeverityRating>,
    /// <p>Specifies whether a security control is available in the current Amazon Web Services Region.</p>
    pub current_region_availability: ::std::option::Option<crate::types::RegionAvailabilityStatus>,
    /// <p>Security control properties that you can customize. Currently, only parameter customization is supported for select controls. An empty array is returned for controls that don’t support custom properties.</p>
    pub customizable_properties: ::std::option::Option<::std::vec::Vec<crate::types::SecurityControlProperty>>,
    /// <p>An object that provides a security control parameter name, description, and the options for customizing it. This object is excluded for a control that doesn't support custom parameters.</p>
    pub parameter_definitions: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterDefinition>>,
}
impl SecurityControlDefinition {
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number (for example, APIGateway.3). This parameter differs from <code>SecurityControlArn</code>, which is a unique Amazon Resource Name (ARN) assigned to a control. The ARN references the security control ID (for example, arn:aws:securityhub:eu-central-1:123456789012:security-control/APIGateway.3).</p>
    pub fn security_control_id(&self) -> ::std::option::Option<&str> {
        self.security_control_id.as_deref()
    }
    /// <p>The title of a security control.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    pub fn remediation_url(&self) -> ::std::option::Option<&str> {
        self.remediation_url.as_deref()
    }
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    pub fn severity_rating(&self) -> ::std::option::Option<&crate::types::SeverityRating> {
        self.severity_rating.as_ref()
    }
    /// <p>Specifies whether a security control is available in the current Amazon Web Services Region.</p>
    pub fn current_region_availability(&self) -> ::std::option::Option<&crate::types::RegionAvailabilityStatus> {
        self.current_region_availability.as_ref()
    }
    /// <p>Security control properties that you can customize. Currently, only parameter customization is supported for select controls. An empty array is returned for controls that don’t support custom properties.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.customizable_properties.is_none()`.
    pub fn customizable_properties(&self) -> &[crate::types::SecurityControlProperty] {
        self.customizable_properties.as_deref().unwrap_or_default()
    }
    /// <p>An object that provides a security control parameter name, description, and the options for customizing it. This object is excluded for a control that doesn't support custom parameters.</p>
    pub fn parameter_definitions(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ParameterDefinition>> {
        self.parameter_definitions.as_ref()
    }
}
impl SecurityControlDefinition {
    /// Creates a new builder-style object to manufacture [`SecurityControlDefinition`](crate::types::SecurityControlDefinition).
    pub fn builder() -> crate::types::builders::SecurityControlDefinitionBuilder {
        crate::types::builders::SecurityControlDefinitionBuilder::default()
    }
}

/// A builder for [`SecurityControlDefinition`](crate::types::SecurityControlDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SecurityControlDefinitionBuilder {
    pub(crate) security_control_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) remediation_url: ::std::option::Option<::std::string::String>,
    pub(crate) severity_rating: ::std::option::Option<crate::types::SeverityRating>,
    pub(crate) current_region_availability: ::std::option::Option<crate::types::RegionAvailabilityStatus>,
    pub(crate) customizable_properties: ::std::option::Option<::std::vec::Vec<crate::types::SecurityControlProperty>>,
    pub(crate) parameter_definitions: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterDefinition>>,
}
impl SecurityControlDefinitionBuilder {
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number (for example, APIGateway.3). This parameter differs from <code>SecurityControlArn</code>, which is a unique Amazon Resource Name (ARN) assigned to a control. The ARN references the security control ID (for example, arn:aws:securityhub:eu-central-1:123456789012:security-control/APIGateway.3).</p>
    /// This field is required.
    pub fn security_control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number (for example, APIGateway.3). This parameter differs from <code>SecurityControlArn</code>, which is a unique Amazon Resource Name (ARN) assigned to a control. The ARN references the security control ID (for example, arn:aws:securityhub:eu-central-1:123456789012:security-control/APIGateway.3).</p>
    pub fn set_security_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_control_id = input;
        self
    }
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number (for example, APIGateway.3). This parameter differs from <code>SecurityControlArn</code>, which is a unique Amazon Resource Name (ARN) assigned to a control. The ARN references the security control ID (for example, arn:aws:securityhub:eu-central-1:123456789012:security-control/APIGateway.3).</p>
    pub fn get_security_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_control_id
    }
    /// <p>The title of a security control.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of a security control.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of a security control.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    /// This field is required.
    pub fn remediation_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remediation_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    pub fn set_remediation_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remediation_url = input;
        self
    }
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    pub fn get_remediation_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.remediation_url
    }
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    /// This field is required.
    pub fn severity_rating(mut self, input: crate::types::SeverityRating) -> Self {
        self.severity_rating = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    pub fn set_severity_rating(mut self, input: ::std::option::Option<crate::types::SeverityRating>) -> Self {
        self.severity_rating = input;
        self
    }
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    pub fn get_severity_rating(&self) -> &::std::option::Option<crate::types::SeverityRating> {
        &self.severity_rating
    }
    /// <p>Specifies whether a security control is available in the current Amazon Web Services Region.</p>
    /// This field is required.
    pub fn current_region_availability(mut self, input: crate::types::RegionAvailabilityStatus) -> Self {
        self.current_region_availability = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether a security control is available in the current Amazon Web Services Region.</p>
    pub fn set_current_region_availability(mut self, input: ::std::option::Option<crate::types::RegionAvailabilityStatus>) -> Self {
        self.current_region_availability = input;
        self
    }
    /// <p>Specifies whether a security control is available in the current Amazon Web Services Region.</p>
    pub fn get_current_region_availability(&self) -> &::std::option::Option<crate::types::RegionAvailabilityStatus> {
        &self.current_region_availability
    }
    /// Appends an item to `customizable_properties`.
    ///
    /// To override the contents of this collection use [`set_customizable_properties`](Self::set_customizable_properties).
    ///
    /// <p>Security control properties that you can customize. Currently, only parameter customization is supported for select controls. An empty array is returned for controls that don’t support custom properties.</p>
    pub fn customizable_properties(mut self, input: crate::types::SecurityControlProperty) -> Self {
        let mut v = self.customizable_properties.unwrap_or_default();
        v.push(input);
        self.customizable_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>Security control properties that you can customize. Currently, only parameter customization is supported for select controls. An empty array is returned for controls that don’t support custom properties.</p>
    pub fn set_customizable_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SecurityControlProperty>>) -> Self {
        self.customizable_properties = input;
        self
    }
    /// <p>Security control properties that you can customize. Currently, only parameter customization is supported for select controls. An empty array is returned for controls that don’t support custom properties.</p>
    pub fn get_customizable_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SecurityControlProperty>> {
        &self.customizable_properties
    }
    /// Adds a key-value pair to `parameter_definitions`.
    ///
    /// To override the contents of this collection use [`set_parameter_definitions`](Self::set_parameter_definitions).
    ///
    /// <p>An object that provides a security control parameter name, description, and the options for customizing it. This object is excluded for a control that doesn't support custom parameters.</p>
    pub fn parameter_definitions(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ParameterDefinition) -> Self {
        let mut hash_map = self.parameter_definitions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameter_definitions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An object that provides a security control parameter name, description, and the options for customizing it. This object is excluded for a control that doesn't support custom parameters.</p>
    pub fn set_parameter_definitions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterDefinition>>,
    ) -> Self {
        self.parameter_definitions = input;
        self
    }
    /// <p>An object that provides a security control parameter name, description, and the options for customizing it. This object is excluded for a control that doesn't support custom parameters.</p>
    pub fn get_parameter_definitions(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterDefinition>> {
        &self.parameter_definitions
    }
    /// Consumes the builder and constructs a [`SecurityControlDefinition`](crate::types::SecurityControlDefinition).
    pub fn build(self) -> crate::types::SecurityControlDefinition {
        crate::types::SecurityControlDefinition {
            security_control_id: self.security_control_id,
            title: self.title,
            description: self.description,
            remediation_url: self.remediation_url,
            severity_rating: self.severity_rating,
            current_region_availability: self.current_region_availability,
            customizable_properties: self.customizable_properties,
            parameter_definitions: self.parameter_definitions,
        }
    }
}
