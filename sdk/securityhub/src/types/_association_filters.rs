// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for filtering the <code>ListConfigurationPolicyAssociations</code> response. You can filter by the Amazon Resource Name (ARN) or universally unique identifier (UUID) of a configuration policy, <code>AssociationType</code>, or <code>AssociationStatus</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociationFilters {
    /// <p>The ARN or UUID of the configuration policy.</p>
    pub configuration_policy_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the association between a target and a configuration was directly applied by the Security Hub delegated administrator or inherited from a parent.</p>
    pub association_type: ::std::option::Option<crate::types::AssociationType>,
    /// <p>The current status of the association between a target and a configuration policy.</p>
    pub association_status: ::std::option::Option<crate::types::ConfigurationPolicyAssociationStatus>,
}
impl AssociationFilters {
    /// <p>The ARN or UUID of the configuration policy.</p>
    pub fn configuration_policy_id(&self) -> ::std::option::Option<&str> {
        self.configuration_policy_id.as_deref()
    }
    /// <p>Indicates whether the association between a target and a configuration was directly applied by the Security Hub delegated administrator or inherited from a parent.</p>
    pub fn association_type(&self) -> ::std::option::Option<&crate::types::AssociationType> {
        self.association_type.as_ref()
    }
    /// <p>The current status of the association between a target and a configuration policy.</p>
    pub fn association_status(&self) -> ::std::option::Option<&crate::types::ConfigurationPolicyAssociationStatus> {
        self.association_status.as_ref()
    }
}
impl AssociationFilters {
    /// Creates a new builder-style object to manufacture [`AssociationFilters`](crate::types::AssociationFilters).
    pub fn builder() -> crate::types::builders::AssociationFiltersBuilder {
        crate::types::builders::AssociationFiltersBuilder::default()
    }
}

/// A builder for [`AssociationFilters`](crate::types::AssociationFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociationFiltersBuilder {
    pub(crate) configuration_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_type: ::std::option::Option<crate::types::AssociationType>,
    pub(crate) association_status: ::std::option::Option<crate::types::ConfigurationPolicyAssociationStatus>,
}
impl AssociationFiltersBuilder {
    /// <p>The ARN or UUID of the configuration policy.</p>
    pub fn configuration_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN or UUID of the configuration policy.</p>
    pub fn set_configuration_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_policy_id = input;
        self
    }
    /// <p>The ARN or UUID of the configuration policy.</p>
    pub fn get_configuration_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_policy_id
    }
    /// <p>Indicates whether the association between a target and a configuration was directly applied by the Security Hub delegated administrator or inherited from a parent.</p>
    pub fn association_type(mut self, input: crate::types::AssociationType) -> Self {
        self.association_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the association between a target and a configuration was directly applied by the Security Hub delegated administrator or inherited from a parent.</p>
    pub fn set_association_type(mut self, input: ::std::option::Option<crate::types::AssociationType>) -> Self {
        self.association_type = input;
        self
    }
    /// <p>Indicates whether the association between a target and a configuration was directly applied by the Security Hub delegated administrator or inherited from a parent.</p>
    pub fn get_association_type(&self) -> &::std::option::Option<crate::types::AssociationType> {
        &self.association_type
    }
    /// <p>The current status of the association between a target and a configuration policy.</p>
    pub fn association_status(mut self, input: crate::types::ConfigurationPolicyAssociationStatus) -> Self {
        self.association_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the association between a target and a configuration policy.</p>
    pub fn set_association_status(mut self, input: ::std::option::Option<crate::types::ConfigurationPolicyAssociationStatus>) -> Self {
        self.association_status = input;
        self
    }
    /// <p>The current status of the association between a target and a configuration policy.</p>
    pub fn get_association_status(&self) -> &::std::option::Option<crate::types::ConfigurationPolicyAssociationStatus> {
        &self.association_status
    }
    /// Consumes the builder and constructs a [`AssociationFilters`](crate::types::AssociationFilters).
    pub fn build(self) -> crate::types::AssociationFilters {
        crate::types::AssociationFilters {
            configuration_policy_id: self.configuration_policy_id,
            association_type: self.association_type,
            association_status: self.association_status,
        }
    }
}
