// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the way an organization is configured in Security Hub.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrganizationConfiguration {
    /// <p>Indicates whether the organization uses local or central configuration.</p>
    /// <p>If you use local configuration, the Security Hub delegated administrator can set <code>AutoEnable</code> to <code>true</code> and <code>AutoEnableStandards</code> to <code>DEFAULT</code>. This automatically enables Security Hub and default security standards in new organization accounts. These new account settings must be set separately in each Amazon Web Services Region, and settings may be different in each Region.</p>
    /// <p>If you use central configuration, the delegated administrator can create configuration policies. Configuration policies can be used to configure Security Hub, security standards, and security controls in multiple accounts and Regions. If you want new organization accounts to use a specific configuration, you can create a configuration policy and associate it with the root or specific organizational units (OUs). New accounts will inherit the policy from the root or their assigned OU.</p>
    pub configuration_type: ::std::option::Option<crate::types::OrganizationConfigurationConfigurationType>,
    /// <p>Describes whether central configuration could be enabled as the <code>ConfigurationType</code> for the organization. If your <code>ConfigurationType</code> is local configuration, then the value of <code>Status</code> is always <code>ENABLED</code>.</p>
    pub status: ::std::option::Option<crate::types::OrganizationConfigurationStatus>,
    /// <p>Provides an explanation if the value of <code>Status</code> is equal to <code>FAILED</code> when <code>ConfigurationType</code> is equal to <code>CENTRAL</code>.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl OrganizationConfiguration {
    /// <p>Indicates whether the organization uses local or central configuration.</p>
    /// <p>If you use local configuration, the Security Hub delegated administrator can set <code>AutoEnable</code> to <code>true</code> and <code>AutoEnableStandards</code> to <code>DEFAULT</code>. This automatically enables Security Hub and default security standards in new organization accounts. These new account settings must be set separately in each Amazon Web Services Region, and settings may be different in each Region.</p>
    /// <p>If you use central configuration, the delegated administrator can create configuration policies. Configuration policies can be used to configure Security Hub, security standards, and security controls in multiple accounts and Regions. If you want new organization accounts to use a specific configuration, you can create a configuration policy and associate it with the root or specific organizational units (OUs). New accounts will inherit the policy from the root or their assigned OU.</p>
    pub fn configuration_type(&self) -> ::std::option::Option<&crate::types::OrganizationConfigurationConfigurationType> {
        self.configuration_type.as_ref()
    }
    /// <p>Describes whether central configuration could be enabled as the <code>ConfigurationType</code> for the organization. If your <code>ConfigurationType</code> is local configuration, then the value of <code>Status</code> is always <code>ENABLED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OrganizationConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>Provides an explanation if the value of <code>Status</code> is equal to <code>FAILED</code> when <code>ConfigurationType</code> is equal to <code>CENTRAL</code>.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl OrganizationConfiguration {
    /// Creates a new builder-style object to manufacture [`OrganizationConfiguration`](crate::types::OrganizationConfiguration).
    pub fn builder() -> crate::types::builders::OrganizationConfigurationBuilder {
        crate::types::builders::OrganizationConfigurationBuilder::default()
    }
}

/// A builder for [`OrganizationConfiguration`](crate::types::OrganizationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrganizationConfigurationBuilder {
    pub(crate) configuration_type: ::std::option::Option<crate::types::OrganizationConfigurationConfigurationType>,
    pub(crate) status: ::std::option::Option<crate::types::OrganizationConfigurationStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl OrganizationConfigurationBuilder {
    /// <p>Indicates whether the organization uses local or central configuration.</p>
    /// <p>If you use local configuration, the Security Hub delegated administrator can set <code>AutoEnable</code> to <code>true</code> and <code>AutoEnableStandards</code> to <code>DEFAULT</code>. This automatically enables Security Hub and default security standards in new organization accounts. These new account settings must be set separately in each Amazon Web Services Region, and settings may be different in each Region.</p>
    /// <p>If you use central configuration, the delegated administrator can create configuration policies. Configuration policies can be used to configure Security Hub, security standards, and security controls in multiple accounts and Regions. If you want new organization accounts to use a specific configuration, you can create a configuration policy and associate it with the root or specific organizational units (OUs). New accounts will inherit the policy from the root or their assigned OU.</p>
    pub fn configuration_type(mut self, input: crate::types::OrganizationConfigurationConfigurationType) -> Self {
        self.configuration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the organization uses local or central configuration.</p>
    /// <p>If you use local configuration, the Security Hub delegated administrator can set <code>AutoEnable</code> to <code>true</code> and <code>AutoEnableStandards</code> to <code>DEFAULT</code>. This automatically enables Security Hub and default security standards in new organization accounts. These new account settings must be set separately in each Amazon Web Services Region, and settings may be different in each Region.</p>
    /// <p>If you use central configuration, the delegated administrator can create configuration policies. Configuration policies can be used to configure Security Hub, security standards, and security controls in multiple accounts and Regions. If you want new organization accounts to use a specific configuration, you can create a configuration policy and associate it with the root or specific organizational units (OUs). New accounts will inherit the policy from the root or their assigned OU.</p>
    pub fn set_configuration_type(mut self, input: ::std::option::Option<crate::types::OrganizationConfigurationConfigurationType>) -> Self {
        self.configuration_type = input;
        self
    }
    /// <p>Indicates whether the organization uses local or central configuration.</p>
    /// <p>If you use local configuration, the Security Hub delegated administrator can set <code>AutoEnable</code> to <code>true</code> and <code>AutoEnableStandards</code> to <code>DEFAULT</code>. This automatically enables Security Hub and default security standards in new organization accounts. These new account settings must be set separately in each Amazon Web Services Region, and settings may be different in each Region.</p>
    /// <p>If you use central configuration, the delegated administrator can create configuration policies. Configuration policies can be used to configure Security Hub, security standards, and security controls in multiple accounts and Regions. If you want new organization accounts to use a specific configuration, you can create a configuration policy and associate it with the root or specific organizational units (OUs). New accounts will inherit the policy from the root or their assigned OU.</p>
    pub fn get_configuration_type(&self) -> &::std::option::Option<crate::types::OrganizationConfigurationConfigurationType> {
        &self.configuration_type
    }
    /// <p>Describes whether central configuration could be enabled as the <code>ConfigurationType</code> for the organization. If your <code>ConfigurationType</code> is local configuration, then the value of <code>Status</code> is always <code>ENABLED</code>.</p>
    pub fn status(mut self, input: crate::types::OrganizationConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether central configuration could be enabled as the <code>ConfigurationType</code> for the organization. If your <code>ConfigurationType</code> is local configuration, then the value of <code>Status</code> is always <code>ENABLED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OrganizationConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Describes whether central configuration could be enabled as the <code>ConfigurationType</code> for the organization. If your <code>ConfigurationType</code> is local configuration, then the value of <code>Status</code> is always <code>ENABLED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OrganizationConfigurationStatus> {
        &self.status
    }
    /// <p>Provides an explanation if the value of <code>Status</code> is equal to <code>FAILED</code> when <code>ConfigurationType</code> is equal to <code>CENTRAL</code>.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides an explanation if the value of <code>Status</code> is equal to <code>FAILED</code> when <code>ConfigurationType</code> is equal to <code>CENTRAL</code>.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Provides an explanation if the value of <code>Status</code> is equal to <code>FAILED</code> when <code>ConfigurationType</code> is equal to <code>CENTRAL</code>.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`OrganizationConfiguration`](crate::types::OrganizationConfiguration).
    pub fn build(self) -> crate::types::OrganizationConfiguration {
        crate::types::OrganizationConfiguration {
            configuration_type: self.configuration_type,
            status: self.status,
            status_message: self.status_message,
        }
    }
}
