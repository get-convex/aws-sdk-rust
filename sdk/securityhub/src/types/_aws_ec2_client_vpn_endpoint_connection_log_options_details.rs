// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the client connection logging options for the Client VPN endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2ClientVpnEndpointConnectionLogOptionsDetails {
    /// <p>Indicates whether client connection logging is enabled for the Client VPN endpoint.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The name of the Amazon CloudWatch Logs log group to which connection logging data is published.</p>
    pub cloudwatch_log_group: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.</p>
    pub cloudwatch_log_stream: ::std::option::Option<::std::string::String>,
}
impl AwsEc2ClientVpnEndpointConnectionLogOptionsDetails {
    /// <p>Indicates whether client connection logging is enabled for the Client VPN endpoint.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The name of the Amazon CloudWatch Logs log group to which connection logging data is published.</p>
    pub fn cloudwatch_log_group(&self) -> ::std::option::Option<&str> {
        self.cloudwatch_log_group.as_deref()
    }
    /// <p>The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.</p>
    pub fn cloudwatch_log_stream(&self) -> ::std::option::Option<&str> {
        self.cloudwatch_log_stream.as_deref()
    }
}
impl AwsEc2ClientVpnEndpointConnectionLogOptionsDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2ClientVpnEndpointConnectionLogOptionsDetails`](crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails).
    pub fn builder() -> crate::types::builders::AwsEc2ClientVpnEndpointConnectionLogOptionsDetailsBuilder {
        crate::types::builders::AwsEc2ClientVpnEndpointConnectionLogOptionsDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2ClientVpnEndpointConnectionLogOptionsDetails`](crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2ClientVpnEndpointConnectionLogOptionsDetailsBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) cloudwatch_log_group: ::std::option::Option<::std::string::String>,
    pub(crate) cloudwatch_log_stream: ::std::option::Option<::std::string::String>,
}
impl AwsEc2ClientVpnEndpointConnectionLogOptionsDetailsBuilder {
    /// <p>Indicates whether client connection logging is enabled for the Client VPN endpoint.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether client connection logging is enabled for the Client VPN endpoint.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether client connection logging is enabled for the Client VPN endpoint.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The name of the Amazon CloudWatch Logs log group to which connection logging data is published.</p>
    pub fn cloudwatch_log_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloudwatch_log_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon CloudWatch Logs log group to which connection logging data is published.</p>
    pub fn set_cloudwatch_log_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloudwatch_log_group = input;
        self
    }
    /// <p>The name of the Amazon CloudWatch Logs log group to which connection logging data is published.</p>
    pub fn get_cloudwatch_log_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloudwatch_log_group
    }
    /// <p>The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.</p>
    pub fn cloudwatch_log_stream(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloudwatch_log_stream = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.</p>
    pub fn set_cloudwatch_log_stream(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloudwatch_log_stream = input;
        self
    }
    /// <p>The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.</p>
    pub fn get_cloudwatch_log_stream(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloudwatch_log_stream
    }
    /// Consumes the builder and constructs a [`AwsEc2ClientVpnEndpointConnectionLogOptionsDetails`](crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails).
    pub fn build(self) -> crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails {
        crate::types::AwsEc2ClientVpnEndpointConnectionLogOptionsDetails {
            enabled: self.enabled,
            cloudwatch_log_group: self.cloudwatch_log_group,
            cloudwatch_log_stream: self.cloudwatch_log_stream,
        }
    }
}
