// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the details of an Security Hub configuration policy thatâ€™s returned in a <code>ListConfigurationPolicies</code> request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationPolicySummary {
    /// <p>The Amazon Resource Name (ARN) of the configuration policy.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The universally unique identifier (UUID) of the configuration policy.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the configuration policy. Alphanumeric characters and the following ASCII characters are permitted: <code>-, ., !, *, /</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the configuration policy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time, in UTC and ISO 8601 format, that the configuration policy was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates whether the service that the configuration policy applies to is enabled in the policy.</p>
    pub service_enabled: ::std::option::Option<bool>,
}
impl ConfigurationPolicySummary {
    /// <p>The Amazon Resource Name (ARN) of the configuration policy.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The universally unique identifier (UUID) of the configuration policy.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the configuration policy. Alphanumeric characters and the following ASCII characters are permitted: <code>-, ., !, *, /</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the configuration policy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time, in UTC and ISO 8601 format, that the configuration policy was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>Indicates whether the service that the configuration policy applies to is enabled in the policy.</p>
    pub fn service_enabled(&self) -> ::std::option::Option<bool> {
        self.service_enabled
    }
}
impl ConfigurationPolicySummary {
    /// Creates a new builder-style object to manufacture [`ConfigurationPolicySummary`](crate::types::ConfigurationPolicySummary).
    pub fn builder() -> crate::types::builders::ConfigurationPolicySummaryBuilder {
        crate::types::builders::ConfigurationPolicySummaryBuilder::default()
    }
}

/// A builder for [`ConfigurationPolicySummary`](crate::types::ConfigurationPolicySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigurationPolicySummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) service_enabled: ::std::option::Option<bool>,
}
impl ConfigurationPolicySummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the configuration policy.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configuration policy.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configuration policy.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The universally unique identifier (UUID) of the configuration policy.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The universally unique identifier (UUID) of the configuration policy.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The universally unique identifier (UUID) of the configuration policy.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the configuration policy. Alphanumeric characters and the following ASCII characters are permitted: <code>-, ., !, *, /</code>.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration policy. Alphanumeric characters and the following ASCII characters are permitted: <code>-, ., !, *, /</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the configuration policy. Alphanumeric characters and the following ASCII characters are permitted: <code>-, ., !, *, /</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the configuration policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the configuration policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the configuration policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time, in UTC and ISO 8601 format, that the configuration policy was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, in UTC and ISO 8601 format, that the configuration policy was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time, in UTC and ISO 8601 format, that the configuration policy was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>Indicates whether the service that the configuration policy applies to is enabled in the policy.</p>
    pub fn service_enabled(mut self, input: bool) -> Self {
        self.service_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the service that the configuration policy applies to is enabled in the policy.</p>
    pub fn set_service_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.service_enabled = input;
        self
    }
    /// <p>Indicates whether the service that the configuration policy applies to is enabled in the policy.</p>
    pub fn get_service_enabled(&self) -> &::std::option::Option<bool> {
        &self.service_enabled
    }
    /// Consumes the builder and constructs a [`ConfigurationPolicySummary`](crate::types::ConfigurationPolicySummary).
    pub fn build(self) -> crate::types::ConfigurationPolicySummary {
        crate::types::ConfigurationPolicySummary {
            arn: self.arn,
            id: self.id,
            name: self.name,
            description: self.description,
            updated_at: self.updated_at,
            service_enabled: self.service_enabled,
        }
    }
}
