// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A security control in Security Hub describes a security best practice related to a specific resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SecurityControl {
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3.</p>
    pub security_control_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard.</p>
    pub security_control_arn: ::std::option::Option<::std::string::String>,
    /// <p>The title of a security control.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    pub remediation_url: ::std::option::Option<::std::string::String>,
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    pub severity_rating: ::std::option::Option<crate::types::SeverityRating>,
    /// <p>The enablement status of a security control in a specific standard.</p>
    pub security_control_status: ::std::option::Option<crate::types::ControlStatus>,
    /// <p>Identifies whether customizable properties of a security control are reflected in Security Hub findings. A status of <code>READY</code> indicates findings include the current parameter values. A status of <code>UPDATING</code> indicates that all findings may not include the current parameter values.</p>
    pub update_status: ::std::option::Option<crate::types::UpdateStatus>,
    /// <p>An object that identifies the name of a control parameter, its current value, and whether it has been customized.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterConfiguration>>,
    /// <p>The most recent reason for updating the customizable properties of a security control. This differs from the <code>UpdateReason</code> field of the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html"> <code>BatchUpdateStandardsControlAssociations</code> </a> API, which tracks the reason for updating the enablement status of a control. This field accepts alphanumeric characters in addition to white spaces, dashes, and underscores.</p>
    pub last_update_reason: ::std::option::Option<::std::string::String>,
}
impl SecurityControl {
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3.</p>
    pub fn security_control_id(&self) -> ::std::option::Option<&str> {
        self.security_control_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard.</p>
    pub fn security_control_arn(&self) -> ::std::option::Option<&str> {
        self.security_control_arn.as_deref()
    }
    /// <p>The title of a security control.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    pub fn remediation_url(&self) -> ::std::option::Option<&str> {
        self.remediation_url.as_deref()
    }
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    pub fn severity_rating(&self) -> ::std::option::Option<&crate::types::SeverityRating> {
        self.severity_rating.as_ref()
    }
    /// <p>The enablement status of a security control in a specific standard.</p>
    pub fn security_control_status(&self) -> ::std::option::Option<&crate::types::ControlStatus> {
        self.security_control_status.as_ref()
    }
    /// <p>Identifies whether customizable properties of a security control are reflected in Security Hub findings. A status of <code>READY</code> indicates findings include the current parameter values. A status of <code>UPDATING</code> indicates that all findings may not include the current parameter values.</p>
    pub fn update_status(&self) -> ::std::option::Option<&crate::types::UpdateStatus> {
        self.update_status.as_ref()
    }
    /// <p>An object that identifies the name of a control parameter, its current value, and whether it has been customized.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ParameterConfiguration>> {
        self.parameters.as_ref()
    }
    /// <p>The most recent reason for updating the customizable properties of a security control. This differs from the <code>UpdateReason</code> field of the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html"> <code>BatchUpdateStandardsControlAssociations</code> </a> API, which tracks the reason for updating the enablement status of a control. This field accepts alphanumeric characters in addition to white spaces, dashes, and underscores.</p>
    pub fn last_update_reason(&self) -> ::std::option::Option<&str> {
        self.last_update_reason.as_deref()
    }
}
impl SecurityControl {
    /// Creates a new builder-style object to manufacture [`SecurityControl`](crate::types::SecurityControl).
    pub fn builder() -> crate::types::builders::SecurityControlBuilder {
        crate::types::builders::SecurityControlBuilder::default()
    }
}

/// A builder for [`SecurityControl`](crate::types::SecurityControl).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SecurityControlBuilder {
    pub(crate) security_control_id: ::std::option::Option<::std::string::String>,
    pub(crate) security_control_arn: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) remediation_url: ::std::option::Option<::std::string::String>,
    pub(crate) severity_rating: ::std::option::Option<crate::types::SeverityRating>,
    pub(crate) security_control_status: ::std::option::Option<crate::types::ControlStatus>,
    pub(crate) update_status: ::std::option::Option<crate::types::UpdateStatus>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterConfiguration>>,
    pub(crate) last_update_reason: ::std::option::Option<::std::string::String>,
}
impl SecurityControlBuilder {
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3.</p>
    /// This field is required.
    pub fn security_control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3.</p>
    pub fn set_security_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_control_id = input;
        self
    }
    /// <p>The unique identifier of a security control across standards. Values for this field typically consist of an Amazon Web Service name and a number, such as APIGateway.3.</p>
    pub fn get_security_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_control_id
    }
    /// <p>The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard.</p>
    /// This field is required.
    pub fn security_control_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_control_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard.</p>
    pub fn set_security_control_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_control_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a security control across standards, such as <code>arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1</code>. This parameter doesn't mention a specific standard.</p>
    pub fn get_security_control_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_control_arn
    }
    /// <p>The title of a security control.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of a security control.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of a security control.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of a security control across standards. This typically summarizes how Security Hub evaluates the control and the conditions under which it produces a failed finding. This parameter doesn't reference a specific standard.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    /// This field is required.
    pub fn remediation_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remediation_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    pub fn set_remediation_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remediation_url = input;
        self
    }
    /// <p>A link to Security Hub documentation that explains how to remediate a failed finding for a security control.</p>
    pub fn get_remediation_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.remediation_url
    }
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    /// This field is required.
    pub fn severity_rating(mut self, input: crate::types::SeverityRating) -> Self {
        self.severity_rating = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    pub fn set_severity_rating(mut self, input: ::std::option::Option<crate::types::SeverityRating>) -> Self {
        self.severity_rating = input;
        self
    }
    /// <p>The severity of a security control. For more information about how Security Hub determines control severity, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/controls-findings-create-update.html#control-findings-severity">Assigning severity to control findings</a> in the <i>Security Hub User Guide</i>.</p>
    pub fn get_severity_rating(&self) -> &::std::option::Option<crate::types::SeverityRating> {
        &self.severity_rating
    }
    /// <p>The enablement status of a security control in a specific standard.</p>
    /// This field is required.
    pub fn security_control_status(mut self, input: crate::types::ControlStatus) -> Self {
        self.security_control_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The enablement status of a security control in a specific standard.</p>
    pub fn set_security_control_status(mut self, input: ::std::option::Option<crate::types::ControlStatus>) -> Self {
        self.security_control_status = input;
        self
    }
    /// <p>The enablement status of a security control in a specific standard.</p>
    pub fn get_security_control_status(&self) -> &::std::option::Option<crate::types::ControlStatus> {
        &self.security_control_status
    }
    /// <p>Identifies whether customizable properties of a security control are reflected in Security Hub findings. A status of <code>READY</code> indicates findings include the current parameter values. A status of <code>UPDATING</code> indicates that all findings may not include the current parameter values.</p>
    pub fn update_status(mut self, input: crate::types::UpdateStatus) -> Self {
        self.update_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies whether customizable properties of a security control are reflected in Security Hub findings. A status of <code>READY</code> indicates findings include the current parameter values. A status of <code>UPDATING</code> indicates that all findings may not include the current parameter values.</p>
    pub fn set_update_status(mut self, input: ::std::option::Option<crate::types::UpdateStatus>) -> Self {
        self.update_status = input;
        self
    }
    /// <p>Identifies whether customizable properties of a security control are reflected in Security Hub findings. A status of <code>READY</code> indicates findings include the current parameter values. A status of <code>UPDATING</code> indicates that all findings may not include the current parameter values.</p>
    pub fn get_update_status(&self) -> &::std::option::Option<crate::types::UpdateStatus> {
        &self.update_status
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>An object that identifies the name of a control parameter, its current value, and whether it has been customized.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ParameterConfiguration) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An object that identifies the name of a control parameter, its current value, and whether it has been customized.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterConfiguration>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>An object that identifies the name of a control parameter, its current value, and whether it has been customized.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ParameterConfiguration>> {
        &self.parameters
    }
    /// <p>The most recent reason for updating the customizable properties of a security control. This differs from the <code>UpdateReason</code> field of the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html"> <code>BatchUpdateStandardsControlAssociations</code> </a> API, which tracks the reason for updating the enablement status of a control. This field accepts alphanumeric characters in addition to white spaces, dashes, and underscores.</p>
    pub fn last_update_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_update_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The most recent reason for updating the customizable properties of a security control. This differs from the <code>UpdateReason</code> field of the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html"> <code>BatchUpdateStandardsControlAssociations</code> </a> API, which tracks the reason for updating the enablement status of a control. This field accepts alphanumeric characters in addition to white spaces, dashes, and underscores.</p>
    pub fn set_last_update_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_update_reason = input;
        self
    }
    /// <p>The most recent reason for updating the customizable properties of a security control. This differs from the <code>UpdateReason</code> field of the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html"> <code>BatchUpdateStandardsControlAssociations</code> </a> API, which tracks the reason for updating the enablement status of a control. This field accepts alphanumeric characters in addition to white spaces, dashes, and underscores.</p>
    pub fn get_last_update_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_update_reason
    }
    /// Consumes the builder and constructs a [`SecurityControl`](crate::types::SecurityControl).
    pub fn build(self) -> crate::types::SecurityControl {
        crate::types::SecurityControl {
            security_control_id: self.security_control_id,
            security_control_arn: self.security_control_arn,
            title: self.title,
            description: self.description,
            remediation_url: self.remediation_url,
            severity_rating: self.severity_rating,
            security_control_status: self.security_control_status,
            update_status: self.update_status,
            parameters: self.parameters,
            last_update_reason: self.last_update_reason,
        }
    }
}
