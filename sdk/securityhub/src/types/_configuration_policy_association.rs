// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details about the association between an Security Hub configuration and a target account, organizational unit, or the root. An association can exist between a target and a configuration policy, or between a target and self-managed behavior.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationPolicyAssociation {
    /// <p>The target account, organizational unit, or the root.</p>
    pub target: ::std::option::Option<crate::types::Target>,
}
impl ConfigurationPolicyAssociation {
    /// <p>The target account, organizational unit, or the root.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::Target> {
        self.target.as_ref()
    }
}
impl ConfigurationPolicyAssociation {
    /// Creates a new builder-style object to manufacture [`ConfigurationPolicyAssociation`](crate::types::ConfigurationPolicyAssociation).
    pub fn builder() -> crate::types::builders::ConfigurationPolicyAssociationBuilder {
        crate::types::builders::ConfigurationPolicyAssociationBuilder::default()
    }
}

/// A builder for [`ConfigurationPolicyAssociation`](crate::types::ConfigurationPolicyAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigurationPolicyAssociationBuilder {
    pub(crate) target: ::std::option::Option<crate::types::Target>,
}
impl ConfigurationPolicyAssociationBuilder {
    /// <p>The target account, organizational unit, or the root.</p>
    pub fn target(mut self, input: crate::types::Target) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target account, organizational unit, or the root.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::Target>) -> Self {
        self.target = input;
        self
    }
    /// <p>The target account, organizational unit, or the root.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::Target> {
        &self.target
    }
    /// Consumes the builder and constructs a [`ConfigurationPolicyAssociation`](crate::types::ConfigurationPolicyAssociation).
    pub fn build(self) -> crate::types::ConfigurationPolicyAssociation {
        crate::types::ConfigurationPolicyAssociation { target: self.target }
    }
}
