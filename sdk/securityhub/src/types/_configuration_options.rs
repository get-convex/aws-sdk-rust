// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options for customizing a security control parameter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ConfigurationOptions {
    /// <p>The options for customizing a security control parameter that is a boolean. For a boolean parameter, the options are <code>true</code> and <code>false</code>.</p>
    Boolean(crate::types::BooleanConfigurationOptions),
    /// <p>The options for customizing a security control parameter that is a double.</p>
    Double(crate::types::DoubleConfigurationOptions),
    /// <p>The options for customizing a security control parameter that is an enum.</p>
    Enum(crate::types::EnumConfigurationOptions),
    /// <p>The options for customizing a security control parameter that is a list of enums.</p>
    EnumList(crate::types::EnumListConfigurationOptions),
    /// <p>The options for customizing a security control parameter that is an integer.</p>
    Integer(crate::types::IntegerConfigurationOptions),
    /// <p>The options for customizing a security control parameter that is a list of integers.</p>
    IntegerList(crate::types::IntegerListConfigurationOptions),
    /// <p>The options for customizing a security control parameter that is a string data type.</p>
    String(crate::types::StringConfigurationOptions),
    /// <p>The options for customizing a security control parameter that is a list of strings.</p>
    StringList(crate::types::StringListConfigurationOptions),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ConfigurationOptions {
    /// Tries to convert the enum instance into [`Boolean`](crate::types::ConfigurationOptions::Boolean), extracting the inner [`BooleanConfigurationOptions`](crate::types::BooleanConfigurationOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_boolean(&self) -> ::std::result::Result<&crate::types::BooleanConfigurationOptions, &Self> {
        if let ConfigurationOptions::Boolean(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Boolean`](crate::types::ConfigurationOptions::Boolean).
    pub fn is_boolean(&self) -> bool {
        self.as_boolean().is_ok()
    }
    /// Tries to convert the enum instance into [`Double`](crate::types::ConfigurationOptions::Double), extracting the inner [`DoubleConfigurationOptions`](crate::types::DoubleConfigurationOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_double(&self) -> ::std::result::Result<&crate::types::DoubleConfigurationOptions, &Self> {
        if let ConfigurationOptions::Double(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Double`](crate::types::ConfigurationOptions::Double).
    pub fn is_double(&self) -> bool {
        self.as_double().is_ok()
    }
    /// Tries to convert the enum instance into [`Enum`](crate::types::ConfigurationOptions::Enum), extracting the inner [`EnumConfigurationOptions`](crate::types::EnumConfigurationOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_enum(&self) -> ::std::result::Result<&crate::types::EnumConfigurationOptions, &Self> {
        if let ConfigurationOptions::Enum(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Enum`](crate::types::ConfigurationOptions::Enum).
    pub fn is_enum(&self) -> bool {
        self.as_enum().is_ok()
    }
    /// Tries to convert the enum instance into [`EnumList`](crate::types::ConfigurationOptions::EnumList), extracting the inner [`EnumListConfigurationOptions`](crate::types::EnumListConfigurationOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_enum_list(&self) -> ::std::result::Result<&crate::types::EnumListConfigurationOptions, &Self> {
        if let ConfigurationOptions::EnumList(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EnumList`](crate::types::ConfigurationOptions::EnumList).
    pub fn is_enum_list(&self) -> bool {
        self.as_enum_list().is_ok()
    }
    /// Tries to convert the enum instance into [`Integer`](crate::types::ConfigurationOptions::Integer), extracting the inner [`IntegerConfigurationOptions`](crate::types::IntegerConfigurationOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_integer(&self) -> ::std::result::Result<&crate::types::IntegerConfigurationOptions, &Self> {
        if let ConfigurationOptions::Integer(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Integer`](crate::types::ConfigurationOptions::Integer).
    pub fn is_integer(&self) -> bool {
        self.as_integer().is_ok()
    }
    /// Tries to convert the enum instance into [`IntegerList`](crate::types::ConfigurationOptions::IntegerList), extracting the inner [`IntegerListConfigurationOptions`](crate::types::IntegerListConfigurationOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_integer_list(&self) -> ::std::result::Result<&crate::types::IntegerListConfigurationOptions, &Self> {
        if let ConfigurationOptions::IntegerList(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IntegerList`](crate::types::ConfigurationOptions::IntegerList).
    pub fn is_integer_list(&self) -> bool {
        self.as_integer_list().is_ok()
    }
    /// Tries to convert the enum instance into [`String`](crate::types::ConfigurationOptions::String), extracting the inner [`StringConfigurationOptions`](crate::types::StringConfigurationOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string(&self) -> ::std::result::Result<&crate::types::StringConfigurationOptions, &Self> {
        if let ConfigurationOptions::String(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`String`](crate::types::ConfigurationOptions::String).
    pub fn is_string(&self) -> bool {
        self.as_string().is_ok()
    }
    /// Tries to convert the enum instance into [`StringList`](crate::types::ConfigurationOptions::StringList), extracting the inner [`StringListConfigurationOptions`](crate::types::StringListConfigurationOptions).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_list(&self) -> ::std::result::Result<&crate::types::StringListConfigurationOptions, &Self> {
        if let ConfigurationOptions::StringList(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StringList`](crate::types::ConfigurationOptions::StringList).
    pub fn is_string_list(&self) -> bool {
        self.as_string_list().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
