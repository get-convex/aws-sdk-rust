// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns details about the commands that were run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetupExecutionDetails {
    /// <p>The command that was executed.</p>
    pub command: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp for when the request was run.</p>
    pub date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the target resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the <code>SetupInstanceHttps</code> request.</p>
    pub status: ::std::option::Option<crate::types::SetupStatus>,
    /// <p>The text written by the command to stderr.</p>
    pub standard_error: ::std::option::Option<::std::string::String>,
    /// <p>The text written by the command to stdout.</p>
    pub standard_output: ::std::option::Option<::std::string::String>,
    /// <p>The current version of the script..</p>
    pub version: ::std::option::Option<::std::string::String>,
}
impl SetupExecutionDetails {
    /// <p>The command that was executed.</p>
    pub fn command(&self) -> ::std::option::Option<&str> {
        self.command.as_deref()
    }
    /// <p>The timestamp for when the request was run.</p>
    pub fn date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_time.as_ref()
    }
    /// <p>The name of the target resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the <code>SetupInstanceHttps</code> request.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SetupStatus> {
        self.status.as_ref()
    }
    /// <p>The text written by the command to stderr.</p>
    pub fn standard_error(&self) -> ::std::option::Option<&str> {
        self.standard_error.as_deref()
    }
    /// <p>The text written by the command to stdout.</p>
    pub fn standard_output(&self) -> ::std::option::Option<&str> {
        self.standard_output.as_deref()
    }
    /// <p>The current version of the script..</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl SetupExecutionDetails {
    /// Creates a new builder-style object to manufacture [`SetupExecutionDetails`](crate::types::SetupExecutionDetails).
    pub fn builder() -> crate::types::builders::SetupExecutionDetailsBuilder {
        crate::types::builders::SetupExecutionDetailsBuilder::default()
    }
}

/// A builder for [`SetupExecutionDetails`](crate::types::SetupExecutionDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetupExecutionDetailsBuilder {
    pub(crate) command: ::std::option::Option<::std::string::String>,
    pub(crate) date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SetupStatus>,
    pub(crate) standard_error: ::std::option::Option<::std::string::String>,
    pub(crate) standard_output: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl SetupExecutionDetailsBuilder {
    /// <p>The command that was executed.</p>
    pub fn command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The command that was executed.</p>
    pub fn set_command(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command = input;
        self
    }
    /// <p>The command that was executed.</p>
    pub fn get_command(&self) -> &::std::option::Option<::std::string::String> {
        &self.command
    }
    /// <p>The timestamp for when the request was run.</p>
    pub fn date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the request was run.</p>
    pub fn set_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_time = input;
        self
    }
    /// <p>The timestamp for when the request was run.</p>
    pub fn get_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_time
    }
    /// <p>The name of the target resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the target resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the target resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the <code>SetupInstanceHttps</code> request.</p>
    pub fn status(mut self, input: crate::types::SetupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the <code>SetupInstanceHttps</code> request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SetupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the <code>SetupInstanceHttps</code> request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SetupStatus> {
        &self.status
    }
    /// <p>The text written by the command to stderr.</p>
    pub fn standard_error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.standard_error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text written by the command to stderr.</p>
    pub fn set_standard_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.standard_error = input;
        self
    }
    /// <p>The text written by the command to stderr.</p>
    pub fn get_standard_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.standard_error
    }
    /// <p>The text written by the command to stdout.</p>
    pub fn standard_output(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.standard_output = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text written by the command to stdout.</p>
    pub fn set_standard_output(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.standard_output = input;
        self
    }
    /// <p>The text written by the command to stdout.</p>
    pub fn get_standard_output(&self) -> &::std::option::Option<::std::string::String> {
        &self.standard_output
    }
    /// <p>The current version of the script..</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version of the script..</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The current version of the script..</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`SetupExecutionDetails`](crate::types::SetupExecutionDetails).
    pub fn build(self) -> crate::types::SetupExecutionDetails {
        crate::types::SetupExecutionDetails {
            command: self.command,
            date_time: self.date_time,
            name: self.name,
            status: self.status,
            standard_error: self.standard_error,
            standard_output: self.standard_output,
            version: self.version,
        }
    }
}
