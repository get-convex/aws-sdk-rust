// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns a list of the commands that were ran on the target resource.</p>
/// <p>The status of each command is also returned.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetupHistory {
    /// <p>A GUID that's used to identify the operation.</p>
    pub operation_id: ::std::option::Option<::std::string::String>,
    /// <p>Information about the specified request.</p>
    pub request: ::std::option::Option<crate::types::SetupRequest>,
    /// <p>The target resource name for the request.</p>
    pub resource: ::std::option::Option<crate::types::SetupHistoryResource>,
    /// <p>Describes the full details of the request.</p>
    pub execution_details: ::std::option::Option<::std::vec::Vec<crate::types::SetupExecutionDetails>>,
    /// <p>The status of the request.</p>
    pub status: ::std::option::Option<crate::types::SetupStatus>,
}
impl SetupHistory {
    /// <p>A GUID that's used to identify the operation.</p>
    pub fn operation_id(&self) -> ::std::option::Option<&str> {
        self.operation_id.as_deref()
    }
    /// <p>Information about the specified request.</p>
    pub fn request(&self) -> ::std::option::Option<&crate::types::SetupRequest> {
        self.request.as_ref()
    }
    /// <p>The target resource name for the request.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::SetupHistoryResource> {
        self.resource.as_ref()
    }
    /// <p>Describes the full details of the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.execution_details.is_none()`.
    pub fn execution_details(&self) -> &[crate::types::SetupExecutionDetails] {
        self.execution_details.as_deref().unwrap_or_default()
    }
    /// <p>The status of the request.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SetupStatus> {
        self.status.as_ref()
    }
}
impl SetupHistory {
    /// Creates a new builder-style object to manufacture [`SetupHistory`](crate::types::SetupHistory).
    pub fn builder() -> crate::types::builders::SetupHistoryBuilder {
        crate::types::builders::SetupHistoryBuilder::default()
    }
}

/// A builder for [`SetupHistory`](crate::types::SetupHistory).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetupHistoryBuilder {
    pub(crate) operation_id: ::std::option::Option<::std::string::String>,
    pub(crate) request: ::std::option::Option<crate::types::SetupRequest>,
    pub(crate) resource: ::std::option::Option<crate::types::SetupHistoryResource>,
    pub(crate) execution_details: ::std::option::Option<::std::vec::Vec<crate::types::SetupExecutionDetails>>,
    pub(crate) status: ::std::option::Option<crate::types::SetupStatus>,
}
impl SetupHistoryBuilder {
    /// <p>A GUID that's used to identify the operation.</p>
    pub fn operation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A GUID that's used to identify the operation.</p>
    pub fn set_operation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_id = input;
        self
    }
    /// <p>A GUID that's used to identify the operation.</p>
    pub fn get_operation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_id
    }
    /// <p>Information about the specified request.</p>
    pub fn request(mut self, input: crate::types::SetupRequest) -> Self {
        self.request = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the specified request.</p>
    pub fn set_request(mut self, input: ::std::option::Option<crate::types::SetupRequest>) -> Self {
        self.request = input;
        self
    }
    /// <p>Information about the specified request.</p>
    pub fn get_request(&self) -> &::std::option::Option<crate::types::SetupRequest> {
        &self.request
    }
    /// <p>The target resource name for the request.</p>
    pub fn resource(mut self, input: crate::types::SetupHistoryResource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target resource name for the request.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::SetupHistoryResource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The target resource name for the request.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::SetupHistoryResource> {
        &self.resource
    }
    /// Appends an item to `execution_details`.
    ///
    /// To override the contents of this collection use [`set_execution_details`](Self::set_execution_details).
    ///
    /// <p>Describes the full details of the request.</p>
    pub fn execution_details(mut self, input: crate::types::SetupExecutionDetails) -> Self {
        let mut v = self.execution_details.unwrap_or_default();
        v.push(input);
        self.execution_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the full details of the request.</p>
    pub fn set_execution_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SetupExecutionDetails>>) -> Self {
        self.execution_details = input;
        self
    }
    /// <p>Describes the full details of the request.</p>
    pub fn get_execution_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SetupExecutionDetails>> {
        &self.execution_details
    }
    /// <p>The status of the request.</p>
    pub fn status(mut self, input: crate::types::SetupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SetupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SetupStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`SetupHistory`](crate::types::SetupHistory).
    pub fn build(self) -> crate::types::SetupHistory {
        crate::types::SetupHistory {
            operation_id: self.operation_id,
            request: self.request,
            resource: self.resource,
            execution_details: self.execution_details,
            status: self.status,
        }
    }
}
