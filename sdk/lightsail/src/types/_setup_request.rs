// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information that was submitted during the <code>SetupInstanceHttps</code> request. Email information is redacted for privacy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetupRequest {
    /// <p>The name of the Lightsail instance.</p>
    pub instance_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the domain and subdomains that the SSL/TLS certificate secures.</p>
    pub domain_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Certificate Authority (CA) that issues the SSL/TLS certificate.</p>
    pub certificate_provider: ::std::option::Option<crate::types::CertificateProvider>,
}
impl SetupRequest {
    /// <p>The name of the Lightsail instance.</p>
    pub fn instance_name(&self) -> ::std::option::Option<&str> {
        self.instance_name.as_deref()
    }
    /// <p>The name of the domain and subdomains that the SSL/TLS certificate secures.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_names.is_none()`.
    pub fn domain_names(&self) -> &[::std::string::String] {
        self.domain_names.as_deref().unwrap_or_default()
    }
    /// <p>The Certificate Authority (CA) that issues the SSL/TLS certificate.</p>
    pub fn certificate_provider(&self) -> ::std::option::Option<&crate::types::CertificateProvider> {
        self.certificate_provider.as_ref()
    }
}
impl SetupRequest {
    /// Creates a new builder-style object to manufacture [`SetupRequest`](crate::types::SetupRequest).
    pub fn builder() -> crate::types::builders::SetupRequestBuilder {
        crate::types::builders::SetupRequestBuilder::default()
    }
}

/// A builder for [`SetupRequest`](crate::types::SetupRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetupRequestBuilder {
    pub(crate) instance_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) certificate_provider: ::std::option::Option<crate::types::CertificateProvider>,
}
impl SetupRequestBuilder {
    /// <p>The name of the Lightsail instance.</p>
    pub fn instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Lightsail instance.</p>
    pub fn set_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_name = input;
        self
    }
    /// <p>The name of the Lightsail instance.</p>
    pub fn get_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_name
    }
    /// Appends an item to `domain_names`.
    ///
    /// To override the contents of this collection use [`set_domain_names`](Self::set_domain_names).
    ///
    /// <p>The name of the domain and subdomains that the SSL/TLS certificate secures.</p>
    pub fn domain_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.domain_names.unwrap_or_default();
        v.push(input.into());
        self.domain_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the domain and subdomains that the SSL/TLS certificate secures.</p>
    pub fn set_domain_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.domain_names = input;
        self
    }
    /// <p>The name of the domain and subdomains that the SSL/TLS certificate secures.</p>
    pub fn get_domain_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.domain_names
    }
    /// <p>The Certificate Authority (CA) that issues the SSL/TLS certificate.</p>
    pub fn certificate_provider(mut self, input: crate::types::CertificateProvider) -> Self {
        self.certificate_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Certificate Authority (CA) that issues the SSL/TLS certificate.</p>
    pub fn set_certificate_provider(mut self, input: ::std::option::Option<crate::types::CertificateProvider>) -> Self {
        self.certificate_provider = input;
        self
    }
    /// <p>The Certificate Authority (CA) that issues the SSL/TLS certificate.</p>
    pub fn get_certificate_provider(&self) -> &::std::option::Option<crate::types::CertificateProvider> {
        &self.certificate_provider
    }
    /// Consumes the builder and constructs a [`SetupRequest`](crate::types::SetupRequest).
    pub fn build(self) -> crate::types::SetupRequest {
        crate::types::SetupRequest {
            instance_name: self.instance_name,
            domain_names: self.domain_names,
            certificate_provider: self.certificate_provider,
        }
    }
}
