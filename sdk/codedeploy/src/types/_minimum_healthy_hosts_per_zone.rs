// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the minimum number of healthy instances per Availability Zone.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MinimumHealthyHostsPerZone {
    /// <p>The <code>type</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub r#type: ::std::option::Option<crate::types::MinimumHealthyHostsPerZoneType>,
    /// <p>The <code>value</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub value: i32,
}
impl MinimumHealthyHostsPerZone {
    /// <p>The <code>type</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::MinimumHealthyHostsPerZoneType> {
        self.r#type.as_ref()
    }
    /// <p>The <code>value</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub fn value(&self) -> i32 {
        self.value
    }
}
impl MinimumHealthyHostsPerZone {
    /// Creates a new builder-style object to manufacture [`MinimumHealthyHostsPerZone`](crate::types::MinimumHealthyHostsPerZone).
    pub fn builder() -> crate::types::builders::MinimumHealthyHostsPerZoneBuilder {
        crate::types::builders::MinimumHealthyHostsPerZoneBuilder::default()
    }
}

/// A builder for [`MinimumHealthyHostsPerZone`](crate::types::MinimumHealthyHostsPerZone).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MinimumHealthyHostsPerZoneBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::MinimumHealthyHostsPerZoneType>,
    pub(crate) value: ::std::option::Option<i32>,
}
impl MinimumHealthyHostsPerZoneBuilder {
    /// <p>The <code>type</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub fn r#type(mut self, input: crate::types::MinimumHealthyHostsPerZoneType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>type</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MinimumHealthyHostsPerZoneType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The <code>type</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MinimumHealthyHostsPerZoneType> {
        &self.r#type
    }
    /// <p>The <code>value</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub fn value(mut self, input: i32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>value</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p>The <code>value</code> associated with the <code>MinimumHealthyHostsPerZone</code> option.</p>
    pub fn get_value(&self) -> &::std::option::Option<i32> {
        &self.value
    }
    /// Consumes the builder and constructs a [`MinimumHealthyHostsPerZone`](crate::types::MinimumHealthyHostsPerZone).
    pub fn build(self) -> crate::types::MinimumHealthyHostsPerZone {
        crate::types::MinimumHealthyHostsPerZone {
            r#type: self.r#type,
            value: self.value.unwrap_or_default(),
        }
    }
}
