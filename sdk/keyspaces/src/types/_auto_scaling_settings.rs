// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The optional auto scaling settings for a table with provisioned throughput capacity.</p>
/// <p>To turn on auto scaling for a table in <code>throughputMode:PROVISIONED</code>, you must specify the following parameters.</p>
/// <p>Configure the minimum and maximum units for write and read capacity. The auto scaling policy ensures that capacity never goes below the minimum or above the maximum range.</p>
/// <ul>
/// <li>
/// <p><code>minimumUnits</code>: The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p></li>
/// <li>
/// <p><code>maximumUnits</code>: The maximum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p></li>
/// <li>
/// <p><code>scalingPolicy</code>: Amazon Keyspaces supports the <code>target tracking</code> scaling policy. The auto scaling target is the provisioned read and write capacity of the table.</p>
/// <ul>
/// <li>
/// <p><code>targetTrackingScalingPolicyConfiguration</code>: To define the target tracking policy, you must define the target value.</p>
/// <ul>
/// <li>
/// <p><code>targetValue</code>: The target utilization rate of the table. Amazon Keyspaces auto scaling ensures that the ratio of consumed capacity to provisioned capacity stays at or near this value. You define <code>targetValue</code> as a percentage. A <code>double</code> between 20 and 90. (Required)</p></li>
/// <li>
/// <p><code>disableScaleIn</code>: A <code>boolean</code> that specifies if <code>scale-in</code> is disabled or enabled for the table. This parameter is disabled by default. To turn on <code>scale-in</code>, set the <code>boolean</code> value to <code>FALSE</code>. This means that capacity for a table can be automatically scaled down on your behalf. (Optional)</p></li>
/// <li>
/// <p><code>scaleInCooldown</code>: A cooldown period in seconds between scaling activities that lets the table stabilize before another scale in activity starts. If no value is provided, the default is 0. (Optional)</p></li>
/// <li>
/// <p><code>scaleOutCooldown</code>: A cooldown period in seconds between scaling activities that lets the table stabilize before another scale out activity starts. If no value is provided, the default is 0. (Optional)</p></li>
/// </ul></li>
/// </ul></li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/autoscaling.html">Managing throughput capacity automatically with Amazon Keyspaces auto scaling</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutoScalingSettings {
    /// <p>This optional parameter enables auto scaling for the table if set to <code>false</code>.</p>
    pub auto_scaling_disabled: bool,
    /// <p>The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub minimum_units: ::std::option::Option<i64>,
    /// <p>Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub maximum_units: ::std::option::Option<i64>,
    /// <p>Amazon Keyspaces supports the <code>target tracking</code> auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.</p>
    pub scaling_policy: ::std::option::Option<crate::types::AutoScalingPolicy>,
}
impl AutoScalingSettings {
    /// <p>This optional parameter enables auto scaling for the table if set to <code>false</code>.</p>
    pub fn auto_scaling_disabled(&self) -> bool {
        self.auto_scaling_disabled
    }
    /// <p>The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub fn minimum_units(&self) -> ::std::option::Option<i64> {
        self.minimum_units
    }
    /// <p>Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub fn maximum_units(&self) -> ::std::option::Option<i64> {
        self.maximum_units
    }
    /// <p>Amazon Keyspaces supports the <code>target tracking</code> auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.</p>
    pub fn scaling_policy(&self) -> ::std::option::Option<&crate::types::AutoScalingPolicy> {
        self.scaling_policy.as_ref()
    }
}
impl AutoScalingSettings {
    /// Creates a new builder-style object to manufacture [`AutoScalingSettings`](crate::types::AutoScalingSettings).
    pub fn builder() -> crate::types::builders::AutoScalingSettingsBuilder {
        crate::types::builders::AutoScalingSettingsBuilder::default()
    }
}

/// A builder for [`AutoScalingSettings`](crate::types::AutoScalingSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AutoScalingSettingsBuilder {
    pub(crate) auto_scaling_disabled: ::std::option::Option<bool>,
    pub(crate) minimum_units: ::std::option::Option<i64>,
    pub(crate) maximum_units: ::std::option::Option<i64>,
    pub(crate) scaling_policy: ::std::option::Option<crate::types::AutoScalingPolicy>,
}
impl AutoScalingSettingsBuilder {
    /// <p>This optional parameter enables auto scaling for the table if set to <code>false</code>.</p>
    pub fn auto_scaling_disabled(mut self, input: bool) -> Self {
        self.auto_scaling_disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>This optional parameter enables auto scaling for the table if set to <code>false</code>.</p>
    pub fn set_auto_scaling_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_scaling_disabled = input;
        self
    }
    /// <p>This optional parameter enables auto scaling for the table if set to <code>false</code>.</p>
    pub fn get_auto_scaling_disabled(&self) -> &::std::option::Option<bool> {
        &self.auto_scaling_disabled
    }
    /// <p>The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub fn minimum_units(mut self, input: i64) -> Self {
        self.minimum_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub fn set_minimum_units(mut self, input: ::std::option::Option<i64>) -> Self {
        self.minimum_units = input;
        self
    }
    /// <p>The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub fn get_minimum_units(&self) -> &::std::option::Option<i64> {
        &self.minimum_units
    }
    /// <p>Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub fn maximum_units(mut self, input: i64) -> Self {
        self.maximum_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub fn set_maximum_units(mut self, input: ::std::option::Option<i64>) -> Self {
        self.maximum_units = input;
        self
    }
    /// <p>Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).</p>
    pub fn get_maximum_units(&self) -> &::std::option::Option<i64> {
        &self.maximum_units
    }
    /// <p>Amazon Keyspaces supports the <code>target tracking</code> auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.</p>
    pub fn scaling_policy(mut self, input: crate::types::AutoScalingPolicy) -> Self {
        self.scaling_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon Keyspaces supports the <code>target tracking</code> auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.</p>
    pub fn set_scaling_policy(mut self, input: ::std::option::Option<crate::types::AutoScalingPolicy>) -> Self {
        self.scaling_policy = input;
        self
    }
    /// <p>Amazon Keyspaces supports the <code>target tracking</code> auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.</p>
    pub fn get_scaling_policy(&self) -> &::std::option::Option<crate::types::AutoScalingPolicy> {
        &self.scaling_policy
    }
    /// Consumes the builder and constructs a [`AutoScalingSettings`](crate::types::AutoScalingSettings).
    pub fn build(self) -> crate::types::AutoScalingSettings {
        crate::types::AutoScalingSettings {
            auto_scaling_disabled: self.auto_scaling_disabled.unwrap_or_default(),
            minimum_units: self.minimum_units,
            maximum_units: self.maximum_units,
            scaling_policy: self.scaling_policy,
        }
    }
}
