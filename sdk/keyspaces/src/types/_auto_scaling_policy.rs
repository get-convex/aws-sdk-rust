// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Amazon Keyspaces supports the <code>target tracking</code> auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutoScalingPolicy {
    /// <p>Auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. A <code>double</code> between 20 and 90.</p>
    pub target_tracking_scaling_policy_configuration: ::std::option::Option<crate::types::TargetTrackingScalingPolicyConfiguration>,
}
impl AutoScalingPolicy {
    /// <p>Auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. A <code>double</code> between 20 and 90.</p>
    pub fn target_tracking_scaling_policy_configuration(&self) -> ::std::option::Option<&crate::types::TargetTrackingScalingPolicyConfiguration> {
        self.target_tracking_scaling_policy_configuration.as_ref()
    }
}
impl AutoScalingPolicy {
    /// Creates a new builder-style object to manufacture [`AutoScalingPolicy`](crate::types::AutoScalingPolicy).
    pub fn builder() -> crate::types::builders::AutoScalingPolicyBuilder {
        crate::types::builders::AutoScalingPolicyBuilder::default()
    }
}

/// A builder for [`AutoScalingPolicy`](crate::types::AutoScalingPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AutoScalingPolicyBuilder {
    pub(crate) target_tracking_scaling_policy_configuration: ::std::option::Option<crate::types::TargetTrackingScalingPolicyConfiguration>,
}
impl AutoScalingPolicyBuilder {
    /// <p>Auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. A <code>double</code> between 20 and 90.</p>
    pub fn target_tracking_scaling_policy_configuration(mut self, input: crate::types::TargetTrackingScalingPolicyConfiguration) -> Self {
        self.target_tracking_scaling_policy_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. A <code>double</code> between 20 and 90.</p>
    pub fn set_target_tracking_scaling_policy_configuration(
        mut self,
        input: ::std::option::Option<crate::types::TargetTrackingScalingPolicyConfiguration>,
    ) -> Self {
        self.target_tracking_scaling_policy_configuration = input;
        self
    }
    /// <p>Auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. A <code>double</code> between 20 and 90.</p>
    pub fn get_target_tracking_scaling_policy_configuration(&self) -> &::std::option::Option<crate::types::TargetTrackingScalingPolicyConfiguration> {
        &self.target_tracking_scaling_policy_configuration
    }
    /// Consumes the builder and constructs a [`AutoScalingPolicy`](crate::types::AutoScalingPolicy).
    pub fn build(self) -> crate::types::AutoScalingPolicy {
        crate::types::AutoScalingPolicy {
            target_tracking_scaling_policy_configuration: self.target_tracking_scaling_policy_configuration,
        }
    }
}
