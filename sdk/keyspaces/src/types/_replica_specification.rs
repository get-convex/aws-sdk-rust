// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Web Services Region specific settings of a multi-Region table.</p>
/// <p>For a multi-Region table, you can configure the table's read capacity differently per Amazon Web Services Region. You can do this by configuring the following parameters.</p>
/// <ul>
/// <li>
/// <p><code>region</code>: The Region where these settings are applied. (Required)</p></li>
/// <li>
/// <p><code>readCapacityUnits</code>: The provisioned read capacity units. (Optional)</p></li>
/// <li>
/// <p><code>readCapacityAutoScaling</code>: The read capacity auto scaling settings for the table. (Optional)</p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicaSpecification {
    /// <p>The Amazon Web Services Region.</p>
    pub region: ::std::string::String,
    /// <p>The provisioned read capacity units for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub read_capacity_units: ::std::option::Option<i64>,
    /// <p>The read capacity auto scaling settings for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub read_capacity_auto_scaling: ::std::option::Option<crate::types::AutoScalingSettings>,
}
impl ReplicaSpecification {
    /// <p>The Amazon Web Services Region.</p>
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
    /// <p>The provisioned read capacity units for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn read_capacity_units(&self) -> ::std::option::Option<i64> {
        self.read_capacity_units
    }
    /// <p>The read capacity auto scaling settings for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn read_capacity_auto_scaling(&self) -> ::std::option::Option<&crate::types::AutoScalingSettings> {
        self.read_capacity_auto_scaling.as_ref()
    }
}
impl ReplicaSpecification {
    /// Creates a new builder-style object to manufacture [`ReplicaSpecification`](crate::types::ReplicaSpecification).
    pub fn builder() -> crate::types::builders::ReplicaSpecificationBuilder {
        crate::types::builders::ReplicaSpecificationBuilder::default()
    }
}

/// A builder for [`ReplicaSpecification`](crate::types::ReplicaSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicaSpecificationBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) read_capacity_units: ::std::option::Option<i64>,
    pub(crate) read_capacity_auto_scaling: ::std::option::Option<crate::types::AutoScalingSettings>,
}
impl ReplicaSpecificationBuilder {
    /// <p>The Amazon Web Services Region.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The provisioned read capacity units for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn read_capacity_units(mut self, input: i64) -> Self {
        self.read_capacity_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The provisioned read capacity units for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn set_read_capacity_units(mut self, input: ::std::option::Option<i64>) -> Self {
        self.read_capacity_units = input;
        self
    }
    /// <p>The provisioned read capacity units for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn get_read_capacity_units(&self) -> &::std::option::Option<i64> {
        &self.read_capacity_units
    }
    /// <p>The read capacity auto scaling settings for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn read_capacity_auto_scaling(mut self, input: crate::types::AutoScalingSettings) -> Self {
        self.read_capacity_auto_scaling = ::std::option::Option::Some(input);
        self
    }
    /// <p>The read capacity auto scaling settings for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn set_read_capacity_auto_scaling(mut self, input: ::std::option::Option<crate::types::AutoScalingSettings>) -> Self {
        self.read_capacity_auto_scaling = input;
        self
    }
    /// <p>The read capacity auto scaling settings for the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn get_read_capacity_auto_scaling(&self) -> &::std::option::Option<crate::types::AutoScalingSettings> {
        &self.read_capacity_auto_scaling
    }
    /// Consumes the builder and constructs a [`ReplicaSpecification`](crate::types::ReplicaSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`region`](crate::types::builders::ReplicaSpecificationBuilder::region)
    pub fn build(self) -> ::std::result::Result<crate::types::ReplicaSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReplicaSpecification {
            region: self.region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region",
                    "region was not specified but it is required when building ReplicaSpecification",
                )
            })?,
            read_capacity_units: self.read_capacity_units,
            read_capacity_auto_scaling: self.read_capacity_auto_scaling,
        })
    }
}
