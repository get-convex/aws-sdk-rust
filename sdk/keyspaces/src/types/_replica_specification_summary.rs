// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Region-specific settings of a multi-Region table in the specified Amazon Web Services Region.</p>
/// <p>If the multi-Region table is using provisioned capacity and has optional auto scaling policies configured, note that the Region specific summary returns both read and write capacity settings. But only Region specific read capacity settings can be configured for a multi-Region table. In a multi-Region table, your write capacity units will be synced across all Amazon Web Services Regions to ensure that there is enough capacity to replicate write events across Regions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicaSpecificationSummary {
    /// <p>The Amazon Web Services Region.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The status of the multi-Region table in the specified Amazon Web Services Region.</p>
    pub status: ::std::option::Option<crate::types::TableStatus>,
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>throughputMode:PAY_PER_REQUEST</code> and</p></li>
    /// <li>
    /// <p><code>throughputMode:PROVISIONED</code>.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub capacity_specification: ::std::option::Option<crate::types::CapacitySpecificationSummary>,
}
impl ReplicaSpecificationSummary {
    /// <p>The Amazon Web Services Region.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The status of the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TableStatus> {
        self.status.as_ref()
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>throughputMode:PAY_PER_REQUEST</code> and</p></li>
    /// <li>
    /// <p><code>throughputMode:PROVISIONED</code>.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn capacity_specification(&self) -> ::std::option::Option<&crate::types::CapacitySpecificationSummary> {
        self.capacity_specification.as_ref()
    }
}
impl ReplicaSpecificationSummary {
    /// Creates a new builder-style object to manufacture [`ReplicaSpecificationSummary`](crate::types::ReplicaSpecificationSummary).
    pub fn builder() -> crate::types::builders::ReplicaSpecificationSummaryBuilder {
        crate::types::builders::ReplicaSpecificationSummaryBuilder::default()
    }
}

/// A builder for [`ReplicaSpecificationSummary`](crate::types::ReplicaSpecificationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicaSpecificationSummaryBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TableStatus>,
    pub(crate) capacity_specification: ::std::option::Option<crate::types::CapacitySpecificationSummary>,
}
impl ReplicaSpecificationSummaryBuilder {
    /// <p>The Amazon Web Services Region.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The status of the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn status(mut self, input: crate::types::TableStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TableStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the multi-Region table in the specified Amazon Web Services Region.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TableStatus> {
        &self.status
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>throughputMode:PAY_PER_REQUEST</code> and</p></li>
    /// <li>
    /// <p><code>throughputMode:PROVISIONED</code>.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn capacity_specification(mut self, input: crate::types::CapacitySpecificationSummary) -> Self {
        self.capacity_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>throughputMode:PAY_PER_REQUEST</code> and</p></li>
    /// <li>
    /// <p><code>throughputMode:PROVISIONED</code>.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_capacity_specification(mut self, input: ::std::option::Option<crate::types::CapacitySpecificationSummary>) -> Self {
        self.capacity_specification = input;
        self
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>throughputMode:PAY_PER_REQUEST</code> and</p></li>
    /// <li>
    /// <p><code>throughputMode:PROVISIONED</code>.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn get_capacity_specification(&self) -> &::std::option::Option<crate::types::CapacitySpecificationSummary> {
        &self.capacity_specification
    }
    /// Consumes the builder and constructs a [`ReplicaSpecificationSummary`](crate::types::ReplicaSpecificationSummary).
    pub fn build(self) -> crate::types::ReplicaSpecificationSummary {
        crate::types::ReplicaSpecificationSummary {
            region: self.region,
            status: self.status,
            capacity_specification: self.capacity_specification,
        }
    }
}
