// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_image_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_image::CreateImageInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.enhanced_image_metadata_enabled {
        object.key("enhancedImageMetadataEnabled").boolean(*var_4);
    }
    if let Some(var_5) = &input.execution_role {
        object.key("executionRole").string(var_5.as_str());
    }
    if let Some(var_6) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.image_scanning_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("imageScanningConfiguration").start_object();
        crate::protocol_serde::shape_image_scanning_configuration::ser_image_scanning_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.image_tests_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("imageTestsConfiguration").start_object();
        crate::protocol_serde::shape_image_tests_configuration::ser_image_tests_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.workflows {
        let mut array_17 = object.key("workflows").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_workflow_configuration::ser_workflow_configuration(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}
