// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains control settings and configurable inputs for a workflow resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub workflow_arn: ::std::string::String,
    /// <p>Contains parameter values for each of the parameters that the workflow document defined for the workflow resource.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowParameter>>,
    /// <p>Test workflows are defined within named runtime groups called parallel groups. The parallel group is the named group that contains this test workflow. Test workflows within a parallel group can run at the same time. Image Builder starts up to five test workflows in the group at the same time, and starts additional workflows as others complete, until all workflows in the group have completed. This field only applies for test workflows.</p>
    pub parallel_group: ::std::option::Option<::std::string::String>,
    /// <p>The action to take if the workflow fails.</p>
    pub on_failure: ::std::option::Option<crate::types::OnWorkflowFailure>,
}
impl WorkflowConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn workflow_arn(&self) -> &str {
        use std::ops::Deref;
        self.workflow_arn.deref()
    }
    /// <p>Contains parameter values for each of the parameters that the workflow document defined for the workflow resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::WorkflowParameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>Test workflows are defined within named runtime groups called parallel groups. The parallel group is the named group that contains this test workflow. Test workflows within a parallel group can run at the same time. Image Builder starts up to five test workflows in the group at the same time, and starts additional workflows as others complete, until all workflows in the group have completed. This field only applies for test workflows.</p>
    pub fn parallel_group(&self) -> ::std::option::Option<&str> {
        self.parallel_group.as_deref()
    }
    /// <p>The action to take if the workflow fails.</p>
    pub fn on_failure(&self) -> ::std::option::Option<&crate::types::OnWorkflowFailure> {
        self.on_failure.as_ref()
    }
}
impl WorkflowConfiguration {
    /// Creates a new builder-style object to manufacture [`WorkflowConfiguration`](crate::types::WorkflowConfiguration).
    pub fn builder() -> crate::types::builders::WorkflowConfigurationBuilder {
        crate::types::builders::WorkflowConfigurationBuilder::default()
    }
}

/// A builder for [`WorkflowConfiguration`](crate::types::WorkflowConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowConfigurationBuilder {
    pub(crate) workflow_arn: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowParameter>>,
    pub(crate) parallel_group: ::std::option::Option<::std::string::String>,
    pub(crate) on_failure: ::std::option::Option<crate::types::OnWorkflowFailure>,
}
impl WorkflowConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    /// This field is required.
    pub fn workflow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn set_workflow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn get_workflow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_arn
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Contains parameter values for each of the parameters that the workflow document defined for the workflow resource.</p>
    pub fn parameters(mut self, input: crate::types::WorkflowParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains parameter values for each of the parameters that the workflow document defined for the workflow resource.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowParameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Contains parameter values for each of the parameters that the workflow document defined for the workflow resource.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkflowParameter>> {
        &self.parameters
    }
    /// <p>Test workflows are defined within named runtime groups called parallel groups. The parallel group is the named group that contains this test workflow. Test workflows within a parallel group can run at the same time. Image Builder starts up to five test workflows in the group at the same time, and starts additional workflows as others complete, until all workflows in the group have completed. This field only applies for test workflows.</p>
    pub fn parallel_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parallel_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Test workflows are defined within named runtime groups called parallel groups. The parallel group is the named group that contains this test workflow. Test workflows within a parallel group can run at the same time. Image Builder starts up to five test workflows in the group at the same time, and starts additional workflows as others complete, until all workflows in the group have completed. This field only applies for test workflows.</p>
    pub fn set_parallel_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parallel_group = input;
        self
    }
    /// <p>Test workflows are defined within named runtime groups called parallel groups. The parallel group is the named group that contains this test workflow. Test workflows within a parallel group can run at the same time. Image Builder starts up to five test workflows in the group at the same time, and starts additional workflows as others complete, until all workflows in the group have completed. This field only applies for test workflows.</p>
    pub fn get_parallel_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.parallel_group
    }
    /// <p>The action to take if the workflow fails.</p>
    pub fn on_failure(mut self, input: crate::types::OnWorkflowFailure) -> Self {
        self.on_failure = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to take if the workflow fails.</p>
    pub fn set_on_failure(mut self, input: ::std::option::Option<crate::types::OnWorkflowFailure>) -> Self {
        self.on_failure = input;
        self
    }
    /// <p>The action to take if the workflow fails.</p>
    pub fn get_on_failure(&self) -> &::std::option::Option<crate::types::OnWorkflowFailure> {
        &self.on_failure
    }
    /// Consumes the builder and constructs a [`WorkflowConfiguration`](crate::types::WorkflowConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`workflow_arn`](crate::types::builders::WorkflowConfigurationBuilder::workflow_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkflowConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkflowConfiguration {
            workflow_arn: self.workflow_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workflow_arn",
                    "workflow_arn was not specified but it is required when building WorkflowConfiguration",
                )
            })?,
            parameters: self.parameters,
            parallel_group: self.parallel_group,
            on_failure: self.on_failure,
        })
    }
}
