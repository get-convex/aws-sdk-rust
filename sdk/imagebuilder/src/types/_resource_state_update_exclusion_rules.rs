// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional rules to specify resources that should be exempt from ad-hoc lifecycle actions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceStateUpdateExclusionRules {
    /// <p>Defines criteria for AMIs that are excluded from lifecycle actions.</p>
    pub amis: ::std::option::Option<crate::types::LifecyclePolicyDetailExclusionRulesAmis>,
}
impl ResourceStateUpdateExclusionRules {
    /// <p>Defines criteria for AMIs that are excluded from lifecycle actions.</p>
    pub fn amis(&self) -> ::std::option::Option<&crate::types::LifecyclePolicyDetailExclusionRulesAmis> {
        self.amis.as_ref()
    }
}
impl ResourceStateUpdateExclusionRules {
    /// Creates a new builder-style object to manufacture [`ResourceStateUpdateExclusionRules`](crate::types::ResourceStateUpdateExclusionRules).
    pub fn builder() -> crate::types::builders::ResourceStateUpdateExclusionRulesBuilder {
        crate::types::builders::ResourceStateUpdateExclusionRulesBuilder::default()
    }
}

/// A builder for [`ResourceStateUpdateExclusionRules`](crate::types::ResourceStateUpdateExclusionRules).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceStateUpdateExclusionRulesBuilder {
    pub(crate) amis: ::std::option::Option<crate::types::LifecyclePolicyDetailExclusionRulesAmis>,
}
impl ResourceStateUpdateExclusionRulesBuilder {
    /// <p>Defines criteria for AMIs that are excluded from lifecycle actions.</p>
    pub fn amis(mut self, input: crate::types::LifecyclePolicyDetailExclusionRulesAmis) -> Self {
        self.amis = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines criteria for AMIs that are excluded from lifecycle actions.</p>
    pub fn set_amis(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyDetailExclusionRulesAmis>) -> Self {
        self.amis = input;
        self
    }
    /// <p>Defines criteria for AMIs that are excluded from lifecycle actions.</p>
    pub fn get_amis(&self) -> &::std::option::Option<crate::types::LifecyclePolicyDetailExclusionRulesAmis> {
        &self.amis
    }
    /// Consumes the builder and constructs a [`ResourceStateUpdateExclusionRules`](crate::types::ResourceStateUpdateExclusionRules).
    pub fn build(self) -> crate::types::ResourceStateUpdateExclusionRules {
        crate::types::ResourceStateUpdateExclusionRules { amis: self.amis }
    }
}
