// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a process that Image Builder uses to build and test images during the image creation process.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Workflow {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workflow resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The workflow resource version. Workflow resources are immutable. To make a change, you can clone a workflow or create a new version.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The description of the workflow.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Describes what change has been made in this version of the workflow, or what makes this version different from other versions of the workflow.</p>
    pub change_description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the image creation stage that the workflow applies to. Image Builder currently supports build and test workflows.</p>
    pub r#type: ::std::option::Option<crate::types::WorkflowType>,
    /// <p>Describes the current status of the workflow and the reason for that status.</p>
    pub state: ::std::option::Option<crate::types::WorkflowState>,
    /// <p>The owner of the workflow resource.</p>
    pub owner: ::std::option::Option<::std::string::String>,
    /// <p>Contains the YAML document content for the workflow.</p>
    pub data: ::std::option::Option<::std::string::String>,
    /// <p>The KMS key identifier used to encrypt the workflow resource.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when Image Builder created the workflow resource.</p>
    pub date_created: ::std::option::Option<::std::string::String>,
    /// <p>The tags that apply to the workflow resource</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>An array of input parameters that that the image workflow uses to control actions or configure settings.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowParameterDetail>>,
}
impl Workflow {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the workflow resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The workflow resource version. Workflow resources are immutable. To make a change, you can clone a workflow or create a new version.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The description of the workflow.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Describes what change has been made in this version of the workflow, or what makes this version different from other versions of the workflow.</p>
    pub fn change_description(&self) -> ::std::option::Option<&str> {
        self.change_description.as_deref()
    }
    /// <p>Specifies the image creation stage that the workflow applies to. Image Builder currently supports build and test workflows.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::WorkflowType> {
        self.r#type.as_ref()
    }
    /// <p>Describes the current status of the workflow and the reason for that status.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::WorkflowState> {
        self.state.as_ref()
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn owner(&self) -> ::std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>Contains the YAML document content for the workflow.</p>
    pub fn data(&self) -> ::std::option::Option<&str> {
        self.data.as_deref()
    }
    /// <p>The KMS key identifier used to encrypt the workflow resource.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The timestamp when Image Builder created the workflow resource.</p>
    pub fn date_created(&self) -> ::std::option::Option<&str> {
        self.date_created.as_deref()
    }
    /// <p>The tags that apply to the workflow resource</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>An array of input parameters that that the image workflow uses to control actions or configure settings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::WorkflowParameterDetail] {
        self.parameters.as_deref().unwrap_or_default()
    }
}
impl Workflow {
    /// Creates a new builder-style object to manufacture [`Workflow`](crate::types::Workflow).
    pub fn builder() -> crate::types::builders::WorkflowBuilder {
        crate::types::builders::WorkflowBuilder::default()
    }
}

/// A builder for [`Workflow`](crate::types::Workflow).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) change_description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::WorkflowType>,
    pub(crate) state: ::std::option::Option<crate::types::WorkflowState>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) date_created: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowParameterDetail>>,
}
impl WorkflowBuilder {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the workflow resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the workflow resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The workflow resource version. Workflow resources are immutable. To make a change, you can clone a workflow or create a new version.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workflow resource version. Workflow resources are immutable. To make a change, you can clone a workflow or create a new version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The workflow resource version. Workflow resources are immutable. To make a change, you can clone a workflow or create a new version.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The description of the workflow.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the workflow.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the workflow.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Describes what change has been made in this version of the workflow, or what makes this version different from other versions of the workflow.</p>
    pub fn change_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes what change has been made in this version of the workflow, or what makes this version different from other versions of the workflow.</p>
    pub fn set_change_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_description = input;
        self
    }
    /// <p>Describes what change has been made in this version of the workflow, or what makes this version different from other versions of the workflow.</p>
    pub fn get_change_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_description
    }
    /// <p>Specifies the image creation stage that the workflow applies to. Image Builder currently supports build and test workflows.</p>
    pub fn r#type(mut self, input: crate::types::WorkflowType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the image creation stage that the workflow applies to. Image Builder currently supports build and test workflows.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies the image creation stage that the workflow applies to. Image Builder currently supports build and test workflows.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.r#type
    }
    /// <p>Describes the current status of the workflow and the reason for that status.</p>
    pub fn state(mut self, input: crate::types::WorkflowState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the current status of the workflow and the reason for that status.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::WorkflowState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Describes the current status of the workflow and the reason for that status.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::WorkflowState> {
        &self.state
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>Contains the YAML document content for the workflow.</p>
    pub fn data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the YAML document content for the workflow.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data = input;
        self
    }
    /// <p>Contains the YAML document content for the workflow.</p>
    pub fn get_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.data
    }
    /// <p>The KMS key identifier used to encrypt the workflow resource.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key identifier used to encrypt the workflow resource.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The KMS key identifier used to encrypt the workflow resource.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The timestamp when Image Builder created the workflow resource.</p>
    pub fn date_created(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.date_created = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when Image Builder created the workflow resource.</p>
    pub fn set_date_created(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.date_created = input;
        self
    }
    /// <p>The timestamp when Image Builder created the workflow resource.</p>
    pub fn get_date_created(&self) -> &::std::option::Option<::std::string::String> {
        &self.date_created
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that apply to the workflow resource</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags that apply to the workflow resource</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that apply to the workflow resource</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>An array of input parameters that that the image workflow uses to control actions or configure settings.</p>
    pub fn parameters(mut self, input: crate::types::WorkflowParameterDetail) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of input parameters that that the image workflow uses to control actions or configure settings.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowParameterDetail>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>An array of input parameters that that the image workflow uses to control actions or configure settings.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkflowParameterDetail>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`Workflow`](crate::types::Workflow).
    pub fn build(self) -> crate::types::Workflow {
        crate::types::Workflow {
            arn: self.arn,
            name: self.name,
            version: self.version,
            description: self.description,
            change_description: self.change_description,
            r#type: self.r#type,
            state: self.state,
            owner: self.owner,
            data: self.data,
            kms_key_id: self.kms_key_id,
            date_created: self.date_created,
            tags: self.tags,
            parameters: self.parameters,
        }
    }
}
