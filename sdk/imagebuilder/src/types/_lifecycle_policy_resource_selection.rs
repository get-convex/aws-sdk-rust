// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Resource selection criteria for the lifecycle policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LifecyclePolicyResourceSelection {
    /// <p>A list of recipes that are used as selection criteria for the output images that the lifecycle policy applies to.</p>
    pub recipes: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyResourceSelectionRecipe>>,
    /// <p>A list of tags that are used as selection criteria for the resources that the lifecycle policy applies to.</p>
    pub tag_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl LifecyclePolicyResourceSelection {
    /// <p>A list of recipes that are used as selection criteria for the output images that the lifecycle policy applies to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.recipes.is_none()`.
    pub fn recipes(&self) -> &[crate::types::LifecyclePolicyResourceSelectionRecipe] {
        self.recipes.as_deref().unwrap_or_default()
    }
    /// <p>A list of tags that are used as selection criteria for the resources that the lifecycle policy applies to.</p>
    pub fn tag_map(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tag_map.as_ref()
    }
}
impl LifecyclePolicyResourceSelection {
    /// Creates a new builder-style object to manufacture [`LifecyclePolicyResourceSelection`](crate::types::LifecyclePolicyResourceSelection).
    pub fn builder() -> crate::types::builders::LifecyclePolicyResourceSelectionBuilder {
        crate::types::builders::LifecyclePolicyResourceSelectionBuilder::default()
    }
}

/// A builder for [`LifecyclePolicyResourceSelection`](crate::types::LifecyclePolicyResourceSelection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LifecyclePolicyResourceSelectionBuilder {
    pub(crate) recipes: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyResourceSelectionRecipe>>,
    pub(crate) tag_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl LifecyclePolicyResourceSelectionBuilder {
    /// Appends an item to `recipes`.
    ///
    /// To override the contents of this collection use [`set_recipes`](Self::set_recipes).
    ///
    /// <p>A list of recipes that are used as selection criteria for the output images that the lifecycle policy applies to.</p>
    pub fn recipes(mut self, input: crate::types::LifecyclePolicyResourceSelectionRecipe) -> Self {
        let mut v = self.recipes.unwrap_or_default();
        v.push(input);
        self.recipes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of recipes that are used as selection criteria for the output images that the lifecycle policy applies to.</p>
    pub fn set_recipes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyResourceSelectionRecipe>>) -> Self {
        self.recipes = input;
        self
    }
    /// <p>A list of recipes that are used as selection criteria for the output images that the lifecycle policy applies to.</p>
    pub fn get_recipes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyResourceSelectionRecipe>> {
        &self.recipes
    }
    /// Adds a key-value pair to `tag_map`.
    ///
    /// To override the contents of this collection use [`set_tag_map`](Self::set_tag_map).
    ///
    /// <p>A list of tags that are used as selection criteria for the resources that the lifecycle policy applies to.</p>
    pub fn tag_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tag_map.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tag_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of tags that are used as selection criteria for the resources that the lifecycle policy applies to.</p>
    pub fn set_tag_map(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tag_map = input;
        self
    }
    /// <p>A list of tags that are used as selection criteria for the resources that the lifecycle policy applies to.</p>
    pub fn get_tag_map(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tag_map
    }
    /// Consumes the builder and constructs a [`LifecyclePolicyResourceSelection`](crate::types::LifecyclePolicyResourceSelection).
    pub fn build(self) -> crate::types::LifecyclePolicyResourceSelection {
        crate::types::LifecyclePolicyResourceSelection {
            recipes: self.recipes,
            tag_map: self.tag_map,
        }
    }
}
