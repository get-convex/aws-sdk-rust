// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies if the lifecycle policy should apply actions to selected resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceStateUpdateIncludeResources {
    /// <p>Specifies whether the lifecycle action should apply to distributed AMIs</p>
    pub amis: bool,
    /// <p>Specifies whether the lifecycle action should apply to snapshots associated with distributed AMIs.</p>
    pub snapshots: bool,
    /// <p>Specifies whether the lifecycle action should apply to distributed containers.</p>
    pub containers: bool,
}
impl ResourceStateUpdateIncludeResources {
    /// <p>Specifies whether the lifecycle action should apply to distributed AMIs</p>
    pub fn amis(&self) -> bool {
        self.amis
    }
    /// <p>Specifies whether the lifecycle action should apply to snapshots associated with distributed AMIs.</p>
    pub fn snapshots(&self) -> bool {
        self.snapshots
    }
    /// <p>Specifies whether the lifecycle action should apply to distributed containers.</p>
    pub fn containers(&self) -> bool {
        self.containers
    }
}
impl ResourceStateUpdateIncludeResources {
    /// Creates a new builder-style object to manufacture [`ResourceStateUpdateIncludeResources`](crate::types::ResourceStateUpdateIncludeResources).
    pub fn builder() -> crate::types::builders::ResourceStateUpdateIncludeResourcesBuilder {
        crate::types::builders::ResourceStateUpdateIncludeResourcesBuilder::default()
    }
}

/// A builder for [`ResourceStateUpdateIncludeResources`](crate::types::ResourceStateUpdateIncludeResources).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceStateUpdateIncludeResourcesBuilder {
    pub(crate) amis: ::std::option::Option<bool>,
    pub(crate) snapshots: ::std::option::Option<bool>,
    pub(crate) containers: ::std::option::Option<bool>,
}
impl ResourceStateUpdateIncludeResourcesBuilder {
    /// <p>Specifies whether the lifecycle action should apply to distributed AMIs</p>
    pub fn amis(mut self, input: bool) -> Self {
        self.amis = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the lifecycle action should apply to distributed AMIs</p>
    pub fn set_amis(mut self, input: ::std::option::Option<bool>) -> Self {
        self.amis = input;
        self
    }
    /// <p>Specifies whether the lifecycle action should apply to distributed AMIs</p>
    pub fn get_amis(&self) -> &::std::option::Option<bool> {
        &self.amis
    }
    /// <p>Specifies whether the lifecycle action should apply to snapshots associated with distributed AMIs.</p>
    pub fn snapshots(mut self, input: bool) -> Self {
        self.snapshots = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the lifecycle action should apply to snapshots associated with distributed AMIs.</p>
    pub fn set_snapshots(mut self, input: ::std::option::Option<bool>) -> Self {
        self.snapshots = input;
        self
    }
    /// <p>Specifies whether the lifecycle action should apply to snapshots associated with distributed AMIs.</p>
    pub fn get_snapshots(&self) -> &::std::option::Option<bool> {
        &self.snapshots
    }
    /// <p>Specifies whether the lifecycle action should apply to distributed containers.</p>
    pub fn containers(mut self, input: bool) -> Self {
        self.containers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the lifecycle action should apply to distributed containers.</p>
    pub fn set_containers(mut self, input: ::std::option::Option<bool>) -> Self {
        self.containers = input;
        self
    }
    /// <p>Specifies whether the lifecycle action should apply to distributed containers.</p>
    pub fn get_containers(&self) -> &::std::option::Option<bool> {
        &self.containers
    }
    /// Consumes the builder and constructs a [`ResourceStateUpdateIncludeResources`](crate::types::ResourceStateUpdateIncludeResources).
    pub fn build(self) -> crate::types::ResourceStateUpdateIncludeResources {
        crate::types::ResourceStateUpdateIncludeResources {
            amis: self.amis.unwrap_or_default(),
            snapshots: self.snapshots.unwrap_or_default(),
            containers: self.containers.unwrap_or_default(),
        }
    }
}
