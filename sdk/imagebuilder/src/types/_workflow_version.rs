// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about this version of the workflow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowVersion {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workflow.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The semantic version of the workflow resource. The format includes three nodes: <major>
    /// .
    /// <minor>
    /// .
    /// <patch>
    /// .
    /// </patch>
    /// </minor>
    /// </major></p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>Describes the workflow.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub r#type: ::std::option::Option<crate::types::WorkflowType>,
    /// <p>The owner of the workflow resource.</p>
    pub owner: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when Image Builder created the workflow version.</p>
    pub date_created: ::std::option::Option<::std::string::String>,
}
impl WorkflowVersion {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the workflow.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The semantic version of the workflow resource. The format includes three nodes: <major>
    /// .
    /// <minor>
    /// .
    /// <patch>
    /// .
    /// </patch>
    /// </minor>
    /// </major></p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Describes the workflow.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::WorkflowType> {
        self.r#type.as_ref()
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn owner(&self) -> ::std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The timestamp when Image Builder created the workflow version.</p>
    pub fn date_created(&self) -> ::std::option::Option<&str> {
        self.date_created.as_deref()
    }
}
impl WorkflowVersion {
    /// Creates a new builder-style object to manufacture [`WorkflowVersion`](crate::types::WorkflowVersion).
    pub fn builder() -> crate::types::builders::WorkflowVersionBuilder {
        crate::types::builders::WorkflowVersionBuilder::default()
    }
}

/// A builder for [`WorkflowVersion`](crate::types::WorkflowVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowVersionBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::WorkflowType>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) date_created: ::std::option::Option<::std::string::String>,
}
impl WorkflowVersionBuilder {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the workflow.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The semantic version of the workflow resource. The format includes three nodes: <major>
    /// .
    /// <minor>
    /// .
    /// <patch>
    /// .
    /// </patch>
    /// </minor>
    /// </major></p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The semantic version of the workflow resource. The format includes three nodes: <major>
    /// .
    /// <minor>
    /// .
    /// <patch>
    /// .
    /// </patch>
    /// </minor>
    /// </major></p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The semantic version of the workflow resource. The format includes three nodes: <major>
    /// .
    /// <minor>
    /// .
    /// <patch>
    /// .
    /// </patch>
    /// </minor>
    /// </major></p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>Describes the workflow.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the workflow.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Describes the workflow.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub fn r#type(mut self, input: crate::types::WorkflowType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.r#type
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>The timestamp when Image Builder created the workflow version.</p>
    pub fn date_created(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.date_created = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when Image Builder created the workflow version.</p>
    pub fn set_date_created(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.date_created = input;
        self
    }
    /// <p>The timestamp when Image Builder created the workflow version.</p>
    pub fn get_date_created(&self) -> &::std::option::Option<::std::string::String> {
        &self.date_created
    }
    /// Consumes the builder and constructs a [`WorkflowVersion`](crate::types::WorkflowVersion).
    pub fn build(self) -> crate::types::WorkflowVersion {
        crate::types::WorkflowVersion {
            arn: self.arn,
            name: self.name,
            version: self.version,
            description: self.description,
            r#type: self.r#type,
            owner: self.owner,
            date_created: self.date_created,
        }
    }
}
