// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details for a resource that the runtime instance of the lifecycle policy identified for action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LifecycleExecutionResource {
    /// <p>The account that owns the impacted resource.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the impacted resource. The resource ID depends on the type of resource, as follows.</p>
    /// <ul>
    /// <li>
    /// <p>Image Builder image resources: Amazon Resource Name (ARN)</p></li>
    /// <li>
    /// <p>Distributed AMIs: AMI ID</p></li>
    /// <li>
    /// <p>Container images distributed to an ECR repository: image URI or SHA Digest</p></li>
    /// </ul>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The runtime state for the lifecycle execution.</p>
    pub state: ::std::option::Option<crate::types::LifecycleExecutionResourceState>,
    /// <p>The action to take for the identified resource.</p>
    pub action: ::std::option::Option<crate::types::LifecycleExecutionResourceAction>,
    /// <p>The Amazon Web Services Region where the lifecycle execution resource is stored.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>A list of associated resource snapshots for the impacted resource if it’s an AMI.</p>
    pub snapshots: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleExecutionSnapshotResource>>,
    /// <p>For an impacted container image, this identifies a list of URIs for associated container images distributed to ECR repositories.</p>
    pub image_uris: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LifecycleExecutionResource {
    /// <p>The account that owns the impacted resource.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Identifies the impacted resource. The resource ID depends on the type of resource, as follows.</p>
    /// <ul>
    /// <li>
    /// <p>Image Builder image resources: Amazon Resource Name (ARN)</p></li>
    /// <li>
    /// <p>Distributed AMIs: AMI ID</p></li>
    /// <li>
    /// <p>Container images distributed to an ECR repository: image URI or SHA Digest</p></li>
    /// </ul>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The runtime state for the lifecycle execution.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::LifecycleExecutionResourceState> {
        self.state.as_ref()
    }
    /// <p>The action to take for the identified resource.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::LifecycleExecutionResourceAction> {
        self.action.as_ref()
    }
    /// <p>The Amazon Web Services Region where the lifecycle execution resource is stored.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>A list of associated resource snapshots for the impacted resource if it’s an AMI.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.snapshots.is_none()`.
    pub fn snapshots(&self) -> &[crate::types::LifecycleExecutionSnapshotResource] {
        self.snapshots.as_deref().unwrap_or_default()
    }
    /// <p>For an impacted container image, this identifies a list of URIs for associated container images distributed to ECR repositories.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_uris.is_none()`.
    pub fn image_uris(&self) -> &[::std::string::String] {
        self.image_uris.as_deref().unwrap_or_default()
    }
}
impl LifecycleExecutionResource {
    /// Creates a new builder-style object to manufacture [`LifecycleExecutionResource`](crate::types::LifecycleExecutionResource).
    pub fn builder() -> crate::types::builders::LifecycleExecutionResourceBuilder {
        crate::types::builders::LifecycleExecutionResourceBuilder::default()
    }
}

/// A builder for [`LifecycleExecutionResource`](crate::types::LifecycleExecutionResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LifecycleExecutionResourceBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::LifecycleExecutionResourceState>,
    pub(crate) action: ::std::option::Option<crate::types::LifecycleExecutionResourceAction>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) snapshots: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleExecutionSnapshotResource>>,
    pub(crate) image_uris: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LifecycleExecutionResourceBuilder {
    /// <p>The account that owns the impacted resource.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that owns the impacted resource.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account that owns the impacted resource.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>Identifies the impacted resource. The resource ID depends on the type of resource, as follows.</p>
    /// <ul>
    /// <li>
    /// <p>Image Builder image resources: Amazon Resource Name (ARN)</p></li>
    /// <li>
    /// <p>Distributed AMIs: AMI ID</p></li>
    /// <li>
    /// <p>Container images distributed to an ECR repository: image URI or SHA Digest</p></li>
    /// </ul>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the impacted resource. The resource ID depends on the type of resource, as follows.</p>
    /// <ul>
    /// <li>
    /// <p>Image Builder image resources: Amazon Resource Name (ARN)</p></li>
    /// <li>
    /// <p>Distributed AMIs: AMI ID</p></li>
    /// <li>
    /// <p>Container images distributed to an ECR repository: image URI or SHA Digest</p></li>
    /// </ul>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>Identifies the impacted resource. The resource ID depends on the type of resource, as follows.</p>
    /// <ul>
    /// <li>
    /// <p>Image Builder image resources: Amazon Resource Name (ARN)</p></li>
    /// <li>
    /// <p>Distributed AMIs: AMI ID</p></li>
    /// <li>
    /// <p>Container images distributed to an ECR repository: image URI or SHA Digest</p></li>
    /// </ul>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The runtime state for the lifecycle execution.</p>
    pub fn state(mut self, input: crate::types::LifecycleExecutionResourceState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The runtime state for the lifecycle execution.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::LifecycleExecutionResourceState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The runtime state for the lifecycle execution.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::LifecycleExecutionResourceState> {
        &self.state
    }
    /// <p>The action to take for the identified resource.</p>
    pub fn action(mut self, input: crate::types::LifecycleExecutionResourceAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to take for the identified resource.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::LifecycleExecutionResourceAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action to take for the identified resource.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::LifecycleExecutionResourceAction> {
        &self.action
    }
    /// <p>The Amazon Web Services Region where the lifecycle execution resource is stored.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the lifecycle execution resource is stored.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the lifecycle execution resource is stored.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Appends an item to `snapshots`.
    ///
    /// To override the contents of this collection use [`set_snapshots`](Self::set_snapshots).
    ///
    /// <p>A list of associated resource snapshots for the impacted resource if it’s an AMI.</p>
    pub fn snapshots(mut self, input: crate::types::LifecycleExecutionSnapshotResource) -> Self {
        let mut v = self.snapshots.unwrap_or_default();
        v.push(input);
        self.snapshots = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of associated resource snapshots for the impacted resource if it’s an AMI.</p>
    pub fn set_snapshots(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleExecutionSnapshotResource>>) -> Self {
        self.snapshots = input;
        self
    }
    /// <p>A list of associated resource snapshots for the impacted resource if it’s an AMI.</p>
    pub fn get_snapshots(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LifecycleExecutionSnapshotResource>> {
        &self.snapshots
    }
    /// Appends an item to `image_uris`.
    ///
    /// To override the contents of this collection use [`set_image_uris`](Self::set_image_uris).
    ///
    /// <p>For an impacted container image, this identifies a list of URIs for associated container images distributed to ECR repositories.</p>
    pub fn image_uris(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.image_uris.unwrap_or_default();
        v.push(input.into());
        self.image_uris = ::std::option::Option::Some(v);
        self
    }
    /// <p>For an impacted container image, this identifies a list of URIs for associated container images distributed to ECR repositories.</p>
    pub fn set_image_uris(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.image_uris = input;
        self
    }
    /// <p>For an impacted container image, this identifies a list of URIs for associated container images distributed to ECR repositories.</p>
    pub fn get_image_uris(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.image_uris
    }
    /// Consumes the builder and constructs a [`LifecycleExecutionResource`](crate::types::LifecycleExecutionResource).
    pub fn build(self) -> crate::types::LifecycleExecutionResource {
        crate::types::LifecycleExecutionResource {
            account_id: self.account_id,
            resource_id: self.resource_id,
            state: self.state,
            action: self.action,
            region: self.region,
            snapshots: self.snapshots,
            image_uris: self.image_uris,
        }
    }
}
