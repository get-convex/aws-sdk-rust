// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata about the workflow resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowSummary {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workflow.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the workflow.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>Describes the workflow.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The change description for the current version of the workflow resource.</p>
    pub change_description: ::std::option::Option<::std::string::String>,
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub r#type: ::std::option::Option<crate::types::WorkflowType>,
    /// <p>The owner of the workflow resource.</p>
    pub owner: ::std::option::Option<::std::string::String>,
    /// <p>Describes the current state of the workflow resource.</p>
    pub state: ::std::option::Option<crate::types::WorkflowState>,
    /// <p>The original creation date of the workflow resource.</p>
    pub date_created: ::std::option::Option<::std::string::String>,
    /// <p>Contains a list of tags that are defined for the workflow.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl WorkflowSummary {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the workflow.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the workflow.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Describes the workflow.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The change description for the current version of the workflow resource.</p>
    pub fn change_description(&self) -> ::std::option::Option<&str> {
        self.change_description.as_deref()
    }
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::WorkflowType> {
        self.r#type.as_ref()
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn owner(&self) -> ::std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>Describes the current state of the workflow resource.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::WorkflowState> {
        self.state.as_ref()
    }
    /// <p>The original creation date of the workflow resource.</p>
    pub fn date_created(&self) -> ::std::option::Option<&str> {
        self.date_created.as_deref()
    }
    /// <p>Contains a list of tags that are defined for the workflow.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl WorkflowSummary {
    /// Creates a new builder-style object to manufacture [`WorkflowSummary`](crate::types::WorkflowSummary).
    pub fn builder() -> crate::types::builders::WorkflowSummaryBuilder {
        crate::types::builders::WorkflowSummaryBuilder::default()
    }
}

/// A builder for [`WorkflowSummary`](crate::types::WorkflowSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) change_description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::WorkflowType>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::WorkflowState>,
    pub(crate) date_created: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl WorkflowSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the workflow resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the workflow.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The version of the workflow.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the workflow.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the workflow.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>Describes the workflow.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the workflow.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Describes the workflow.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The change description for the current version of the workflow resource.</p>
    pub fn change_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The change description for the current version of the workflow resource.</p>
    pub fn set_change_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_description = input;
        self
    }
    /// <p>The change description for the current version of the workflow resource.</p>
    pub fn get_change_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_description
    }
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub fn r#type(mut self, input: crate::types::WorkflowType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The image creation stage that this workflow applies to. Image Builder currently supports build and test stage workflows.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.r#type
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of the workflow resource.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>Describes the current state of the workflow resource.</p>
    pub fn state(mut self, input: crate::types::WorkflowState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the current state of the workflow resource.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::WorkflowState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Describes the current state of the workflow resource.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::WorkflowState> {
        &self.state
    }
    /// <p>The original creation date of the workflow resource.</p>
    pub fn date_created(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.date_created = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The original creation date of the workflow resource.</p>
    pub fn set_date_created(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.date_created = input;
        self
    }
    /// <p>The original creation date of the workflow resource.</p>
    pub fn get_date_created(&self) -> &::std::option::Option<::std::string::String> {
        &self.date_created
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Contains a list of tags that are defined for the workflow.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Contains a list of tags that are defined for the workflow.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Contains a list of tags that are defined for the workflow.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`WorkflowSummary`](crate::types::WorkflowSummary).
    pub fn build(self) -> crate::types::WorkflowSummary {
        crate::types::WorkflowSummary {
            arn: self.arn,
            name: self.name,
            version: self.version,
            description: self.description,
            change_description: self.change_description,
            r#type: self.r#type,
            owner: self.owner,
            state: self.state,
            date_created: self.date_created,
            tags: self.tags,
        }
    }
}
