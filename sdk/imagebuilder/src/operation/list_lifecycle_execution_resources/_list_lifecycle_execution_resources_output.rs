// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLifecycleExecutionResourcesOutput {
    /// <p>Runtime details for the specified runtime instance of the lifecycle policy.</p>
    pub lifecycle_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the lifecycle runtime instance.</p>
    pub lifecycle_execution_state: ::std::option::Option<crate::types::LifecycleExecutionState>,
    /// <p>A list of resources that were identified for lifecycle actions.</p>
    pub resources: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleExecutionResource>>,
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListLifecycleExecutionResourcesOutput {
    /// <p>Runtime details for the specified runtime instance of the lifecycle policy.</p>
    pub fn lifecycle_execution_id(&self) -> ::std::option::Option<&str> {
        self.lifecycle_execution_id.as_deref()
    }
    /// <p>The current state of the lifecycle runtime instance.</p>
    pub fn lifecycle_execution_state(&self) -> ::std::option::Option<&crate::types::LifecycleExecutionState> {
        self.lifecycle_execution_state.as_ref()
    }
    /// <p>A list of resources that were identified for lifecycle actions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> &[crate::types::LifecycleExecutionResource] {
        self.resources.as_deref().unwrap_or_default()
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListLifecycleExecutionResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListLifecycleExecutionResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListLifecycleExecutionResourcesOutput`](crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput).
    pub fn builder() -> crate::operation::list_lifecycle_execution_resources::builders::ListLifecycleExecutionResourcesOutputBuilder {
        crate::operation::list_lifecycle_execution_resources::builders::ListLifecycleExecutionResourcesOutputBuilder::default()
    }
}

/// A builder for [`ListLifecycleExecutionResourcesOutput`](crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListLifecycleExecutionResourcesOutputBuilder {
    pub(crate) lifecycle_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle_execution_state: ::std::option::Option<crate::types::LifecycleExecutionState>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleExecutionResource>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListLifecycleExecutionResourcesOutputBuilder {
    /// <p>Runtime details for the specified runtime instance of the lifecycle policy.</p>
    pub fn lifecycle_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Runtime details for the specified runtime instance of the lifecycle policy.</p>
    pub fn set_lifecycle_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle_execution_id = input;
        self
    }
    /// <p>Runtime details for the specified runtime instance of the lifecycle policy.</p>
    pub fn get_lifecycle_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle_execution_id
    }
    /// <p>The current state of the lifecycle runtime instance.</p>
    pub fn lifecycle_execution_state(mut self, input: crate::types::LifecycleExecutionState) -> Self {
        self.lifecycle_execution_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the lifecycle runtime instance.</p>
    pub fn set_lifecycle_execution_state(mut self, input: ::std::option::Option<crate::types::LifecycleExecutionState>) -> Self {
        self.lifecycle_execution_state = input;
        self
    }
    /// <p>The current state of the lifecycle runtime instance.</p>
    pub fn get_lifecycle_execution_state(&self) -> &::std::option::Option<crate::types::LifecycleExecutionState> {
        &self.lifecycle_execution_state
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>A list of resources that were identified for lifecycle actions.</p>
    pub fn resources(mut self, input: crate::types::LifecycleExecutionResource) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of resources that were identified for lifecycle actions.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleExecutionResource>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>A list of resources that were identified for lifecycle actions.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LifecycleExecutionResource>> {
        &self.resources
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListLifecycleExecutionResourcesOutput`](crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput).
    pub fn build(self) -> crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput {
        crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput {
            lifecycle_execution_id: self.lifecycle_execution_id,
            lifecycle_execution_state: self.lifecycle_execution_state,
            resources: self.resources,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
