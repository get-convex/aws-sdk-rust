// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLifecyclePolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the lifecycle policy resource.</p>
    pub lifecycle_policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>Optional description for the lifecycle policy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the lifecycle policy resource is enabled.</p>
    pub status: ::std::option::Option<crate::types::LifecyclePolicyStatus>,
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that Image Builder uses to update the lifecycle policy.</p>
    pub execution_role: ::std::option::Option<::std::string::String>,
    /// <p>The type of image resource that the lifecycle policy applies to.</p>
    pub resource_type: ::std::option::Option<crate::types::LifecyclePolicyResourceType>,
    /// <p>The configuration details for a lifecycle policy resource.</p>
    pub policy_details: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyDetail>>,
    /// <p>Selection criteria for resources that the lifecycle policy applies to.</p>
    pub resource_selection: ::std::option::Option<crate::types::LifecyclePolicyResourceSelection>,
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateLifecyclePolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the lifecycle policy resource.</p>
    pub fn lifecycle_policy_arn(&self) -> ::std::option::Option<&str> {
        self.lifecycle_policy_arn.as_deref()
    }
    /// <p>Optional description for the lifecycle policy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates whether the lifecycle policy resource is enabled.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LifecyclePolicyStatus> {
        self.status.as_ref()
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that Image Builder uses to update the lifecycle policy.</p>
    pub fn execution_role(&self) -> ::std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>The type of image resource that the lifecycle policy applies to.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::LifecyclePolicyResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The configuration details for a lifecycle policy resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_details.is_none()`.
    pub fn policy_details(&self) -> &[crate::types::LifecyclePolicyDetail] {
        self.policy_details.as_deref().unwrap_or_default()
    }
    /// <p>Selection criteria for resources that the lifecycle policy applies to.</p>
    pub fn resource_selection(&self) -> ::std::option::Option<&crate::types::LifecyclePolicyResourceSelection> {
        self.resource_selection.as_ref()
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateLifecyclePolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdateLifecyclePolicyInput`](crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyInput).
    pub fn builder() -> crate::operation::update_lifecycle_policy::builders::UpdateLifecyclePolicyInputBuilder {
        crate::operation::update_lifecycle_policy::builders::UpdateLifecyclePolicyInputBuilder::default()
    }
}

/// A builder for [`UpdateLifecyclePolicyInput`](crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateLifecyclePolicyInputBuilder {
    pub(crate) lifecycle_policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::LifecyclePolicyStatus>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::LifecyclePolicyResourceType>,
    pub(crate) policy_details: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyDetail>>,
    pub(crate) resource_selection: ::std::option::Option<crate::types::LifecyclePolicyResourceSelection>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateLifecyclePolicyInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the lifecycle policy resource.</p>
    /// This field is required.
    pub fn lifecycle_policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle_policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the lifecycle policy resource.</p>
    pub fn set_lifecycle_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle_policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the lifecycle policy resource.</p>
    pub fn get_lifecycle_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle_policy_arn
    }
    /// <p>Optional description for the lifecycle policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional description for the lifecycle policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Optional description for the lifecycle policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Indicates whether the lifecycle policy resource is enabled.</p>
    pub fn status(mut self, input: crate::types::LifecyclePolicyStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the lifecycle policy resource is enabled.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates whether the lifecycle policy resource is enabled.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LifecyclePolicyStatus> {
        &self.status
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that Image Builder uses to update the lifecycle policy.</p>
    /// This field is required.
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that Image Builder uses to update the lifecycle policy.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that Image Builder uses to update the lifecycle policy.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>The type of image resource that the lifecycle policy applies to.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::LifecyclePolicyResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of image resource that the lifecycle policy applies to.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of image resource that the lifecycle policy applies to.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::LifecyclePolicyResourceType> {
        &self.resource_type
    }
    /// Appends an item to `policy_details`.
    ///
    /// To override the contents of this collection use [`set_policy_details`](Self::set_policy_details).
    ///
    /// <p>The configuration details for a lifecycle policy resource.</p>
    pub fn policy_details(mut self, input: crate::types::LifecyclePolicyDetail) -> Self {
        let mut v = self.policy_details.unwrap_or_default();
        v.push(input);
        self.policy_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration details for a lifecycle policy resource.</p>
    pub fn set_policy_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyDetail>>) -> Self {
        self.policy_details = input;
        self
    }
    /// <p>The configuration details for a lifecycle policy resource.</p>
    pub fn get_policy_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyDetail>> {
        &self.policy_details
    }
    /// <p>Selection criteria for resources that the lifecycle policy applies to.</p>
    /// This field is required.
    pub fn resource_selection(mut self, input: crate::types::LifecyclePolicyResourceSelection) -> Self {
        self.resource_selection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Selection criteria for resources that the lifecycle policy applies to.</p>
    pub fn set_resource_selection(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyResourceSelection>) -> Self {
        self.resource_selection = input;
        self
    }
    /// <p>Selection criteria for resources that the lifecycle policy applies to.</p>
    pub fn get_resource_selection(&self) -> &::std::option::Option<crate::types::LifecyclePolicyResourceSelection> {
        &self.resource_selection
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateLifecyclePolicyInput`](crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyInput {
            lifecycle_policy_arn: self.lifecycle_policy_arn,
            description: self.description,
            status: self.status,
            execution_role: self.execution_role,
            resource_type: self.resource_type,
            policy_details: self.policy_details,
            resource_selection: self.resource_selection,
            client_token: self.client_token,
        })
    }
}
