// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information regarding the confidence and name of a detected content type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentType {
    /// <p>The confidence level of the label given</p>
    pub confidence: ::std::option::Option<f32>,
    /// <p>The name of the label</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl ContentType {
    /// <p>The confidence level of the label given</p>
    pub fn confidence(&self) -> ::std::option::Option<f32> {
        self.confidence
    }
    /// <p>The name of the label</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl ContentType {
    /// Creates a new builder-style object to manufacture [`ContentType`](crate::types::ContentType).
    pub fn builder() -> crate::types::builders::ContentTypeBuilder {
        crate::types::builders::ContentTypeBuilder::default()
    }
}

/// A builder for [`ContentType`](crate::types::ContentType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContentTypeBuilder {
    pub(crate) confidence: ::std::option::Option<f32>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl ContentTypeBuilder {
    /// <p>The confidence level of the label given</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence level of the label given</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The confidence level of the label given</p>
    pub fn get_confidence(&self) -> &::std::option::Option<f32> {
        &self.confidence
    }
    /// <p>The name of the label</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the label</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the label</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`ContentType`](crate::types::ContentType).
    pub fn build(self) -> crate::types::ContentType {
        crate::types::ContentType {
            confidence: self.confidence,
            name: self.name,
        }
    }
}
