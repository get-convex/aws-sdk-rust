// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreTableFromRecoveryPointInput {
    /// <p>Namespace of the recovery point to restore from.</p>
    pub namespace_name: ::std::option::Option<::std::string::String>,
    /// <p>The workgroup to restore the table to.</p>
    pub workgroup_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the recovery point to restore the table from.</p>
    pub recovery_point_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the source database that contains the table being restored.</p>
    pub source_database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the source schema that contains the table being restored.</p>
    pub source_schema_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the source table being restored.</p>
    pub source_table_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database to restore the table to.</p>
    pub target_database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the schema to restore the table to.</p>
    pub target_schema_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table to create from the restore operation.</p>
    pub new_table_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    pub activate_case_sensitive_identifier: ::std::option::Option<bool>,
}
impl RestoreTableFromRecoveryPointInput {
    /// <p>Namespace of the recovery point to restore from.</p>
    pub fn namespace_name(&self) -> ::std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>The workgroup to restore the table to.</p>
    pub fn workgroup_name(&self) -> ::std::option::Option<&str> {
        self.workgroup_name.as_deref()
    }
    /// <p>The ID of the recovery point to restore the table from.</p>
    pub fn recovery_point_id(&self) -> ::std::option::Option<&str> {
        self.recovery_point_id.as_deref()
    }
    /// <p>The name of the source database that contains the table being restored.</p>
    pub fn source_database_name(&self) -> ::std::option::Option<&str> {
        self.source_database_name.as_deref()
    }
    /// <p>The name of the source schema that contains the table being restored.</p>
    pub fn source_schema_name(&self) -> ::std::option::Option<&str> {
        self.source_schema_name.as_deref()
    }
    /// <p>The name of the source table being restored.</p>
    pub fn source_table_name(&self) -> ::std::option::Option<&str> {
        self.source_table_name.as_deref()
    }
    /// <p>The name of the database to restore the table to.</p>
    pub fn target_database_name(&self) -> ::std::option::Option<&str> {
        self.target_database_name.as_deref()
    }
    /// <p>The name of the schema to restore the table to.</p>
    pub fn target_schema_name(&self) -> ::std::option::Option<&str> {
        self.target_schema_name.as_deref()
    }
    /// <p>The name of the table to create from the restore operation.</p>
    pub fn new_table_name(&self) -> ::std::option::Option<&str> {
        self.new_table_name.as_deref()
    }
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    pub fn activate_case_sensitive_identifier(&self) -> ::std::option::Option<bool> {
        self.activate_case_sensitive_identifier
    }
}
impl RestoreTableFromRecoveryPointInput {
    /// Creates a new builder-style object to manufacture [`RestoreTableFromRecoveryPointInput`](crate::operation::restore_table_from_recovery_point::RestoreTableFromRecoveryPointInput).
    pub fn builder() -> crate::operation::restore_table_from_recovery_point::builders::RestoreTableFromRecoveryPointInputBuilder {
        crate::operation::restore_table_from_recovery_point::builders::RestoreTableFromRecoveryPointInputBuilder::default()
    }
}

/// A builder for [`RestoreTableFromRecoveryPointInput`](crate::operation::restore_table_from_recovery_point::RestoreTableFromRecoveryPointInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RestoreTableFromRecoveryPointInputBuilder {
    pub(crate) namespace_name: ::std::option::Option<::std::string::String>,
    pub(crate) workgroup_name: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_point_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_database_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_table_name: ::std::option::Option<::std::string::String>,
    pub(crate) target_database_name: ::std::option::Option<::std::string::String>,
    pub(crate) target_schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) new_table_name: ::std::option::Option<::std::string::String>,
    pub(crate) activate_case_sensitive_identifier: ::std::option::Option<bool>,
}
impl RestoreTableFromRecoveryPointInputBuilder {
    /// <p>Namespace of the recovery point to restore from.</p>
    /// This field is required.
    pub fn namespace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Namespace of the recovery point to restore from.</p>
    pub fn set_namespace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>Namespace of the recovery point to restore from.</p>
    pub fn get_namespace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace_name
    }
    /// <p>The workgroup to restore the table to.</p>
    /// This field is required.
    pub fn workgroup_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workgroup_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workgroup to restore the table to.</p>
    pub fn set_workgroup_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workgroup_name = input;
        self
    }
    /// <p>The workgroup to restore the table to.</p>
    pub fn get_workgroup_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workgroup_name
    }
    /// <p>The ID of the recovery point to restore the table from.</p>
    /// This field is required.
    pub fn recovery_point_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recovery_point_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the recovery point to restore the table from.</p>
    pub fn set_recovery_point_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recovery_point_id = input;
        self
    }
    /// <p>The ID of the recovery point to restore the table from.</p>
    pub fn get_recovery_point_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recovery_point_id
    }
    /// <p>The name of the source database that contains the table being restored.</p>
    /// This field is required.
    pub fn source_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source database that contains the table being restored.</p>
    pub fn set_source_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_database_name = input;
        self
    }
    /// <p>The name of the source database that contains the table being restored.</p>
    pub fn get_source_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_database_name
    }
    /// <p>The name of the source schema that contains the table being restored.</p>
    pub fn source_schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source schema that contains the table being restored.</p>
    pub fn set_source_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_schema_name = input;
        self
    }
    /// <p>The name of the source schema that contains the table being restored.</p>
    pub fn get_source_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_schema_name
    }
    /// <p>The name of the source table being restored.</p>
    /// This field is required.
    pub fn source_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source table being restored.</p>
    pub fn set_source_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_table_name = input;
        self
    }
    /// <p>The name of the source table being restored.</p>
    pub fn get_source_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_table_name
    }
    /// <p>The name of the database to restore the table to.</p>
    pub fn target_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database to restore the table to.</p>
    pub fn set_target_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_database_name = input;
        self
    }
    /// <p>The name of the database to restore the table to.</p>
    pub fn get_target_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_database_name
    }
    /// <p>The name of the schema to restore the table to.</p>
    pub fn target_schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the schema to restore the table to.</p>
    pub fn set_target_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_schema_name = input;
        self
    }
    /// <p>The name of the schema to restore the table to.</p>
    pub fn get_target_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_schema_name
    }
    /// <p>The name of the table to create from the restore operation.</p>
    /// This field is required.
    pub fn new_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table to create from the restore operation.</p>
    pub fn set_new_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_table_name = input;
        self
    }
    /// <p>The name of the table to create from the restore operation.</p>
    pub fn get_new_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_table_name
    }
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    pub fn activate_case_sensitive_identifier(mut self, input: bool) -> Self {
        self.activate_case_sensitive_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    pub fn set_activate_case_sensitive_identifier(mut self, input: ::std::option::Option<bool>) -> Self {
        self.activate_case_sensitive_identifier = input;
        self
    }
    /// <p>Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.</p>
    pub fn get_activate_case_sensitive_identifier(&self) -> &::std::option::Option<bool> {
        &self.activate_case_sensitive_identifier
    }
    /// Consumes the builder and constructs a [`RestoreTableFromRecoveryPointInput`](crate::operation::restore_table_from_recovery_point::RestoreTableFromRecoveryPointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::restore_table_from_recovery_point::RestoreTableFromRecoveryPointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::restore_table_from_recovery_point::RestoreTableFromRecoveryPointInput {
            namespace_name: self.namespace_name,
            workgroup_name: self.workgroup_name,
            recovery_point_id: self.recovery_point_id,
            source_database_name: self.source_database_name,
            source_schema_name: self.source_schema_name,
            source_table_name: self.source_table_name,
            target_database_name: self.target_database_name,
            target_schema_name: self.target_schema_name,
            new_table_name: self.new_table_name,
            activate_case_sensitive_identifier: self.activate_case_sensitive_identifier,
        })
    }
}
