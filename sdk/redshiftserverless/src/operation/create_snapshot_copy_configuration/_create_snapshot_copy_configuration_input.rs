// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSnapshotCopyConfigurationInput {
    /// <p>The name of the namespace to copy snapshots from.</p>
    pub namespace_name: ::std::option::Option<::std::string::String>,
    /// <p>The destination Amazon Web Services Region that you want to copy snapshots to.</p>
    pub destination_region: ::std::option::Option<::std::string::String>,
    /// <p>The retention period of the snapshots that you copy to the destination Amazon Web Services Region.</p>
    pub snapshot_retention_period: ::std::option::Option<i32>,
    /// <p>The KMS key to use to encrypt your snapshots in the destination Amazon Web Services Region.</p>
    pub destination_kms_key_id: ::std::option::Option<::std::string::String>,
}
impl CreateSnapshotCopyConfigurationInput {
    /// <p>The name of the namespace to copy snapshots from.</p>
    pub fn namespace_name(&self) -> ::std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>The destination Amazon Web Services Region that you want to copy snapshots to.</p>
    pub fn destination_region(&self) -> ::std::option::Option<&str> {
        self.destination_region.as_deref()
    }
    /// <p>The retention period of the snapshots that you copy to the destination Amazon Web Services Region.</p>
    pub fn snapshot_retention_period(&self) -> ::std::option::Option<i32> {
        self.snapshot_retention_period
    }
    /// <p>The KMS key to use to encrypt your snapshots in the destination Amazon Web Services Region.</p>
    pub fn destination_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.destination_kms_key_id.as_deref()
    }
}
impl CreateSnapshotCopyConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotCopyConfigurationInput`](crate::operation::create_snapshot_copy_configuration::CreateSnapshotCopyConfigurationInput).
    pub fn builder() -> crate::operation::create_snapshot_copy_configuration::builders::CreateSnapshotCopyConfigurationInputBuilder {
        crate::operation::create_snapshot_copy_configuration::builders::CreateSnapshotCopyConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateSnapshotCopyConfigurationInput`](crate::operation::create_snapshot_copy_configuration::CreateSnapshotCopyConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSnapshotCopyConfigurationInputBuilder {
    pub(crate) namespace_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination_region: ::std::option::Option<::std::string::String>,
    pub(crate) snapshot_retention_period: ::std::option::Option<i32>,
    pub(crate) destination_kms_key_id: ::std::option::Option<::std::string::String>,
}
impl CreateSnapshotCopyConfigurationInputBuilder {
    /// <p>The name of the namespace to copy snapshots from.</p>
    /// This field is required.
    pub fn namespace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the namespace to copy snapshots from.</p>
    pub fn set_namespace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>The name of the namespace to copy snapshots from.</p>
    pub fn get_namespace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace_name
    }
    /// <p>The destination Amazon Web Services Region that you want to copy snapshots to.</p>
    /// This field is required.
    pub fn destination_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination Amazon Web Services Region that you want to copy snapshots to.</p>
    pub fn set_destination_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_region = input;
        self
    }
    /// <p>The destination Amazon Web Services Region that you want to copy snapshots to.</p>
    pub fn get_destination_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_region
    }
    /// <p>The retention period of the snapshots that you copy to the destination Amazon Web Services Region.</p>
    pub fn snapshot_retention_period(mut self, input: i32) -> Self {
        self.snapshot_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention period of the snapshots that you copy to the destination Amazon Web Services Region.</p>
    pub fn set_snapshot_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.snapshot_retention_period = input;
        self
    }
    /// <p>The retention period of the snapshots that you copy to the destination Amazon Web Services Region.</p>
    pub fn get_snapshot_retention_period(&self) -> &::std::option::Option<i32> {
        &self.snapshot_retention_period
    }
    /// <p>The KMS key to use to encrypt your snapshots in the destination Amazon Web Services Region.</p>
    pub fn destination_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key to use to encrypt your snapshots in the destination Amazon Web Services Region.</p>
    pub fn set_destination_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_kms_key_id = input;
        self
    }
    /// <p>The KMS key to use to encrypt your snapshots in the destination Amazon Web Services Region.</p>
    pub fn get_destination_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_kms_key_id
    }
    /// Consumes the builder and constructs a [`CreateSnapshotCopyConfigurationInput`](crate::operation::create_snapshot_copy_configuration::CreateSnapshotCopyConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_snapshot_copy_configuration::CreateSnapshotCopyConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_snapshot_copy_configuration::CreateSnapshotCopyConfigurationInput {
                namespace_name: self.namespace_name,
                destination_region: self.destination_region,
                snapshot_retention_period: self.snapshot_retention_period,
                destination_kms_key_id: self.destination_kms_key_id,
            },
        )
    }
}
