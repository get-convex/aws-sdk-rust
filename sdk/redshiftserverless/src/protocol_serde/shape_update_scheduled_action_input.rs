// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_scheduled_action_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_scheduled_action::UpdateScheduledActionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.scheduled_action_name {
        object.key("scheduledActionName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.target_action {
        #[allow(unused_mut)]
        let mut object_3 = object.key("targetAction").start_object();
        crate::protocol_serde::shape_target_action::ser_target_action(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_5 = object.key("schedule").start_object();
        crate::protocol_serde::shape_schedule::ser_schedule(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.role_arn {
        object.key("roleArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.enabled {
        object.key("enabled").boolean(*var_7);
    }
    if let Some(var_8) = &input.scheduled_action_description {
        object.key("scheduledActionDescription").string(var_8.as_str());
    }
    if let Some(var_9) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_9, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_10) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_10, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
