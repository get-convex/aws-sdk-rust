// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Raised when a conflict is encountered.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>A failure occurred on the server.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>A specified resource could not be located.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>A service quota was exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The exception was interrupted by throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>A resource could not be validated</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_import_task::CancelImportTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_import_task::CancelImportTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::cancel_import_task::CancelImportTaskError> for Error {
    fn from(err: crate::operation::cancel_import_task::CancelImportTaskError) -> Self {
        match err {
            crate::operation::cancel_import_task::CancelImportTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_import_task::CancelImportTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_import_task::CancelImportTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_import_task::CancelImportTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_import_task::CancelImportTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_import_task::CancelImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_graph::CreateGraphError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_graph::CreateGraphError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_graph::CreateGraphError> for Error {
    fn from(err: crate::operation::create_graph::CreateGraphError) -> Self {
        match err {
            crate::operation::create_graph::CreateGraphError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_graph::CreateGraphError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_graph::CreateGraphError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_graph::CreateGraphError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_graph::CreateGraphError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_graph::CreateGraphError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_graph_snapshot::CreateGraphSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_graph_snapshot::CreateGraphSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_graph_snapshot::CreateGraphSnapshotError> for Error {
    fn from(err: crate::operation::create_graph_snapshot::CreateGraphSnapshotError) -> Self {
        match err {
            crate::operation::create_graph_snapshot::CreateGraphSnapshotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_graph_snapshot::CreateGraphSnapshotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_graph_snapshot::CreateGraphSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_graph_snapshot::CreateGraphSnapshotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_graph_snapshot::CreateGraphSnapshotError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_graph_snapshot::CreateGraphSnapshotError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_graph_snapshot::CreateGraphSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError> for Error {
    fn from(err: crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError) -> Self {
        match err {
            crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError> for Error {
    fn from(err: crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError) -> Self {
        match err {
            crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_private_graph_endpoint::CreatePrivateGraphEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_graph::DeleteGraphError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_graph::DeleteGraphError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_graph::DeleteGraphError> for Error {
    fn from(err: crate::operation::delete_graph::DeleteGraphError) -> Self {
        match err {
            crate::operation::delete_graph::DeleteGraphError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_graph::DeleteGraphError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_graph::DeleteGraphError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_graph::DeleteGraphError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_graph::DeleteGraphError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_graph::DeleteGraphError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError> for Error {
    fn from(err: crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError) -> Self {
        match err {
            crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_graph_snapshot::DeleteGraphSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError> for Error {
    fn from(err: crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError) -> Self {
        match err {
            crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_private_graph_endpoint::DeletePrivateGraphEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_graph::GetGraphError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_graph::GetGraphError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_graph::GetGraphError> for Error {
    fn from(err: crate::operation::get_graph::GetGraphError) -> Self {
        match err {
            crate::operation::get_graph::GetGraphError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_graph::GetGraphError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_graph::GetGraphError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_graph::GetGraphError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_graph::GetGraphError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_graph_snapshot::GetGraphSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_graph_snapshot::GetGraphSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_graph_snapshot::GetGraphSnapshotError> for Error {
    fn from(err: crate::operation::get_graph_snapshot::GetGraphSnapshotError) -> Self {
        match err {
            crate::operation::get_graph_snapshot::GetGraphSnapshotError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_graph_snapshot::GetGraphSnapshotError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_graph_snapshot::GetGraphSnapshotError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_graph_snapshot::GetGraphSnapshotError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_graph_snapshot::GetGraphSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_import_task::GetImportTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_import_task::GetImportTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_import_task::GetImportTaskError> for Error {
    fn from(err: crate::operation::get_import_task::GetImportTaskError) -> Self {
        match err {
            crate::operation::get_import_task::GetImportTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_import_task::GetImportTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_import_task::GetImportTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_import_task::GetImportTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_import_task::GetImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError> for Error {
    fn from(err: crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError) -> Self {
        match err {
            crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_graphs::ListGraphsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_graphs::ListGraphsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_graphs::ListGraphsError> for Error {
    fn from(err: crate::operation::list_graphs::ListGraphsError) -> Self {
        match err {
            crate::operation::list_graphs::ListGraphsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_graphs::ListGraphsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_graphs::ListGraphsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_graphs::ListGraphsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_graph_snapshots::ListGraphSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_graph_snapshots::ListGraphSnapshotsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_graph_snapshots::ListGraphSnapshotsError> for Error {
    fn from(err: crate::operation::list_graph_snapshots::ListGraphSnapshotsError) -> Self {
        match err {
            crate::operation::list_graph_snapshots::ListGraphSnapshotsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_graph_snapshots::ListGraphSnapshotsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_graph_snapshots::ListGraphSnapshotsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_graph_snapshots::ListGraphSnapshotsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_graph_snapshots::ListGraphSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_import_tasks::ListImportTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_import_tasks::ListImportTasksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_import_tasks::ListImportTasksError> for Error {
    fn from(err: crate::operation::list_import_tasks::ListImportTasksError) -> Self {
        match err {
            crate::operation::list_import_tasks::ListImportTasksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_import_tasks::ListImportTasksError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_import_tasks::ListImportTasksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_import_tasks::ListImportTasksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_import_tasks::ListImportTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError> for Error {
    fn from(err: crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError) -> Self {
        match err {
            crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_private_graph_endpoints::ListPrivateGraphEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_graph::ResetGraphError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_graph::ResetGraphError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reset_graph::ResetGraphError> for Error {
    fn from(err: crate::operation::reset_graph::ResetGraphError) -> Self {
        match err {
            crate::operation::reset_graph::ResetGraphError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::reset_graph::ResetGraphError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reset_graph::ResetGraphError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reset_graph::ResetGraphError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reset_graph::ResetGraphError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reset_graph::ResetGraphError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError> for Error {
    fn from(err: crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError) -> Self {
        match err {
            crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::restore_graph_from_snapshot::RestoreGraphFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_graph::UpdateGraphError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_graph::UpdateGraphError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_graph::UpdateGraphError> for Error {
    fn from(err: crate::operation::update_graph::UpdateGraphError) -> Self {
        match err {
            crate::operation::update_graph::UpdateGraphError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_graph::UpdateGraphError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_graph::UpdateGraphError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_graph::UpdateGraphError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_graph::UpdateGraphError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_graph::UpdateGraphError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
