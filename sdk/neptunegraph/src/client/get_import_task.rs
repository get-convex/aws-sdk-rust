// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetImportTask`](crate::operation::get_import_task::builders::GetImportTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_identifier(impl Into<String>)`](crate::operation::get_import_task::builders::GetImportTaskFluentBuilder::task_identifier) / [`set_task_identifier(Option<String>)`](crate::operation::get_import_task::builders::GetImportTaskFluentBuilder::set_task_identifier):<br>required: **true**<br><p>The unique identifier of the import task.</p><br>
    /// - On success, responds with [`GetImportTaskOutput`](crate::operation::get_import_task::GetImportTaskOutput) with field(s):
    ///   - [`graph_id(Option<String>)`](crate::operation::get_import_task::GetImportTaskOutput::graph_id): <p>The unique identifier of the Neptune Analytics graph.</p>
    ///   - [`task_id(String)`](crate::operation::get_import_task::GetImportTaskOutput::task_id): <p>The unique identifier of the import task.</p>
    ///   - [`source(String)`](crate::operation::get_import_task::GetImportTaskOutput::source): <p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot</p>
    ///   - [`format(Option<Format>)`](crate::operation::get_import_task::GetImportTaskOutput::format): <p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p>
    ///   - [`role_arn(String)`](crate::operation::get_import_task::GetImportTaskOutput::role_arn): <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    ///   - [`status(ImportTaskStatus)`](crate::operation::get_import_task::GetImportTaskOutput::status): <p>The status of the import task:</p> <ul>  <li>   <p><b>INITIALIZING</b> &nbsp; – &nbsp; The necessary resources needed to create the graph are being prepared.</p></li>  <li>   <p><b>ANALYZING_DATA</b> &nbsp; – &nbsp; The data is being analyzed to determine the optimal infrastructure configuration for the new graph.</p></li>  <li>   <p><b>RE_PROVISIONING</b> &nbsp; – &nbsp; The data did not fit into the provisioned graph, so it is being re-provisioned with more capacity.</p></li>  <li>   <p><b>IMPORTING</b> &nbsp; – &nbsp; The data is being loaded.</p></li>  <li>   <p><b>ERROR_ENCOUNTERED</b> &nbsp; – &nbsp; An error has been encountered while trying to create the graph and import the data.</p></li>  <li>   <p><b>ERROR_ENCOUNTERED_ROLLING_BACK</b> &nbsp; – &nbsp; Because of the error that was encountered, the graph is being rolled back and all its resources released.</p></li>  <li>   <p><b>SUCCEEDED</b> &nbsp; – &nbsp; Graph creation and data loading succeeded.</p></li>  <li>   <p><b>FAILED</b> &nbsp; – &nbsp; Graph creation or data loading failed. When the status is <code>FAILED</code>, you can use <code>get-graphs</code> to get more information about the state of the graph.</p></li>  <li>   <p><b>CANCELLING</b> &nbsp; – &nbsp; Because you cancelled the import task, cancellation is in progress.</p></li>  <li>   <p><b>CANCELLED</b> &nbsp; – &nbsp; You have successfully cancelled the import task.</p></li> </ul>
    ///   - [`import_options(Option<ImportOptions>)`](crate::operation::get_import_task::GetImportTaskOutput::import_options): <p>Contains options for controlling the import process. For example, if the <code>failOnError</code> key is set to <code>false</code>, the import skips problem data and attempts to continue (whereas if set to <code>true</code>, the default, or if omitted, the import operation halts immediately when an error is encountered.</p>
    ///   - [`import_task_details(Option<ImportTaskDetails>)`](crate::operation::get_import_task::GetImportTaskOutput::import_task_details): <p>Contains details about the specified import task.</p>
    ///   - [`attempt_number(Option<i32>)`](crate::operation::get_import_task::GetImportTaskOutput::attempt_number): <p>The number of the current attempt to execute the import task.</p>
    ///   - [`status_reason(Option<String>)`](crate::operation::get_import_task::GetImportTaskOutput::status_reason): <p>The reason that the import task has this status value.</p>
    /// - On failure, responds with [`SdkError<GetImportTaskError>`](crate::operation::get_import_task::GetImportTaskError)
    pub fn get_import_task(&self) -> crate::operation::get_import_task::builders::GetImportTaskFluentBuilder {
        crate::operation::get_import_task::builders::GetImportTaskFluentBuilder::new(self.handle.clone())
    }
}
