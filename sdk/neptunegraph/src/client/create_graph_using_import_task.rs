// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateGraphUsingImportTask`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`graph_name(impl Into<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::graph_name) / [`set_graph_name(Option<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_graph_name):<br>required: **true**<br><p>A name for the new Neptune Analytics graph to be created.</p> <p>The name must contain from 1 to 63 letters, numbers, or hyphens, and its first character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_tags):<br>required: **false**<br><p>Adds metadata tags to the new graph. These tags can also be used with cost allocation reporting, or used in a Condition statement in an IAM policy.</p><br>
    ///   - [`public_connectivity(bool)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::public_connectivity) / [`set_public_connectivity(Option<bool>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_public_connectivity):<br>required: **false**<br><p>Specifies whether or not the graph can be reachable over the internet. All access to graphs IAM authenticated. (<code>true</code> to enable, or <code>false</code> to disable.</p><br>
    ///   - [`kms_key_identifier(impl Into<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::kms_key_identifier) / [`set_kms_key_identifier(Option<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_kms_key_identifier):<br>required: **false**<br><p>Specifies a KMS key to use to encrypt data imported into the new graph.</p><br>
    ///   - [`vector_search_configuration(VectorSearchConfiguration)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::vector_search_configuration) / [`set_vector_search_configuration(Option<VectorSearchConfiguration>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_vector_search_configuration):<br>required: **false**<br><p>Specifies the number of dimensions for vector embeddings that will be loaded into the graph. The value is specified as <code>dimension=</code>value. Max = 65,535</p><br>
    ///   - [`replica_count(i32)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::replica_count) / [`set_replica_count(Option<i32>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_replica_count):<br>required: **false**<br><p>The number of replicas in other AZs to provision on the new graph after import. Default = 0, Min = 0, Max = 2.</p><br>
    ///   - [`deletion_protection(bool)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::deletion_protection) / [`set_deletion_protection(Option<bool>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_deletion_protection):<br>required: **false**<br><p>Indicates whether or not to enable deletion protection on the graph. The graph canâ€™t be deleted when deletion protection is enabled. (<code>true</code> or <code>false</code>).</p><br>
    ///   - [`import_options(ImportOptions)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::import_options) / [`set_import_options(Option<ImportOptions>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_import_options):<br>required: **false**<br><p>Contains options for controlling the import process. For example, if the <code>failOnError</code> key is set to <code>false</code>, the import skips problem data and attempts to continue (whereas if set to <code>true</code>, the default, or if omitted, the import operation halts immediately when an error is encountered.</p><br>
    ///   - [`max_provisioned_memory(i32)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::max_provisioned_memory) / [`set_max_provisioned_memory(Option<i32>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_max_provisioned_memory):<br>required: **false**<br><p>The maximum provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph. Default: 1024, or the approved upper limit for your account.</p> <p>If both the minimum and maximum values are specified, the max of the <code>min-provisioned-memory</code> and <code>max-provisioned memory</code> is used to create the graph. If neither value is specified 128 m-NCUs are used.</p><br>
    ///   - [`min_provisioned_memory(i32)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::min_provisioned_memory) / [`set_min_provisioned_memory(Option<i32>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_min_provisioned_memory):<br>required: **false**<br><p>The minimum provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph. Default: 128</p><br>
    ///   - [`fail_on_error(bool)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::fail_on_error) / [`set_fail_on_error(Option<bool>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_fail_on_error):<br>required: **false**<br><p>If set to <code>true</code>, the task halts when an import error is encountered. If set to <code>false</code>, the task skips the data that caused the error and continues if possible.</p><br>
    ///   - [`source(impl Into<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::source) / [`set_source(Option<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_source):<br>required: **true**<br><p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot.</p><br>
    ///   - [`format(Format)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::format) / [`set_format(Option<Format>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_format):<br>required: **false**<br><p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p><br>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::set_role_arn):<br>required: **true**<br><p>The ARN of the IAM role that will allow access to the data that is to be imported.</p><br>
    /// - On success, responds with [`CreateGraphUsingImportTaskOutput`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskOutput) with field(s):
    ///   - [`graph_id(Option<String>)`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskOutput::graph_id): <p>The unique identifier of the Neptune Analytics graph.</p>
    ///   - [`task_id(String)`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskOutput::task_id): <p>The unique identifier of the import task.</p>
    ///   - [`source(String)`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskOutput::source): <p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot.</p>
    ///   - [`format(Option<Format>)`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskOutput::format): <p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p>
    ///   - [`role_arn(String)`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskOutput::role_arn): <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    ///   - [`status(ImportTaskStatus)`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskOutput::status): <p>The status of the import task.</p>
    ///   - [`import_options(Option<ImportOptions>)`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskOutput::import_options): <p>Contains options for controlling the import process. For example, if the <code>failOnError</code> key is set to <code>false</code>, the import skips problem data and attempts to continue (whereas if set to <code>true</code>, the default, or if omitted, the import operation halts immediately when an error is encountered.</p>
    /// - On failure, responds with [`SdkError<CreateGraphUsingImportTaskError>`](crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskError)
    pub fn create_graph_using_import_task(
        &self,
    ) -> crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder {
        crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskFluentBuilder::new(self.handle.clone())
    }
}
