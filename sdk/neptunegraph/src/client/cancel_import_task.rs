// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CancelImportTask`](crate::operation::cancel_import_task::builders::CancelImportTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_identifier(impl Into<String>)`](crate::operation::cancel_import_task::builders::CancelImportTaskFluentBuilder::task_identifier) / [`set_task_identifier(Option<String>)`](crate::operation::cancel_import_task::builders::CancelImportTaskFluentBuilder::set_task_identifier):<br>required: **true**<br><p>The unique identifier of the import task.</p><br>
    /// - On success, responds with [`CancelImportTaskOutput`](crate::operation::cancel_import_task::CancelImportTaskOutput) with field(s):
    ///   - [`graph_id(Option<String>)`](crate::operation::cancel_import_task::CancelImportTaskOutput::graph_id): <p>The unique identifier of the Neptune Analytics graph.</p>
    ///   - [`task_id(String)`](crate::operation::cancel_import_task::CancelImportTaskOutput::task_id): <p>The unique identifier of the import task.</p>
    ///   - [`source(String)`](crate::operation::cancel_import_task::CancelImportTaskOutput::source): <p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot</p>
    ///   - [`format(Option<Format>)`](crate::operation::cancel_import_task::CancelImportTaskOutput::format): <p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p>
    ///   - [`role_arn(String)`](crate::operation::cancel_import_task::CancelImportTaskOutput::role_arn): <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    ///   - [`status(ImportTaskStatus)`](crate::operation::cancel_import_task::CancelImportTaskOutput::status): <p>Current status of the task. Status is CANCELLING when the import task is cancelled.</p>
    /// - On failure, responds with [`SdkError<CancelImportTaskError>`](crate::operation::cancel_import_task::CancelImportTaskError)
    pub fn cancel_import_task(&self) -> crate::operation::cancel_import_task::builders::CancelImportTaskFluentBuilder {
        crate::operation::cancel_import_task::builders::CancelImportTaskFluentBuilder::new(self.handle.clone())
    }
}
