// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about an import task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportTaskDetails {
    /// <p>Status of the import task.</p>
    pub status: ::std::string::String,
    /// <p>Time at which the import task started.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>Seconds elapsed since the import task started.</p>
    pub time_elapsed_seconds: i64,
    /// <p>The percentage progress so far.</p>
    pub progress_percentage: i32,
    /// <p>The number of errors encountered so far.</p>
    pub error_count: i32,
    /// <p>Details about the errors that have been encountered.</p>
    pub error_details: ::std::option::Option<::std::string::String>,
    /// <p>The number of statements in the import task.</p>
    pub statement_count: i64,
    /// <p>The number of dictionary entries in the import task.</p>
    pub dictionary_entry_count: i64,
}
impl ImportTaskDetails {
    /// <p>Status of the import task.</p>
    pub fn status(&self) -> &str {
        use std::ops::Deref;
        self.status.deref()
    }
    /// <p>Time at which the import task started.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>Seconds elapsed since the import task started.</p>
    pub fn time_elapsed_seconds(&self) -> i64 {
        self.time_elapsed_seconds
    }
    /// <p>The percentage progress so far.</p>
    pub fn progress_percentage(&self) -> i32 {
        self.progress_percentage
    }
    /// <p>The number of errors encountered so far.</p>
    pub fn error_count(&self) -> i32 {
        self.error_count
    }
    /// <p>Details about the errors that have been encountered.</p>
    pub fn error_details(&self) -> ::std::option::Option<&str> {
        self.error_details.as_deref()
    }
    /// <p>The number of statements in the import task.</p>
    pub fn statement_count(&self) -> i64 {
        self.statement_count
    }
    /// <p>The number of dictionary entries in the import task.</p>
    pub fn dictionary_entry_count(&self) -> i64 {
        self.dictionary_entry_count
    }
}
impl ImportTaskDetails {
    /// Creates a new builder-style object to manufacture [`ImportTaskDetails`](crate::types::ImportTaskDetails).
    pub fn builder() -> crate::types::builders::ImportTaskDetailsBuilder {
        crate::types::builders::ImportTaskDetailsBuilder::default()
    }
}

/// A builder for [`ImportTaskDetails`](crate::types::ImportTaskDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportTaskDetailsBuilder {
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) time_elapsed_seconds: ::std::option::Option<i64>,
    pub(crate) progress_percentage: ::std::option::Option<i32>,
    pub(crate) error_count: ::std::option::Option<i32>,
    pub(crate) error_details: ::std::option::Option<::std::string::String>,
    pub(crate) statement_count: ::std::option::Option<i64>,
    pub(crate) dictionary_entry_count: ::std::option::Option<i64>,
}
impl ImportTaskDetailsBuilder {
    /// <p>Status of the import task.</p>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Status of the import task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the import task.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Time at which the import task started.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time at which the import task started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>Time at which the import task started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>Seconds elapsed since the import task started.</p>
    /// This field is required.
    pub fn time_elapsed_seconds(mut self, input: i64) -> Self {
        self.time_elapsed_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Seconds elapsed since the import task started.</p>
    pub fn set_time_elapsed_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.time_elapsed_seconds = input;
        self
    }
    /// <p>Seconds elapsed since the import task started.</p>
    pub fn get_time_elapsed_seconds(&self) -> &::std::option::Option<i64> {
        &self.time_elapsed_seconds
    }
    /// <p>The percentage progress so far.</p>
    /// This field is required.
    pub fn progress_percentage(mut self, input: i32) -> Self {
        self.progress_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage progress so far.</p>
    pub fn set_progress_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.progress_percentage = input;
        self
    }
    /// <p>The percentage progress so far.</p>
    pub fn get_progress_percentage(&self) -> &::std::option::Option<i32> {
        &self.progress_percentage
    }
    /// <p>The number of errors encountered so far.</p>
    /// This field is required.
    pub fn error_count(mut self, input: i32) -> Self {
        self.error_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of errors encountered so far.</p>
    pub fn set_error_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.error_count = input;
        self
    }
    /// <p>The number of errors encountered so far.</p>
    pub fn get_error_count(&self) -> &::std::option::Option<i32> {
        &self.error_count
    }
    /// <p>Details about the errors that have been encountered.</p>
    pub fn error_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Details about the errors that have been encountered.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Details about the errors that have been encountered.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_details
    }
    /// <p>The number of statements in the import task.</p>
    /// This field is required.
    pub fn statement_count(mut self, input: i64) -> Self {
        self.statement_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of statements in the import task.</p>
    pub fn set_statement_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.statement_count = input;
        self
    }
    /// <p>The number of statements in the import task.</p>
    pub fn get_statement_count(&self) -> &::std::option::Option<i64> {
        &self.statement_count
    }
    /// <p>The number of dictionary entries in the import task.</p>
    /// This field is required.
    pub fn dictionary_entry_count(mut self, input: i64) -> Self {
        self.dictionary_entry_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of dictionary entries in the import task.</p>
    pub fn set_dictionary_entry_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.dictionary_entry_count = input;
        self
    }
    /// <p>The number of dictionary entries in the import task.</p>
    pub fn get_dictionary_entry_count(&self) -> &::std::option::Option<i64> {
        &self.dictionary_entry_count
    }
    /// Consumes the builder and constructs a [`ImportTaskDetails`](crate::types::ImportTaskDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::ImportTaskDetailsBuilder::status)
    /// - [`start_time`](crate::types::builders::ImportTaskDetailsBuilder::start_time)
    /// - [`time_elapsed_seconds`](crate::types::builders::ImportTaskDetailsBuilder::time_elapsed_seconds)
    /// - [`progress_percentage`](crate::types::builders::ImportTaskDetailsBuilder::progress_percentage)
    /// - [`error_count`](crate::types::builders::ImportTaskDetailsBuilder::error_count)
    /// - [`statement_count`](crate::types::builders::ImportTaskDetailsBuilder::statement_count)
    /// - [`dictionary_entry_count`](crate::types::builders::ImportTaskDetailsBuilder::dictionary_entry_count)
    pub fn build(self) -> ::std::result::Result<crate::types::ImportTaskDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImportTaskDetails {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ImportTaskDetails",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building ImportTaskDetails",
                )
            })?,
            time_elapsed_seconds: self.time_elapsed_seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "time_elapsed_seconds",
                    "time_elapsed_seconds was not specified but it is required when building ImportTaskDetails",
                )
            })?,
            progress_percentage: self.progress_percentage.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "progress_percentage",
                    "progress_percentage was not specified but it is required when building ImportTaskDetails",
                )
            })?,
            error_count: self.error_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_count",
                    "error_count was not specified but it is required when building ImportTaskDetails",
                )
            })?,
            error_details: self.error_details,
            statement_count: self.statement_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "statement_count",
                    "statement_count was not specified but it is required when building ImportTaskDetails",
                )
            })?,
            dictionary_entry_count: self.dictionary_entry_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dictionary_entry_count",
                    "dictionary_entry_count was not specified but it is required when building ImportTaskDetails",
                )
            })?,
        })
    }
}
