// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary details about a graph.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GraphSummary {
    /// <p>The unique identifier of the graph.</p>
    pub id: ::std::string::String,
    /// <p>The name of the graph.</p>
    pub name: ::std::string::String,
    /// <p>The ARN associated with the graph.</p>
    pub arn: ::std::string::String,
    /// <p>The status of the graph.</p>
    pub status: ::std::option::Option<crate::types::GraphStatus>,
    /// <p>The number of memory-optimized Neptune Capacity Units (m-NCUs) allocated to the graph.</p>
    pub provisioned_memory: ::std::option::Option<i32>,
    /// <p>If <code>true</code>, the graph has a public endpoint, otherwise not.</p>
    pub public_connectivity: ::std::option::Option<bool>,
    /// <p>The graph endpoint.</p>
    pub endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The number of replicas for the graph.</p>
    pub replica_count: ::std::option::Option<i32>,
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub kms_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>If <code>true</code>, deletion protection is enabled for the graph.</p>
    pub deletion_protection: ::std::option::Option<bool>,
}
impl GraphSummary {
    /// <p>The unique identifier of the graph.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the graph.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The ARN associated with the graph.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The status of the graph.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::GraphStatus> {
        self.status.as_ref()
    }
    /// <p>The number of memory-optimized Neptune Capacity Units (m-NCUs) allocated to the graph.</p>
    pub fn provisioned_memory(&self) -> ::std::option::Option<i32> {
        self.provisioned_memory
    }
    /// <p>If <code>true</code>, the graph has a public endpoint, otherwise not.</p>
    pub fn public_connectivity(&self) -> ::std::option::Option<bool> {
        self.public_connectivity
    }
    /// <p>The graph endpoint.</p>
    pub fn endpoint(&self) -> ::std::option::Option<&str> {
        self.endpoint.as_deref()
    }
    /// <p>The number of replicas for the graph.</p>
    pub fn replica_count(&self) -> ::std::option::Option<i32> {
        self.replica_count
    }
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub fn kms_key_identifier(&self) -> ::std::option::Option<&str> {
        self.kms_key_identifier.as_deref()
    }
    /// <p>If <code>true</code>, deletion protection is enabled for the graph.</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<bool> {
        self.deletion_protection
    }
}
impl GraphSummary {
    /// Creates a new builder-style object to manufacture [`GraphSummary`](crate::types::GraphSummary).
    pub fn builder() -> crate::types::builders::GraphSummaryBuilder {
        crate::types::builders::GraphSummaryBuilder::default()
    }
}

/// A builder for [`GraphSummary`](crate::types::GraphSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GraphSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::GraphStatus>,
    pub(crate) provisioned_memory: ::std::option::Option<i32>,
    pub(crate) public_connectivity: ::std::option::Option<bool>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) replica_count: ::std::option::Option<i32>,
    pub(crate) kms_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) deletion_protection: ::std::option::Option<bool>,
}
impl GraphSummaryBuilder {
    /// <p>The unique identifier of the graph.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the graph.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the graph.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the graph.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the graph.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the graph.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN associated with the graph.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN associated with the graph.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN associated with the graph.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status of the graph.</p>
    pub fn status(mut self, input: crate::types::GraphStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the graph.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GraphStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the graph.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GraphStatus> {
        &self.status
    }
    /// <p>The number of memory-optimized Neptune Capacity Units (m-NCUs) allocated to the graph.</p>
    pub fn provisioned_memory(mut self, input: i32) -> Self {
        self.provisioned_memory = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of memory-optimized Neptune Capacity Units (m-NCUs) allocated to the graph.</p>
    pub fn set_provisioned_memory(mut self, input: ::std::option::Option<i32>) -> Self {
        self.provisioned_memory = input;
        self
    }
    /// <p>The number of memory-optimized Neptune Capacity Units (m-NCUs) allocated to the graph.</p>
    pub fn get_provisioned_memory(&self) -> &::std::option::Option<i32> {
        &self.provisioned_memory
    }
    /// <p>If <code>true</code>, the graph has a public endpoint, otherwise not.</p>
    pub fn public_connectivity(mut self, input: bool) -> Self {
        self.public_connectivity = ::std::option::Option::Some(input);
        self
    }
    /// <p>If <code>true</code>, the graph has a public endpoint, otherwise not.</p>
    pub fn set_public_connectivity(mut self, input: ::std::option::Option<bool>) -> Self {
        self.public_connectivity = input;
        self
    }
    /// <p>If <code>true</code>, the graph has a public endpoint, otherwise not.</p>
    pub fn get_public_connectivity(&self) -> &::std::option::Option<bool> {
        &self.public_connectivity
    }
    /// <p>The graph endpoint.</p>
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The graph endpoint.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The graph endpoint.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The number of replicas for the graph.</p>
    pub fn replica_count(mut self, input: i32) -> Self {
        self.replica_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of replicas for the graph.</p>
    pub fn set_replica_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.replica_count = input;
        self
    }
    /// <p>The number of replicas for the graph.</p>
    pub fn get_replica_count(&self) -> &::std::option::Option<i32> {
        &self.replica_count
    }
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub fn kms_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub fn set_kms_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_identifier = input;
        self
    }
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub fn get_kms_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_identifier
    }
    /// <p>If <code>true</code>, deletion protection is enabled for the graph.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>If <code>true</code>, deletion protection is enabled for the graph.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>If <code>true</code>, deletion protection is enabled for the graph.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection
    }
    /// Consumes the builder and constructs a [`GraphSummary`](crate::types::GraphSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::GraphSummaryBuilder::id)
    /// - [`name`](crate::types::builders::GraphSummaryBuilder::name)
    /// - [`arn`](crate::types::builders::GraphSummaryBuilder::arn)
    pub fn build(self) -> ::std::result::Result<crate::types::GraphSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GraphSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GraphSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GraphSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GraphSummary",
                )
            })?,
            status: self.status,
            provisioned_memory: self.provisioned_memory,
            public_connectivity: self.public_connectivity,
            endpoint: self.endpoint,
            replica_count: self.replica_count,
            kms_key_identifier: self.kms_key_identifier,
            deletion_protection: self.deletion_protection,
        })
    }
}
