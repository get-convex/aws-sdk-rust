// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for how to import Neptune data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NeptuneImportOptions {
    /// <p>The path to an S3 bucket from which to import data.</p>
    pub s3_export_path: ::std::string::String,
    /// <p>The KMS key to use to encrypt data in the S3 bucket where the graph data is exported</p>
    pub s3_export_kms_key_id: ::std::string::String,
    /// <p>Neptune Analytics supports label-less vertices and no labels are assigned unless one is explicitly provided. Neptune assigns default labels when none is explicitly provided. When importing the data into Neptune Analytics, the default vertex labels can be omitted by setting <i>preserveDefaultVertexLabels</i> to false. Note that if the vertex only has default labels, and has no other properties or edges, then the vertex will effectively not get imported into Neptune Analytics when preserveDefaultVertexLabels is set to false.</p>
    pub preserve_default_vertex_labels: ::std::option::Option<bool>,
    /// <p>Neptune Analytics currently does not support user defined edge ids. The edge ids are not imported by default. They are imported if <i>preserveEdgeIds</i> is set to true, and ids are stored as properties on the relationships with the property name neptuneEdgeId.</p>
    pub preserve_edge_ids: ::std::option::Option<bool>,
}
impl NeptuneImportOptions {
    /// <p>The path to an S3 bucket from which to import data.</p>
    pub fn s3_export_path(&self) -> &str {
        use std::ops::Deref;
        self.s3_export_path.deref()
    }
    /// <p>The KMS key to use to encrypt data in the S3 bucket where the graph data is exported</p>
    pub fn s3_export_kms_key_id(&self) -> &str {
        use std::ops::Deref;
        self.s3_export_kms_key_id.deref()
    }
    /// <p>Neptune Analytics supports label-less vertices and no labels are assigned unless one is explicitly provided. Neptune assigns default labels when none is explicitly provided. When importing the data into Neptune Analytics, the default vertex labels can be omitted by setting <i>preserveDefaultVertexLabels</i> to false. Note that if the vertex only has default labels, and has no other properties or edges, then the vertex will effectively not get imported into Neptune Analytics when preserveDefaultVertexLabels is set to false.</p>
    pub fn preserve_default_vertex_labels(&self) -> ::std::option::Option<bool> {
        self.preserve_default_vertex_labels
    }
    /// <p>Neptune Analytics currently does not support user defined edge ids. The edge ids are not imported by default. They are imported if <i>preserveEdgeIds</i> is set to true, and ids are stored as properties on the relationships with the property name neptuneEdgeId.</p>
    pub fn preserve_edge_ids(&self) -> ::std::option::Option<bool> {
        self.preserve_edge_ids
    }
}
impl NeptuneImportOptions {
    /// Creates a new builder-style object to manufacture [`NeptuneImportOptions`](crate::types::NeptuneImportOptions).
    pub fn builder() -> crate::types::builders::NeptuneImportOptionsBuilder {
        crate::types::builders::NeptuneImportOptionsBuilder::default()
    }
}

/// A builder for [`NeptuneImportOptions`](crate::types::NeptuneImportOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NeptuneImportOptionsBuilder {
    pub(crate) s3_export_path: ::std::option::Option<::std::string::String>,
    pub(crate) s3_export_kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) preserve_default_vertex_labels: ::std::option::Option<bool>,
    pub(crate) preserve_edge_ids: ::std::option::Option<bool>,
}
impl NeptuneImportOptionsBuilder {
    /// <p>The path to an S3 bucket from which to import data.</p>
    /// This field is required.
    pub fn s3_export_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_export_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to an S3 bucket from which to import data.</p>
    pub fn set_s3_export_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_export_path = input;
        self
    }
    /// <p>The path to an S3 bucket from which to import data.</p>
    pub fn get_s3_export_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_export_path
    }
    /// <p>The KMS key to use to encrypt data in the S3 bucket where the graph data is exported</p>
    /// This field is required.
    pub fn s3_export_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_export_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key to use to encrypt data in the S3 bucket where the graph data is exported</p>
    pub fn set_s3_export_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_export_kms_key_id = input;
        self
    }
    /// <p>The KMS key to use to encrypt data in the S3 bucket where the graph data is exported</p>
    pub fn get_s3_export_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_export_kms_key_id
    }
    /// <p>Neptune Analytics supports label-less vertices and no labels are assigned unless one is explicitly provided. Neptune assigns default labels when none is explicitly provided. When importing the data into Neptune Analytics, the default vertex labels can be omitted by setting <i>preserveDefaultVertexLabels</i> to false. Note that if the vertex only has default labels, and has no other properties or edges, then the vertex will effectively not get imported into Neptune Analytics when preserveDefaultVertexLabels is set to false.</p>
    pub fn preserve_default_vertex_labels(mut self, input: bool) -> Self {
        self.preserve_default_vertex_labels = ::std::option::Option::Some(input);
        self
    }
    /// <p>Neptune Analytics supports label-less vertices and no labels are assigned unless one is explicitly provided. Neptune assigns default labels when none is explicitly provided. When importing the data into Neptune Analytics, the default vertex labels can be omitted by setting <i>preserveDefaultVertexLabels</i> to false. Note that if the vertex only has default labels, and has no other properties or edges, then the vertex will effectively not get imported into Neptune Analytics when preserveDefaultVertexLabels is set to false.</p>
    pub fn set_preserve_default_vertex_labels(mut self, input: ::std::option::Option<bool>) -> Self {
        self.preserve_default_vertex_labels = input;
        self
    }
    /// <p>Neptune Analytics supports label-less vertices and no labels are assigned unless one is explicitly provided. Neptune assigns default labels when none is explicitly provided. When importing the data into Neptune Analytics, the default vertex labels can be omitted by setting <i>preserveDefaultVertexLabels</i> to false. Note that if the vertex only has default labels, and has no other properties or edges, then the vertex will effectively not get imported into Neptune Analytics when preserveDefaultVertexLabels is set to false.</p>
    pub fn get_preserve_default_vertex_labels(&self) -> &::std::option::Option<bool> {
        &self.preserve_default_vertex_labels
    }
    /// <p>Neptune Analytics currently does not support user defined edge ids. The edge ids are not imported by default. They are imported if <i>preserveEdgeIds</i> is set to true, and ids are stored as properties on the relationships with the property name neptuneEdgeId.</p>
    pub fn preserve_edge_ids(mut self, input: bool) -> Self {
        self.preserve_edge_ids = ::std::option::Option::Some(input);
        self
    }
    /// <p>Neptune Analytics currently does not support user defined edge ids. The edge ids are not imported by default. They are imported if <i>preserveEdgeIds</i> is set to true, and ids are stored as properties on the relationships with the property name neptuneEdgeId.</p>
    pub fn set_preserve_edge_ids(mut self, input: ::std::option::Option<bool>) -> Self {
        self.preserve_edge_ids = input;
        self
    }
    /// <p>Neptune Analytics currently does not support user defined edge ids. The edge ids are not imported by default. They are imported if <i>preserveEdgeIds</i> is set to true, and ids are stored as properties on the relationships with the property name neptuneEdgeId.</p>
    pub fn get_preserve_edge_ids(&self) -> &::std::option::Option<bool> {
        &self.preserve_edge_ids
    }
    /// Consumes the builder and constructs a [`NeptuneImportOptions`](crate::types::NeptuneImportOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_export_path`](crate::types::builders::NeptuneImportOptionsBuilder::s3_export_path)
    /// - [`s3_export_kms_key_id`](crate::types::builders::NeptuneImportOptionsBuilder::s3_export_kms_key_id)
    pub fn build(self) -> ::std::result::Result<crate::types::NeptuneImportOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NeptuneImportOptions {
            s3_export_path: self.s3_export_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_export_path",
                    "s3_export_path was not specified but it is required when building NeptuneImportOptions",
                )
            })?,
            s3_export_kms_key_id: self.s3_export_kms_key_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_export_kms_key_id",
                    "s3_export_kms_key_id was not specified but it is required when building NeptuneImportOptions",
                )
            })?,
            preserve_default_vertex_labels: self.preserve_default_vertex_labels,
            preserve_edge_ids: self.preserve_edge_ids,
        })
    }
}
