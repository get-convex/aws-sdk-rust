// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGraphSnapshotOutput {
    /// <p>The ID of the snapshot created.</p>
    pub id: ::std::string::String,
    /// <p>The name of the snapshot created.</p>
    pub name: ::std::string::String,
    /// <p>The ARN of the snapshot created.</p>
    pub arn: ::std::string::String,
    /// <p>The Id of the Neptune Analytics graph from which the snapshot is created.</p>
    pub source_graph_id: ::std::option::Option<::std::string::String>,
    /// <p>The snapshot creation time</p>
    pub snapshot_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current state of the snapshot.</p>
    pub status: ::std::option::Option<crate::types::SnapshotStatus>,
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub kms_key_identifier: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateGraphSnapshotOutput {
    /// <p>The ID of the snapshot created.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the snapshot created.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The ARN of the snapshot created.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The Id of the Neptune Analytics graph from which the snapshot is created.</p>
    pub fn source_graph_id(&self) -> ::std::option::Option<&str> {
        self.source_graph_id.as_deref()
    }
    /// <p>The snapshot creation time</p>
    pub fn snapshot_create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.snapshot_create_time.as_ref()
    }
    /// <p>The current state of the snapshot.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SnapshotStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub fn kms_key_identifier(&self) -> ::std::option::Option<&str> {
        self.kms_key_identifier.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateGraphSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateGraphSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CreateGraphSnapshotOutput`](crate::operation::create_graph_snapshot::CreateGraphSnapshotOutput).
    pub fn builder() -> crate::operation::create_graph_snapshot::builders::CreateGraphSnapshotOutputBuilder {
        crate::operation::create_graph_snapshot::builders::CreateGraphSnapshotOutputBuilder::default()
    }
}

/// A builder for [`CreateGraphSnapshotOutput`](crate::operation::create_graph_snapshot::CreateGraphSnapshotOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateGraphSnapshotOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_graph_id: ::std::option::Option<::std::string::String>,
    pub(crate) snapshot_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::SnapshotStatus>,
    pub(crate) kms_key_identifier: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateGraphSnapshotOutputBuilder {
    /// <p>The ID of the snapshot created.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the snapshot created.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the snapshot created.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the snapshot created.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the snapshot created.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the snapshot created.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the snapshot created.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the snapshot created.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the snapshot created.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Id of the Neptune Analytics graph from which the snapshot is created.</p>
    pub fn source_graph_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_graph_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Id of the Neptune Analytics graph from which the snapshot is created.</p>
    pub fn set_source_graph_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_graph_id = input;
        self
    }
    /// <p>The Id of the Neptune Analytics graph from which the snapshot is created.</p>
    pub fn get_source_graph_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_graph_id
    }
    /// <p>The snapshot creation time</p>
    pub fn snapshot_create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.snapshot_create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The snapshot creation time</p>
    pub fn set_snapshot_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.snapshot_create_time = input;
        self
    }
    /// <p>The snapshot creation time</p>
    pub fn get_snapshot_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.snapshot_create_time
    }
    /// <p>The current state of the snapshot.</p>
    pub fn status(mut self, input: crate::types::SnapshotStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the snapshot.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SnapshotStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current state of the snapshot.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SnapshotStatus> {
        &self.status
    }
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub fn kms_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub fn set_kms_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_identifier = input;
        self
    }
    /// <p>The ID of the KMS key used to encrypt and decrypt graph data.</p>
    pub fn get_kms_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_identifier
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateGraphSnapshotOutput`](crate::operation::create_graph_snapshot::CreateGraphSnapshotOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::create_graph_snapshot::builders::CreateGraphSnapshotOutputBuilder::id)
    /// - [`name`](crate::operation::create_graph_snapshot::builders::CreateGraphSnapshotOutputBuilder::name)
    /// - [`arn`](crate::operation::create_graph_snapshot::builders::CreateGraphSnapshotOutputBuilder::arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_graph_snapshot::CreateGraphSnapshotOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_graph_snapshot::CreateGraphSnapshotOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CreateGraphSnapshotOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CreateGraphSnapshotOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building CreateGraphSnapshotOutput",
                )
            })?,
            source_graph_id: self.source_graph_id,
            snapshot_create_time: self.snapshot_create_time,
            status: self.status,
            kms_key_identifier: self.kms_key_identifier,
            _request_id: self._request_id,
        })
    }
}
