// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetImportTaskOutput {
    /// <p>The unique identifier of the Neptune Analytics graph.</p>
    pub graph_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the import task.</p>
    pub task_id: ::std::string::String,
    /// <p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot</p>
    pub source: ::std::string::String,
    /// <p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p>
    pub format: ::std::option::Option<crate::types::Format>,
    /// <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    pub role_arn: ::std::string::String,
    /// <p>The status of the import task:</p>
    /// <ul>
    /// <li>
    /// <p><b>INITIALIZING</b> &nbsp; – &nbsp; The necessary resources needed to create the graph are being prepared.</p></li>
    /// <li>
    /// <p><b>ANALYZING_DATA</b> &nbsp; – &nbsp; The data is being analyzed to determine the optimal infrastructure configuration for the new graph.</p></li>
    /// <li>
    /// <p><b>RE_PROVISIONING</b> &nbsp; – &nbsp; The data did not fit into the provisioned graph, so it is being re-provisioned with more capacity.</p></li>
    /// <li>
    /// <p><b>IMPORTING</b> &nbsp; – &nbsp; The data is being loaded.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED</b> &nbsp; – &nbsp; An error has been encountered while trying to create the graph and import the data.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED_ROLLING_BACK</b> &nbsp; – &nbsp; Because of the error that was encountered, the graph is being rolled back and all its resources released.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b> &nbsp; – &nbsp; Graph creation and data loading succeeded.</p></li>
    /// <li>
    /// <p><b>FAILED</b> &nbsp; – &nbsp; Graph creation or data loading failed. When the status is <code>FAILED</code>, you can use <code>get-graphs</code> to get more information about the state of the graph.</p></li>
    /// <li>
    /// <p><b>CANCELLING</b> &nbsp; – &nbsp; Because you cancelled the import task, cancellation is in progress.</p></li>
    /// <li>
    /// <p><b>CANCELLED</b> &nbsp; – &nbsp; You have successfully cancelled the import task.</p></li>
    /// </ul>
    pub status: crate::types::ImportTaskStatus,
    /// <p>Contains options for controlling the import process. For example, if the <code>failOnError</code> key is set to <code>false</code>, the import skips problem data and attempts to continue (whereas if set to <code>true</code>, the default, or if omitted, the import operation halts immediately when an error is encountered.</p>
    pub import_options: ::std::option::Option<crate::types::ImportOptions>,
    /// <p>Contains details about the specified import task.</p>
    pub import_task_details: ::std::option::Option<crate::types::ImportTaskDetails>,
    /// <p>The number of the current attempt to execute the import task.</p>
    pub attempt_number: ::std::option::Option<i32>,
    /// <p>The reason that the import task has this status value.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetImportTaskOutput {
    /// <p>The unique identifier of the Neptune Analytics graph.</p>
    pub fn graph_id(&self) -> ::std::option::Option<&str> {
        self.graph_id.as_deref()
    }
    /// <p>The unique identifier of the import task.</p>
    pub fn task_id(&self) -> &str {
        use std::ops::Deref;
        self.task_id.deref()
    }
    /// <p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot</p>
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }
    /// <p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::Format> {
        self.format.as_ref()
    }
    /// <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The status of the import task:</p>
    /// <ul>
    /// <li>
    /// <p><b>INITIALIZING</b> &nbsp; – &nbsp; The necessary resources needed to create the graph are being prepared.</p></li>
    /// <li>
    /// <p><b>ANALYZING_DATA</b> &nbsp; – &nbsp; The data is being analyzed to determine the optimal infrastructure configuration for the new graph.</p></li>
    /// <li>
    /// <p><b>RE_PROVISIONING</b> &nbsp; – &nbsp; The data did not fit into the provisioned graph, so it is being re-provisioned with more capacity.</p></li>
    /// <li>
    /// <p><b>IMPORTING</b> &nbsp; – &nbsp; The data is being loaded.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED</b> &nbsp; – &nbsp; An error has been encountered while trying to create the graph and import the data.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED_ROLLING_BACK</b> &nbsp; – &nbsp; Because of the error that was encountered, the graph is being rolled back and all its resources released.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b> &nbsp; – &nbsp; Graph creation and data loading succeeded.</p></li>
    /// <li>
    /// <p><b>FAILED</b> &nbsp; – &nbsp; Graph creation or data loading failed. When the status is <code>FAILED</code>, you can use <code>get-graphs</code> to get more information about the state of the graph.</p></li>
    /// <li>
    /// <p><b>CANCELLING</b> &nbsp; – &nbsp; Because you cancelled the import task, cancellation is in progress.</p></li>
    /// <li>
    /// <p><b>CANCELLED</b> &nbsp; – &nbsp; You have successfully cancelled the import task.</p></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::ImportTaskStatus {
        &self.status
    }
    /// <p>Contains options for controlling the import process. For example, if the <code>failOnError</code> key is set to <code>false</code>, the import skips problem data and attempts to continue (whereas if set to <code>true</code>, the default, or if omitted, the import operation halts immediately when an error is encountered.</p>
    pub fn import_options(&self) -> ::std::option::Option<&crate::types::ImportOptions> {
        self.import_options.as_ref()
    }
    /// <p>Contains details about the specified import task.</p>
    pub fn import_task_details(&self) -> ::std::option::Option<&crate::types::ImportTaskDetails> {
        self.import_task_details.as_ref()
    }
    /// <p>The number of the current attempt to execute the import task.</p>
    pub fn attempt_number(&self) -> ::std::option::Option<i32> {
        self.attempt_number
    }
    /// <p>The reason that the import task has this status value.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetImportTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetImportTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetImportTaskOutput`](crate::operation::get_import_task::GetImportTaskOutput).
    pub fn builder() -> crate::operation::get_import_task::builders::GetImportTaskOutputBuilder {
        crate::operation::get_import_task::builders::GetImportTaskOutputBuilder::default()
    }
}

/// A builder for [`GetImportTaskOutput`](crate::operation::get_import_task::GetImportTaskOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetImportTaskOutputBuilder {
    pub(crate) graph_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::Format>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ImportTaskStatus>,
    pub(crate) import_options: ::std::option::Option<crate::types::ImportOptions>,
    pub(crate) import_task_details: ::std::option::Option<crate::types::ImportTaskDetails>,
    pub(crate) attempt_number: ::std::option::Option<i32>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetImportTaskOutputBuilder {
    /// <p>The unique identifier of the Neptune Analytics graph.</p>
    pub fn graph_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Neptune Analytics graph.</p>
    pub fn set_graph_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_id = input;
        self
    }
    /// <p>The unique identifier of the Neptune Analytics graph.</p>
    pub fn get_graph_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_id
    }
    /// <p>The unique identifier of the import task.</p>
    /// This field is required.
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the import task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The unique identifier of the import task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot</p>
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>A URL identifying to the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p>
    pub fn format(mut self, input: crate::types::Format) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::Format>) -> Self {
        self.format = input;
        self
    }
    /// <p>Specifies the format of S3 data to be imported. Valid values are <code>CSV</code>, which identifies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html">Gremlin CSV format</a> or <code>OPENCYPHER</code>, which identies the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html">openCypher load format</a>.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::Format> {
        &self.format
    }
    /// <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The status of the import task:</p>
    /// <ul>
    /// <li>
    /// <p><b>INITIALIZING</b> &nbsp; – &nbsp; The necessary resources needed to create the graph are being prepared.</p></li>
    /// <li>
    /// <p><b>ANALYZING_DATA</b> &nbsp; – &nbsp; The data is being analyzed to determine the optimal infrastructure configuration for the new graph.</p></li>
    /// <li>
    /// <p><b>RE_PROVISIONING</b> &nbsp; – &nbsp; The data did not fit into the provisioned graph, so it is being re-provisioned with more capacity.</p></li>
    /// <li>
    /// <p><b>IMPORTING</b> &nbsp; – &nbsp; The data is being loaded.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED</b> &nbsp; – &nbsp; An error has been encountered while trying to create the graph and import the data.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED_ROLLING_BACK</b> &nbsp; – &nbsp; Because of the error that was encountered, the graph is being rolled back and all its resources released.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b> &nbsp; – &nbsp; Graph creation and data loading succeeded.</p></li>
    /// <li>
    /// <p><b>FAILED</b> &nbsp; – &nbsp; Graph creation or data loading failed. When the status is <code>FAILED</code>, you can use <code>get-graphs</code> to get more information about the state of the graph.</p></li>
    /// <li>
    /// <p><b>CANCELLING</b> &nbsp; – &nbsp; Because you cancelled the import task, cancellation is in progress.</p></li>
    /// <li>
    /// <p><b>CANCELLED</b> &nbsp; – &nbsp; You have successfully cancelled the import task.</p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ImportTaskStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the import task:</p>
    /// <ul>
    /// <li>
    /// <p><b>INITIALIZING</b> &nbsp; – &nbsp; The necessary resources needed to create the graph are being prepared.</p></li>
    /// <li>
    /// <p><b>ANALYZING_DATA</b> &nbsp; – &nbsp; The data is being analyzed to determine the optimal infrastructure configuration for the new graph.</p></li>
    /// <li>
    /// <p><b>RE_PROVISIONING</b> &nbsp; – &nbsp; The data did not fit into the provisioned graph, so it is being re-provisioned with more capacity.</p></li>
    /// <li>
    /// <p><b>IMPORTING</b> &nbsp; – &nbsp; The data is being loaded.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED</b> &nbsp; – &nbsp; An error has been encountered while trying to create the graph and import the data.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED_ROLLING_BACK</b> &nbsp; – &nbsp; Because of the error that was encountered, the graph is being rolled back and all its resources released.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b> &nbsp; – &nbsp; Graph creation and data loading succeeded.</p></li>
    /// <li>
    /// <p><b>FAILED</b> &nbsp; – &nbsp; Graph creation or data loading failed. When the status is <code>FAILED</code>, you can use <code>get-graphs</code> to get more information about the state of the graph.</p></li>
    /// <li>
    /// <p><b>CANCELLING</b> &nbsp; – &nbsp; Because you cancelled the import task, cancellation is in progress.</p></li>
    /// <li>
    /// <p><b>CANCELLED</b> &nbsp; – &nbsp; You have successfully cancelled the import task.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ImportTaskStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the import task:</p>
    /// <ul>
    /// <li>
    /// <p><b>INITIALIZING</b> &nbsp; – &nbsp; The necessary resources needed to create the graph are being prepared.</p></li>
    /// <li>
    /// <p><b>ANALYZING_DATA</b> &nbsp; – &nbsp; The data is being analyzed to determine the optimal infrastructure configuration for the new graph.</p></li>
    /// <li>
    /// <p><b>RE_PROVISIONING</b> &nbsp; – &nbsp; The data did not fit into the provisioned graph, so it is being re-provisioned with more capacity.</p></li>
    /// <li>
    /// <p><b>IMPORTING</b> &nbsp; – &nbsp; The data is being loaded.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED</b> &nbsp; – &nbsp; An error has been encountered while trying to create the graph and import the data.</p></li>
    /// <li>
    /// <p><b>ERROR_ENCOUNTERED_ROLLING_BACK</b> &nbsp; – &nbsp; Because of the error that was encountered, the graph is being rolled back and all its resources released.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b> &nbsp; – &nbsp; Graph creation and data loading succeeded.</p></li>
    /// <li>
    /// <p><b>FAILED</b> &nbsp; – &nbsp; Graph creation or data loading failed. When the status is <code>FAILED</code>, you can use <code>get-graphs</code> to get more information about the state of the graph.</p></li>
    /// <li>
    /// <p><b>CANCELLING</b> &nbsp; – &nbsp; Because you cancelled the import task, cancellation is in progress.</p></li>
    /// <li>
    /// <p><b>CANCELLED</b> &nbsp; – &nbsp; You have successfully cancelled the import task.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ImportTaskStatus> {
        &self.status
    }
    /// <p>Contains options for controlling the import process. For example, if the <code>failOnError</code> key is set to <code>false</code>, the import skips problem data and attempts to continue (whereas if set to <code>true</code>, the default, or if omitted, the import operation halts immediately when an error is encountered.</p>
    pub fn import_options(mut self, input: crate::types::ImportOptions) -> Self {
        self.import_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains options for controlling the import process. For example, if the <code>failOnError</code> key is set to <code>false</code>, the import skips problem data and attempts to continue (whereas if set to <code>true</code>, the default, or if omitted, the import operation halts immediately when an error is encountered.</p>
    pub fn set_import_options(mut self, input: ::std::option::Option<crate::types::ImportOptions>) -> Self {
        self.import_options = input;
        self
    }
    /// <p>Contains options for controlling the import process. For example, if the <code>failOnError</code> key is set to <code>false</code>, the import skips problem data and attempts to continue (whereas if set to <code>true</code>, the default, or if omitted, the import operation halts immediately when an error is encountered.</p>
    pub fn get_import_options(&self) -> &::std::option::Option<crate::types::ImportOptions> {
        &self.import_options
    }
    /// <p>Contains details about the specified import task.</p>
    pub fn import_task_details(mut self, input: crate::types::ImportTaskDetails) -> Self {
        self.import_task_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the specified import task.</p>
    pub fn set_import_task_details(mut self, input: ::std::option::Option<crate::types::ImportTaskDetails>) -> Self {
        self.import_task_details = input;
        self
    }
    /// <p>Contains details about the specified import task.</p>
    pub fn get_import_task_details(&self) -> &::std::option::Option<crate::types::ImportTaskDetails> {
        &self.import_task_details
    }
    /// <p>The number of the current attempt to execute the import task.</p>
    pub fn attempt_number(mut self, input: i32) -> Self {
        self.attempt_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of the current attempt to execute the import task.</p>
    pub fn set_attempt_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.attempt_number = input;
        self
    }
    /// <p>The number of the current attempt to execute the import task.</p>
    pub fn get_attempt_number(&self) -> &::std::option::Option<i32> {
        &self.attempt_number
    }
    /// <p>The reason that the import task has this status value.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason that the import task has this status value.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason that the import task has this status value.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetImportTaskOutput`](crate::operation::get_import_task::GetImportTaskOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`task_id`](crate::operation::get_import_task::builders::GetImportTaskOutputBuilder::task_id)
    /// - [`source`](crate::operation::get_import_task::builders::GetImportTaskOutputBuilder::source)
    /// - [`role_arn`](crate::operation::get_import_task::builders::GetImportTaskOutputBuilder::role_arn)
    /// - [`status`](crate::operation::get_import_task::builders::GetImportTaskOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_import_task::GetImportTaskOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_import_task::GetImportTaskOutput {
            graph_id: self.graph_id,
            task_id: self.task_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "task_id",
                    "task_id was not specified but it is required when building GetImportTaskOutput",
                )
            })?,
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building GetImportTaskOutput",
                )
            })?,
            format: self.format,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building GetImportTaskOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetImportTaskOutput",
                )
            })?,
            import_options: self.import_options,
            import_task_details: self.import_task_details,
            attempt_number: self.attempt_number,
            status_reason: self.status_reason,
            _request_id: self._request_id,
        })
    }
}
