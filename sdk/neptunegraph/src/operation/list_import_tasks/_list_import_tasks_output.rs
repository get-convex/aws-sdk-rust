// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListImportTasksOutput {
    /// <p>The requested list of import tasks.</p>
    pub tasks: ::std::vec::Vec<crate::types::ImportTaskSummary>,
    /// <p>Pagination token used to paginate output.</p>
    /// <p>When this value is provided as input, the service returns results from where the previous response left off. When this value is present in output, it indicates that there are more results to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListImportTasksOutput {
    /// <p>The requested list of import tasks.</p>
    pub fn tasks(&self) -> &[crate::types::ImportTaskSummary] {
        use std::ops::Deref;
        self.tasks.deref()
    }
    /// <p>Pagination token used to paginate output.</p>
    /// <p>When this value is provided as input, the service returns results from where the previous response left off. When this value is present in output, it indicates that there are more results to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListImportTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListImportTasksOutput {
    /// Creates a new builder-style object to manufacture [`ListImportTasksOutput`](crate::operation::list_import_tasks::ListImportTasksOutput).
    pub fn builder() -> crate::operation::list_import_tasks::builders::ListImportTasksOutputBuilder {
        crate::operation::list_import_tasks::builders::ListImportTasksOutputBuilder::default()
    }
}

/// A builder for [`ListImportTasksOutput`](crate::operation::list_import_tasks::ListImportTasksOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListImportTasksOutputBuilder {
    pub(crate) tasks: ::std::option::Option<::std::vec::Vec<crate::types::ImportTaskSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListImportTasksOutputBuilder {
    /// Appends an item to `tasks`.
    ///
    /// To override the contents of this collection use [`set_tasks`](Self::set_tasks).
    ///
    /// <p>The requested list of import tasks.</p>
    pub fn tasks(mut self, input: crate::types::ImportTaskSummary) -> Self {
        let mut v = self.tasks.unwrap_or_default();
        v.push(input);
        self.tasks = ::std::option::Option::Some(v);
        self
    }
    /// <p>The requested list of import tasks.</p>
    pub fn set_tasks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImportTaskSummary>>) -> Self {
        self.tasks = input;
        self
    }
    /// <p>The requested list of import tasks.</p>
    pub fn get_tasks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImportTaskSummary>> {
        &self.tasks
    }
    /// <p>Pagination token used to paginate output.</p>
    /// <p>When this value is provided as input, the service returns results from where the previous response left off. When this value is present in output, it indicates that there are more results to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Pagination token used to paginate output.</p>
    /// <p>When this value is provided as input, the service returns results from where the previous response left off. When this value is present in output, it indicates that there are more results to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Pagination token used to paginate output.</p>
    /// <p>When this value is provided as input, the service returns results from where the previous response left off. When this value is present in output, it indicates that there are more results to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListImportTasksOutput`](crate::operation::list_import_tasks::ListImportTasksOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`tasks`](crate::operation::list_import_tasks::builders::ListImportTasksOutputBuilder::tasks)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_import_tasks::ListImportTasksOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_import_tasks::ListImportTasksOutput {
            tasks: self.tasks.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tasks",
                    "tasks was not specified but it is required when building ListImportTasksOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
