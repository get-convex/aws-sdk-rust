// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGraphInput {
    /// <p>A name for the new Neptune Analytics graph to be created.</p>
    /// <p>The name must contain from 1 to 63 letters, numbers, or hyphens, and its first character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens.</p>
    pub graph_name: ::std::option::Option<::std::string::String>,
    /// <p>Adds metadata tags to the new graph. These tags can also be used with cost allocation reporting, or used in a Condition statement in an IAM policy.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Specifies whether or not the graph can be reachable over the internet. All access to graphs IAM authenticated. (<code>true</code> to enable, or <code>false</code> to disable.</p>
    pub public_connectivity: ::std::option::Option<bool>,
    /// <p>Specifies a KMS key to use to encrypt data in the new graph.</p>
    pub kms_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the number of dimensions for vector embeddings that will be loaded into the graph. The value is specified as <code>dimension=</code>value. Max = 65,535</p>
    pub vector_search_configuration: ::std::option::Option<crate::types::VectorSearchConfiguration>,
    /// <p>The number of replicas in other AZs. Min =0, Max = 2, Default =1</p>
    pub replica_count: ::std::option::Option<i32>,
    /// <p>Indicates whether or not to enable deletion protection on the graph. The graph can’t be deleted when deletion protection is enabled. (<code>true</code> or <code>false</code>).</p>
    pub deletion_protection: ::std::option::Option<bool>,
    /// <p>The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph. Min = 128</p>
    pub provisioned_memory: ::std::option::Option<i32>,
}
impl CreateGraphInput {
    /// <p>A name for the new Neptune Analytics graph to be created.</p>
    /// <p>The name must contain from 1 to 63 letters, numbers, or hyphens, and its first character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens.</p>
    pub fn graph_name(&self) -> ::std::option::Option<&str> {
        self.graph_name.as_deref()
    }
    /// <p>Adds metadata tags to the new graph. These tags can also be used with cost allocation reporting, or used in a Condition statement in an IAM policy.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Specifies whether or not the graph can be reachable over the internet. All access to graphs IAM authenticated. (<code>true</code> to enable, or <code>false</code> to disable.</p>
    pub fn public_connectivity(&self) -> ::std::option::Option<bool> {
        self.public_connectivity
    }
    /// <p>Specifies a KMS key to use to encrypt data in the new graph.</p>
    pub fn kms_key_identifier(&self) -> ::std::option::Option<&str> {
        self.kms_key_identifier.as_deref()
    }
    /// <p>Specifies the number of dimensions for vector embeddings that will be loaded into the graph. The value is specified as <code>dimension=</code>value. Max = 65,535</p>
    pub fn vector_search_configuration(&self) -> ::std::option::Option<&crate::types::VectorSearchConfiguration> {
        self.vector_search_configuration.as_ref()
    }
    /// <p>The number of replicas in other AZs. Min =0, Max = 2, Default =1</p>
    pub fn replica_count(&self) -> ::std::option::Option<i32> {
        self.replica_count
    }
    /// <p>Indicates whether or not to enable deletion protection on the graph. The graph can’t be deleted when deletion protection is enabled. (<code>true</code> or <code>false</code>).</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<bool> {
        self.deletion_protection
    }
    /// <p>The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph. Min = 128</p>
    pub fn provisioned_memory(&self) -> ::std::option::Option<i32> {
        self.provisioned_memory
    }
}
impl CreateGraphInput {
    /// Creates a new builder-style object to manufacture [`CreateGraphInput`](crate::operation::create_graph::CreateGraphInput).
    pub fn builder() -> crate::operation::create_graph::builders::CreateGraphInputBuilder {
        crate::operation::create_graph::builders::CreateGraphInputBuilder::default()
    }
}

/// A builder for [`CreateGraphInput`](crate::operation::create_graph::CreateGraphInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateGraphInputBuilder {
    pub(crate) graph_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) public_connectivity: ::std::option::Option<bool>,
    pub(crate) kms_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) vector_search_configuration: ::std::option::Option<crate::types::VectorSearchConfiguration>,
    pub(crate) replica_count: ::std::option::Option<i32>,
    pub(crate) deletion_protection: ::std::option::Option<bool>,
    pub(crate) provisioned_memory: ::std::option::Option<i32>,
}
impl CreateGraphInputBuilder {
    /// <p>A name for the new Neptune Analytics graph to be created.</p>
    /// <p>The name must contain from 1 to 63 letters, numbers, or hyphens, and its first character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens.</p>
    /// This field is required.
    pub fn graph_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the new Neptune Analytics graph to be created.</p>
    /// <p>The name must contain from 1 to 63 letters, numbers, or hyphens, and its first character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens.</p>
    pub fn set_graph_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_name = input;
        self
    }
    /// <p>A name for the new Neptune Analytics graph to be created.</p>
    /// <p>The name must contain from 1 to 63 letters, numbers, or hyphens, and its first character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens.</p>
    pub fn get_graph_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Adds metadata tags to the new graph. These tags can also be used with cost allocation reporting, or used in a Condition statement in an IAM policy.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Adds metadata tags to the new graph. These tags can also be used with cost allocation reporting, or used in a Condition statement in an IAM policy.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Adds metadata tags to the new graph. These tags can also be used with cost allocation reporting, or used in a Condition statement in an IAM policy.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Specifies whether or not the graph can be reachable over the internet. All access to graphs IAM authenticated. (<code>true</code> to enable, or <code>false</code> to disable.</p>
    pub fn public_connectivity(mut self, input: bool) -> Self {
        self.public_connectivity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether or not the graph can be reachable over the internet. All access to graphs IAM authenticated. (<code>true</code> to enable, or <code>false</code> to disable.</p>
    pub fn set_public_connectivity(mut self, input: ::std::option::Option<bool>) -> Self {
        self.public_connectivity = input;
        self
    }
    /// <p>Specifies whether or not the graph can be reachable over the internet. All access to graphs IAM authenticated. (<code>true</code> to enable, or <code>false</code> to disable.</p>
    pub fn get_public_connectivity(&self) -> &::std::option::Option<bool> {
        &self.public_connectivity
    }
    /// <p>Specifies a KMS key to use to encrypt data in the new graph.</p>
    pub fn kms_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a KMS key to use to encrypt data in the new graph.</p>
    pub fn set_kms_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_identifier = input;
        self
    }
    /// <p>Specifies a KMS key to use to encrypt data in the new graph.</p>
    pub fn get_kms_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_identifier
    }
    /// <p>Specifies the number of dimensions for vector embeddings that will be loaded into the graph. The value is specified as <code>dimension=</code>value. Max = 65,535</p>
    pub fn vector_search_configuration(mut self, input: crate::types::VectorSearchConfiguration) -> Self {
        self.vector_search_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the number of dimensions for vector embeddings that will be loaded into the graph. The value is specified as <code>dimension=</code>value. Max = 65,535</p>
    pub fn set_vector_search_configuration(mut self, input: ::std::option::Option<crate::types::VectorSearchConfiguration>) -> Self {
        self.vector_search_configuration = input;
        self
    }
    /// <p>Specifies the number of dimensions for vector embeddings that will be loaded into the graph. The value is specified as <code>dimension=</code>value. Max = 65,535</p>
    pub fn get_vector_search_configuration(&self) -> &::std::option::Option<crate::types::VectorSearchConfiguration> {
        &self.vector_search_configuration
    }
    /// <p>The number of replicas in other AZs. Min =0, Max = 2, Default =1</p>
    pub fn replica_count(mut self, input: i32) -> Self {
        self.replica_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of replicas in other AZs. Min =0, Max = 2, Default =1</p>
    pub fn set_replica_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.replica_count = input;
        self
    }
    /// <p>The number of replicas in other AZs. Min =0, Max = 2, Default =1</p>
    pub fn get_replica_count(&self) -> &::std::option::Option<i32> {
        &self.replica_count
    }
    /// <p>Indicates whether or not to enable deletion protection on the graph. The graph can’t be deleted when deletion protection is enabled. (<code>true</code> or <code>false</code>).</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not to enable deletion protection on the graph. The graph can’t be deleted when deletion protection is enabled. (<code>true</code> or <code>false</code>).</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>Indicates whether or not to enable deletion protection on the graph. The graph can’t be deleted when deletion protection is enabled. (<code>true</code> or <code>false</code>).</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection
    }
    /// <p>The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph. Min = 128</p>
    /// This field is required.
    pub fn provisioned_memory(mut self, input: i32) -> Self {
        self.provisioned_memory = ::std::option::Option::Some(input);
        self
    }
    /// <p>The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph. Min = 128</p>
    pub fn set_provisioned_memory(mut self, input: ::std::option::Option<i32>) -> Self {
        self.provisioned_memory = input;
        self
    }
    /// <p>The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph. Min = 128</p>
    pub fn get_provisioned_memory(&self) -> &::std::option::Option<i32> {
        &self.provisioned_memory
    }
    /// Consumes the builder and constructs a [`CreateGraphInput`](crate::operation::create_graph::CreateGraphInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_graph::CreateGraphInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_graph::CreateGraphInput {
            graph_name: self.graph_name,
            tags: self.tags,
            public_connectivity: self.public_connectivity,
            kms_key_identifier: self.kms_key_identifier,
            vector_search_configuration: self.vector_search_configuration,
            replica_count: self.replica_count,
            deletion_protection: self.deletion_protection,
            provisioned_memory: self.provisioned_memory,
        })
    }
}
