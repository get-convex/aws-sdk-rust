// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn cancel_import_task_output_output_correct_errors(
    mut builder: crate::operation::cancel_import_task::builders::CancelImportTaskOutputBuilder,
) -> crate::operation::cancel_import_task::builders::CancelImportTaskOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ImportTaskStatus>().ok()
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_graph_output_output_correct_errors(
    mut builder: crate::operation::create_graph::builders::CreateGraphOutputBuilder,
) -> crate::operation::create_graph::builders::CreateGraphOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_graph_snapshot_output_output_correct_errors(
    mut builder: crate::operation::create_graph_snapshot::builders::CreateGraphSnapshotOutputBuilder,
) -> crate::operation::create_graph_snapshot::builders::CreateGraphSnapshotOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_graph_using_import_task_output_output_correct_errors(
    mut builder: crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskOutputBuilder,
) -> crate::operation::create_graph_using_import_task::builders::CreateGraphUsingImportTaskOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ImportTaskStatus>().ok()
    }
    builder
}

pub(crate) fn create_private_graph_endpoint_output_output_correct_errors(
    mut builder: crate::operation::create_private_graph_endpoint::builders::CreatePrivateGraphEndpointOutputBuilder,
) -> crate::operation::create_private_graph_endpoint::builders::CreatePrivateGraphEndpointOutputBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PrivateGraphEndpointStatus>().ok()
    }
    builder
}

pub(crate) fn delete_graph_output_output_correct_errors(
    mut builder: crate::operation::delete_graph::builders::DeleteGraphOutputBuilder,
) -> crate::operation::delete_graph::builders::DeleteGraphOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_graph_snapshot_output_output_correct_errors(
    mut builder: crate::operation::delete_graph_snapshot::builders::DeleteGraphSnapshotOutputBuilder,
) -> crate::operation::delete_graph_snapshot::builders::DeleteGraphSnapshotOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_private_graph_endpoint_output_output_correct_errors(
    mut builder: crate::operation::delete_private_graph_endpoint::builders::DeletePrivateGraphEndpointOutputBuilder,
) -> crate::operation::delete_private_graph_endpoint::builders::DeletePrivateGraphEndpointOutputBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PrivateGraphEndpointStatus>().ok()
    }
    builder
}

pub(crate) fn get_graph_output_output_correct_errors(
    mut builder: crate::operation::get_graph::builders::GetGraphOutputBuilder,
) -> crate::operation::get_graph::builders::GetGraphOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_graph_snapshot_output_output_correct_errors(
    mut builder: crate::operation::get_graph_snapshot::builders::GetGraphSnapshotOutputBuilder,
) -> crate::operation::get_graph_snapshot::builders::GetGraphSnapshotOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_import_task_output_output_correct_errors(
    mut builder: crate::operation::get_import_task::builders::GetImportTaskOutputBuilder,
) -> crate::operation::get_import_task::builders::GetImportTaskOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ImportTaskStatus>().ok()
    }
    builder
}

pub(crate) fn get_private_graph_endpoint_output_output_correct_errors(
    mut builder: crate::operation::get_private_graph_endpoint::builders::GetPrivateGraphEndpointOutputBuilder,
) -> crate::operation::get_private_graph_endpoint::builders::GetPrivateGraphEndpointOutputBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PrivateGraphEndpointStatus>().ok()
    }
    builder
}

pub(crate) fn list_graph_snapshots_output_output_correct_errors(
    mut builder: crate::operation::list_graph_snapshots::builders::ListGraphSnapshotsOutputBuilder,
) -> crate::operation::list_graph_snapshots::builders::ListGraphSnapshotsOutputBuilder {
    if builder.graph_snapshots.is_none() {
        builder.graph_snapshots = Some(Default::default())
    }
    builder
}

pub(crate) fn list_graphs_output_output_correct_errors(
    mut builder: crate::operation::list_graphs::builders::ListGraphsOutputBuilder,
) -> crate::operation::list_graphs::builders::ListGraphsOutputBuilder {
    if builder.graphs.is_none() {
        builder.graphs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_import_tasks_output_output_correct_errors(
    mut builder: crate::operation::list_import_tasks::builders::ListImportTasksOutputBuilder,
) -> crate::operation::list_import_tasks::builders::ListImportTasksOutputBuilder {
    if builder.tasks.is_none() {
        builder.tasks = Some(Default::default())
    }
    builder
}

pub(crate) fn list_private_graph_endpoints_output_output_correct_errors(
    mut builder: crate::operation::list_private_graph_endpoints::builders::ListPrivateGraphEndpointsOutputBuilder,
) -> crate::operation::list_private_graph_endpoints::builders::ListPrivateGraphEndpointsOutputBuilder {
    if builder.private_graph_endpoints.is_none() {
        builder.private_graph_endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn reset_graph_output_output_correct_errors(
    mut builder: crate::operation::reset_graph::builders::ResetGraphOutputBuilder,
) -> crate::operation::reset_graph::builders::ResetGraphOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn restore_graph_from_snapshot_output_output_correct_errors(
    mut builder: crate::operation::restore_graph_from_snapshot::builders::RestoreGraphFromSnapshotOutputBuilder,
) -> crate::operation::restore_graph_from_snapshot::builders::RestoreGraphFromSnapshotOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_graph_output_output_correct_errors(
    mut builder: crate::operation::update_graph::builders::UpdateGraphOutputBuilder,
) -> crate::operation::update_graph::builders::UpdateGraphOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn import_task_details_correct_errors(
    mut builder: crate::types::builders::ImportTaskDetailsBuilder,
) -> crate::types::builders::ImportTaskDetailsBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.time_elapsed_seconds.is_none() {
        builder.time_elapsed_seconds = Some(Default::default())
    }
    if builder.progress_percentage.is_none() {
        builder.progress_percentage = Some(Default::default())
    }
    if builder.error_count.is_none() {
        builder.error_count = Some(Default::default())
    }
    if builder.statement_count.is_none() {
        builder.statement_count = Some(Default::default())
    }
    if builder.dictionary_entry_count.is_none() {
        builder.dictionary_entry_count = Some(Default::default())
    }
    builder
}

pub(crate) fn vector_search_configuration_correct_errors(
    mut builder: crate::types::builders::VectorSearchConfigurationBuilder,
) -> crate::types::builders::VectorSearchConfigurationBuilder {
    if builder.dimension.is_none() {
        builder.dimension = Some(Default::default())
    }
    builder
}

pub(crate) fn graph_snapshot_summary_correct_errors(
    mut builder: crate::types::builders::GraphSnapshotSummaryBuilder,
) -> crate::types::builders::GraphSnapshotSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn graph_summary_correct_errors(mut builder: crate::types::builders::GraphSummaryBuilder) -> crate::types::builders::GraphSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn import_task_summary_correct_errors(
    mut builder: crate::types::builders::ImportTaskSummaryBuilder,
) -> crate::types::builders::ImportTaskSummaryBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ImportTaskStatus>().ok()
    }
    builder
}

pub(crate) fn neptune_import_options_correct_errors(
    mut builder: crate::types::builders::NeptuneImportOptionsBuilder,
) -> crate::types::builders::NeptuneImportOptionsBuilder {
    if builder.s3_export_path.is_none() {
        builder.s3_export_path = Some(Default::default())
    }
    if builder.s3_export_kms_key_id.is_none() {
        builder.s3_export_kms_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn private_graph_endpoint_summary_correct_errors(
    mut builder: crate::types::builders::PrivateGraphEndpointSummaryBuilder,
) -> crate::types::builders::PrivateGraphEndpointSummaryBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PrivateGraphEndpointStatus>().ok()
    }
    builder
}
