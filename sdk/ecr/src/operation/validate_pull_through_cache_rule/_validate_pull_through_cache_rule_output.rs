// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidatePullThroughCacheRuleOutput {
    /// <p>The Amazon ECR repository prefix associated with the pull through cache rule.</p>
    pub ecr_repository_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The registry ID associated with the request.</p>
    pub registry_id: ::std::option::Option<::std::string::String>,
    /// <p>The upstream registry URL associated with the pull through cache rule.</p>
    pub upstream_registry_url: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret associated with the pull through cache rule.</p>
    pub credential_arn: ::std::option::Option<::std::string::String>,
    /// <p>Whether or not the pull through cache rule was validated. If <code>true</code>, Amazon ECR was able to reach the upstream registry and authentication was successful. If <code>false</code>, there was an issue and validation failed. The <code>failure</code> reason indicates the cause.</p>
    pub is_valid: bool,
    /// <p>The reason the validation failed. For more details about possible causes and how to address them, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html">Using pull through cache rules</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    pub failure: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ValidatePullThroughCacheRuleOutput {
    /// <p>The Amazon ECR repository prefix associated with the pull through cache rule.</p>
    pub fn ecr_repository_prefix(&self) -> ::std::option::Option<&str> {
        self.ecr_repository_prefix.as_deref()
    }
    /// <p>The registry ID associated with the request.</p>
    pub fn registry_id(&self) -> ::std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The upstream registry URL associated with the pull through cache rule.</p>
    pub fn upstream_registry_url(&self) -> ::std::option::Option<&str> {
        self.upstream_registry_url.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret associated with the pull through cache rule.</p>
    pub fn credential_arn(&self) -> ::std::option::Option<&str> {
        self.credential_arn.as_deref()
    }
    /// <p>Whether or not the pull through cache rule was validated. If <code>true</code>, Amazon ECR was able to reach the upstream registry and authentication was successful. If <code>false</code>, there was an issue and validation failed. The <code>failure</code> reason indicates the cause.</p>
    pub fn is_valid(&self) -> bool {
        self.is_valid
    }
    /// <p>The reason the validation failed. For more details about possible causes and how to address them, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html">Using pull through cache rules</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    pub fn failure(&self) -> ::std::option::Option<&str> {
        self.failure.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ValidatePullThroughCacheRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ValidatePullThroughCacheRuleOutput {
    /// Creates a new builder-style object to manufacture [`ValidatePullThroughCacheRuleOutput`](crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput).
    pub fn builder() -> crate::operation::validate_pull_through_cache_rule::builders::ValidatePullThroughCacheRuleOutputBuilder {
        crate::operation::validate_pull_through_cache_rule::builders::ValidatePullThroughCacheRuleOutputBuilder::default()
    }
}

/// A builder for [`ValidatePullThroughCacheRuleOutput`](crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ValidatePullThroughCacheRuleOutputBuilder {
    pub(crate) ecr_repository_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) registry_id: ::std::option::Option<::std::string::String>,
    pub(crate) upstream_registry_url: ::std::option::Option<::std::string::String>,
    pub(crate) credential_arn: ::std::option::Option<::std::string::String>,
    pub(crate) is_valid: ::std::option::Option<bool>,
    pub(crate) failure: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ValidatePullThroughCacheRuleOutputBuilder {
    /// <p>The Amazon ECR repository prefix associated with the pull through cache rule.</p>
    pub fn ecr_repository_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ecr_repository_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon ECR repository prefix associated with the pull through cache rule.</p>
    pub fn set_ecr_repository_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ecr_repository_prefix = input;
        self
    }
    /// <p>The Amazon ECR repository prefix associated with the pull through cache rule.</p>
    pub fn get_ecr_repository_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.ecr_repository_prefix
    }
    /// <p>The registry ID associated with the request.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The registry ID associated with the request.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The registry ID associated with the request.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_id
    }
    /// <p>The upstream registry URL associated with the pull through cache rule.</p>
    pub fn upstream_registry_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upstream_registry_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The upstream registry URL associated with the pull through cache rule.</p>
    pub fn set_upstream_registry_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upstream_registry_url = input;
        self
    }
    /// <p>The upstream registry URL associated with the pull through cache rule.</p>
    pub fn get_upstream_registry_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.upstream_registry_url
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret associated with the pull through cache rule.</p>
    pub fn credential_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret associated with the pull through cache rule.</p>
    pub fn set_credential_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret associated with the pull through cache rule.</p>
    pub fn get_credential_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_arn
    }
    /// <p>Whether or not the pull through cache rule was validated. If <code>true</code>, Amazon ECR was able to reach the upstream registry and authentication was successful. If <code>false</code>, there was an issue and validation failed. The <code>failure</code> reason indicates the cause.</p>
    pub fn is_valid(mut self, input: bool) -> Self {
        self.is_valid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not the pull through cache rule was validated. If <code>true</code>, Amazon ECR was able to reach the upstream registry and authentication was successful. If <code>false</code>, there was an issue and validation failed. The <code>failure</code> reason indicates the cause.</p>
    pub fn set_is_valid(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_valid = input;
        self
    }
    /// <p>Whether or not the pull through cache rule was validated. If <code>true</code>, Amazon ECR was able to reach the upstream registry and authentication was successful. If <code>false</code>, there was an issue and validation failed. The <code>failure</code> reason indicates the cause.</p>
    pub fn get_is_valid(&self) -> &::std::option::Option<bool> {
        &self.is_valid
    }
    /// <p>The reason the validation failed. For more details about possible causes and how to address them, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html">Using pull through cache rules</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    pub fn failure(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason the validation failed. For more details about possible causes and how to address them, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html">Using pull through cache rules</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    pub fn set_failure(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure = input;
        self
    }
    /// <p>The reason the validation failed. For more details about possible causes and how to address them, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html">Using pull through cache rules</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    pub fn get_failure(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ValidatePullThroughCacheRuleOutput`](crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput).
    pub fn build(self) -> crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput {
        crate::operation::validate_pull_through_cache_rule::ValidatePullThroughCacheRuleOutput {
            ecr_repository_prefix: self.ecr_repository_prefix,
            registry_id: self.registry_id,
            upstream_registry_url: self.upstream_registry_url,
            credential_arn: self.credential_arn,
            is_valid: self.is_valid.unwrap_or_default(),
            failure: self.failure,
            _request_id: self._request_id,
        }
    }
}
