// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePullThroughCacheRuleInput {
    /// <p>The Amazon Web Services account ID associated with the registry associated with the pull through cache rule. If you do not specify a registry, the default registry is assumed.</p>
    pub registry_id: ::std::option::Option<::std::string::String>,
    /// <p>The repository name prefix to use when caching images from the source registry.</p>
    pub ecr_repository_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.</p>
    pub credential_arn: ::std::option::Option<::std::string::String>,
}
impl UpdatePullThroughCacheRuleInput {
    /// <p>The Amazon Web Services account ID associated with the registry associated with the pull through cache rule. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(&self) -> ::std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The repository name prefix to use when caching images from the source registry.</p>
    pub fn ecr_repository_prefix(&self) -> ::std::option::Option<&str> {
        self.ecr_repository_prefix.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.</p>
    pub fn credential_arn(&self) -> ::std::option::Option<&str> {
        self.credential_arn.as_deref()
    }
}
impl UpdatePullThroughCacheRuleInput {
    /// Creates a new builder-style object to manufacture [`UpdatePullThroughCacheRuleInput`](crate::operation::update_pull_through_cache_rule::UpdatePullThroughCacheRuleInput).
    pub fn builder() -> crate::operation::update_pull_through_cache_rule::builders::UpdatePullThroughCacheRuleInputBuilder {
        crate::operation::update_pull_through_cache_rule::builders::UpdatePullThroughCacheRuleInputBuilder::default()
    }
}

/// A builder for [`UpdatePullThroughCacheRuleInput`](crate::operation::update_pull_through_cache_rule::UpdatePullThroughCacheRuleInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdatePullThroughCacheRuleInputBuilder {
    pub(crate) registry_id: ::std::option::Option<::std::string::String>,
    pub(crate) ecr_repository_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) credential_arn: ::std::option::Option<::std::string::String>,
}
impl UpdatePullThroughCacheRuleInputBuilder {
    /// <p>The Amazon Web Services account ID associated with the registry associated with the pull through cache rule. If you do not specify a registry, the default registry is assumed.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry associated with the pull through cache rule. If you do not specify a registry, the default registry is assumed.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry associated with the pull through cache rule. If you do not specify a registry, the default registry is assumed.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_id
    }
    /// <p>The repository name prefix to use when caching images from the source registry.</p>
    /// This field is required.
    pub fn ecr_repository_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ecr_repository_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository name prefix to use when caching images from the source registry.</p>
    pub fn set_ecr_repository_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ecr_repository_prefix = input;
        self
    }
    /// <p>The repository name prefix to use when caching images from the source registry.</p>
    pub fn get_ecr_repository_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.ecr_repository_prefix
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.</p>
    /// This field is required.
    pub fn credential_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.</p>
    pub fn set_credential_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.</p>
    pub fn get_credential_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_arn
    }
    /// Consumes the builder and constructs a [`UpdatePullThroughCacheRuleInput`](crate::operation::update_pull_through_cache_rule::UpdatePullThroughCacheRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_pull_through_cache_rule::UpdatePullThroughCacheRuleInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_pull_through_cache_rule::UpdatePullThroughCacheRuleInput {
            registry_id: self.registry_id,
            ecr_repository_prefix: self.ecr_repository_prefix,
            credential_arn: self.credential_arn,
        })
    }
}
