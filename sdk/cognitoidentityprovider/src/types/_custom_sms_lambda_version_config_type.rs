// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties of a custom SMS sender Lambda trigger.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomSmsLambdaVersionConfigType {
    /// <p>The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features.</p>
    /// <p>You must use a <code>LambdaVersion</code> of <code>V1_0</code> with a custom sender function.</p>
    pub lambda_version: crate::types::CustomSmsSenderLambdaVersionType,
    /// <p>The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.</p>
    pub lambda_arn: ::std::string::String,
}
impl CustomSmsLambdaVersionConfigType {
    /// <p>The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features.</p>
    /// <p>You must use a <code>LambdaVersion</code> of <code>V1_0</code> with a custom sender function.</p>
    pub fn lambda_version(&self) -> &crate::types::CustomSmsSenderLambdaVersionType {
        &self.lambda_version
    }
    /// <p>The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.</p>
    pub fn lambda_arn(&self) -> &str {
        use std::ops::Deref;
        self.lambda_arn.deref()
    }
}
impl CustomSmsLambdaVersionConfigType {
    /// Creates a new builder-style object to manufacture [`CustomSmsLambdaVersionConfigType`](crate::types::CustomSmsLambdaVersionConfigType).
    pub fn builder() -> crate::types::builders::CustomSmsLambdaVersionConfigTypeBuilder {
        crate::types::builders::CustomSmsLambdaVersionConfigTypeBuilder::default()
    }
}

/// A builder for [`CustomSmsLambdaVersionConfigType`](crate::types::CustomSmsLambdaVersionConfigType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomSmsLambdaVersionConfigTypeBuilder {
    pub(crate) lambda_version: ::std::option::Option<crate::types::CustomSmsSenderLambdaVersionType>,
    pub(crate) lambda_arn: ::std::option::Option<::std::string::String>,
}
impl CustomSmsLambdaVersionConfigTypeBuilder {
    /// <p>The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features.</p>
    /// <p>You must use a <code>LambdaVersion</code> of <code>V1_0</code> with a custom sender function.</p>
    /// This field is required.
    pub fn lambda_version(mut self, input: crate::types::CustomSmsSenderLambdaVersionType) -> Self {
        self.lambda_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features.</p>
    /// <p>You must use a <code>LambdaVersion</code> of <code>V1_0</code> with a custom sender function.</p>
    pub fn set_lambda_version(mut self, input: ::std::option::Option<crate::types::CustomSmsSenderLambdaVersionType>) -> Self {
        self.lambda_version = input;
        self
    }
    /// <p>The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features.</p>
    /// <p>You must use a <code>LambdaVersion</code> of <code>V1_0</code> with a custom sender function.</p>
    pub fn get_lambda_version(&self) -> &::std::option::Option<crate::types::CustomSmsSenderLambdaVersionType> {
        &self.lambda_version
    }
    /// <p>The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.</p>
    /// This field is required.
    pub fn lambda_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lambda_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.</p>
    pub fn set_lambda_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lambda_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.</p>
    pub fn get_lambda_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lambda_arn
    }
    /// Consumes the builder and constructs a [`CustomSmsLambdaVersionConfigType`](crate::types::CustomSmsLambdaVersionConfigType).
    /// This method will fail if any of the following fields are not set:
    /// - [`lambda_version`](crate::types::builders::CustomSmsLambdaVersionConfigTypeBuilder::lambda_version)
    /// - [`lambda_arn`](crate::types::builders::CustomSmsLambdaVersionConfigTypeBuilder::lambda_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomSmsLambdaVersionConfigType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomSmsLambdaVersionConfigType {
            lambda_version: self.lambda_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lambda_version",
                    "lambda_version was not specified but it is required when building CustomSmsLambdaVersionConfigType",
                )
            })?,
            lambda_arn: self.lambda_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lambda_arn",
                    "lambda_arn was not specified but it is required when building CustomSmsLambdaVersionConfigType",
                )
            })?,
        })
    }
}
