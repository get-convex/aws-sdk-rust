// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PreviewPrivacyImpactInput {
    /// <p>A unique identifier for one of your memberships for a collaboration. Accepts a membership ID.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the desired epsilon and noise parameters to preview.</p>
    pub parameters: ::std::option::Option<crate::types::PreviewPrivacyImpactParametersInput>,
}
impl PreviewPrivacyImpactInput {
    /// <p>A unique identifier for one of your memberships for a collaboration. Accepts a membership ID.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>Specifies the desired epsilon and noise parameters to preview.</p>
    pub fn parameters(&self) -> ::std::option::Option<&crate::types::PreviewPrivacyImpactParametersInput> {
        self.parameters.as_ref()
    }
}
impl PreviewPrivacyImpactInput {
    /// Creates a new builder-style object to manufacture [`PreviewPrivacyImpactInput`](crate::operation::preview_privacy_impact::PreviewPrivacyImpactInput).
    pub fn builder() -> crate::operation::preview_privacy_impact::builders::PreviewPrivacyImpactInputBuilder {
        crate::operation::preview_privacy_impact::builders::PreviewPrivacyImpactInputBuilder::default()
    }
}

/// A builder for [`PreviewPrivacyImpactInput`](crate::operation::preview_privacy_impact::PreviewPrivacyImpactInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PreviewPrivacyImpactInputBuilder {
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<crate::types::PreviewPrivacyImpactParametersInput>,
}
impl PreviewPrivacyImpactInputBuilder {
    /// <p>A unique identifier for one of your memberships for a collaboration. Accepts a membership ID.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. Accepts a membership ID.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. Accepts a membership ID.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>Specifies the desired epsilon and noise parameters to preview.</p>
    /// This field is required.
    pub fn parameters(mut self, input: crate::types::PreviewPrivacyImpactParametersInput) -> Self {
        self.parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the desired epsilon and noise parameters to preview.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<crate::types::PreviewPrivacyImpactParametersInput>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Specifies the desired epsilon and noise parameters to preview.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<crate::types::PreviewPrivacyImpactParametersInput> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`PreviewPrivacyImpactInput`](crate::operation::preview_privacy_impact::PreviewPrivacyImpactInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::preview_privacy_impact::PreviewPrivacyImpactInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::preview_privacy_impact::PreviewPrivacyImpactInput {
            membership_identifier: self.membership_identifier,
            parameters: self.parameters,
        })
    }
}
