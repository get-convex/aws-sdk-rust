// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateConfiguredAudienceModelAssociationInput {
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured audience model is associated to the collaboration that this membership belongs to. Accepts a membership ID.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the configured audience model that you want to associate.</p>
    pub configured_audience_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the configured audience model association.</p>
    pub configured_audience_model_association_name: ::std::option::Option<::std::string::String>,
    /// <p>When <code>TRUE</code>, indicates that the resource policy for the configured audience model resource being associated is configured for Clean Rooms to manage permissions related to the given collaboration. When <code>FALSE</code>, indicates that the configured audience model resource owner will manage permissions related to the given collaboration.</p>
    /// <p>Setting this to <code>TRUE</code> requires you to have permissions to create, update, and delete the resource policy for the <code>cleanrooms-ml</code> resource when you call the <code>DeleteConfiguredAudienceModelAssociation</code> resource. In addition, if you are the collaboration creator and specify <code>TRUE</code>, you must have the same permissions when you call the <code>DeleteMember</code> and <code>DeleteCollaboration</code> APIs.</p>
    pub manage_resource_policies: ::std::option::Option<bool>,
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A description of the configured audience model association.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl CreateConfiguredAudienceModelAssociationInput {
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured audience model is associated to the collaboration that this membership belongs to. Accepts a membership ID.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>A unique identifier for the configured audience model that you want to associate.</p>
    pub fn configured_audience_model_arn(&self) -> ::std::option::Option<&str> {
        self.configured_audience_model_arn.as_deref()
    }
    /// <p>The name of the configured audience model association.</p>
    pub fn configured_audience_model_association_name(&self) -> ::std::option::Option<&str> {
        self.configured_audience_model_association_name.as_deref()
    }
    /// <p>When <code>TRUE</code>, indicates that the resource policy for the configured audience model resource being associated is configured for Clean Rooms to manage permissions related to the given collaboration. When <code>FALSE</code>, indicates that the configured audience model resource owner will manage permissions related to the given collaboration.</p>
    /// <p>Setting this to <code>TRUE</code> requires you to have permissions to create, update, and delete the resource policy for the <code>cleanrooms-ml</code> resource when you call the <code>DeleteConfiguredAudienceModelAssociation</code> resource. In addition, if you are the collaboration creator and specify <code>TRUE</code>, you must have the same permissions when you call the <code>DeleteMember</code> and <code>DeleteCollaboration</code> APIs.</p>
    pub fn manage_resource_policies(&self) -> ::std::option::Option<bool> {
        self.manage_resource_policies
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>A description of the configured audience model association.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl CreateConfiguredAudienceModelAssociationInput {
    /// Creates a new builder-style object to manufacture [`CreateConfiguredAudienceModelAssociationInput`](crate::operation::create_configured_audience_model_association::CreateConfiguredAudienceModelAssociationInput).
    pub fn builder() -> crate::operation::create_configured_audience_model_association::builders::CreateConfiguredAudienceModelAssociationInputBuilder
    {
        crate::operation::create_configured_audience_model_association::builders::CreateConfiguredAudienceModelAssociationInputBuilder::default()
    }
}

/// A builder for [`CreateConfiguredAudienceModelAssociationInput`](crate::operation::create_configured_audience_model_association::CreateConfiguredAudienceModelAssociationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateConfiguredAudienceModelAssociationInputBuilder {
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) configured_audience_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) configured_audience_model_association_name: ::std::option::Option<::std::string::String>,
    pub(crate) manage_resource_policies: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl CreateConfiguredAudienceModelAssociationInputBuilder {
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured audience model is associated to the collaboration that this membership belongs to. Accepts a membership ID.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured audience model is associated to the collaboration that this membership belongs to. Accepts a membership ID.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured audience model is associated to the collaboration that this membership belongs to. Accepts a membership ID.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>A unique identifier for the configured audience model that you want to associate.</p>
    /// This field is required.
    pub fn configured_audience_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_audience_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the configured audience model that you want to associate.</p>
    pub fn set_configured_audience_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_audience_model_arn = input;
        self
    }
    /// <p>A unique identifier for the configured audience model that you want to associate.</p>
    pub fn get_configured_audience_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_audience_model_arn
    }
    /// <p>The name of the configured audience model association.</p>
    /// This field is required.
    pub fn configured_audience_model_association_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_audience_model_association_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configured audience model association.</p>
    pub fn set_configured_audience_model_association_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_audience_model_association_name = input;
        self
    }
    /// <p>The name of the configured audience model association.</p>
    pub fn get_configured_audience_model_association_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_audience_model_association_name
    }
    /// <p>When <code>TRUE</code>, indicates that the resource policy for the configured audience model resource being associated is configured for Clean Rooms to manage permissions related to the given collaboration. When <code>FALSE</code>, indicates that the configured audience model resource owner will manage permissions related to the given collaboration.</p>
    /// <p>Setting this to <code>TRUE</code> requires you to have permissions to create, update, and delete the resource policy for the <code>cleanrooms-ml</code> resource when you call the <code>DeleteConfiguredAudienceModelAssociation</code> resource. In addition, if you are the collaboration creator and specify <code>TRUE</code>, you must have the same permissions when you call the <code>DeleteMember</code> and <code>DeleteCollaboration</code> APIs.</p>
    /// This field is required.
    pub fn manage_resource_policies(mut self, input: bool) -> Self {
        self.manage_resource_policies = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>TRUE</code>, indicates that the resource policy for the configured audience model resource being associated is configured for Clean Rooms to manage permissions related to the given collaboration. When <code>FALSE</code>, indicates that the configured audience model resource owner will manage permissions related to the given collaboration.</p>
    /// <p>Setting this to <code>TRUE</code> requires you to have permissions to create, update, and delete the resource policy for the <code>cleanrooms-ml</code> resource when you call the <code>DeleteConfiguredAudienceModelAssociation</code> resource. In addition, if you are the collaboration creator and specify <code>TRUE</code>, you must have the same permissions when you call the <code>DeleteMember</code> and <code>DeleteCollaboration</code> APIs.</p>
    pub fn set_manage_resource_policies(mut self, input: ::std::option::Option<bool>) -> Self {
        self.manage_resource_policies = input;
        self
    }
    /// <p>When <code>TRUE</code>, indicates that the resource policy for the configured audience model resource being associated is configured for Clean Rooms to manage permissions related to the given collaboration. When <code>FALSE</code>, indicates that the configured audience model resource owner will manage permissions related to the given collaboration.</p>
    /// <p>Setting this to <code>TRUE</code> requires you to have permissions to create, update, and delete the resource policy for the <code>cleanrooms-ml</code> resource when you call the <code>DeleteConfiguredAudienceModelAssociation</code> resource. In addition, if you are the collaboration creator and specify <code>TRUE</code>, you must have the same permissions when you call the <code>DeleteMember</code> and <code>DeleteCollaboration</code> APIs.</p>
    pub fn get_manage_resource_policies(&self) -> &::std::option::Option<bool> {
        &self.manage_resource_policies
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>A description of the configured audience model association.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the configured audience model association.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the configured audience model association.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`CreateConfiguredAudienceModelAssociationInput`](crate::operation::create_configured_audience_model_association::CreateConfiguredAudienceModelAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_configured_audience_model_association::CreateConfiguredAudienceModelAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_configured_audience_model_association::CreateConfiguredAudienceModelAssociationInput {
                membership_identifier: self.membership_identifier,
                configured_audience_model_arn: self.configured_audience_model_arn,
                configured_audience_model_association_name: self.configured_audience_model_association_name,
                manage_resource_policies: self.manage_resource_policies,
                tags: self.tags,
                description: self.description,
            },
        )
    }
}
