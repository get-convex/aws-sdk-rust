// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the configured audience model association in the collaboration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CollaborationConfiguredAudienceModelAssociationSummary {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model association.</p>
    pub arn: ::std::string::String,
    /// <p>The time at which the configured audience model association was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The identifier of the configured audience model association.</p>
    pub id: ::std::string::String,
    /// <p>The name of the configured audience model association.</p>
    pub name: ::std::string::String,
    /// <p>The most recent time at which the configured audience model association was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The unique ARN for the configured audience model's associated collaboration.</p>
    pub collaboration_arn: ::std::string::String,
    /// <p>A unique identifier for the collaboration that the configured audience model associations belong to. Accepts collaboration ID.</p>
    pub collaboration_id: ::std::string::String,
    /// <p>The identifier used to reference members of the collaboration. Only supports AWS account ID.</p>
    pub creator_account_id: ::std::string::String,
    /// <p>The description of the configured audience model association.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl CollaborationConfiguredAudienceModelAssociationSummary {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model association.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The time at which the configured audience model association was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The identifier of the configured audience model association.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the configured audience model association.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The most recent time at which the configured audience model association was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The unique ARN for the configured audience model's associated collaboration.</p>
    pub fn collaboration_arn(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_arn.deref()
    }
    /// <p>A unique identifier for the collaboration that the configured audience model associations belong to. Accepts collaboration ID.</p>
    pub fn collaboration_id(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_id.deref()
    }
    /// <p>The identifier used to reference members of the collaboration. Only supports AWS account ID.</p>
    pub fn creator_account_id(&self) -> &str {
        use std::ops::Deref;
        self.creator_account_id.deref()
    }
    /// <p>The description of the configured audience model association.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl CollaborationConfiguredAudienceModelAssociationSummary {
    /// Creates a new builder-style object to manufacture [`CollaborationConfiguredAudienceModelAssociationSummary`](crate::types::CollaborationConfiguredAudienceModelAssociationSummary).
    pub fn builder() -> crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder {
        crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::default()
    }
}

/// A builder for [`CollaborationConfiguredAudienceModelAssociationSummary`](crate::types::CollaborationConfiguredAudienceModelAssociationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CollaborationConfiguredAudienceModelAssociationSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) collaboration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_id: ::std::option::Option<::std::string::String>,
    pub(crate) creator_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl CollaborationConfiguredAudienceModelAssociationSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the configured audience model association.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model association.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured audience model association.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The time at which the configured audience model association was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the configured audience model association was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the configured audience model association was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The identifier of the configured audience model association.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the configured audience model association.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the configured audience model association.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the configured audience model association.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configured audience model association.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the configured audience model association.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The most recent time at which the configured audience model association was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the configured audience model association was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the configured audience model association was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The unique ARN for the configured audience model's associated collaboration.</p>
    /// This field is required.
    pub fn collaboration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ARN for the configured audience model's associated collaboration.</p>
    pub fn set_collaboration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_arn = input;
        self
    }
    /// <p>The unique ARN for the configured audience model's associated collaboration.</p>
    pub fn get_collaboration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_arn
    }
    /// <p>A unique identifier for the collaboration that the configured audience model associations belong to. Accepts collaboration ID.</p>
    /// This field is required.
    pub fn collaboration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the collaboration that the configured audience model associations belong to. Accepts collaboration ID.</p>
    pub fn set_collaboration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_id = input;
        self
    }
    /// <p>A unique identifier for the collaboration that the configured audience model associations belong to. Accepts collaboration ID.</p>
    pub fn get_collaboration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_id
    }
    /// <p>The identifier used to reference members of the collaboration. Only supports AWS account ID.</p>
    /// This field is required.
    pub fn creator_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier used to reference members of the collaboration. Only supports AWS account ID.</p>
    pub fn set_creator_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_account_id = input;
        self
    }
    /// <p>The identifier used to reference members of the collaboration. Only supports AWS account ID.</p>
    pub fn get_creator_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_account_id
    }
    /// <p>The description of the configured audience model association.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the configured audience model association.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the configured audience model association.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`CollaborationConfiguredAudienceModelAssociationSummary`](crate::types::CollaborationConfiguredAudienceModelAssociationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::arn)
    /// - [`create_time`](crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::create_time)
    /// - [`id`](crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::id)
    /// - [`name`](crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::name)
    /// - [`update_time`](crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::update_time)
    /// - [`collaboration_arn`](crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::collaboration_arn)
    /// - [`collaboration_id`](crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::collaboration_id)
    /// - [`creator_account_id`](crate::types::builders::CollaborationConfiguredAudienceModelAssociationSummaryBuilder::creator_account_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CollaborationConfiguredAudienceModelAssociationSummary, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::CollaborationConfiguredAudienceModelAssociationSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building CollaborationConfiguredAudienceModelAssociationSummary",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building CollaborationConfiguredAudienceModelAssociationSummary",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CollaborationConfiguredAudienceModelAssociationSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CollaborationConfiguredAudienceModelAssociationSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building CollaborationConfiguredAudienceModelAssociationSummary",
                )
            })?,
            collaboration_arn: self.collaboration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_arn",
                    "collaboration_arn was not specified but it is required when building CollaborationConfiguredAudienceModelAssociationSummary",
                )
            })?,
            collaboration_id: self.collaboration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_id",
                    "collaboration_id was not specified but it is required when building CollaborationConfiguredAudienceModelAssociationSummary",
                )
            })?,
            creator_account_id: self.creator_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creator_account_id",
                    "creator_account_id was not specified but it is required when building CollaborationConfiguredAudienceModelAssociationSummary",
                )
            })?,
            description: self.description,
        })
    }
}
