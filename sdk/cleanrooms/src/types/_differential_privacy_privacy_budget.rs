// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configured epsilon value and the utility in terms of total aggregations, as well as the remaining aggregations available.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DifferentialPrivacyPrivacyBudget {
    /// <p>This information includes the configured epsilon value and the utility in terms of total aggregations, as well as the remaining aggregations.</p>
    pub aggregations: ::std::vec::Vec<crate::types::DifferentialPrivacyPrivacyBudgetAggregation>,
    /// <p>The epsilon value that you configured.</p>
    pub epsilon: i32,
}
impl DifferentialPrivacyPrivacyBudget {
    /// <p>This information includes the configured epsilon value and the utility in terms of total aggregations, as well as the remaining aggregations.</p>
    pub fn aggregations(&self) -> &[crate::types::DifferentialPrivacyPrivacyBudgetAggregation] {
        use std::ops::Deref;
        self.aggregations.deref()
    }
    /// <p>The epsilon value that you configured.</p>
    pub fn epsilon(&self) -> i32 {
        self.epsilon
    }
}
impl DifferentialPrivacyPrivacyBudget {
    /// Creates a new builder-style object to manufacture [`DifferentialPrivacyPrivacyBudget`](crate::types::DifferentialPrivacyPrivacyBudget).
    pub fn builder() -> crate::types::builders::DifferentialPrivacyPrivacyBudgetBuilder {
        crate::types::builders::DifferentialPrivacyPrivacyBudgetBuilder::default()
    }
}

/// A builder for [`DifferentialPrivacyPrivacyBudget`](crate::types::DifferentialPrivacyPrivacyBudget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DifferentialPrivacyPrivacyBudgetBuilder {
    pub(crate) aggregations: ::std::option::Option<::std::vec::Vec<crate::types::DifferentialPrivacyPrivacyBudgetAggregation>>,
    pub(crate) epsilon: ::std::option::Option<i32>,
}
impl DifferentialPrivacyPrivacyBudgetBuilder {
    /// Appends an item to `aggregations`.
    ///
    /// To override the contents of this collection use [`set_aggregations`](Self::set_aggregations).
    ///
    /// <p>This information includes the configured epsilon value and the utility in terms of total aggregations, as well as the remaining aggregations.</p>
    pub fn aggregations(mut self, input: crate::types::DifferentialPrivacyPrivacyBudgetAggregation) -> Self {
        let mut v = self.aggregations.unwrap_or_default();
        v.push(input);
        self.aggregations = ::std::option::Option::Some(v);
        self
    }
    /// <p>This information includes the configured epsilon value and the utility in terms of total aggregations, as well as the remaining aggregations.</p>
    pub fn set_aggregations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DifferentialPrivacyPrivacyBudgetAggregation>>,
    ) -> Self {
        self.aggregations = input;
        self
    }
    /// <p>This information includes the configured epsilon value and the utility in terms of total aggregations, as well as the remaining aggregations.</p>
    pub fn get_aggregations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DifferentialPrivacyPrivacyBudgetAggregation>> {
        &self.aggregations
    }
    /// <p>The epsilon value that you configured.</p>
    /// This field is required.
    pub fn epsilon(mut self, input: i32) -> Self {
        self.epsilon = ::std::option::Option::Some(input);
        self
    }
    /// <p>The epsilon value that you configured.</p>
    pub fn set_epsilon(mut self, input: ::std::option::Option<i32>) -> Self {
        self.epsilon = input;
        self
    }
    /// <p>The epsilon value that you configured.</p>
    pub fn get_epsilon(&self) -> &::std::option::Option<i32> {
        &self.epsilon
    }
    /// Consumes the builder and constructs a [`DifferentialPrivacyPrivacyBudget`](crate::types::DifferentialPrivacyPrivacyBudget).
    /// This method will fail if any of the following fields are not set:
    /// - [`aggregations`](crate::types::builders::DifferentialPrivacyPrivacyBudgetBuilder::aggregations)
    /// - [`epsilon`](crate::types::builders::DifferentialPrivacyPrivacyBudgetBuilder::epsilon)
    pub fn build(self) -> ::std::result::Result<crate::types::DifferentialPrivacyPrivacyBudget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DifferentialPrivacyPrivacyBudget {
            aggregations: self.aggregations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aggregations",
                    "aggregations was not specified but it is required when building DifferentialPrivacyPrivacyBudget",
                )
            })?,
            epsilon: self.epsilon.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "epsilon",
                    "epsilon was not specified but it is required when building DifferentialPrivacyPrivacyBudget",
                )
            })?,
        })
    }
}
