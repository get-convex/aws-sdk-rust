// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines the privacy budget template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PrivacyBudgetTemplate {
    /// <p>The unique identifier of the privacy budget template.</p>
    pub id: ::std::string::String,
    /// <p>The ARN of the privacy budget template.</p>
    pub arn: ::std::string::String,
    /// <p>The identifier for a membership resource.</p>
    pub membership_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the member who created the privacy budget template.</p>
    pub membership_arn: ::std::string::String,
    /// <p>The unique ID of the collaboration that contains this privacy budget template.</p>
    pub collaboration_id: ::std::string::String,
    /// <p>The ARN of the collaboration that contains this privacy budget template.</p>
    pub collaboration_arn: ::std::string::String,
    /// <p>The time at which the privacy budget template was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The most recent time at which the privacy budget template was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>Specifies the type of the privacy budget template.</p>
    pub privacy_budget_type: crate::types::PrivacyBudgetType,
    /// <p>How often the privacy budget refreshes.</p><important>
    /// <p>If you plan to regularly bring new data into the collaboration, use <code>CALENDAR_MONTH</code> to automatically get a new privacy budget for the collaboration every calendar month. Choosing this option allows arbitrary amounts of information to be revealed about rows of the data when repeatedly queried across refreshes. Avoid choosing this if the same rows will be repeatedly queried between privacy budget refreshes.</p>
    /// </important>
    pub auto_refresh: crate::types::PrivacyBudgetTemplateAutoRefresh,
    /// <p>Specifies the epislon and noise parameters for the privacy budget template.</p>
    pub parameters: ::std::option::Option<crate::types::PrivacyBudgetTemplateParametersOutput>,
}
impl PrivacyBudgetTemplate {
    /// <p>The unique identifier of the privacy budget template.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ARN of the privacy budget template.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn membership_id(&self) -> &str {
        use std::ops::Deref;
        self.membership_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the member who created the privacy budget template.</p>
    pub fn membership_arn(&self) -> &str {
        use std::ops::Deref;
        self.membership_arn.deref()
    }
    /// <p>The unique ID of the collaboration that contains this privacy budget template.</p>
    pub fn collaboration_id(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_id.deref()
    }
    /// <p>The ARN of the collaboration that contains this privacy budget template.</p>
    pub fn collaboration_arn(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_arn.deref()
    }
    /// <p>The time at which the privacy budget template was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The most recent time at which the privacy budget template was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>Specifies the type of the privacy budget template.</p>
    pub fn privacy_budget_type(&self) -> &crate::types::PrivacyBudgetType {
        &self.privacy_budget_type
    }
    /// <p>How often the privacy budget refreshes.</p><important>
    /// <p>If you plan to regularly bring new data into the collaboration, use <code>CALENDAR_MONTH</code> to automatically get a new privacy budget for the collaboration every calendar month. Choosing this option allows arbitrary amounts of information to be revealed about rows of the data when repeatedly queried across refreshes. Avoid choosing this if the same rows will be repeatedly queried between privacy budget refreshes.</p>
    /// </important>
    pub fn auto_refresh(&self) -> &crate::types::PrivacyBudgetTemplateAutoRefresh {
        &self.auto_refresh
    }
    /// <p>Specifies the epislon and noise parameters for the privacy budget template.</p>
    pub fn parameters(&self) -> ::std::option::Option<&crate::types::PrivacyBudgetTemplateParametersOutput> {
        self.parameters.as_ref()
    }
}
impl PrivacyBudgetTemplate {
    /// Creates a new builder-style object to manufacture [`PrivacyBudgetTemplate`](crate::types::PrivacyBudgetTemplate).
    pub fn builder() -> crate::types::builders::PrivacyBudgetTemplateBuilder {
        crate::types::builders::PrivacyBudgetTemplateBuilder::default()
    }
}

/// A builder for [`PrivacyBudgetTemplate`](crate::types::PrivacyBudgetTemplate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PrivacyBudgetTemplateBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) membership_id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_arn: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_id: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) privacy_budget_type: ::std::option::Option<crate::types::PrivacyBudgetType>,
    pub(crate) auto_refresh: ::std::option::Option<crate::types::PrivacyBudgetTemplateAutoRefresh>,
    pub(crate) parameters: ::std::option::Option<crate::types::PrivacyBudgetTemplateParametersOutput>,
}
impl PrivacyBudgetTemplateBuilder {
    /// <p>The unique identifier of the privacy budget template.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the privacy budget template.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the privacy budget template.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the privacy budget template.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the privacy budget template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the privacy budget template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The identifier for a membership resource.</p>
    /// This field is required.
    pub fn membership_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn set_membership_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn get_membership_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_id
    }
    /// <p>The Amazon Resource Name (ARN) of the member who created the privacy budget template.</p>
    /// This field is required.
    pub fn membership_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the member who created the privacy budget template.</p>
    pub fn set_membership_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the member who created the privacy budget template.</p>
    pub fn get_membership_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_arn
    }
    /// <p>The unique ID of the collaboration that contains this privacy budget template.</p>
    /// This field is required.
    pub fn collaboration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the collaboration that contains this privacy budget template.</p>
    pub fn set_collaboration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_id = input;
        self
    }
    /// <p>The unique ID of the collaboration that contains this privacy budget template.</p>
    pub fn get_collaboration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_id
    }
    /// <p>The ARN of the collaboration that contains this privacy budget template.</p>
    /// This field is required.
    pub fn collaboration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the collaboration that contains this privacy budget template.</p>
    pub fn set_collaboration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_arn = input;
        self
    }
    /// <p>The ARN of the collaboration that contains this privacy budget template.</p>
    pub fn get_collaboration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_arn
    }
    /// <p>The time at which the privacy budget template was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the privacy budget template was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the privacy budget template was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The most recent time at which the privacy budget template was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the privacy budget template was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the privacy budget template was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>Specifies the type of the privacy budget template.</p>
    /// This field is required.
    pub fn privacy_budget_type(mut self, input: crate::types::PrivacyBudgetType) -> Self {
        self.privacy_budget_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of the privacy budget template.</p>
    pub fn set_privacy_budget_type(mut self, input: ::std::option::Option<crate::types::PrivacyBudgetType>) -> Self {
        self.privacy_budget_type = input;
        self
    }
    /// <p>Specifies the type of the privacy budget template.</p>
    pub fn get_privacy_budget_type(&self) -> &::std::option::Option<crate::types::PrivacyBudgetType> {
        &self.privacy_budget_type
    }
    /// <p>How often the privacy budget refreshes.</p><important>
    /// <p>If you plan to regularly bring new data into the collaboration, use <code>CALENDAR_MONTH</code> to automatically get a new privacy budget for the collaboration every calendar month. Choosing this option allows arbitrary amounts of information to be revealed about rows of the data when repeatedly queried across refreshes. Avoid choosing this if the same rows will be repeatedly queried between privacy budget refreshes.</p>
    /// </important>
    /// This field is required.
    pub fn auto_refresh(mut self, input: crate::types::PrivacyBudgetTemplateAutoRefresh) -> Self {
        self.auto_refresh = ::std::option::Option::Some(input);
        self
    }
    /// <p>How often the privacy budget refreshes.</p><important>
    /// <p>If you plan to regularly bring new data into the collaboration, use <code>CALENDAR_MONTH</code> to automatically get a new privacy budget for the collaboration every calendar month. Choosing this option allows arbitrary amounts of information to be revealed about rows of the data when repeatedly queried across refreshes. Avoid choosing this if the same rows will be repeatedly queried between privacy budget refreshes.</p>
    /// </important>
    pub fn set_auto_refresh(mut self, input: ::std::option::Option<crate::types::PrivacyBudgetTemplateAutoRefresh>) -> Self {
        self.auto_refresh = input;
        self
    }
    /// <p>How often the privacy budget refreshes.</p><important>
    /// <p>If you plan to regularly bring new data into the collaboration, use <code>CALENDAR_MONTH</code> to automatically get a new privacy budget for the collaboration every calendar month. Choosing this option allows arbitrary amounts of information to be revealed about rows of the data when repeatedly queried across refreshes. Avoid choosing this if the same rows will be repeatedly queried between privacy budget refreshes.</p>
    /// </important>
    pub fn get_auto_refresh(&self) -> &::std::option::Option<crate::types::PrivacyBudgetTemplateAutoRefresh> {
        &self.auto_refresh
    }
    /// <p>Specifies the epislon and noise parameters for the privacy budget template.</p>
    /// This field is required.
    pub fn parameters(mut self, input: crate::types::PrivacyBudgetTemplateParametersOutput) -> Self {
        self.parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the epislon and noise parameters for the privacy budget template.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<crate::types::PrivacyBudgetTemplateParametersOutput>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Specifies the epislon and noise parameters for the privacy budget template.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<crate::types::PrivacyBudgetTemplateParametersOutput> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`PrivacyBudgetTemplate`](crate::types::PrivacyBudgetTemplate).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::PrivacyBudgetTemplateBuilder::id)
    /// - [`arn`](crate::types::builders::PrivacyBudgetTemplateBuilder::arn)
    /// - [`membership_id`](crate::types::builders::PrivacyBudgetTemplateBuilder::membership_id)
    /// - [`membership_arn`](crate::types::builders::PrivacyBudgetTemplateBuilder::membership_arn)
    /// - [`collaboration_id`](crate::types::builders::PrivacyBudgetTemplateBuilder::collaboration_id)
    /// - [`collaboration_arn`](crate::types::builders::PrivacyBudgetTemplateBuilder::collaboration_arn)
    /// - [`create_time`](crate::types::builders::PrivacyBudgetTemplateBuilder::create_time)
    /// - [`update_time`](crate::types::builders::PrivacyBudgetTemplateBuilder::update_time)
    /// - [`privacy_budget_type`](crate::types::builders::PrivacyBudgetTemplateBuilder::privacy_budget_type)
    /// - [`auto_refresh`](crate::types::builders::PrivacyBudgetTemplateBuilder::auto_refresh)
    pub fn build(self) -> ::std::result::Result<crate::types::PrivacyBudgetTemplate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PrivacyBudgetTemplate {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            membership_id: self.membership_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_id",
                    "membership_id was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            membership_arn: self.membership_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_arn",
                    "membership_arn was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            collaboration_id: self.collaboration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_id",
                    "collaboration_id was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            collaboration_arn: self.collaboration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_arn",
                    "collaboration_arn was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            privacy_budget_type: self.privacy_budget_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "privacy_budget_type",
                    "privacy_budget_type was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            auto_refresh: self.auto_refresh.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auto_refresh",
                    "auto_refresh was not specified but it is required when building PrivacyBudgetTemplate",
                )
            })?,
            parameters: self.parameters,
        })
    }
}
