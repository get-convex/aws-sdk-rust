// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The epsilon and noise parameter values that you want to update in the differential privacy template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DifferentialPrivacyTemplateUpdateParameters {
    /// <p>The updated epsilon value that you want to use.</p>
    pub epsilon: ::std::option::Option<i32>,
    /// <p>The updated value of noise added per query. It is measured in terms of the number of users whose contributions you want to obscure. This value governs the rate at which the privacy budget is depleted.</p>
    pub users_noise_per_query: ::std::option::Option<i32>,
}
impl DifferentialPrivacyTemplateUpdateParameters {
    /// <p>The updated epsilon value that you want to use.</p>
    pub fn epsilon(&self) -> ::std::option::Option<i32> {
        self.epsilon
    }
    /// <p>The updated value of noise added per query. It is measured in terms of the number of users whose contributions you want to obscure. This value governs the rate at which the privacy budget is depleted.</p>
    pub fn users_noise_per_query(&self) -> ::std::option::Option<i32> {
        self.users_noise_per_query
    }
}
impl DifferentialPrivacyTemplateUpdateParameters {
    /// Creates a new builder-style object to manufacture [`DifferentialPrivacyTemplateUpdateParameters`](crate::types::DifferentialPrivacyTemplateUpdateParameters).
    pub fn builder() -> crate::types::builders::DifferentialPrivacyTemplateUpdateParametersBuilder {
        crate::types::builders::DifferentialPrivacyTemplateUpdateParametersBuilder::default()
    }
}

/// A builder for [`DifferentialPrivacyTemplateUpdateParameters`](crate::types::DifferentialPrivacyTemplateUpdateParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DifferentialPrivacyTemplateUpdateParametersBuilder {
    pub(crate) epsilon: ::std::option::Option<i32>,
    pub(crate) users_noise_per_query: ::std::option::Option<i32>,
}
impl DifferentialPrivacyTemplateUpdateParametersBuilder {
    /// <p>The updated epsilon value that you want to use.</p>
    pub fn epsilon(mut self, input: i32) -> Self {
        self.epsilon = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated epsilon value that you want to use.</p>
    pub fn set_epsilon(mut self, input: ::std::option::Option<i32>) -> Self {
        self.epsilon = input;
        self
    }
    /// <p>The updated epsilon value that you want to use.</p>
    pub fn get_epsilon(&self) -> &::std::option::Option<i32> {
        &self.epsilon
    }
    /// <p>The updated value of noise added per query. It is measured in terms of the number of users whose contributions you want to obscure. This value governs the rate at which the privacy budget is depleted.</p>
    pub fn users_noise_per_query(mut self, input: i32) -> Self {
        self.users_noise_per_query = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated value of noise added per query. It is measured in terms of the number of users whose contributions you want to obscure. This value governs the rate at which the privacy budget is depleted.</p>
    pub fn set_users_noise_per_query(mut self, input: ::std::option::Option<i32>) -> Self {
        self.users_noise_per_query = input;
        self
    }
    /// <p>The updated value of noise added per query. It is measured in terms of the number of users whose contributions you want to obscure. This value governs the rate at which the privacy budget is depleted.</p>
    pub fn get_users_noise_per_query(&self) -> &::std::option::Option<i32> {
        &self.users_noise_per_query
    }
    /// Consumes the builder and constructs a [`DifferentialPrivacyTemplateUpdateParameters`](crate::types::DifferentialPrivacyTemplateUpdateParameters).
    pub fn build(self) -> crate::types::DifferentialPrivacyTemplateUpdateParameters {
        crate::types::DifferentialPrivacyTemplateUpdateParameters {
            epsilon: self.epsilon,
            users_noise_per_query: self.users_noise_per_query,
        }
    }
}
