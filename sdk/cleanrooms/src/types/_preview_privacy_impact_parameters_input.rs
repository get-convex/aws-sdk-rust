// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the updated epsilon and noise parameters to preview. The preview allows you to see how the maximum number of each type of aggregation function would change with the new parameters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum PreviewPrivacyImpactParametersInput {
    /// <p>An array that specifies the epsilon and noise parameters.</p>
    DifferentialPrivacy(crate::types::DifferentialPrivacyPreviewParametersInput),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl PreviewPrivacyImpactParametersInput {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`DifferentialPrivacy`](crate::types::PreviewPrivacyImpactParametersInput::DifferentialPrivacy), extracting the inner [`DifferentialPrivacyPreviewParametersInput`](crate::types::DifferentialPrivacyPreviewParametersInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_differential_privacy(&self) -> ::std::result::Result<&crate::types::DifferentialPrivacyPreviewParametersInput, &Self> {
        if let PreviewPrivacyImpactParametersInput::DifferentialPrivacy(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DifferentialPrivacy`](crate::types::PreviewPrivacyImpactParametersInput::DifferentialPrivacy).
    pub fn is_differential_privacy(&self) -> bool {
        self.as_differential_privacy().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
