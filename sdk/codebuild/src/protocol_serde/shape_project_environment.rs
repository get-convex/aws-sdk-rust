// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_project_environment(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ProjectEnvironment,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("type").string(input.r#type.as_str());
    }
    {
        object.key("image").string(input.image.as_str());
    }
    {
        object.key("computeType").string(input.compute_type.as_str());
    }
    if let Some(var_1) = &input.fleet {
        #[allow(unused_mut)]
        let mut object_2 = object.key("fleet").start_object();
        crate::protocol_serde::shape_project_fleet::ser_project_fleet(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.environment_variables {
        let mut array_4 = object.key("environmentVariables").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_environment_variable::ser_environment_variable(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.privileged_mode {
        object.key("privilegedMode").boolean(*var_7);
    }
    if let Some(var_8) = &input.certificate {
        object.key("certificate").string(var_8.as_str());
    }
    if let Some(var_9) = &input.registry_credential {
        #[allow(unused_mut)]
        let mut object_10 = object.key("registryCredential").start_object();
        crate::protocol_serde::shape_registry_credential::ser_registry_credential(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.image_pull_credentials_type {
        object.key("imagePullCredentialsType").string(var_11.as_str());
    }
    Ok(())
}

pub(crate) fn de_project_environment<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ProjectEnvironment>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ProjectEnvironmentBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::EnvironmentType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "image" => {
                            builder = builder.set_image(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "computeType" => {
                            builder = builder.set_compute_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ComputeType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "fleet" => {
                            builder = builder.set_fleet(crate::protocol_serde::shape_project_fleet::de_project_fleet(tokens)?);
                        }
                        "environmentVariables" => {
                            builder = builder
                                .set_environment_variables(crate::protocol_serde::shape_environment_variables::de_environment_variables(tokens)?);
                        }
                        "privilegedMode" => {
                            builder = builder.set_privileged_mode(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "certificate" => {
                            builder = builder.set_certificate(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "registryCredential" => {
                            builder =
                                builder.set_registry_credential(crate::protocol_serde::shape_registry_credential::de_registry_credential(tokens)?);
                        }
                        "imagePullCredentialsType" => {
                            builder = builder.set_image_pull_credentials_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ImagePullCredentialsType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::project_environment_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
