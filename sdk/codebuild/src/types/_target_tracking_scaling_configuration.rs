// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines when a new instance is auto-scaled into the compute fleet.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetTrackingScalingConfiguration {
    /// <p>The metric type to determine auto-scaling.</p>
    pub metric_type: ::std::option::Option<crate::types::FleetScalingMetricType>,
    /// <p>The value of <code>metricType</code> when to start scaling.</p>
    pub target_value: ::std::option::Option<f64>,
}
impl TargetTrackingScalingConfiguration {
    /// <p>The metric type to determine auto-scaling.</p>
    pub fn metric_type(&self) -> ::std::option::Option<&crate::types::FleetScalingMetricType> {
        self.metric_type.as_ref()
    }
    /// <p>The value of <code>metricType</code> when to start scaling.</p>
    pub fn target_value(&self) -> ::std::option::Option<f64> {
        self.target_value
    }
}
impl TargetTrackingScalingConfiguration {
    /// Creates a new builder-style object to manufacture [`TargetTrackingScalingConfiguration`](crate::types::TargetTrackingScalingConfiguration).
    pub fn builder() -> crate::types::builders::TargetTrackingScalingConfigurationBuilder {
        crate::types::builders::TargetTrackingScalingConfigurationBuilder::default()
    }
}

/// A builder for [`TargetTrackingScalingConfiguration`](crate::types::TargetTrackingScalingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TargetTrackingScalingConfigurationBuilder {
    pub(crate) metric_type: ::std::option::Option<crate::types::FleetScalingMetricType>,
    pub(crate) target_value: ::std::option::Option<f64>,
}
impl TargetTrackingScalingConfigurationBuilder {
    /// <p>The metric type to determine auto-scaling.</p>
    pub fn metric_type(mut self, input: crate::types::FleetScalingMetricType) -> Self {
        self.metric_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric type to determine auto-scaling.</p>
    pub fn set_metric_type(mut self, input: ::std::option::Option<crate::types::FleetScalingMetricType>) -> Self {
        self.metric_type = input;
        self
    }
    /// <p>The metric type to determine auto-scaling.</p>
    pub fn get_metric_type(&self) -> &::std::option::Option<crate::types::FleetScalingMetricType> {
        &self.metric_type
    }
    /// <p>The value of <code>metricType</code> when to start scaling.</p>
    pub fn target_value(mut self, input: f64) -> Self {
        self.target_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of <code>metricType</code> when to start scaling.</p>
    pub fn set_target_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.target_value = input;
        self
    }
    /// <p>The value of <code>metricType</code> when to start scaling.</p>
    pub fn get_target_value(&self) -> &::std::option::Option<f64> {
        &self.target_value
    }
    /// Consumes the builder and constructs a [`TargetTrackingScalingConfiguration`](crate::types::TargetTrackingScalingConfiguration).
    pub fn build(self) -> crate::types::TargetTrackingScalingConfiguration {
        crate::types::TargetTrackingScalingConfiguration {
            metric_type: self.metric_type,
            target_value: self.target_value,
        }
    }
}
