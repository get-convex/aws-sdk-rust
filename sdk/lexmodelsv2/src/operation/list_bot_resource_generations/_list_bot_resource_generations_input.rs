// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListBotResourceGenerationsInput {
    /// <p>The unique identifier of the bot whose generation requests you want to view.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot whose generation requests you want to view.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
    /// <p>The locale of the bot whose generation requests you want to view.</p>
    pub locale_id: ::std::option::Option<::std::string::String>,
    /// <p>An object containing information about the attribute and the method by which to sort the results</p>
    pub sort_by: ::std::option::Option<crate::types::GenerationSortBy>,
    /// <p>The maximum number of results to return in the response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If the total number of results is greater than the number specified in the <code>maxResults</code>, the response returns a token in the <code>nextToken</code> field. Use this token when making a request to return the next batch of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListBotResourceGenerationsInput {
    /// <p>The unique identifier of the bot whose generation requests you want to view.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot whose generation requests you want to view.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The locale of the bot whose generation requests you want to view.</p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>An object containing information about the attribute and the method by which to sort the results</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::GenerationSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the total number of results is greater than the number specified in the <code>maxResults</code>, the response returns a token in the <code>nextToken</code> field. Use this token when making a request to return the next batch of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListBotResourceGenerationsInput {
    /// Creates a new builder-style object to manufacture [`ListBotResourceGenerationsInput`](crate::operation::list_bot_resource_generations::ListBotResourceGenerationsInput).
    pub fn builder() -> crate::operation::list_bot_resource_generations::builders::ListBotResourceGenerationsInputBuilder {
        crate::operation::list_bot_resource_generations::builders::ListBotResourceGenerationsInputBuilder::default()
    }
}

/// A builder for [`ListBotResourceGenerationsInput`](crate::operation::list_bot_resource_generations::ListBotResourceGenerationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListBotResourceGenerationsInputBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) sort_by: ::std::option::Option<crate::types::GenerationSortBy>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListBotResourceGenerationsInputBuilder {
    /// <p>The unique identifier of the bot whose generation requests you want to view.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot whose generation requests you want to view.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The unique identifier of the bot whose generation requests you want to view.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The version of the bot whose generation requests you want to view.</p>
    /// This field is required.
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot whose generation requests you want to view.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot whose generation requests you want to view.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The locale of the bot whose generation requests you want to view.</p>
    /// This field is required.
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The locale of the bot whose generation requests you want to view.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The locale of the bot whose generation requests you want to view.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p>An object containing information about the attribute and the method by which to sort the results</p>
    pub fn sort_by(mut self, input: crate::types::GenerationSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object containing information about the attribute and the method by which to sort the results</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::GenerationSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>An object containing information about the attribute and the method by which to sort the results</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::GenerationSortBy> {
        &self.sort_by
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If the total number of results is greater than the number specified in the <code>maxResults</code>, the response returns a token in the <code>nextToken</code> field. Use this token when making a request to return the next batch of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the total number of results is greater than the number specified in the <code>maxResults</code>, the response returns a token in the <code>nextToken</code> field. Use this token when making a request to return the next batch of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the total number of results is greater than the number specified in the <code>maxResults</code>, the response returns a token in the <code>nextToken</code> field. Use this token when making a request to return the next batch of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListBotResourceGenerationsInput`](crate::operation::list_bot_resource_generations::ListBotResourceGenerationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_bot_resource_generations::ListBotResourceGenerationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_bot_resource_generations::ListBotResourceGenerationsInput {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            sort_by: self.sort_by,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
