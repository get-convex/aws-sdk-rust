// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about whether assisted slot resolution is turned on for the slot or not.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlotResolutionSetting {
    /// <p>Specifies whether assisted slot resolution is turned on for the slot or not. If the value is <code>EnhancedFallback</code>, assisted slot resolution is activated when Amazon Lex defaults to the <code>AMAZON.FallbackIntent</code>. If the value is <code>Default</code>, assisted slot resolution is turned off.</p>
    pub slot_resolution_strategy: crate::types::SlotResolutionStrategy,
}
impl SlotResolutionSetting {
    /// <p>Specifies whether assisted slot resolution is turned on for the slot or not. If the value is <code>EnhancedFallback</code>, assisted slot resolution is activated when Amazon Lex defaults to the <code>AMAZON.FallbackIntent</code>. If the value is <code>Default</code>, assisted slot resolution is turned off.</p>
    pub fn slot_resolution_strategy(&self) -> &crate::types::SlotResolutionStrategy {
        &self.slot_resolution_strategy
    }
}
impl SlotResolutionSetting {
    /// Creates a new builder-style object to manufacture [`SlotResolutionSetting`](crate::types::SlotResolutionSetting).
    pub fn builder() -> crate::types::builders::SlotResolutionSettingBuilder {
        crate::types::builders::SlotResolutionSettingBuilder::default()
    }
}

/// A builder for [`SlotResolutionSetting`](crate::types::SlotResolutionSetting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SlotResolutionSettingBuilder {
    pub(crate) slot_resolution_strategy: ::std::option::Option<crate::types::SlotResolutionStrategy>,
}
impl SlotResolutionSettingBuilder {
    /// <p>Specifies whether assisted slot resolution is turned on for the slot or not. If the value is <code>EnhancedFallback</code>, assisted slot resolution is activated when Amazon Lex defaults to the <code>AMAZON.FallbackIntent</code>. If the value is <code>Default</code>, assisted slot resolution is turned off.</p>
    /// This field is required.
    pub fn slot_resolution_strategy(mut self, input: crate::types::SlotResolutionStrategy) -> Self {
        self.slot_resolution_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether assisted slot resolution is turned on for the slot or not. If the value is <code>EnhancedFallback</code>, assisted slot resolution is activated when Amazon Lex defaults to the <code>AMAZON.FallbackIntent</code>. If the value is <code>Default</code>, assisted slot resolution is turned off.</p>
    pub fn set_slot_resolution_strategy(mut self, input: ::std::option::Option<crate::types::SlotResolutionStrategy>) -> Self {
        self.slot_resolution_strategy = input;
        self
    }
    /// <p>Specifies whether assisted slot resolution is turned on for the slot or not. If the value is <code>EnhancedFallback</code>, assisted slot resolution is activated when Amazon Lex defaults to the <code>AMAZON.FallbackIntent</code>. If the value is <code>Default</code>, assisted slot resolution is turned off.</p>
    pub fn get_slot_resolution_strategy(&self) -> &::std::option::Option<crate::types::SlotResolutionStrategy> {
        &self.slot_resolution_strategy
    }
    /// Consumes the builder and constructs a [`SlotResolutionSetting`](crate::types::SlotResolutionSetting).
    /// This method will fail if any of the following fields are not set:
    /// - [`slot_resolution_strategy`](crate::types::builders::SlotResolutionSettingBuilder::slot_resolution_strategy)
    pub fn build(self) -> ::std::result::Result<crate::types::SlotResolutionSetting, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlotResolutionSetting {
            slot_resolution_strategy: self.slot_resolution_strategy.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slot_resolution_strategy",
                    "slot_resolution_strategy was not specified but it is required when building SlotResolutionSetting",
                )
            })?,
        })
    }
}
