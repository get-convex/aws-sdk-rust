// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains specifications about the generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GenerativeAiSettings {
    /// <p>Contains specifications about the Amazon Lex runtime generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub runtime_settings: ::std::option::Option<crate::types::RuntimeSettings>,
    /// <p>Contains specifications about the Amazon Lex build time generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub buildtime_settings: ::std::option::Option<crate::types::BuildtimeSettings>,
}
impl GenerativeAiSettings {
    /// <p>Contains specifications about the Amazon Lex runtime generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub fn runtime_settings(&self) -> ::std::option::Option<&crate::types::RuntimeSettings> {
        self.runtime_settings.as_ref()
    }
    /// <p>Contains specifications about the Amazon Lex build time generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub fn buildtime_settings(&self) -> ::std::option::Option<&crate::types::BuildtimeSettings> {
        self.buildtime_settings.as_ref()
    }
}
impl GenerativeAiSettings {
    /// Creates a new builder-style object to manufacture [`GenerativeAiSettings`](crate::types::GenerativeAiSettings).
    pub fn builder() -> crate::types::builders::GenerativeAiSettingsBuilder {
        crate::types::builders::GenerativeAiSettingsBuilder::default()
    }
}

/// A builder for [`GenerativeAiSettings`](crate::types::GenerativeAiSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GenerativeAiSettingsBuilder {
    pub(crate) runtime_settings: ::std::option::Option<crate::types::RuntimeSettings>,
    pub(crate) buildtime_settings: ::std::option::Option<crate::types::BuildtimeSettings>,
}
impl GenerativeAiSettingsBuilder {
    /// <p>Contains specifications about the Amazon Lex runtime generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub fn runtime_settings(mut self, input: crate::types::RuntimeSettings) -> Self {
        self.runtime_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains specifications about the Amazon Lex runtime generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub fn set_runtime_settings(mut self, input: ::std::option::Option<crate::types::RuntimeSettings>) -> Self {
        self.runtime_settings = input;
        self
    }
    /// <p>Contains specifications about the Amazon Lex runtime generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub fn get_runtime_settings(&self) -> &::std::option::Option<crate::types::RuntimeSettings> {
        &self.runtime_settings
    }
    /// <p>Contains specifications about the Amazon Lex build time generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub fn buildtime_settings(mut self, input: crate::types::BuildtimeSettings) -> Self {
        self.buildtime_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains specifications about the Amazon Lex build time generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub fn set_buildtime_settings(mut self, input: ::std::option::Option<crate::types::BuildtimeSettings>) -> Self {
        self.buildtime_settings = input;
        self
    }
    /// <p>Contains specifications about the Amazon Lex build time generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
    pub fn get_buildtime_settings(&self) -> &::std::option::Option<crate::types::BuildtimeSettings> {
        &self.buildtime_settings
    }
    /// Consumes the builder and constructs a [`GenerativeAiSettings`](crate::types::GenerativeAiSettings).
    pub fn build(self) -> crate::types::GenerativeAiSettings {
        crate::types::GenerativeAiSettings {
            runtime_settings: self.runtime_settings,
            buildtime_settings: self.buildtime_settings,
        }
    }
}
