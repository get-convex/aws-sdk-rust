// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that lists the coordinates for a geoproximity resource record.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Coordinates {
    /// <p>Specifies a coordinate of the north–south position of a geographic point on the surface of the Earth (-90 - 90).</p>
    pub latitude: ::std::string::String,
    /// <p>Specifies a coordinate of the east–west position of a geographic point on the surface of the Earth (-180 - 180).</p>
    pub longitude: ::std::string::String,
}
impl Coordinates {
    /// <p>Specifies a coordinate of the north–south position of a geographic point on the surface of the Earth (-90 - 90).</p>
    pub fn latitude(&self) -> &str {
        use std::ops::Deref;
        self.latitude.deref()
    }
    /// <p>Specifies a coordinate of the east–west position of a geographic point on the surface of the Earth (-180 - 180).</p>
    pub fn longitude(&self) -> &str {
        use std::ops::Deref;
        self.longitude.deref()
    }
}
impl Coordinates {
    /// Creates a new builder-style object to manufacture [`Coordinates`](crate::types::Coordinates).
    pub fn builder() -> crate::types::builders::CoordinatesBuilder {
        crate::types::builders::CoordinatesBuilder::default()
    }
}

/// A builder for [`Coordinates`](crate::types::Coordinates).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoordinatesBuilder {
    pub(crate) latitude: ::std::option::Option<::std::string::String>,
    pub(crate) longitude: ::std::option::Option<::std::string::String>,
}
impl CoordinatesBuilder {
    /// <p>Specifies a coordinate of the north–south position of a geographic point on the surface of the Earth (-90 - 90).</p>
    /// This field is required.
    pub fn latitude(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latitude = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a coordinate of the north–south position of a geographic point on the surface of the Earth (-90 - 90).</p>
    pub fn set_latitude(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latitude = input;
        self
    }
    /// <p>Specifies a coordinate of the north–south position of a geographic point on the surface of the Earth (-90 - 90).</p>
    pub fn get_latitude(&self) -> &::std::option::Option<::std::string::String> {
        &self.latitude
    }
    /// <p>Specifies a coordinate of the east–west position of a geographic point on the surface of the Earth (-180 - 180).</p>
    /// This field is required.
    pub fn longitude(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.longitude = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a coordinate of the east–west position of a geographic point on the surface of the Earth (-180 - 180).</p>
    pub fn set_longitude(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.longitude = input;
        self
    }
    /// <p>Specifies a coordinate of the east–west position of a geographic point on the surface of the Earth (-180 - 180).</p>
    pub fn get_longitude(&self) -> &::std::option::Option<::std::string::String> {
        &self.longitude
    }
    /// Consumes the builder and constructs a [`Coordinates`](crate::types::Coordinates).
    /// This method will fail if any of the following fields are not set:
    /// - [`latitude`](crate::types::builders::CoordinatesBuilder::latitude)
    /// - [`longitude`](crate::types::builders::CoordinatesBuilder::longitude)
    pub fn build(self) -> ::std::result::Result<crate::types::Coordinates, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Coordinates {
            latitude: self.latitude.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "latitude",
                    "latitude was not specified but it is required when building Coordinates",
                )
            })?,
            longitude: self.longitude.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "longitude",
                    "longitude was not specified but it is required when building Coordinates",
                )
            })?,
        })
    }
}
