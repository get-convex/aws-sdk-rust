// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>(Resource record sets only): A complex type that lets you control how Amazon Route&nbsp;53 responds to DNS queries based on the geographic origin of the query and your resources. Only one of , <code>LocalZoneGroup</code>, <code>Coordinates</code>, or <code>Amazon Web ServicesRegion</code> is allowed per request at a time.</p>
/// <p>For more information about geoproximity routing, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html">Geoproximity routing</a> in the <i>Amazon Route&nbsp;53 Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeoProximityLocation {
    /// <p>The Amazon Web Services Region the resource you are directing DNS traffic to, is in.</p>
    pub aws_region: ::std::option::Option<::std::string::String>,
    /// <p>Specifies an Amazon Web Services Local Zone Group.</p>
    /// <p>A local Zone Group is usually the Local Zone code without the ending character. For example, if the Local Zone is <code>us-east-1-bue-1a</code> the Local Zone Group is <code>us-east-1-bue-1</code>.</p>
    /// <p>You can identify the Local Zones Group for a specific Local Zone by using the <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html">describe-availability-zones</a> CLI command:</p>
    /// <p>This command returns: <code>"GroupName": "us-west-2-den-1"</code>, specifying that the Local Zone <code>us-west-2-den-1a</code> belongs to the Local Zone Group <code>us-west-2-den-1</code>.</p>
    pub local_zone_group: ::std::option::Option<::std::string::String>,
    /// <p>Contains the longitude and latitude for a geographic region.</p>
    pub coordinates: ::std::option::Option<crate::types::Coordinates>,
    /// <p>The bias increases or decreases the size of the geographic region from which Route&nbsp;53 routes traffic to a resource.</p>
    /// <p>To use <code>Bias</code> to change the size of the geographic region, specify the applicable value for the bias:</p>
    /// <ul>
    /// <li>
    /// <p>To expand the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a positive integer from 1 to 99 for the bias. Route&nbsp;53 shrinks the size of adjacent regions.</p></li>
    /// <li>
    /// <p>To shrink the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a negative bias of -1 to -99. Route&nbsp;53 expands the size of adjacent regions.</p></li>
    /// </ul>
    pub bias: ::std::option::Option<i32>,
}
impl GeoProximityLocation {
    /// <p>The Amazon Web Services Region the resource you are directing DNS traffic to, is in.</p>
    pub fn aws_region(&self) -> ::std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>Specifies an Amazon Web Services Local Zone Group.</p>
    /// <p>A local Zone Group is usually the Local Zone code without the ending character. For example, if the Local Zone is <code>us-east-1-bue-1a</code> the Local Zone Group is <code>us-east-1-bue-1</code>.</p>
    /// <p>You can identify the Local Zones Group for a specific Local Zone by using the <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html">describe-availability-zones</a> CLI command:</p>
    /// <p>This command returns: <code>"GroupName": "us-west-2-den-1"</code>, specifying that the Local Zone <code>us-west-2-den-1a</code> belongs to the Local Zone Group <code>us-west-2-den-1</code>.</p>
    pub fn local_zone_group(&self) -> ::std::option::Option<&str> {
        self.local_zone_group.as_deref()
    }
    /// <p>Contains the longitude and latitude for a geographic region.</p>
    pub fn coordinates(&self) -> ::std::option::Option<&crate::types::Coordinates> {
        self.coordinates.as_ref()
    }
    /// <p>The bias increases or decreases the size of the geographic region from which Route&nbsp;53 routes traffic to a resource.</p>
    /// <p>To use <code>Bias</code> to change the size of the geographic region, specify the applicable value for the bias:</p>
    /// <ul>
    /// <li>
    /// <p>To expand the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a positive integer from 1 to 99 for the bias. Route&nbsp;53 shrinks the size of adjacent regions.</p></li>
    /// <li>
    /// <p>To shrink the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a negative bias of -1 to -99. Route&nbsp;53 expands the size of adjacent regions.</p></li>
    /// </ul>
    pub fn bias(&self) -> ::std::option::Option<i32> {
        self.bias
    }
}
impl GeoProximityLocation {
    /// Creates a new builder-style object to manufacture [`GeoProximityLocation`](crate::types::GeoProximityLocation).
    pub fn builder() -> crate::types::builders::GeoProximityLocationBuilder {
        crate::types::builders::GeoProximityLocationBuilder::default()
    }
}

/// A builder for [`GeoProximityLocation`](crate::types::GeoProximityLocation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeoProximityLocationBuilder {
    pub(crate) aws_region: ::std::option::Option<::std::string::String>,
    pub(crate) local_zone_group: ::std::option::Option<::std::string::String>,
    pub(crate) coordinates: ::std::option::Option<crate::types::Coordinates>,
    pub(crate) bias: ::std::option::Option<i32>,
}
impl GeoProximityLocationBuilder {
    /// <p>The Amazon Web Services Region the resource you are directing DNS traffic to, is in.</p>
    pub fn aws_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region the resource you are directing DNS traffic to, is in.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The Amazon Web Services Region the resource you are directing DNS traffic to, is in.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_region
    }
    /// <p>Specifies an Amazon Web Services Local Zone Group.</p>
    /// <p>A local Zone Group is usually the Local Zone code without the ending character. For example, if the Local Zone is <code>us-east-1-bue-1a</code> the Local Zone Group is <code>us-east-1-bue-1</code>.</p>
    /// <p>You can identify the Local Zones Group for a specific Local Zone by using the <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html">describe-availability-zones</a> CLI command:</p>
    /// <p>This command returns: <code>"GroupName": "us-west-2-den-1"</code>, specifying that the Local Zone <code>us-west-2-den-1a</code> belongs to the Local Zone Group <code>us-west-2-den-1</code>.</p>
    pub fn local_zone_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_zone_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies an Amazon Web Services Local Zone Group.</p>
    /// <p>A local Zone Group is usually the Local Zone code without the ending character. For example, if the Local Zone is <code>us-east-1-bue-1a</code> the Local Zone Group is <code>us-east-1-bue-1</code>.</p>
    /// <p>You can identify the Local Zones Group for a specific Local Zone by using the <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html">describe-availability-zones</a> CLI command:</p>
    /// <p>This command returns: <code>"GroupName": "us-west-2-den-1"</code>, specifying that the Local Zone <code>us-west-2-den-1a</code> belongs to the Local Zone Group <code>us-west-2-den-1</code>.</p>
    pub fn set_local_zone_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_zone_group = input;
        self
    }
    /// <p>Specifies an Amazon Web Services Local Zone Group.</p>
    /// <p>A local Zone Group is usually the Local Zone code without the ending character. For example, if the Local Zone is <code>us-east-1-bue-1a</code> the Local Zone Group is <code>us-east-1-bue-1</code>.</p>
    /// <p>You can identify the Local Zones Group for a specific Local Zone by using the <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html">describe-availability-zones</a> CLI command:</p>
    /// <p>This command returns: <code>"GroupName": "us-west-2-den-1"</code>, specifying that the Local Zone <code>us-west-2-den-1a</code> belongs to the Local Zone Group <code>us-west-2-den-1</code>.</p>
    pub fn get_local_zone_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_zone_group
    }
    /// <p>Contains the longitude and latitude for a geographic region.</p>
    pub fn coordinates(mut self, input: crate::types::Coordinates) -> Self {
        self.coordinates = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the longitude and latitude for a geographic region.</p>
    pub fn set_coordinates(mut self, input: ::std::option::Option<crate::types::Coordinates>) -> Self {
        self.coordinates = input;
        self
    }
    /// <p>Contains the longitude and latitude for a geographic region.</p>
    pub fn get_coordinates(&self) -> &::std::option::Option<crate::types::Coordinates> {
        &self.coordinates
    }
    /// <p>The bias increases or decreases the size of the geographic region from which Route&nbsp;53 routes traffic to a resource.</p>
    /// <p>To use <code>Bias</code> to change the size of the geographic region, specify the applicable value for the bias:</p>
    /// <ul>
    /// <li>
    /// <p>To expand the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a positive integer from 1 to 99 for the bias. Route&nbsp;53 shrinks the size of adjacent regions.</p></li>
    /// <li>
    /// <p>To shrink the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a negative bias of -1 to -99. Route&nbsp;53 expands the size of adjacent regions.</p></li>
    /// </ul>
    pub fn bias(mut self, input: i32) -> Self {
        self.bias = ::std::option::Option::Some(input);
        self
    }
    /// <p>The bias increases or decreases the size of the geographic region from which Route&nbsp;53 routes traffic to a resource.</p>
    /// <p>To use <code>Bias</code> to change the size of the geographic region, specify the applicable value for the bias:</p>
    /// <ul>
    /// <li>
    /// <p>To expand the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a positive integer from 1 to 99 for the bias. Route&nbsp;53 shrinks the size of adjacent regions.</p></li>
    /// <li>
    /// <p>To shrink the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a negative bias of -1 to -99. Route&nbsp;53 expands the size of adjacent regions.</p></li>
    /// </ul>
    pub fn set_bias(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bias = input;
        self
    }
    /// <p>The bias increases or decreases the size of the geographic region from which Route&nbsp;53 routes traffic to a resource.</p>
    /// <p>To use <code>Bias</code> to change the size of the geographic region, specify the applicable value for the bias:</p>
    /// <ul>
    /// <li>
    /// <p>To expand the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a positive integer from 1 to 99 for the bias. Route&nbsp;53 shrinks the size of adjacent regions.</p></li>
    /// <li>
    /// <p>To shrink the size of the geographic region from which Route&nbsp;53 routes traffic to a resource, specify a negative bias of -1 to -99. Route&nbsp;53 expands the size of adjacent regions.</p></li>
    /// </ul>
    pub fn get_bias(&self) -> &::std::option::Option<i32> {
        &self.bias
    }
    /// Consumes the builder and constructs a [`GeoProximityLocation`](crate::types::GeoProximityLocation).
    pub fn build(self) -> crate::types::GeoProximityLocation {
        crate::types::GeoProximityLocation {
            aws_region: self.aws_region,
            local_zone_group: self.local_zone_group,
            coordinates: self.coordinates,
            bias: self.bias,
        }
    }
}
