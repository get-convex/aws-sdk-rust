// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_geo_proximity_location(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::GeoProximityLocation, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::GeoProximityLocation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AWSRegion") /* AWSRegion com.amazonaws.route53#GeoProximityLocation$AWSRegion */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_region(var_1);
            }
            ,
            s if s.matches("LocalZoneGroup") /* LocalZoneGroup com.amazonaws.route53#GeoProximityLocation$LocalZoneGroup */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_zone_group(var_2);
            }
            ,
            s if s.matches("Coordinates") /* Coordinates com.amazonaws.route53#GeoProximityLocation$Coordinates */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_coordinates::de_coordinates(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_coordinates(var_3);
            }
            ,
            s if s.matches("Bias") /* Bias com.amazonaws.route53#GeoProximityLocation$Bias */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.route53#Bias`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_bias(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn ser_geo_proximity_location(
    input: &crate::types::GeoProximityLocation,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_5) = &input.aws_region {
        let mut inner_writer = scope.start_el("AWSRegion").finish();
        inner_writer.data(var_5.as_str());
    }
    if let Some(var_6) = &input.local_zone_group {
        let mut inner_writer = scope.start_el("LocalZoneGroup").finish();
        inner_writer.data(var_6.as_str());
    }
    if let Some(var_7) = &input.coordinates {
        let inner_writer = scope.start_el("Coordinates");
        crate::protocol_serde::shape_coordinates::ser_coordinates(var_7, inner_writer)?
    }
    if let Some(var_8) = &input.bias {
        let mut inner_writer = scope.start_el("Bias").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(*var_8).encode());
    }
    scope.finish();
    Ok(())
}
