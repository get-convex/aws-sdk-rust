// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_web_rtc_contact_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_web_rtc_contact::StartWebRtcContactInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allowed_capabilities {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AllowedCapabilities").start_object();
        crate::protocol_serde::shape_allowed_capabilities::ser_allowed_capabilities(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Attributes").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.client_token {
        object.key("ClientToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.description {
        object.key("Description").string(var_9.as_str());
    }
    if let Some(var_10) = &input.instance_id {
        object.key("InstanceId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.participant_details {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ParticipantDetails").start_object();
        crate::protocol_serde::shape_participant_details::ser_participant_details(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.references {
        #[allow(unused_mut)]
        let mut object_14 = object.key("References").start_object();
        for (key_15, value_16) in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_17 = object_14.key(key_15.as_str()).start_object();
                crate::protocol_serde::shape_reference::ser_reference(&mut object_17, value_16)?;
                object_17.finish();
            }
        }
        object_14.finish();
    }
    if let Some(var_18) = &input.related_contact_id {
        object.key("RelatedContactId").string(var_18.as_str());
    }
    Ok(())
}
