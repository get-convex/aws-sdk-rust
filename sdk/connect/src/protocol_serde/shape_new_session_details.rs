// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_new_session_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::NewSessionDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.supported_messaging_content_types {
        let mut array_2 = object.key("SupportedMessagingContentTypes").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.participant_details {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ParticipantDetails").start_object();
        crate::protocol_serde::shape_participant_details::ser_participant_details(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Attributes").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.streaming_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("StreamingConfiguration").start_object();
        crate::protocol_serde::shape_chat_streaming_configuration::ser_chat_streaming_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
