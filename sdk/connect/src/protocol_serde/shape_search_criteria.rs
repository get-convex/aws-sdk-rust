// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_criteria(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SearchCriteria,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.agent_ids {
        let mut array_2 = object.key("AgentIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.agent_hierarchy_groups {
        #[allow(unused_mut)]
        let mut object_5 = object.key("AgentHierarchyGroups").start_object();
        crate::protocol_serde::shape_agent_hierarchy_groups::ser_agent_hierarchy_groups(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.channels {
        let mut array_7 = object.key("Channels").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.contact_analysis {
        #[allow(unused_mut)]
        let mut object_10 = object.key("ContactAnalysis").start_object();
        crate::protocol_serde::shape_contact_analysis::ser_contact_analysis(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.initiation_methods {
        let mut array_12 = object.key("InitiationMethods").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.queue_ids {
        let mut array_15 = object.key("QueueIds").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.searchable_contact_attributes {
        #[allow(unused_mut)]
        let mut object_18 = object.key("SearchableContactAttributes").start_object();
        crate::protocol_serde::shape_searchable_contact_attributes::ser_searchable_contact_attributes(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
