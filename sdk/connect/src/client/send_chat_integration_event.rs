// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SendChatIntegrationEvent`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_id(impl Into<String>)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::source_id) / [`set_source_id(Option<String>)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::set_source_id):<br>required: **true**<br><p>External identifier of chat customer participant, used in part to uniquely identify a chat. For SMS, this is the E164 phone number of the chat customer participant.</p><br>
    ///   - [`destination_id(impl Into<String>)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::destination_id) / [`set_destination_id(Option<String>)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::set_destination_id):<br>required: **true**<br><p>Chat system identifier, used in part to uniquely identify chat. This is associated with the Amazon Connect instance and flow to be used to start chats. For SMS, this is the phone number destination of inbound SMS messages represented by an Amazon Pinpoint phone number ARN.</p><br>
    ///   - [`subtype(impl Into<String>)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::subtype) / [`set_subtype(Option<String>)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::set_subtype):<br>required: **false**<br><p>Classification of a channel. This is used in part to uniquely identify chat.</p> <p>Valid value: <code>["connect:sms"]</code></p><br>
    ///   - [`event(ChatEvent)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::event) / [`set_event(Option<ChatEvent>)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::set_event):<br>required: **true**<br><p>Chat integration event payload</p><br>
    ///   - [`new_session_details(NewSessionDetails)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::new_session_details) / [`set_new_session_details(Option<NewSessionDetails>)`](crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::set_new_session_details):<br>required: **false**<br><p>Contact properties to apply when starting a new chat. If the integration event is handled with an existing chat, this is ignored.</p><br>
    /// - On success, responds with [`SendChatIntegrationEventOutput`](crate::operation::send_chat_integration_event::SendChatIntegrationEventOutput) with field(s):
    ///   - [`initial_contact_id(Option<String>)`](crate::operation::send_chat_integration_event::SendChatIntegrationEventOutput::initial_contact_id): <p>Identifier of chat contact used to handle integration event. This may be null if the integration event is not valid without an already existing chat contact.</p>
    ///   - [`new_chat_created(Option<bool>)`](crate::operation::send_chat_integration_event::SendChatIntegrationEventOutput::new_chat_created): <p>Whether handling the integration event resulted in creating a new chat or acting on existing chat.</p>
    /// - On failure, responds with [`SdkError<SendChatIntegrationEventError>`](crate::operation::send_chat_integration_event::SendChatIntegrationEventError)
    pub fn send_chat_integration_event(&self) -> crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder {
        crate::operation::send_chat_integration_event::builders::SendChatIntegrationEventFluentBuilder::new(self.handle.clone())
    }
}
