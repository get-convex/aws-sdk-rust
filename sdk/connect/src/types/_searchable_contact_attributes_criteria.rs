// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The search criteria based on user-defned contact attribute key and values to search on.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SearchableContactAttributesCriteria {
    /// <p>The key containing a searchable user-defined contact attribute.</p>
    pub key: ::std::string::String,
    /// <p>The list of values to search for within a user-defined contact attribute.</p>
    pub values: ::std::vec::Vec<::std::string::String>,
}
impl SearchableContactAttributesCriteria {
    /// <p>The key containing a searchable user-defined contact attribute.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The list of values to search for within a user-defined contact attribute.</p>
    pub fn values(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl ::std::fmt::Debug for SearchableContactAttributesCriteria {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchableContactAttributesCriteria");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("values", &self.values);
        formatter.finish()
    }
}
impl SearchableContactAttributesCriteria {
    /// Creates a new builder-style object to manufacture [`SearchableContactAttributesCriteria`](crate::types::SearchableContactAttributesCriteria).
    pub fn builder() -> crate::types::builders::SearchableContactAttributesCriteriaBuilder {
        crate::types::builders::SearchableContactAttributesCriteriaBuilder::default()
    }
}

/// A builder for [`SearchableContactAttributesCriteria`](crate::types::SearchableContactAttributesCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SearchableContactAttributesCriteriaBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SearchableContactAttributesCriteriaBuilder {
    /// <p>The key containing a searchable user-defined contact attribute.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key containing a searchable user-defined contact attribute.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key containing a searchable user-defined contact attribute.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The list of values to search for within a user-defined contact attribute.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of values to search for within a user-defined contact attribute.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The list of values to search for within a user-defined contact attribute.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`SearchableContactAttributesCriteria`](crate::types::SearchableContactAttributesCriteria).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::SearchableContactAttributesCriteriaBuilder::key)
    /// - [`values`](crate::types::builders::SearchableContactAttributesCriteriaBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchableContactAttributesCriteria, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchableContactAttributesCriteria {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building SearchableContactAttributesCriteria",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building SearchableContactAttributesCriteria",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for SearchableContactAttributesCriteriaBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchableContactAttributesCriteriaBuilder");
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("values", &self.values);
        formatter.finish()
    }
}
