// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An analyzed segment for a real-time analysis session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum RealtimeContactAnalysisSegment {
    /// <p>The analyzed attachments.</p>
    Attachments(crate::types::RealTimeContactAnalysisSegmentAttachments),
    /// <p>The matched category rules.</p>
    Categories(crate::types::RealTimeContactAnalysisSegmentCategories),
    /// <p>Segment type describing a contact event.</p>
    Event(crate::types::RealTimeContactAnalysisSegmentEvent),
    /// <p>Segment type containing a list of detected issues.</p>
    Issues(crate::types::RealTimeContactAnalysisSegmentIssues),
    /// <p>The analyzed transcript segment.</p>
    Transcript(crate::types::RealTimeContactAnalysisSegmentTranscript),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RealtimeContactAnalysisSegment {
    /// Tries to convert the enum instance into [`Attachments`](crate::types::RealtimeContactAnalysisSegment::Attachments), extracting the inner [`RealTimeContactAnalysisSegmentAttachments`](crate::types::RealTimeContactAnalysisSegmentAttachments).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_attachments(&self) -> ::std::result::Result<&crate::types::RealTimeContactAnalysisSegmentAttachments, &Self> {
        if let RealtimeContactAnalysisSegment::Attachments(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Attachments`](crate::types::RealtimeContactAnalysisSegment::Attachments).
    pub fn is_attachments(&self) -> bool {
        self.as_attachments().is_ok()
    }
    /// Tries to convert the enum instance into [`Categories`](crate::types::RealtimeContactAnalysisSegment::Categories), extracting the inner [`RealTimeContactAnalysisSegmentCategories`](crate::types::RealTimeContactAnalysisSegmentCategories).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_categories(&self) -> ::std::result::Result<&crate::types::RealTimeContactAnalysisSegmentCategories, &Self> {
        if let RealtimeContactAnalysisSegment::Categories(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Categories`](crate::types::RealtimeContactAnalysisSegment::Categories).
    pub fn is_categories(&self) -> bool {
        self.as_categories().is_ok()
    }
    /// Tries to convert the enum instance into [`Event`](crate::types::RealtimeContactAnalysisSegment::Event), extracting the inner [`RealTimeContactAnalysisSegmentEvent`](crate::types::RealTimeContactAnalysisSegmentEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_event(&self) -> ::std::result::Result<&crate::types::RealTimeContactAnalysisSegmentEvent, &Self> {
        if let RealtimeContactAnalysisSegment::Event(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Event`](crate::types::RealtimeContactAnalysisSegment::Event).
    pub fn is_event(&self) -> bool {
        self.as_event().is_ok()
    }
    /// Tries to convert the enum instance into [`Issues`](crate::types::RealtimeContactAnalysisSegment::Issues), extracting the inner [`RealTimeContactAnalysisSegmentIssues`](crate::types::RealTimeContactAnalysisSegmentIssues).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_issues(&self) -> ::std::result::Result<&crate::types::RealTimeContactAnalysisSegmentIssues, &Self> {
        if let RealtimeContactAnalysisSegment::Issues(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Issues`](crate::types::RealtimeContactAnalysisSegment::Issues).
    pub fn is_issues(&self) -> bool {
        self.as_issues().is_ok()
    }
    /// Tries to convert the enum instance into [`Transcript`](crate::types::RealtimeContactAnalysisSegment::Transcript), extracting the inner [`RealTimeContactAnalysisSegmentTranscript`](crate::types::RealTimeContactAnalysisSegmentTranscript).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_transcript(&self) -> ::std::result::Result<&crate::types::RealTimeContactAnalysisSegmentTranscript, &Self> {
        if let RealtimeContactAnalysisSegment::Transcript(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Transcript`](crate::types::RealtimeContactAnalysisSegment::Transcript).
    pub fn is_transcript(&self) -> bool {
        self.as_transcript().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
