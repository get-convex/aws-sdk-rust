// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The attendee information, including attendee ID and join token.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Attendee {
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub attendee_id: ::std::option::Option<::std::string::String>,
    /// <p>The join token used by the Amazon Chime SDK attendee.</p>
    pub join_token: ::std::option::Option<::std::string::String>,
}
impl Attendee {
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub fn attendee_id(&self) -> ::std::option::Option<&str> {
        self.attendee_id.as_deref()
    }
    /// <p>The join token used by the Amazon Chime SDK attendee.</p>
    pub fn join_token(&self) -> ::std::option::Option<&str> {
        self.join_token.as_deref()
    }
}
impl ::std::fmt::Debug for Attendee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Attendee");
        formatter.field("attendee_id", &self.attendee_id);
        formatter.field("join_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Attendee {
    /// Creates a new builder-style object to manufacture [`Attendee`](crate::types::Attendee).
    pub fn builder() -> crate::types::builders::AttendeeBuilder {
        crate::types::builders::AttendeeBuilder::default()
    }
}

/// A builder for [`Attendee`](crate::types::Attendee).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AttendeeBuilder {
    pub(crate) attendee_id: ::std::option::Option<::std::string::String>,
    pub(crate) join_token: ::std::option::Option<::std::string::String>,
}
impl AttendeeBuilder {
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub fn attendee_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attendee_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub fn set_attendee_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attendee_id = input;
        self
    }
    /// <p>The Amazon Chime SDK attendee ID.</p>
    pub fn get_attendee_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attendee_id
    }
    /// <p>The join token used by the Amazon Chime SDK attendee.</p>
    pub fn join_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.join_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The join token used by the Amazon Chime SDK attendee.</p>
    pub fn set_join_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.join_token = input;
        self
    }
    /// <p>The join token used by the Amazon Chime SDK attendee.</p>
    pub fn get_join_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.join_token
    }
    /// Consumes the builder and constructs a [`Attendee`](crate::types::Attendee).
    pub fn build(self) -> crate::types::Attendee {
        crate::types::Attendee {
            attendee_id: self.attendee_id,
            join_token: self.join_token,
        }
    }
}
impl ::std::fmt::Debug for AttendeeBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AttendeeBuilder");
        formatter.field("attendee_id", &self.attendee_id);
        formatter.field("join_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
