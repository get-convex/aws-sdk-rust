// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the allowed capabilities for participants present over the call.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParticipantCapabilities {
    /// <p>The configuration having the video sharing capabilities for participants over the call.</p>
    pub video: ::std::option::Option<crate::types::VideoCapability>,
}
impl ParticipantCapabilities {
    /// <p>The configuration having the video sharing capabilities for participants over the call.</p>
    pub fn video(&self) -> ::std::option::Option<&crate::types::VideoCapability> {
        self.video.as_ref()
    }
}
impl ParticipantCapabilities {
    /// Creates a new builder-style object to manufacture [`ParticipantCapabilities`](crate::types::ParticipantCapabilities).
    pub fn builder() -> crate::types::builders::ParticipantCapabilitiesBuilder {
        crate::types::builders::ParticipantCapabilitiesBuilder::default()
    }
}

/// A builder for [`ParticipantCapabilities`](crate::types::ParticipantCapabilities).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParticipantCapabilitiesBuilder {
    pub(crate) video: ::std::option::Option<crate::types::VideoCapability>,
}
impl ParticipantCapabilitiesBuilder {
    /// <p>The configuration having the video sharing capabilities for participants over the call.</p>
    pub fn video(mut self, input: crate::types::VideoCapability) -> Self {
        self.video = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration having the video sharing capabilities for participants over the call.</p>
    pub fn set_video(mut self, input: ::std::option::Option<crate::types::VideoCapability>) -> Self {
        self.video = input;
        self
    }
    /// <p>The configuration having the video sharing capabilities for participants over the call.</p>
    pub fn get_video(&self) -> &::std::option::Option<crate::types::VideoCapability> {
        &self.video
    }
    /// Consumes the builder and constructs a [`ParticipantCapabilities`](crate::types::ParticipantCapabilities).
    pub fn build(self) -> crate::types::ParticipantCapabilities {
        crate::types::ParticipantCapabilities { video: self.video }
    }
}
