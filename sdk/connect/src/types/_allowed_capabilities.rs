// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the capabilities enabled for participants of the contact.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AllowedCapabilities {
    /// <p>Information about the customer's video sharing capabilities.</p>
    pub customer: ::std::option::Option<crate::types::ParticipantCapabilities>,
    /// <p>Information about the agent's video sharing capabilities.</p>
    pub agent: ::std::option::Option<crate::types::ParticipantCapabilities>,
}
impl AllowedCapabilities {
    /// <p>Information about the customer's video sharing capabilities.</p>
    pub fn customer(&self) -> ::std::option::Option<&crate::types::ParticipantCapabilities> {
        self.customer.as_ref()
    }
    /// <p>Information about the agent's video sharing capabilities.</p>
    pub fn agent(&self) -> ::std::option::Option<&crate::types::ParticipantCapabilities> {
        self.agent.as_ref()
    }
}
impl AllowedCapabilities {
    /// Creates a new builder-style object to manufacture [`AllowedCapabilities`](crate::types::AllowedCapabilities).
    pub fn builder() -> crate::types::builders::AllowedCapabilitiesBuilder {
        crate::types::builders::AllowedCapabilitiesBuilder::default()
    }
}

/// A builder for [`AllowedCapabilities`](crate::types::AllowedCapabilities).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AllowedCapabilitiesBuilder {
    pub(crate) customer: ::std::option::Option<crate::types::ParticipantCapabilities>,
    pub(crate) agent: ::std::option::Option<crate::types::ParticipantCapabilities>,
}
impl AllowedCapabilitiesBuilder {
    /// <p>Information about the customer's video sharing capabilities.</p>
    pub fn customer(mut self, input: crate::types::ParticipantCapabilities) -> Self {
        self.customer = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the customer's video sharing capabilities.</p>
    pub fn set_customer(mut self, input: ::std::option::Option<crate::types::ParticipantCapabilities>) -> Self {
        self.customer = input;
        self
    }
    /// <p>Information about the customer's video sharing capabilities.</p>
    pub fn get_customer(&self) -> &::std::option::Option<crate::types::ParticipantCapabilities> {
        &self.customer
    }
    /// <p>Information about the agent's video sharing capabilities.</p>
    pub fn agent(mut self, input: crate::types::ParticipantCapabilities) -> Self {
        self.agent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the agent's video sharing capabilities.</p>
    pub fn set_agent(mut self, input: ::std::option::Option<crate::types::ParticipantCapabilities>) -> Self {
        self.agent = input;
        self
    }
    /// <p>Information about the agent's video sharing capabilities.</p>
    pub fn get_agent(&self) -> &::std::option::Option<crate::types::ParticipantCapabilities> {
        &self.agent
    }
    /// Consumes the builder and constructs a [`AllowedCapabilities`](crate::types::AllowedCapabilities).
    pub fn build(self) -> crate::types::AllowedCapabilities {
        crate::types::AllowedCapabilities {
            customer: self.customer,
            agent: self.agent,
        }
    }
}
