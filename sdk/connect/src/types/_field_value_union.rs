// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object to store union of Field values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FieldValueUnion {
    /// <p>A Boolean number value type.</p>
    pub boolean_value: bool,
    /// <p>a Double number value type.</p>
    pub double_value: ::std::option::Option<f64>,
    /// <p>An empty value.</p>
    pub empty_value: ::std::option::Option<crate::types::EmptyFieldValue>,
    /// <p>String value type.</p>
    pub string_value: ::std::option::Option<::std::string::String>,
}
impl FieldValueUnion {
    /// <p>A Boolean number value type.</p>
    pub fn boolean_value(&self) -> bool {
        self.boolean_value
    }
    /// <p>a Double number value type.</p>
    pub fn double_value(&self) -> ::std::option::Option<f64> {
        self.double_value
    }
    /// <p>An empty value.</p>
    pub fn empty_value(&self) -> ::std::option::Option<&crate::types::EmptyFieldValue> {
        self.empty_value.as_ref()
    }
    /// <p>String value type.</p>
    pub fn string_value(&self) -> ::std::option::Option<&str> {
        self.string_value.as_deref()
    }
}
impl FieldValueUnion {
    /// Creates a new builder-style object to manufacture [`FieldValueUnion`](crate::types::FieldValueUnion).
    pub fn builder() -> crate::types::builders::FieldValueUnionBuilder {
        crate::types::builders::FieldValueUnionBuilder::default()
    }
}

/// A builder for [`FieldValueUnion`](crate::types::FieldValueUnion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FieldValueUnionBuilder {
    pub(crate) boolean_value: ::std::option::Option<bool>,
    pub(crate) double_value: ::std::option::Option<f64>,
    pub(crate) empty_value: ::std::option::Option<crate::types::EmptyFieldValue>,
    pub(crate) string_value: ::std::option::Option<::std::string::String>,
}
impl FieldValueUnionBuilder {
    /// <p>A Boolean number value type.</p>
    pub fn boolean_value(mut self, input: bool) -> Self {
        self.boolean_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean number value type.</p>
    pub fn set_boolean_value(mut self, input: ::std::option::Option<bool>) -> Self {
        self.boolean_value = input;
        self
    }
    /// <p>A Boolean number value type.</p>
    pub fn get_boolean_value(&self) -> &::std::option::Option<bool> {
        &self.boolean_value
    }
    /// <p>a Double number value type.</p>
    pub fn double_value(mut self, input: f64) -> Self {
        self.double_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>a Double number value type.</p>
    pub fn set_double_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.double_value = input;
        self
    }
    /// <p>a Double number value type.</p>
    pub fn get_double_value(&self) -> &::std::option::Option<f64> {
        &self.double_value
    }
    /// <p>An empty value.</p>
    pub fn empty_value(mut self, input: crate::types::EmptyFieldValue) -> Self {
        self.empty_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>An empty value.</p>
    pub fn set_empty_value(mut self, input: ::std::option::Option<crate::types::EmptyFieldValue>) -> Self {
        self.empty_value = input;
        self
    }
    /// <p>An empty value.</p>
    pub fn get_empty_value(&self) -> &::std::option::Option<crate::types::EmptyFieldValue> {
        &self.empty_value
    }
    /// <p>String value type.</p>
    pub fn string_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.string_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>String value type.</p>
    pub fn set_string_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.string_value = input;
        self
    }
    /// <p>String value type.</p>
    pub fn get_string_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.string_value
    }
    /// Consumes the builder and constructs a [`FieldValueUnion`](crate::types::FieldValueUnion).
    pub fn build(self) -> crate::types::FieldValueUnion {
        crate::types::FieldValueUnion {
            boolean_value: self.boolean_value.unwrap_or_default(),
            double_value: self.double_value,
            empty_value: self.empty_value,
            string_value: self.string_value,
        }
    }
}
