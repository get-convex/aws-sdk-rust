// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The section of the contact transcript segment that category rule was detected.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RealTimeContactAnalysisPointOfInterest {
    /// <p>List of the transcript items (segments) that are associated with a given point of interest.</p>
    pub transcript_items: ::std::option::Option<::std::vec::Vec<crate::types::RealTimeContactAnalysisTranscriptItemWithCharacterOffsets>>,
}
impl RealTimeContactAnalysisPointOfInterest {
    /// <p>List of the transcript items (segments) that are associated with a given point of interest.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.transcript_items.is_none()`.
    pub fn transcript_items(&self) -> &[crate::types::RealTimeContactAnalysisTranscriptItemWithCharacterOffsets] {
        self.transcript_items.as_deref().unwrap_or_default()
    }
}
impl RealTimeContactAnalysisPointOfInterest {
    /// Creates a new builder-style object to manufacture [`RealTimeContactAnalysisPointOfInterest`](crate::types::RealTimeContactAnalysisPointOfInterest).
    pub fn builder() -> crate::types::builders::RealTimeContactAnalysisPointOfInterestBuilder {
        crate::types::builders::RealTimeContactAnalysisPointOfInterestBuilder::default()
    }
}

/// A builder for [`RealTimeContactAnalysisPointOfInterest`](crate::types::RealTimeContactAnalysisPointOfInterest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RealTimeContactAnalysisPointOfInterestBuilder {
    pub(crate) transcript_items: ::std::option::Option<::std::vec::Vec<crate::types::RealTimeContactAnalysisTranscriptItemWithCharacterOffsets>>,
}
impl RealTimeContactAnalysisPointOfInterestBuilder {
    /// Appends an item to `transcript_items`.
    ///
    /// To override the contents of this collection use [`set_transcript_items`](Self::set_transcript_items).
    ///
    /// <p>List of the transcript items (segments) that are associated with a given point of interest.</p>
    pub fn transcript_items(mut self, input: crate::types::RealTimeContactAnalysisTranscriptItemWithCharacterOffsets) -> Self {
        let mut v = self.transcript_items.unwrap_or_default();
        v.push(input);
        self.transcript_items = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of the transcript items (segments) that are associated with a given point of interest.</p>
    pub fn set_transcript_items(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RealTimeContactAnalysisTranscriptItemWithCharacterOffsets>>,
    ) -> Self {
        self.transcript_items = input;
        self
    }
    /// <p>List of the transcript items (segments) that are associated with a given point of interest.</p>
    pub fn get_transcript_items(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::RealTimeContactAnalysisTranscriptItemWithCharacterOffsets>> {
        &self.transcript_items
    }
    /// Consumes the builder and constructs a [`RealTimeContactAnalysisPointOfInterest`](crate::types::RealTimeContactAnalysisPointOfInterest).
    pub fn build(self) -> crate::types::RealTimeContactAnalysisPointOfInterest {
        crate::types::RealTimeContactAnalysisPointOfInterest {
            transcript_items: self.transcript_items,
        }
    }
}
