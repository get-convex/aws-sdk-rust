// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The analyzed transcript segment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RealTimeContactAnalysisSegmentTranscript {
    /// <p>The identifier of the transcript.</p>
    pub id: ::std::string::String,
    /// <p>The identifier of the participant.</p>
    pub participant_id: ::std::string::String,
    /// <p>The role of the participant. For example, is it a customer, agent, or system.</p>
    pub participant_role: crate::types::ParticipantRole,
    /// <p>The display name of the participant.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The content of the transcript. Can be redacted.</p>
    pub content: ::std::string::String,
    /// <p>The type of content of the item. For example, <code>text/plain</code>.</p>
    pub content_type: ::std::option::Option<::std::string::String>,
    /// <p>Field describing the time of the event. It can have different representations of time.</p>
    pub time: ::std::option::Option<crate::types::RealTimeContactAnalysisTimeData>,
    /// <p>Object describing redaction that was applied to the transcript. If transcript has the field it means part of the transcript was redacted.</p>
    pub redaction: ::std::option::Option<crate::types::RealTimeContactAnalysisTranscriptItemRedaction>,
    /// <p>The sentiment detected for this piece of transcript.</p>
    pub sentiment: ::std::option::Option<crate::types::RealTimeContactAnalysisSentimentLabel>,
}
impl RealTimeContactAnalysisSegmentTranscript {
    /// <p>The identifier of the transcript.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The identifier of the participant.</p>
    pub fn participant_id(&self) -> &str {
        use std::ops::Deref;
        self.participant_id.deref()
    }
    /// <p>The role of the participant. For example, is it a customer, agent, or system.</p>
    pub fn participant_role(&self) -> &crate::types::ParticipantRole {
        &self.participant_role
    }
    /// <p>The display name of the participant.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The content of the transcript. Can be redacted.</p>
    pub fn content(&self) -> &str {
        use std::ops::Deref;
        self.content.deref()
    }
    /// <p>The type of content of the item. For example, <code>text/plain</code>.</p>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>Field describing the time of the event. It can have different representations of time.</p>
    pub fn time(&self) -> ::std::option::Option<&crate::types::RealTimeContactAnalysisTimeData> {
        self.time.as_ref()
    }
    /// <p>Object describing redaction that was applied to the transcript. If transcript has the field it means part of the transcript was redacted.</p>
    pub fn redaction(&self) -> ::std::option::Option<&crate::types::RealTimeContactAnalysisTranscriptItemRedaction> {
        self.redaction.as_ref()
    }
    /// <p>The sentiment detected for this piece of transcript.</p>
    pub fn sentiment(&self) -> ::std::option::Option<&crate::types::RealTimeContactAnalysisSentimentLabel> {
        self.sentiment.as_ref()
    }
}
impl RealTimeContactAnalysisSegmentTranscript {
    /// Creates a new builder-style object to manufacture [`RealTimeContactAnalysisSegmentTranscript`](crate::types::RealTimeContactAnalysisSegmentTranscript).
    pub fn builder() -> crate::types::builders::RealTimeContactAnalysisSegmentTranscriptBuilder {
        crate::types::builders::RealTimeContactAnalysisSegmentTranscriptBuilder::default()
    }
}

/// A builder for [`RealTimeContactAnalysisSegmentTranscript`](crate::types::RealTimeContactAnalysisSegmentTranscript).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RealTimeContactAnalysisSegmentTranscriptBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) participant_role: ::std::option::Option<crate::types::ParticipantRole>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) time: ::std::option::Option<crate::types::RealTimeContactAnalysisTimeData>,
    pub(crate) redaction: ::std::option::Option<crate::types::RealTimeContactAnalysisTranscriptItemRedaction>,
    pub(crate) sentiment: ::std::option::Option<crate::types::RealTimeContactAnalysisSentimentLabel>,
}
impl RealTimeContactAnalysisSegmentTranscriptBuilder {
    /// <p>The identifier of the transcript.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the transcript.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the transcript.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The identifier of the participant.</p>
    /// This field is required.
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the participant.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>The identifier of the participant.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>The role of the participant. For example, is it a customer, agent, or system.</p>
    /// This field is required.
    pub fn participant_role(mut self, input: crate::types::ParticipantRole) -> Self {
        self.participant_role = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role of the participant. For example, is it a customer, agent, or system.</p>
    pub fn set_participant_role(mut self, input: ::std::option::Option<crate::types::ParticipantRole>) -> Self {
        self.participant_role = input;
        self
    }
    /// <p>The role of the participant. For example, is it a customer, agent, or system.</p>
    pub fn get_participant_role(&self) -> &::std::option::Option<crate::types::ParticipantRole> {
        &self.participant_role
    }
    /// <p>The display name of the participant.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the participant.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the participant.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The content of the transcript. Can be redacted.</p>
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of the transcript. Can be redacted.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the transcript. Can be redacted.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>The type of content of the item. For example, <code>text/plain</code>.</p>
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of content of the item. For example, <code>text/plain</code>.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The type of content of the item. For example, <code>text/plain</code>.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>Field describing the time of the event. It can have different representations of time.</p>
    /// This field is required.
    pub fn time(mut self, input: crate::types::RealTimeContactAnalysisTimeData) -> Self {
        self.time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Field describing the time of the event. It can have different representations of time.</p>
    pub fn set_time(mut self, input: ::std::option::Option<crate::types::RealTimeContactAnalysisTimeData>) -> Self {
        self.time = input;
        self
    }
    /// <p>Field describing the time of the event. It can have different representations of time.</p>
    pub fn get_time(&self) -> &::std::option::Option<crate::types::RealTimeContactAnalysisTimeData> {
        &self.time
    }
    /// <p>Object describing redaction that was applied to the transcript. If transcript has the field it means part of the transcript was redacted.</p>
    pub fn redaction(mut self, input: crate::types::RealTimeContactAnalysisTranscriptItemRedaction) -> Self {
        self.redaction = ::std::option::Option::Some(input);
        self
    }
    /// <p>Object describing redaction that was applied to the transcript. If transcript has the field it means part of the transcript was redacted.</p>
    pub fn set_redaction(mut self, input: ::std::option::Option<crate::types::RealTimeContactAnalysisTranscriptItemRedaction>) -> Self {
        self.redaction = input;
        self
    }
    /// <p>Object describing redaction that was applied to the transcript. If transcript has the field it means part of the transcript was redacted.</p>
    pub fn get_redaction(&self) -> &::std::option::Option<crate::types::RealTimeContactAnalysisTranscriptItemRedaction> {
        &self.redaction
    }
    /// <p>The sentiment detected for this piece of transcript.</p>
    pub fn sentiment(mut self, input: crate::types::RealTimeContactAnalysisSentimentLabel) -> Self {
        self.sentiment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sentiment detected for this piece of transcript.</p>
    pub fn set_sentiment(mut self, input: ::std::option::Option<crate::types::RealTimeContactAnalysisSentimentLabel>) -> Self {
        self.sentiment = input;
        self
    }
    /// <p>The sentiment detected for this piece of transcript.</p>
    pub fn get_sentiment(&self) -> &::std::option::Option<crate::types::RealTimeContactAnalysisSentimentLabel> {
        &self.sentiment
    }
    /// Consumes the builder and constructs a [`RealTimeContactAnalysisSegmentTranscript`](crate::types::RealTimeContactAnalysisSegmentTranscript).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::RealTimeContactAnalysisSegmentTranscriptBuilder::id)
    /// - [`participant_id`](crate::types::builders::RealTimeContactAnalysisSegmentTranscriptBuilder::participant_id)
    /// - [`participant_role`](crate::types::builders::RealTimeContactAnalysisSegmentTranscriptBuilder::participant_role)
    /// - [`content`](crate::types::builders::RealTimeContactAnalysisSegmentTranscriptBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::RealTimeContactAnalysisSegmentTranscript, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RealTimeContactAnalysisSegmentTranscript {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building RealTimeContactAnalysisSegmentTranscript",
                )
            })?,
            participant_id: self.participant_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "participant_id",
                    "participant_id was not specified but it is required when building RealTimeContactAnalysisSegmentTranscript",
                )
            })?,
            participant_role: self.participant_role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "participant_role",
                    "participant_role was not specified but it is required when building RealTimeContactAnalysisSegmentTranscript",
                )
            })?,
            display_name: self.display_name,
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building RealTimeContactAnalysisSegmentTranscript",
                )
            })?,
            content_type: self.content_type,
            time: self.time,
            redaction: self.redaction,
            sentiment: self.sentiment,
        })
    }
}
