// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The search criteria to be used to return predefined attributes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredefinedAttributeSearchCriteria {
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub or_conditions: ::std::option::Option<::std::vec::Vec<crate::types::PredefinedAttributeSearchCriteria>>,
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub and_conditions: ::std::option::Option<::std::vec::Vec<crate::types::PredefinedAttributeSearchCriteria>>,
    /// <p>A leaf node condition which can be used to specify a string condition.</p><note>
    /// <p>The currently supported values for <code>FieldName</code> are <code>name</code> and <code>description</code>.</p>
    /// </note>
    pub string_condition: ::std::option::Option<crate::types::StringCondition>,
}
impl PredefinedAttributeSearchCriteria {
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.or_conditions.is_none()`.
    pub fn or_conditions(&self) -> &[crate::types::PredefinedAttributeSearchCriteria] {
        self.or_conditions.as_deref().unwrap_or_default()
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.and_conditions.is_none()`.
    pub fn and_conditions(&self) -> &[crate::types::PredefinedAttributeSearchCriteria] {
        self.and_conditions.as_deref().unwrap_or_default()
    }
    /// <p>A leaf node condition which can be used to specify a string condition.</p><note>
    /// <p>The currently supported values for <code>FieldName</code> are <code>name</code> and <code>description</code>.</p>
    /// </note>
    pub fn string_condition(&self) -> ::std::option::Option<&crate::types::StringCondition> {
        self.string_condition.as_ref()
    }
}
impl PredefinedAttributeSearchCriteria {
    /// Creates a new builder-style object to manufacture [`PredefinedAttributeSearchCriteria`](crate::types::PredefinedAttributeSearchCriteria).
    pub fn builder() -> crate::types::builders::PredefinedAttributeSearchCriteriaBuilder {
        crate::types::builders::PredefinedAttributeSearchCriteriaBuilder::default()
    }
}

/// A builder for [`PredefinedAttributeSearchCriteria`](crate::types::PredefinedAttributeSearchCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PredefinedAttributeSearchCriteriaBuilder {
    pub(crate) or_conditions: ::std::option::Option<::std::vec::Vec<crate::types::PredefinedAttributeSearchCriteria>>,
    pub(crate) and_conditions: ::std::option::Option<::std::vec::Vec<crate::types::PredefinedAttributeSearchCriteria>>,
    pub(crate) string_condition: ::std::option::Option<crate::types::StringCondition>,
}
impl PredefinedAttributeSearchCriteriaBuilder {
    /// Appends an item to `or_conditions`.
    ///
    /// To override the contents of this collection use [`set_or_conditions`](Self::set_or_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn or_conditions(mut self, input: crate::types::PredefinedAttributeSearchCriteria) -> Self {
        let mut v = self.or_conditions.unwrap_or_default();
        v.push(input);
        self.or_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn set_or_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PredefinedAttributeSearchCriteria>>) -> Self {
        self.or_conditions = input;
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn get_or_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PredefinedAttributeSearchCriteria>> {
        &self.or_conditions
    }
    /// Appends an item to `and_conditions`.
    ///
    /// To override the contents of this collection use [`set_and_conditions`](Self::set_and_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn and_conditions(mut self, input: crate::types::PredefinedAttributeSearchCriteria) -> Self {
        let mut v = self.and_conditions.unwrap_or_default();
        v.push(input);
        self.and_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn set_and_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PredefinedAttributeSearchCriteria>>) -> Self {
        self.and_conditions = input;
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn get_and_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PredefinedAttributeSearchCriteria>> {
        &self.and_conditions
    }
    /// <p>A leaf node condition which can be used to specify a string condition.</p><note>
    /// <p>The currently supported values for <code>FieldName</code> are <code>name</code> and <code>description</code>.</p>
    /// </note>
    pub fn string_condition(mut self, input: crate::types::StringCondition) -> Self {
        self.string_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A leaf node condition which can be used to specify a string condition.</p><note>
    /// <p>The currently supported values for <code>FieldName</code> are <code>name</code> and <code>description</code>.</p>
    /// </note>
    pub fn set_string_condition(mut self, input: ::std::option::Option<crate::types::StringCondition>) -> Self {
        self.string_condition = input;
        self
    }
    /// <p>A leaf node condition which can be used to specify a string condition.</p><note>
    /// <p>The currently supported values for <code>FieldName</code> are <code>name</code> and <code>description</code>.</p>
    /// </note>
    pub fn get_string_condition(&self) -> &::std::option::Option<crate::types::StringCondition> {
        &self.string_condition
    }
    /// Consumes the builder and constructs a [`PredefinedAttributeSearchCriteria`](crate::types::PredefinedAttributeSearchCriteria).
    pub fn build(self) -> crate::types::PredefinedAttributeSearchCriteria {
        crate::types::PredefinedAttributeSearchCriteria {
            or_conditions: self.or_conditions,
            and_conditions: self.and_conditions,
            string_condition: self.string_condition,
        }
    }
}
