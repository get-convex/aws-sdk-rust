// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about proficiency of a user.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserProficiency {
    /// <p>The name of user's proficiency. You must use name of predefined attribute present in the Amazon Connect instance.</p>
    pub attribute_name: ::std::string::String,
    /// <p>The value of user's proficiency. You must use value of predefined attribute present in the Amazon Connect instance.</p>
    pub attribute_value: ::std::string::String,
    /// <p>The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.</p>
    pub level: f32,
}
impl UserProficiency {
    /// <p>The name of user's proficiency. You must use name of predefined attribute present in the Amazon Connect instance.</p>
    pub fn attribute_name(&self) -> &str {
        use std::ops::Deref;
        self.attribute_name.deref()
    }
    /// <p>The value of user's proficiency. You must use value of predefined attribute present in the Amazon Connect instance.</p>
    pub fn attribute_value(&self) -> &str {
        use std::ops::Deref;
        self.attribute_value.deref()
    }
    /// <p>The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.</p>
    pub fn level(&self) -> f32 {
        self.level
    }
}
impl UserProficiency {
    /// Creates a new builder-style object to manufacture [`UserProficiency`](crate::types::UserProficiency).
    pub fn builder() -> crate::types::builders::UserProficiencyBuilder {
        crate::types::builders::UserProficiencyBuilder::default()
    }
}

/// A builder for [`UserProficiency`](crate::types::UserProficiency).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserProficiencyBuilder {
    pub(crate) attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_value: ::std::option::Option<::std::string::String>,
    pub(crate) level: ::std::option::Option<f32>,
}
impl UserProficiencyBuilder {
    /// <p>The name of user's proficiency. You must use name of predefined attribute present in the Amazon Connect instance.</p>
    /// This field is required.
    pub fn attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of user's proficiency. You must use name of predefined attribute present in the Amazon Connect instance.</p>
    pub fn set_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The name of user's proficiency. You must use name of predefined attribute present in the Amazon Connect instance.</p>
    pub fn get_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_name
    }
    /// <p>The value of user's proficiency. You must use value of predefined attribute present in the Amazon Connect instance.</p>
    /// This field is required.
    pub fn attribute_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of user's proficiency. You must use value of predefined attribute present in the Amazon Connect instance.</p>
    pub fn set_attribute_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_value = input;
        self
    }
    /// <p>The value of user's proficiency. You must use value of predefined attribute present in the Amazon Connect instance.</p>
    pub fn get_attribute_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_value
    }
    /// <p>The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.</p>
    /// This field is required.
    pub fn level(mut self, input: f32) -> Self {
        self.level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.</p>
    pub fn set_level(mut self, input: ::std::option::Option<f32>) -> Self {
        self.level = input;
        self
    }
    /// <p>The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.</p>
    pub fn get_level(&self) -> &::std::option::Option<f32> {
        &self.level
    }
    /// Consumes the builder and constructs a [`UserProficiency`](crate::types::UserProficiency).
    /// This method will fail if any of the following fields are not set:
    /// - [`attribute_name`](crate::types::builders::UserProficiencyBuilder::attribute_name)
    /// - [`attribute_value`](crate::types::builders::UserProficiencyBuilder::attribute_value)
    pub fn build(self) -> ::std::result::Result<crate::types::UserProficiency, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserProficiency {
            attribute_name: self.attribute_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_name",
                    "attribute_name was not specified but it is required when building UserProficiency",
                )
            })?,
            attribute_value: self.attribute_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_value",
                    "attribute_value was not specified but it is required when building UserProficiency",
                )
            })?,
            level: self.level.unwrap_or(1_f32),
        })
    }
}
