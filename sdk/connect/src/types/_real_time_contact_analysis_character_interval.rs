// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Begin and end offsets for a part of text.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RealTimeContactAnalysisCharacterInterval {
    /// <p>The beginning of the character interval.</p>
    pub begin_offset_char: i32,
    /// <p>The end of the character interval.</p>
    pub end_offset_char: i32,
}
impl RealTimeContactAnalysisCharacterInterval {
    /// <p>The beginning of the character interval.</p>
    pub fn begin_offset_char(&self) -> i32 {
        self.begin_offset_char
    }
    /// <p>The end of the character interval.</p>
    pub fn end_offset_char(&self) -> i32 {
        self.end_offset_char
    }
}
impl RealTimeContactAnalysisCharacterInterval {
    /// Creates a new builder-style object to manufacture [`RealTimeContactAnalysisCharacterInterval`](crate::types::RealTimeContactAnalysisCharacterInterval).
    pub fn builder() -> crate::types::builders::RealTimeContactAnalysisCharacterIntervalBuilder {
        crate::types::builders::RealTimeContactAnalysisCharacterIntervalBuilder::default()
    }
}

/// A builder for [`RealTimeContactAnalysisCharacterInterval`](crate::types::RealTimeContactAnalysisCharacterInterval).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RealTimeContactAnalysisCharacterIntervalBuilder {
    pub(crate) begin_offset_char: ::std::option::Option<i32>,
    pub(crate) end_offset_char: ::std::option::Option<i32>,
}
impl RealTimeContactAnalysisCharacterIntervalBuilder {
    /// <p>The beginning of the character interval.</p>
    /// This field is required.
    pub fn begin_offset_char(mut self, input: i32) -> Self {
        self.begin_offset_char = ::std::option::Option::Some(input);
        self
    }
    /// <p>The beginning of the character interval.</p>
    pub fn set_begin_offset_char(mut self, input: ::std::option::Option<i32>) -> Self {
        self.begin_offset_char = input;
        self
    }
    /// <p>The beginning of the character interval.</p>
    pub fn get_begin_offset_char(&self) -> &::std::option::Option<i32> {
        &self.begin_offset_char
    }
    /// <p>The end of the character interval.</p>
    /// This field is required.
    pub fn end_offset_char(mut self, input: i32) -> Self {
        self.end_offset_char = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end of the character interval.</p>
    pub fn set_end_offset_char(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_offset_char = input;
        self
    }
    /// <p>The end of the character interval.</p>
    pub fn get_end_offset_char(&self) -> &::std::option::Option<i32> {
        &self.end_offset_char
    }
    /// Consumes the builder and constructs a [`RealTimeContactAnalysisCharacterInterval`](crate::types::RealTimeContactAnalysisCharacterInterval).
    pub fn build(self) -> crate::types::RealTimeContactAnalysisCharacterInterval {
        crate::types::RealTimeContactAnalysisCharacterInterval {
            begin_offset_char: self.begin_offset_char.unwrap_or_default(),
            end_offset_char: self.end_offset_char.unwrap_or_default(),
        }
    }
}
