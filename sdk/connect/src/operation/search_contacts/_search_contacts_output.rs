// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchContactsOutput {
    /// <p>Information about the contacts.</p>
    pub contacts: ::std::vec::Vec<crate::types::ContactSearchSummary>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The total number of contacts which matched your search query.</p>
    pub total_count: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl SearchContactsOutput {
    /// <p>Information about the contacts.</p>
    pub fn contacts(&self) -> &[crate::types::ContactSearchSummary] {
        use std::ops::Deref;
        self.contacts.deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The total number of contacts which matched your search query.</p>
    pub fn total_count(&self) -> ::std::option::Option<i64> {
        self.total_count
    }
}
impl ::aws_types::request_id::RequestId for SearchContactsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchContactsOutput {
    /// Creates a new builder-style object to manufacture [`SearchContactsOutput`](crate::operation::search_contacts::SearchContactsOutput).
    pub fn builder() -> crate::operation::search_contacts::builders::SearchContactsOutputBuilder {
        crate::operation::search_contacts::builders::SearchContactsOutputBuilder::default()
    }
}

/// A builder for [`SearchContactsOutput`](crate::operation::search_contacts::SearchContactsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchContactsOutputBuilder {
    pub(crate) contacts: ::std::option::Option<::std::vec::Vec<crate::types::ContactSearchSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) total_count: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl SearchContactsOutputBuilder {
    /// Appends an item to `contacts`.
    ///
    /// To override the contents of this collection use [`set_contacts`](Self::set_contacts).
    ///
    /// <p>Information about the contacts.</p>
    pub fn contacts(mut self, input: crate::types::ContactSearchSummary) -> Self {
        let mut v = self.contacts.unwrap_or_default();
        v.push(input);
        self.contacts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the contacts.</p>
    pub fn set_contacts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactSearchSummary>>) -> Self {
        self.contacts = input;
        self
    }
    /// <p>Information about the contacts.</p>
    pub fn get_contacts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactSearchSummary>> {
        &self.contacts
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The total number of contacts which matched your search query.</p>
    pub fn total_count(mut self, input: i64) -> Self {
        self.total_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of contacts which matched your search query.</p>
    pub fn set_total_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_count = input;
        self
    }
    /// <p>The total number of contacts which matched your search query.</p>
    pub fn get_total_count(&self) -> &::std::option::Option<i64> {
        &self.total_count
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchContactsOutput`](crate::operation::search_contacts::SearchContactsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`contacts`](crate::operation::search_contacts::builders::SearchContactsOutputBuilder::contacts)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::search_contacts::SearchContactsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::search_contacts::SearchContactsOutput {
            contacts: self.contacts.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "contacts",
                    "contacts was not specified but it is required when building SearchContactsOutput",
                )
            })?,
            next_token: self.next_token,
            total_count: self.total_count,
            _request_id: self._request_id,
        })
    }
}
