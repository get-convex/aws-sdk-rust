// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListUserProficienciesOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Information about the user proficiencies.</p>
    pub user_proficiency_list: ::std::option::Option<::std::vec::Vec<crate::types::UserProficiency>>,
    /// <p>The last time that the user's proficiencies are were modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The region in which a user's proficiencies were last modified.</p>
    pub last_modified_region: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListUserProficienciesOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the user proficiencies.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_proficiency_list.is_none()`.
    pub fn user_proficiency_list(&self) -> &[crate::types::UserProficiency] {
        self.user_proficiency_list.as_deref().unwrap_or_default()
    }
    /// <p>The last time that the user's proficiencies are were modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The region in which a user's proficiencies were last modified.</p>
    pub fn last_modified_region(&self) -> ::std::option::Option<&str> {
        self.last_modified_region.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListUserProficienciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListUserProficienciesOutput {
    /// Creates a new builder-style object to manufacture [`ListUserProficienciesOutput`](crate::operation::list_user_proficiencies::ListUserProficienciesOutput).
    pub fn builder() -> crate::operation::list_user_proficiencies::builders::ListUserProficienciesOutputBuilder {
        crate::operation::list_user_proficiencies::builders::ListUserProficienciesOutputBuilder::default()
    }
}

/// A builder for [`ListUserProficienciesOutput`](crate::operation::list_user_proficiencies::ListUserProficienciesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListUserProficienciesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) user_proficiency_list: ::std::option::Option<::std::vec::Vec<crate::types::UserProficiency>>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_region: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListUserProficienciesOutputBuilder {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `user_proficiency_list`.
    ///
    /// To override the contents of this collection use [`set_user_proficiency_list`](Self::set_user_proficiency_list).
    ///
    /// <p>Information about the user proficiencies.</p>
    pub fn user_proficiency_list(mut self, input: crate::types::UserProficiency) -> Self {
        let mut v = self.user_proficiency_list.unwrap_or_default();
        v.push(input);
        self.user_proficiency_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the user proficiencies.</p>
    pub fn set_user_proficiency_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserProficiency>>) -> Self {
        self.user_proficiency_list = input;
        self
    }
    /// <p>Information about the user proficiencies.</p>
    pub fn get_user_proficiency_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserProficiency>> {
        &self.user_proficiency_list
    }
    /// <p>The last time that the user's proficiencies are were modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the user's proficiencies are were modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The last time that the user's proficiencies are were modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The region in which a user's proficiencies were last modified.</p>
    pub fn last_modified_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The region in which a user's proficiencies were last modified.</p>
    pub fn set_last_modified_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_region = input;
        self
    }
    /// <p>The region in which a user's proficiencies were last modified.</p>
    pub fn get_last_modified_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_region
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListUserProficienciesOutput`](crate::operation::list_user_proficiencies::ListUserProficienciesOutput).
    pub fn build(self) -> crate::operation::list_user_proficiencies::ListUserProficienciesOutput {
        crate::operation::list_user_proficiencies::ListUserProficienciesOutput {
            next_token: self.next_token,
            user_proficiency_list: self.user_proficiency_list,
            last_modified_time: self.last_modified_time,
            last_modified_region: self.last_modified_region,
            _request_id: self._request_id,
        }
    }
}
