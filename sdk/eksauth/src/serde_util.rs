// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn assume_role_for_pod_identity_output_output_correct_errors(
    mut builder: crate::operation::assume_role_for_pod_identity::builders::AssumeRoleForPodIdentityOutputBuilder,
) -> crate::operation::assume_role_for_pod_identity::builders::AssumeRoleForPodIdentityOutputBuilder {
    if builder.subject.is_none() {
        builder.subject = {
            let builder = crate::types::builders::SubjectBuilder::default();
            crate::serde_util::subject_correct_errors(builder).build().ok()
        }
    }
    if builder.audience.is_none() {
        builder.audience = Some(Default::default())
    }
    if builder.pod_identity_association.is_none() {
        builder.pod_identity_association = {
            let builder = crate::types::builders::PodIdentityAssociationBuilder::default();
            crate::serde_util::pod_identity_association_correct_errors(builder).build().ok()
        }
    }
    if builder.assumed_role_user.is_none() {
        builder.assumed_role_user = {
            let builder = crate::types::builders::AssumedRoleUserBuilder::default();
            crate::serde_util::assumed_role_user_correct_errors(builder).build().ok()
        }
    }
    if builder.credentials.is_none() {
        builder.credentials = {
            let builder = crate::types::builders::CredentialsBuilder::default();
            crate::serde_util::credentials_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn subject_correct_errors(mut builder: crate::types::builders::SubjectBuilder) -> crate::types::builders::SubjectBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.service_account.is_none() {
        builder.service_account = Some(Default::default())
    }
    builder
}

pub(crate) fn pod_identity_association_correct_errors(
    mut builder: crate::types::builders::PodIdentityAssociationBuilder,
) -> crate::types::builders::PodIdentityAssociationBuilder {
    if builder.association_arn.is_none() {
        builder.association_arn = Some(Default::default())
    }
    if builder.association_id.is_none() {
        builder.association_id = Some(Default::default())
    }
    builder
}

pub(crate) fn assumed_role_user_correct_errors(
    mut builder: crate::types::builders::AssumedRoleUserBuilder,
) -> crate::types::builders::AssumedRoleUserBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.assume_role_id.is_none() {
        builder.assume_role_id = Some(Default::default())
    }
    builder
}

pub(crate) fn credentials_correct_errors(mut builder: crate::types::builders::CredentialsBuilder) -> crate::types::builders::CredentialsBuilder {
    if builder.session_token.is_none() {
        builder.session_token = Some(Default::default())
    }
    if builder.secret_access_key.is_none() {
        builder.secret_access_key = Some(Default::default())
    }
    if builder.access_key_id.is_none() {
        builder.access_key_id = Some(Default::default())
    }
    if builder.expiration.is_none() {
        builder.expiration = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}
