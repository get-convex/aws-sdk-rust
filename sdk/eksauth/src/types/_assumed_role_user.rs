// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object with the permanent IAM role identity and the temporary session name.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssumedRoleUser {
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    pub arn: ::std::string::String,
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    pub assume_role_id: ::std::string::String,
}
impl AssumedRoleUser {
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    pub fn assume_role_id(&self) -> &str {
        use std::ops::Deref;
        self.assume_role_id.deref()
    }
}
impl AssumedRoleUser {
    /// Creates a new builder-style object to manufacture [`AssumedRoleUser`](crate::types::AssumedRoleUser).
    pub fn builder() -> crate::types::builders::AssumedRoleUserBuilder {
        crate::types::builders::AssumedRoleUserBuilder::default()
    }
}

/// A builder for [`AssumedRoleUser`](crate::types::AssumedRoleUser).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssumedRoleUserBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) assume_role_id: ::std::option::Option<::std::string::String>,
}
impl AssumedRoleUserBuilder {
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    /// This field is required.
    pub fn assume_role_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assume_role_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    pub fn set_assume_role_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assume_role_id = input;
        self
    }
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    pub fn get_assume_role_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assume_role_id
    }
    /// Consumes the builder and constructs a [`AssumedRoleUser`](crate::types::AssumedRoleUser).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::AssumedRoleUserBuilder::arn)
    /// - [`assume_role_id`](crate::types::builders::AssumedRoleUserBuilder::assume_role_id)
    pub fn build(self) -> ::std::result::Result<crate::types::AssumedRoleUser, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssumedRoleUser {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building AssumedRoleUser",
                )
            })?,
            assume_role_id: self.assume_role_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "assume_role_id",
                    "assume_role_id was not specified but it is required when building AssumedRoleUser",
                )
            })?,
        })
    }
}
