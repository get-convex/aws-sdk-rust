// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AssumeRoleForPodIdentityOutput {
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub subject: ::std::option::Option<crate::types::Subject>,
    /// <p>The identity that is allowed to use the credentials. This value is always <code>pods.eks.amazonaws.com</code>.</p>
    pub audience: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) and ID of the EKS Pod Identity association.</p>
    pub pod_identity_association: ::std::option::Option<crate::types::PodIdentityAssociation>,
    /// <p>An object with the permanent IAM role identity and the temporary session name.</p>
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    pub assumed_role_user: ::std::option::Option<crate::types::AssumedRoleUser>,
    /// <p>The <i>Amazon Web Services Signature Version 4</i> type of temporary credentials.</p>
    pub credentials: ::std::option::Option<crate::types::Credentials>,
    _request_id: Option<String>,
}
impl AssumeRoleForPodIdentityOutput {
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub fn subject(&self) -> ::std::option::Option<&crate::types::Subject> {
        self.subject.as_ref()
    }
    /// <p>The identity that is allowed to use the credentials. This value is always <code>pods.eks.amazonaws.com</code>.</p>
    pub fn audience(&self) -> &str {
        use std::ops::Deref;
        self.audience.deref()
    }
    /// <p>The Amazon Resource Name (ARN) and ID of the EKS Pod Identity association.</p>
    pub fn pod_identity_association(&self) -> ::std::option::Option<&crate::types::PodIdentityAssociation> {
        self.pod_identity_association.as_ref()
    }
    /// <p>An object with the permanent IAM role identity and the temporary session name.</p>
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    pub fn assumed_role_user(&self) -> ::std::option::Option<&crate::types::AssumedRoleUser> {
        self.assumed_role_user.as_ref()
    }
    /// <p>The <i>Amazon Web Services Signature Version 4</i> type of temporary credentials.</p>
    pub fn credentials(&self) -> ::std::option::Option<&crate::types::Credentials> {
        self.credentials.as_ref()
    }
}
impl ::std::fmt::Debug for AssumeRoleForPodIdentityOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssumeRoleForPodIdentityOutput");
        formatter.field("subject", &self.subject);
        formatter.field("audience", &self.audience);
        formatter.field("pod_identity_association", &self.pod_identity_association);
        formatter.field("assumed_role_user", &self.assumed_role_user);
        formatter.field("credentials", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for AssumeRoleForPodIdentityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssumeRoleForPodIdentityOutput {
    /// Creates a new builder-style object to manufacture [`AssumeRoleForPodIdentityOutput`](crate::operation::assume_role_for_pod_identity::AssumeRoleForPodIdentityOutput).
    pub fn builder() -> crate::operation::assume_role_for_pod_identity::builders::AssumeRoleForPodIdentityOutputBuilder {
        crate::operation::assume_role_for_pod_identity::builders::AssumeRoleForPodIdentityOutputBuilder::default()
    }
}

/// A builder for [`AssumeRoleForPodIdentityOutput`](crate::operation::assume_role_for_pod_identity::AssumeRoleForPodIdentityOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AssumeRoleForPodIdentityOutputBuilder {
    pub(crate) subject: ::std::option::Option<crate::types::Subject>,
    pub(crate) audience: ::std::option::Option<::std::string::String>,
    pub(crate) pod_identity_association: ::std::option::Option<crate::types::PodIdentityAssociation>,
    pub(crate) assumed_role_user: ::std::option::Option<crate::types::AssumedRoleUser>,
    pub(crate) credentials: ::std::option::Option<crate::types::Credentials>,
    _request_id: Option<String>,
}
impl AssumeRoleForPodIdentityOutputBuilder {
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    /// This field is required.
    pub fn subject(mut self, input: crate::types::Subject) -> Self {
        self.subject = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<crate::types::Subject>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p>
    pub fn get_subject(&self) -> &::std::option::Option<crate::types::Subject> {
        &self.subject
    }
    /// <p>The identity that is allowed to use the credentials. This value is always <code>pods.eks.amazonaws.com</code>.</p>
    /// This field is required.
    pub fn audience(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audience = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identity that is allowed to use the credentials. This value is always <code>pods.eks.amazonaws.com</code>.</p>
    pub fn set_audience(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audience = input;
        self
    }
    /// <p>The identity that is allowed to use the credentials. This value is always <code>pods.eks.amazonaws.com</code>.</p>
    pub fn get_audience(&self) -> &::std::option::Option<::std::string::String> {
        &self.audience
    }
    /// <p>The Amazon Resource Name (ARN) and ID of the EKS Pod Identity association.</p>
    /// This field is required.
    pub fn pod_identity_association(mut self, input: crate::types::PodIdentityAssociation) -> Self {
        self.pod_identity_association = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) and ID of the EKS Pod Identity association.</p>
    pub fn set_pod_identity_association(mut self, input: ::std::option::Option<crate::types::PodIdentityAssociation>) -> Self {
        self.pod_identity_association = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) and ID of the EKS Pod Identity association.</p>
    pub fn get_pod_identity_association(&self) -> &::std::option::Option<crate::types::PodIdentityAssociation> {
        &self.pod_identity_association
    }
    /// <p>An object with the permanent IAM role identity and the temporary session name.</p>
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    /// This field is required.
    pub fn assumed_role_user(mut self, input: crate::types::AssumedRoleUser) -> Self {
        self.assumed_role_user = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object with the permanent IAM role identity and the temporary session name.</p>
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    pub fn set_assumed_role_user(mut self, input: ::std::option::Option<crate::types::AssumedRoleUser>) -> Self {
        self.assumed_role_user = input;
        self
    }
    /// <p>An object with the permanent IAM role identity and the temporary session name.</p>
    /// <p>The ARN of the IAM role that the temporary credentials authenticate to.</p>
    /// <p>The session name of the temporary session requested to STS. The value is a unique identifier that contains the role ID, a colon (<code>:</code>), and the role session name of the role that is being assumed. The role ID is generated by IAM when the role is created. The role session name part of the value follows this format: <code>eks-<i>clustername</i>-<i>podname</i>-<i>random UUID</i> </code></p>
    pub fn get_assumed_role_user(&self) -> &::std::option::Option<crate::types::AssumedRoleUser> {
        &self.assumed_role_user
    }
    /// <p>The <i>Amazon Web Services Signature Version 4</i> type of temporary credentials.</p>
    /// This field is required.
    pub fn credentials(mut self, input: crate::types::Credentials) -> Self {
        self.credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <i>Amazon Web Services Signature Version 4</i> type of temporary credentials.</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<crate::types::Credentials>) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The <i>Amazon Web Services Signature Version 4</i> type of temporary credentials.</p>
    pub fn get_credentials(&self) -> &::std::option::Option<crate::types::Credentials> {
        &self.credentials
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AssumeRoleForPodIdentityOutput`](crate::operation::assume_role_for_pod_identity::AssumeRoleForPodIdentityOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`audience`](crate::operation::assume_role_for_pod_identity::builders::AssumeRoleForPodIdentityOutputBuilder::audience)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::assume_role_for_pod_identity::AssumeRoleForPodIdentityOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::assume_role_for_pod_identity::AssumeRoleForPodIdentityOutput {
            subject: self.subject,
            audience: self.audience.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audience",
                    "audience was not specified but it is required when building AssumeRoleForPodIdentityOutput",
                )
            })?,
            pod_identity_association: self.pod_identity_association,
            assumed_role_user: self.assumed_role_user,
            credentials: self.credentials,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for AssumeRoleForPodIdentityOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssumeRoleForPodIdentityOutputBuilder");
        formatter.field("subject", &self.subject);
        formatter.field("audience", &self.audience);
        formatter.field("pod_identity_association", &self.pod_identity_association);
        formatter.field("assumed_role_user", &self.assumed_role_user);
        formatter.field("credentials", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
