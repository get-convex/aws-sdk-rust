// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the data replication settings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataReplicationSettings {
    /// <p>Indicates whether data replication is enabled, and if enabled, the type of data replication.</p>
    pub data_replication: ::std::option::Option<crate::types::DataReplication>,
    /// <p>The date and time at which the last successful snapshot was taken of the primary WorkSpace used for replicating data.</p>
    pub recovery_snapshot_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataReplicationSettings {
    /// <p>Indicates whether data replication is enabled, and if enabled, the type of data replication.</p>
    pub fn data_replication(&self) -> ::std::option::Option<&crate::types::DataReplication> {
        self.data_replication.as_ref()
    }
    /// <p>The date and time at which the last successful snapshot was taken of the primary WorkSpace used for replicating data.</p>
    pub fn recovery_snapshot_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.recovery_snapshot_time.as_ref()
    }
}
impl DataReplicationSettings {
    /// Creates a new builder-style object to manufacture [`DataReplicationSettings`](crate::types::DataReplicationSettings).
    pub fn builder() -> crate::types::builders::DataReplicationSettingsBuilder {
        crate::types::builders::DataReplicationSettingsBuilder::default()
    }
}

/// A builder for [`DataReplicationSettings`](crate::types::DataReplicationSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataReplicationSettingsBuilder {
    pub(crate) data_replication: ::std::option::Option<crate::types::DataReplication>,
    pub(crate) recovery_snapshot_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataReplicationSettingsBuilder {
    /// <p>Indicates whether data replication is enabled, and if enabled, the type of data replication.</p>
    pub fn data_replication(mut self, input: crate::types::DataReplication) -> Self {
        self.data_replication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether data replication is enabled, and if enabled, the type of data replication.</p>
    pub fn set_data_replication(mut self, input: ::std::option::Option<crate::types::DataReplication>) -> Self {
        self.data_replication = input;
        self
    }
    /// <p>Indicates whether data replication is enabled, and if enabled, the type of data replication.</p>
    pub fn get_data_replication(&self) -> &::std::option::Option<crate::types::DataReplication> {
        &self.data_replication
    }
    /// <p>The date and time at which the last successful snapshot was taken of the primary WorkSpace used for replicating data.</p>
    pub fn recovery_snapshot_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.recovery_snapshot_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the last successful snapshot was taken of the primary WorkSpace used for replicating data.</p>
    pub fn set_recovery_snapshot_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.recovery_snapshot_time = input;
        self
    }
    /// <p>The date and time at which the last successful snapshot was taken of the primary WorkSpace used for replicating data.</p>
    pub fn get_recovery_snapshot_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.recovery_snapshot_time
    }
    /// Consumes the builder and constructs a [`DataReplicationSettings`](crate::types::DataReplicationSettings).
    pub fn build(self) -> crate::types::DataReplicationSettings {
        crate::types::DataReplicationSettings {
            data_replication: self.data_replication,
            recovery_snapshot_time: self.recovery_snapshot_time,
        }
    }
}
