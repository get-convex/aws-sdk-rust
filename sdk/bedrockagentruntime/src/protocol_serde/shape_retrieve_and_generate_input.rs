// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_retrieve_and_generate_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::retrieve_and_generate::RetrieveAndGenerateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.input {
        #[allow(unused_mut)]
        let mut object_2 = object.key("input").start_object();
        crate::protocol_serde::shape_retrieve_and_generate_input::ser_retrieve_and_generate_input(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.retrieve_and_generate_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("retrieveAndGenerateConfiguration").start_object();
        crate::protocol_serde::shape_retrieve_and_generate_configuration::ser_retrieve_and_generate_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.session_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("sessionConfiguration").start_object();
        crate::protocol_serde::shape_retrieve_and_generate_session_configuration::ser_retrieve_and_generate_session_configuration(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.session_id {
        object.key("sessionId").string(var_7.as_str());
    }
    Ok(())
}

pub fn ser_retrieve_and_generate_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RetrieveAndGenerateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("text").string(input.text.as_str());
    }
    Ok(())
}
