// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RetrieveAndGenerateOutput {
    /// Identifier of the session.
    pub session_id: ::std::string::String,
    /// Service response of the turn
    pub output: ::std::option::Option<crate::types::RetrieveAndGenerateOutput>,
    /// List of citations
    pub citations: ::std::option::Option<::std::vec::Vec<crate::types::Citation>>,
    _request_id: Option<String>,
}
impl RetrieveAndGenerateOutput {
    /// Identifier of the session.
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// Service response of the turn
    pub fn output(&self) -> ::std::option::Option<&crate::types::RetrieveAndGenerateOutput> {
        self.output.as_ref()
    }
    /// List of citations
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.citations.is_none()`.
    pub fn citations(&self) -> &[crate::types::Citation] {
        self.citations.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for RetrieveAndGenerateOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrieveAndGenerateOutput");
        formatter.field("session_id", &self.session_id);
        formatter.field("output", &"*** Sensitive Data Redacted ***");
        formatter.field("citations", &self.citations);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for RetrieveAndGenerateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RetrieveAndGenerateOutput {
    /// Creates a new builder-style object to manufacture [`RetrieveAndGenerateOutput`](crate::operation::retrieve_and_generate::RetrieveAndGenerateOutput).
    pub fn builder() -> crate::operation::retrieve_and_generate::builders::RetrieveAndGenerateOutputBuilder {
        crate::operation::retrieve_and_generate::builders::RetrieveAndGenerateOutputBuilder::default()
    }
}

/// A builder for [`RetrieveAndGenerateOutput`](crate::operation::retrieve_and_generate::RetrieveAndGenerateOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RetrieveAndGenerateOutputBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) output: ::std::option::Option<crate::types::RetrieveAndGenerateOutput>,
    pub(crate) citations: ::std::option::Option<::std::vec::Vec<crate::types::Citation>>,
    _request_id: Option<String>,
}
impl RetrieveAndGenerateOutputBuilder {
    /// Identifier of the session.
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Identifier of the session.
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// Identifier of the session.
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// Service response of the turn
    /// This field is required.
    pub fn output(mut self, input: crate::types::RetrieveAndGenerateOutput) -> Self {
        self.output = ::std::option::Option::Some(input);
        self
    }
    /// Service response of the turn
    pub fn set_output(mut self, input: ::std::option::Option<crate::types::RetrieveAndGenerateOutput>) -> Self {
        self.output = input;
        self
    }
    /// Service response of the turn
    pub fn get_output(&self) -> &::std::option::Option<crate::types::RetrieveAndGenerateOutput> {
        &self.output
    }
    /// Appends an item to `citations`.
    ///
    /// To override the contents of this collection use [`set_citations`](Self::set_citations).
    ///
    /// List of citations
    pub fn citations(mut self, input: crate::types::Citation) -> Self {
        let mut v = self.citations.unwrap_or_default();
        v.push(input);
        self.citations = ::std::option::Option::Some(v);
        self
    }
    /// List of citations
    pub fn set_citations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Citation>>) -> Self {
        self.citations = input;
        self
    }
    /// List of citations
    pub fn get_citations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Citation>> {
        &self.citations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RetrieveAndGenerateOutput`](crate::operation::retrieve_and_generate::RetrieveAndGenerateOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_id`](crate::operation::retrieve_and_generate::builders::RetrieveAndGenerateOutputBuilder::session_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::retrieve_and_generate::RetrieveAndGenerateOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::retrieve_and_generate::RetrieveAndGenerateOutput {
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building RetrieveAndGenerateOutput",
                )
            })?,
            output: self.output,
            citations: self.citations,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for RetrieveAndGenerateOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrieveAndGenerateOutputBuilder");
        formatter.field("session_id", &self.session_id);
        formatter.field("output", &"*** Sensitive Data Redacted ***");
        formatter.field("citations", &self.citations);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
