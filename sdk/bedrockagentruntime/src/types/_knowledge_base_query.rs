// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Knowledge base input query.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct KnowledgeBaseQuery {
    /// Knowledge base input query in text
    pub text: ::std::string::String,
}
impl KnowledgeBaseQuery {
    /// Knowledge base input query in text
    pub fn text(&self) -> &str {
        use std::ops::Deref;
        self.text.deref()
    }
}
impl ::std::fmt::Debug for KnowledgeBaseQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KnowledgeBaseQuery");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl KnowledgeBaseQuery {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseQuery`](crate::types::KnowledgeBaseQuery).
    pub fn builder() -> crate::types::builders::KnowledgeBaseQueryBuilder {
        crate::types::builders::KnowledgeBaseQueryBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseQuery`](crate::types::KnowledgeBaseQuery).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct KnowledgeBaseQueryBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
}
impl KnowledgeBaseQueryBuilder {
    /// Knowledge base input query in text
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// Knowledge base input query in text
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// Knowledge base input query in text
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseQuery`](crate::types::KnowledgeBaseQuery).
    /// This method will fail if any of the following fields are not set:
    /// - [`text`](crate::types::builders::KnowledgeBaseQueryBuilder::text)
    pub fn build(self) -> ::std::result::Result<crate::types::KnowledgeBaseQuery, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KnowledgeBaseQuery {
            text: self.text.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text",
                    "text was not specified but it is required when building KnowledgeBaseQuery",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for KnowledgeBaseQueryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KnowledgeBaseQueryBuilder");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
