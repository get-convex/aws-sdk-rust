// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Search parameters for retrieving from knowledge base.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBaseRetrievalConfiguration {
    /// Knowledge base vector search configuration
    pub vector_search_configuration: ::std::option::Option<crate::types::KnowledgeBaseVectorSearchConfiguration>,
}
impl KnowledgeBaseRetrievalConfiguration {
    /// Knowledge base vector search configuration
    pub fn vector_search_configuration(&self) -> ::std::option::Option<&crate::types::KnowledgeBaseVectorSearchConfiguration> {
        self.vector_search_configuration.as_ref()
    }
}
impl KnowledgeBaseRetrievalConfiguration {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseRetrievalConfiguration`](crate::types::KnowledgeBaseRetrievalConfiguration).
    pub fn builder() -> crate::types::builders::KnowledgeBaseRetrievalConfigurationBuilder {
        crate::types::builders::KnowledgeBaseRetrievalConfigurationBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseRetrievalConfiguration`](crate::types::KnowledgeBaseRetrievalConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KnowledgeBaseRetrievalConfigurationBuilder {
    pub(crate) vector_search_configuration: ::std::option::Option<crate::types::KnowledgeBaseVectorSearchConfiguration>,
}
impl KnowledgeBaseRetrievalConfigurationBuilder {
    /// Knowledge base vector search configuration
    /// This field is required.
    pub fn vector_search_configuration(mut self, input: crate::types::KnowledgeBaseVectorSearchConfiguration) -> Self {
        self.vector_search_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Knowledge base vector search configuration
    pub fn set_vector_search_configuration(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseVectorSearchConfiguration>) -> Self {
        self.vector_search_configuration = input;
        self
    }
    /// Knowledge base vector search configuration
    pub fn get_vector_search_configuration(&self) -> &::std::option::Option<crate::types::KnowledgeBaseVectorSearchConfiguration> {
        &self.vector_search_configuration
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseRetrievalConfiguration`](crate::types::KnowledgeBaseRetrievalConfiguration).
    pub fn build(self) -> crate::types::KnowledgeBaseRetrievalConfiguration {
        crate::types::KnowledgeBaseRetrievalConfiguration {
            vector_search_configuration: self.vector_search_configuration,
        }
    }
}
