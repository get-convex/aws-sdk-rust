// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Text response part
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TextResponsePart {
    /// Response part in text
    pub text: ::std::option::Option<::std::string::String>,
    /// Span of text
    pub span: ::std::option::Option<crate::types::Span>,
}
impl TextResponsePart {
    /// Response part in text
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// Span of text
    pub fn span(&self) -> ::std::option::Option<&crate::types::Span> {
        self.span.as_ref()
    }
}
impl TextResponsePart {
    /// Creates a new builder-style object to manufacture [`TextResponsePart`](crate::types::TextResponsePart).
    pub fn builder() -> crate::types::builders::TextResponsePartBuilder {
        crate::types::builders::TextResponsePartBuilder::default()
    }
}

/// A builder for [`TextResponsePart`](crate::types::TextResponsePart).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TextResponsePartBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) span: ::std::option::Option<crate::types::Span>,
}
impl TextResponsePartBuilder {
    /// Response part in text
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// Response part in text
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// Response part in text
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Span of text
    pub fn span(mut self, input: crate::types::Span) -> Self {
        self.span = ::std::option::Option::Some(input);
        self
    }
    /// Span of text
    pub fn set_span(mut self, input: ::std::option::Option<crate::types::Span>) -> Self {
        self.span = input;
        self
    }
    /// Span of text
    pub fn get_span(&self) -> &::std::option::Option<crate::types::Span> {
        &self.span
    }
    /// Consumes the builder and constructs a [`TextResponsePart`](crate::types::TextResponsePart).
    pub fn build(self) -> crate::types::TextResponsePart {
        crate::types::TextResponsePart {
            text: self.text,
            span: self.span,
        }
    }
}
