// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Fields for audit event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuditEventField {
    /// <p>Unique identifier of field in an Audit History entry.</p>
    pub event_field_id: ::std::string::String,
    /// <p>Union of potential field value types.</p>
    pub old_value: ::std::option::Option<crate::types::AuditEventFieldValueUnion>,
    /// <p>Union of potential field value types.</p>
    pub new_value: ::std::option::Option<crate::types::AuditEventFieldValueUnion>,
}
impl AuditEventField {
    /// <p>Unique identifier of field in an Audit History entry.</p>
    pub fn event_field_id(&self) -> &str {
        use std::ops::Deref;
        self.event_field_id.deref()
    }
    /// <p>Union of potential field value types.</p>
    pub fn old_value(&self) -> ::std::option::Option<&crate::types::AuditEventFieldValueUnion> {
        self.old_value.as_ref()
    }
    /// <p>Union of potential field value types.</p>
    pub fn new_value(&self) -> ::std::option::Option<&crate::types::AuditEventFieldValueUnion> {
        self.new_value.as_ref()
    }
}
impl AuditEventField {
    /// Creates a new builder-style object to manufacture [`AuditEventField`](crate::types::AuditEventField).
    pub fn builder() -> crate::types::builders::AuditEventFieldBuilder {
        crate::types::builders::AuditEventFieldBuilder::default()
    }
}

/// A builder for [`AuditEventField`](crate::types::AuditEventField).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuditEventFieldBuilder {
    pub(crate) event_field_id: ::std::option::Option<::std::string::String>,
    pub(crate) old_value: ::std::option::Option<crate::types::AuditEventFieldValueUnion>,
    pub(crate) new_value: ::std::option::Option<crate::types::AuditEventFieldValueUnion>,
}
impl AuditEventFieldBuilder {
    /// <p>Unique identifier of field in an Audit History entry.</p>
    /// This field is required.
    pub fn event_field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of field in an Audit History entry.</p>
    pub fn set_event_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_field_id = input;
        self
    }
    /// <p>Unique identifier of field in an Audit History entry.</p>
    pub fn get_event_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_field_id
    }
    /// <p>Union of potential field value types.</p>
    pub fn old_value(mut self, input: crate::types::AuditEventFieldValueUnion) -> Self {
        self.old_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Union of potential field value types.</p>
    pub fn set_old_value(mut self, input: ::std::option::Option<crate::types::AuditEventFieldValueUnion>) -> Self {
        self.old_value = input;
        self
    }
    /// <p>Union of potential field value types.</p>
    pub fn get_old_value(&self) -> &::std::option::Option<crate::types::AuditEventFieldValueUnion> {
        &self.old_value
    }
    /// <p>Union of potential field value types.</p>
    /// This field is required.
    pub fn new_value(mut self, input: crate::types::AuditEventFieldValueUnion) -> Self {
        self.new_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Union of potential field value types.</p>
    pub fn set_new_value(mut self, input: ::std::option::Option<crate::types::AuditEventFieldValueUnion>) -> Self {
        self.new_value = input;
        self
    }
    /// <p>Union of potential field value types.</p>
    pub fn get_new_value(&self) -> &::std::option::Option<crate::types::AuditEventFieldValueUnion> {
        &self.new_value
    }
    /// Consumes the builder and constructs a [`AuditEventField`](crate::types::AuditEventField).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_field_id`](crate::types::builders::AuditEventFieldBuilder::event_field_id)
    pub fn build(self) -> ::std::result::Result<crate::types::AuditEventField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuditEventField {
            event_field_id: self.event_field_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_field_id",
                    "event_field_id was not specified but it is required when building AuditEventField",
                )
            })?,
            old_value: self.old_value,
            new_value: self.new_value,
        })
    }
}
