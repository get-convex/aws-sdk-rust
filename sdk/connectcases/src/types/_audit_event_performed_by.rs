// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information of the user which performed the audit.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuditEventPerformedBy {
    /// <p>Represents the identity of the person who performed the action.</p>
    pub user: ::std::option::Option<crate::types::UserUnion>,
    /// <p>Unique identifier of an IAM role.</p>
    pub iam_principal_arn: ::std::string::String,
}
impl AuditEventPerformedBy {
    /// <p>Represents the identity of the person who performed the action.</p>
    pub fn user(&self) -> ::std::option::Option<&crate::types::UserUnion> {
        self.user.as_ref()
    }
    /// <p>Unique identifier of an IAM role.</p>
    pub fn iam_principal_arn(&self) -> &str {
        use std::ops::Deref;
        self.iam_principal_arn.deref()
    }
}
impl AuditEventPerformedBy {
    /// Creates a new builder-style object to manufacture [`AuditEventPerformedBy`](crate::types::AuditEventPerformedBy).
    pub fn builder() -> crate::types::builders::AuditEventPerformedByBuilder {
        crate::types::builders::AuditEventPerformedByBuilder::default()
    }
}

/// A builder for [`AuditEventPerformedBy`](crate::types::AuditEventPerformedBy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuditEventPerformedByBuilder {
    pub(crate) user: ::std::option::Option<crate::types::UserUnion>,
    pub(crate) iam_principal_arn: ::std::option::Option<::std::string::String>,
}
impl AuditEventPerformedByBuilder {
    /// <p>Represents the identity of the person who performed the action.</p>
    pub fn user(mut self, input: crate::types::UserUnion) -> Self {
        self.user = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the identity of the person who performed the action.</p>
    pub fn set_user(mut self, input: ::std::option::Option<crate::types::UserUnion>) -> Self {
        self.user = input;
        self
    }
    /// <p>Represents the identity of the person who performed the action.</p>
    pub fn get_user(&self) -> &::std::option::Option<crate::types::UserUnion> {
        &self.user
    }
    /// <p>Unique identifier of an IAM role.</p>
    /// This field is required.
    pub fn iam_principal_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_principal_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of an IAM role.</p>
    pub fn set_iam_principal_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_principal_arn = input;
        self
    }
    /// <p>Unique identifier of an IAM role.</p>
    pub fn get_iam_principal_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_principal_arn
    }
    /// Consumes the builder and constructs a [`AuditEventPerformedBy`](crate::types::AuditEventPerformedBy).
    /// This method will fail if any of the following fields are not set:
    /// - [`iam_principal_arn`](crate::types::builders::AuditEventPerformedByBuilder::iam_principal_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::AuditEventPerformedBy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuditEventPerformedBy {
            user: self.user,
            iam_principal_arn: self.iam_principal_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "iam_principal_arn",
                    "iam_principal_arn was not specified but it is required when building AuditEventPerformedBy",
                )
            })?,
        })
    }
}
