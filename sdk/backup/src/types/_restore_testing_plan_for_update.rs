// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This contains metadata about a restore testing plan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreTestingPlanForUpdate {
    /// <p>Required: <code>Algorithm</code>; <code>RecoveryPointTypes</code>; <code>IncludeVaults</code> (<i>one or more</i>).</p>
    /// <p>Optional: <i>SelectionWindowDays</i> (<i>'30' if not specified</i>); <code>ExcludeVaults</code> (defaults to empty list if not listed).</p>
    pub recovery_point_selection: ::std::option::Option<crate::types::RestoreTestingRecoveryPointSelection>,
    /// <p>A CRON expression in specified timezone when a restore testing plan is executed.</p>
    pub schedule_expression: ::std::option::Option<::std::string::String>,
    /// <p>Optional. This is the timezone in which the schedule expression is set. By default, ScheduleExpressions are in UTC. You can modify this to a specified timezone.</p>
    pub schedule_expression_timezone: ::std::option::Option<::std::string::String>,
    /// <p>Defaults to 24 hours.</p>
    /// <p>A value in hours after a restore test is scheduled before a job will be canceled if it doesn't start successfully. This value is optional. If this value is included, this parameter has a maximum value of 168 hours (one week).</p>
    pub start_window_hours: i32,
}
impl RestoreTestingPlanForUpdate {
    /// <p>Required: <code>Algorithm</code>; <code>RecoveryPointTypes</code>; <code>IncludeVaults</code> (<i>one or more</i>).</p>
    /// <p>Optional: <i>SelectionWindowDays</i> (<i>'30' if not specified</i>); <code>ExcludeVaults</code> (defaults to empty list if not listed).</p>
    pub fn recovery_point_selection(&self) -> ::std::option::Option<&crate::types::RestoreTestingRecoveryPointSelection> {
        self.recovery_point_selection.as_ref()
    }
    /// <p>A CRON expression in specified timezone when a restore testing plan is executed.</p>
    pub fn schedule_expression(&self) -> ::std::option::Option<&str> {
        self.schedule_expression.as_deref()
    }
    /// <p>Optional. This is the timezone in which the schedule expression is set. By default, ScheduleExpressions are in UTC. You can modify this to a specified timezone.</p>
    pub fn schedule_expression_timezone(&self) -> ::std::option::Option<&str> {
        self.schedule_expression_timezone.as_deref()
    }
    /// <p>Defaults to 24 hours.</p>
    /// <p>A value in hours after a restore test is scheduled before a job will be canceled if it doesn't start successfully. This value is optional. If this value is included, this parameter has a maximum value of 168 hours (one week).</p>
    pub fn start_window_hours(&self) -> i32 {
        self.start_window_hours
    }
}
impl RestoreTestingPlanForUpdate {
    /// Creates a new builder-style object to manufacture [`RestoreTestingPlanForUpdate`](crate::types::RestoreTestingPlanForUpdate).
    pub fn builder() -> crate::types::builders::RestoreTestingPlanForUpdateBuilder {
        crate::types::builders::RestoreTestingPlanForUpdateBuilder::default()
    }
}

/// A builder for [`RestoreTestingPlanForUpdate`](crate::types::RestoreTestingPlanForUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RestoreTestingPlanForUpdateBuilder {
    pub(crate) recovery_point_selection: ::std::option::Option<crate::types::RestoreTestingRecoveryPointSelection>,
    pub(crate) schedule_expression: ::std::option::Option<::std::string::String>,
    pub(crate) schedule_expression_timezone: ::std::option::Option<::std::string::String>,
    pub(crate) start_window_hours: ::std::option::Option<i32>,
}
impl RestoreTestingPlanForUpdateBuilder {
    /// <p>Required: <code>Algorithm</code>; <code>RecoveryPointTypes</code>; <code>IncludeVaults</code> (<i>one or more</i>).</p>
    /// <p>Optional: <i>SelectionWindowDays</i> (<i>'30' if not specified</i>); <code>ExcludeVaults</code> (defaults to empty list if not listed).</p>
    pub fn recovery_point_selection(mut self, input: crate::types::RestoreTestingRecoveryPointSelection) -> Self {
        self.recovery_point_selection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Required: <code>Algorithm</code>; <code>RecoveryPointTypes</code>; <code>IncludeVaults</code> (<i>one or more</i>).</p>
    /// <p>Optional: <i>SelectionWindowDays</i> (<i>'30' if not specified</i>); <code>ExcludeVaults</code> (defaults to empty list if not listed).</p>
    pub fn set_recovery_point_selection(mut self, input: ::std::option::Option<crate::types::RestoreTestingRecoveryPointSelection>) -> Self {
        self.recovery_point_selection = input;
        self
    }
    /// <p>Required: <code>Algorithm</code>; <code>RecoveryPointTypes</code>; <code>IncludeVaults</code> (<i>one or more</i>).</p>
    /// <p>Optional: <i>SelectionWindowDays</i> (<i>'30' if not specified</i>); <code>ExcludeVaults</code> (defaults to empty list if not listed).</p>
    pub fn get_recovery_point_selection(&self) -> &::std::option::Option<crate::types::RestoreTestingRecoveryPointSelection> {
        &self.recovery_point_selection
    }
    /// <p>A CRON expression in specified timezone when a restore testing plan is executed.</p>
    pub fn schedule_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schedule_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A CRON expression in specified timezone when a restore testing plan is executed.</p>
    pub fn set_schedule_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schedule_expression = input;
        self
    }
    /// <p>A CRON expression in specified timezone when a restore testing plan is executed.</p>
    pub fn get_schedule_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.schedule_expression
    }
    /// <p>Optional. This is the timezone in which the schedule expression is set. By default, ScheduleExpressions are in UTC. You can modify this to a specified timezone.</p>
    pub fn schedule_expression_timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schedule_expression_timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional. This is the timezone in which the schedule expression is set. By default, ScheduleExpressions are in UTC. You can modify this to a specified timezone.</p>
    pub fn set_schedule_expression_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schedule_expression_timezone = input;
        self
    }
    /// <p>Optional. This is the timezone in which the schedule expression is set. By default, ScheduleExpressions are in UTC. You can modify this to a specified timezone.</p>
    pub fn get_schedule_expression_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.schedule_expression_timezone
    }
    /// <p>Defaults to 24 hours.</p>
    /// <p>A value in hours after a restore test is scheduled before a job will be canceled if it doesn't start successfully. This value is optional. If this value is included, this parameter has a maximum value of 168 hours (one week).</p>
    pub fn start_window_hours(mut self, input: i32) -> Self {
        self.start_window_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defaults to 24 hours.</p>
    /// <p>A value in hours after a restore test is scheduled before a job will be canceled if it doesn't start successfully. This value is optional. If this value is included, this parameter has a maximum value of 168 hours (one week).</p>
    pub fn set_start_window_hours(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_window_hours = input;
        self
    }
    /// <p>Defaults to 24 hours.</p>
    /// <p>A value in hours after a restore test is scheduled before a job will be canceled if it doesn't start successfully. This value is optional. If this value is included, this parameter has a maximum value of 168 hours (one week).</p>
    pub fn get_start_window_hours(&self) -> &::std::option::Option<i32> {
        &self.start_window_hours
    }
    /// Consumes the builder and constructs a [`RestoreTestingPlanForUpdate`](crate::types::RestoreTestingPlanForUpdate).
    pub fn build(self) -> crate::types::RestoreTestingPlanForUpdate {
        crate::types::RestoreTestingPlanForUpdate {
            recovery_point_selection: self.recovery_point_selection,
            schedule_expression: self.schedule_expression,
            schedule_expression_timezone: self.schedule_expression_timezone,
            start_window_hours: self.start_window_hours.unwrap_or_default(),
        }
    }
}
