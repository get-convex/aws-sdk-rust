// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_testing_selection_for_create(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RestoreTestingSelectionForCreate,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("IamRoleArn").string(input.iam_role_arn.as_str());
    }
    if let Some(var_1) = &input.protected_resource_arns {
        let mut array_2 = object.key("ProtectedResourceArns").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.protected_resource_conditions {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ProtectedResourceConditions").start_object();
        crate::protocol_serde::shape_protected_resource_conditions::ser_protected_resource_conditions(&mut object_5, var_4)?;
        object_5.finish();
    }
    {
        object.key("ProtectedResourceType").string(input.protected_resource_type.as_str());
    }
    if let Some(var_6) = &input.restore_metadata_overrides {
        #[allow(unused_mut)]
        let mut object_7 = object.key("RestoreMetadataOverrides").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    {
        object
            .key("RestoreTestingSelectionName")
            .string(input.restore_testing_selection_name.as_str());
    }
    if input.validation_window_hours != 0 {
        object.key("ValidationWindowHours").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.validation_window_hours).into()),
        );
    }
    Ok(())
}
