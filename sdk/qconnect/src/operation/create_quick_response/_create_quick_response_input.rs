// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateQuickResponseInput {
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the quick response.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The content of the quick response.</p>
    pub content: ::std::option::Option<crate::types::QuickResponseDataProvider>,
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for a quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for a quick response written in richtext.</p></li>
    /// </ul>
    pub content_type: ::std::option::Option<::std::string::String>,
    /// <p>The configuration information of the user groups that the quick response is accessible to.</p>
    pub grouping_configuration: ::std::option::Option<crate::types::GroupingConfiguration>,
    /// <p>The description of the quick response.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The shortcut key of the quick response. The value should be unique across the knowledge base.</p>
    pub shortcut_key: ::std::option::Option<::std::string::String>,
    /// <p>Whether the quick response is active.</p>
    pub is_active: ::std::option::Option<bool>,
    /// <p>The Amazon Connect channels this quick response applies to.</p>
    pub channels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub language: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateQuickResponseInput {
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The name of the quick response.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The content of the quick response.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::QuickResponseDataProvider> {
        self.content.as_ref()
    }
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for a quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for a quick response written in richtext.</p></li>
    /// </ul>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The configuration information of the user groups that the quick response is accessible to.</p>
    pub fn grouping_configuration(&self) -> ::std::option::Option<&crate::types::GroupingConfiguration> {
        self.grouping_configuration.as_ref()
    }
    /// <p>The description of the quick response.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The shortcut key of the quick response. The value should be unique across the knowledge base.</p>
    pub fn shortcut_key(&self) -> ::std::option::Option<&str> {
        self.shortcut_key.as_deref()
    }
    /// <p>Whether the quick response is active.</p>
    pub fn is_active(&self) -> ::std::option::Option<bool> {
        self.is_active
    }
    /// <p>The Amazon Connect channels this quick response applies to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channels.is_none()`.
    pub fn channels(&self) -> &[::std::string::String] {
        self.channels.as_deref().unwrap_or_default()
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateQuickResponseInput {
    /// Creates a new builder-style object to manufacture [`CreateQuickResponseInput`](crate::operation::create_quick_response::CreateQuickResponseInput).
    pub fn builder() -> crate::operation::create_quick_response::builders::CreateQuickResponseInputBuilder {
        crate::operation::create_quick_response::builders::CreateQuickResponseInputBuilder::default()
    }
}

/// A builder for [`CreateQuickResponseInput`](crate::operation::create_quick_response::CreateQuickResponseInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateQuickResponseInputBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<crate::types::QuickResponseDataProvider>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) grouping_configuration: ::std::option::Option<crate::types::GroupingConfiguration>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) shortcut_key: ::std::option::Option<::std::string::String>,
    pub(crate) is_active: ::std::option::Option<bool>,
    pub(crate) channels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateQuickResponseInputBuilder {
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The name of the quick response.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the quick response.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the quick response.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The content of the quick response.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::QuickResponseDataProvider) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content of the quick response.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::QuickResponseDataProvider>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the quick response.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::QuickResponseDataProvider> {
        &self.content
    }
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for a quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for a quick response written in richtext.</p></li>
    /// </ul>
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for a quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for a quick response written in richtext.</p></li>
    /// </ul>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for a quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for a quick response written in richtext.</p></li>
    /// </ul>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>The configuration information of the user groups that the quick response is accessible to.</p>
    pub fn grouping_configuration(mut self, input: crate::types::GroupingConfiguration) -> Self {
        self.grouping_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information of the user groups that the quick response is accessible to.</p>
    pub fn set_grouping_configuration(mut self, input: ::std::option::Option<crate::types::GroupingConfiguration>) -> Self {
        self.grouping_configuration = input;
        self
    }
    /// <p>The configuration information of the user groups that the quick response is accessible to.</p>
    pub fn get_grouping_configuration(&self) -> &::std::option::Option<crate::types::GroupingConfiguration> {
        &self.grouping_configuration
    }
    /// <p>The description of the quick response.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the quick response.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the quick response.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The shortcut key of the quick response. The value should be unique across the knowledge base.</p>
    pub fn shortcut_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shortcut_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The shortcut key of the quick response. The value should be unique across the knowledge base.</p>
    pub fn set_shortcut_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shortcut_key = input;
        self
    }
    /// <p>The shortcut key of the quick response. The value should be unique across the knowledge base.</p>
    pub fn get_shortcut_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.shortcut_key
    }
    /// <p>Whether the quick response is active.</p>
    pub fn is_active(mut self, input: bool) -> Self {
        self.is_active = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the quick response is active.</p>
    pub fn set_is_active(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_active = input;
        self
    }
    /// <p>Whether the quick response is active.</p>
    pub fn get_is_active(&self) -> &::std::option::Option<bool> {
        &self.is_active
    }
    /// Appends an item to `channels`.
    ///
    /// To override the contents of this collection use [`set_channels`](Self::set_channels).
    ///
    /// <p>The Amazon Connect channels this quick response applies to.</p>
    pub fn channels(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.channels.unwrap_or_default();
        v.push(input.into());
        self.channels = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Connect channels this quick response applies to.</p>
    pub fn set_channels(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.channels = input;
        self
    }
    /// <p>The Amazon Connect channels this quick response applies to.</p>
    pub fn get_channels(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.channels
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>The language code value for the language in which the quick response is written. The supported language codes include <code>de_DE</code>, <code>en_US</code>, <code>es_ES</code>, <code>fr_FR</code>, <code>id_ID</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ko_KR</code>, <code>pt_BR</code>, <code>zh_CN</code>, <code>zh_TW</code></p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateQuickResponseInput`](crate::operation::create_quick_response::CreateQuickResponseInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_quick_response::CreateQuickResponseInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_quick_response::CreateQuickResponseInput {
            knowledge_base_id: self.knowledge_base_id,
            name: self.name,
            content: self.content,
            content_type: self.content_type,
            grouping_configuration: self.grouping_configuration,
            description: self.description,
            shortcut_key: self.shortcut_key,
            is_active: self.is_active,
            channels: self.channels,
            language: self.language,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
