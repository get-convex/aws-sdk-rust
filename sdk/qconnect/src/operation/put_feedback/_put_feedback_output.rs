// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutFeedbackOutput {
    /// <p>The identifier of the Amazon Q assistant.</p>
    pub assistant_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q assistant.</p>
    pub assistant_arn: ::std::string::String,
    /// <p>The identifier of the feedback target.</p>
    pub target_id: ::std::string::String,
    /// <p>The type of the feedback target.</p>
    pub target_type: crate::types::TargetType,
    /// <p>Information about the feedback provided.</p>
    pub content_feedback: ::std::option::Option<crate::types::ContentFeedbackData>,
    _request_id: Option<String>,
}
impl PutFeedbackOutput {
    /// <p>The identifier of the Amazon Q assistant.</p>
    pub fn assistant_id(&self) -> &str {
        use std::ops::Deref;
        self.assistant_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q assistant.</p>
    pub fn assistant_arn(&self) -> &str {
        use std::ops::Deref;
        self.assistant_arn.deref()
    }
    /// <p>The identifier of the feedback target.</p>
    pub fn target_id(&self) -> &str {
        use std::ops::Deref;
        self.target_id.deref()
    }
    /// <p>The type of the feedback target.</p>
    pub fn target_type(&self) -> &crate::types::TargetType {
        &self.target_type
    }
    /// <p>Information about the feedback provided.</p>
    pub fn content_feedback(&self) -> ::std::option::Option<&crate::types::ContentFeedbackData> {
        self.content_feedback.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for PutFeedbackOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutFeedbackOutput {
    /// Creates a new builder-style object to manufacture [`PutFeedbackOutput`](crate::operation::put_feedback::PutFeedbackOutput).
    pub fn builder() -> crate::operation::put_feedback::builders::PutFeedbackOutputBuilder {
        crate::operation::put_feedback::builders::PutFeedbackOutputBuilder::default()
    }
}

/// A builder for [`PutFeedbackOutput`](crate::operation::put_feedback::PutFeedbackOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutFeedbackOutputBuilder {
    pub(crate) assistant_id: ::std::option::Option<::std::string::String>,
    pub(crate) assistant_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_type: ::std::option::Option<crate::types::TargetType>,
    pub(crate) content_feedback: ::std::option::Option<crate::types::ContentFeedbackData>,
    _request_id: Option<String>,
}
impl PutFeedbackOutputBuilder {
    /// <p>The identifier of the Amazon Q assistant.</p>
    /// This field is required.
    pub fn assistant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q assistant.</p>
    pub fn set_assistant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q assistant.</p>
    pub fn get_assistant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q assistant.</p>
    /// This field is required.
    pub fn assistant_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q assistant.</p>
    pub fn set_assistant_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q assistant.</p>
    pub fn get_assistant_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_arn
    }
    /// <p>The identifier of the feedback target.</p>
    /// This field is required.
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the feedback target.</p>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p>The identifier of the feedback target.</p>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_id
    }
    /// <p>The type of the feedback target.</p>
    /// This field is required.
    pub fn target_type(mut self, input: crate::types::TargetType) -> Self {
        self.target_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the feedback target.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<crate::types::TargetType>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>The type of the feedback target.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<crate::types::TargetType> {
        &self.target_type
    }
    /// <p>Information about the feedback provided.</p>
    /// This field is required.
    pub fn content_feedback(mut self, input: crate::types::ContentFeedbackData) -> Self {
        self.content_feedback = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the feedback provided.</p>
    pub fn set_content_feedback(mut self, input: ::std::option::Option<crate::types::ContentFeedbackData>) -> Self {
        self.content_feedback = input;
        self
    }
    /// <p>Information about the feedback provided.</p>
    pub fn get_content_feedback(&self) -> &::std::option::Option<crate::types::ContentFeedbackData> {
        &self.content_feedback
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutFeedbackOutput`](crate::operation::put_feedback::PutFeedbackOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`assistant_id`](crate::operation::put_feedback::builders::PutFeedbackOutputBuilder::assistant_id)
    /// - [`assistant_arn`](crate::operation::put_feedback::builders::PutFeedbackOutputBuilder::assistant_arn)
    /// - [`target_id`](crate::operation::put_feedback::builders::PutFeedbackOutputBuilder::target_id)
    /// - [`target_type`](crate::operation::put_feedback::builders::PutFeedbackOutputBuilder::target_type)
    pub fn build(self) -> ::std::result::Result<crate::operation::put_feedback::PutFeedbackOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_feedback::PutFeedbackOutput {
            assistant_id: self.assistant_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "assistant_id",
                    "assistant_id was not specified but it is required when building PutFeedbackOutput",
                )
            })?,
            assistant_arn: self.assistant_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "assistant_arn",
                    "assistant_arn was not specified but it is required when building PutFeedbackOutput",
                )
            })?,
            target_id: self.target_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_id",
                    "target_id was not specified but it is required when building PutFeedbackOutput",
                )
            })?,
            target_type: self.target_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_type",
                    "target_type was not specified but it is required when building PutFeedbackOutput",
                )
            })?,
            content_feedback: self.content_feedback,
            _request_id: self._request_id,
        })
    }
}
