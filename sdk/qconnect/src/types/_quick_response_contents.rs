// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The content of the quick response stored in different media types.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuickResponseContents {
    /// <p>The container quick response content.</p>
    pub plain_text: ::std::option::Option<crate::types::QuickResponseContentProvider>,
    /// <p>The container quick response content.</p>
    pub markdown: ::std::option::Option<crate::types::QuickResponseContentProvider>,
}
impl QuickResponseContents {
    /// <p>The container quick response content.</p>
    pub fn plain_text(&self) -> ::std::option::Option<&crate::types::QuickResponseContentProvider> {
        self.plain_text.as_ref()
    }
    /// <p>The container quick response content.</p>
    pub fn markdown(&self) -> ::std::option::Option<&crate::types::QuickResponseContentProvider> {
        self.markdown.as_ref()
    }
}
impl QuickResponseContents {
    /// Creates a new builder-style object to manufacture [`QuickResponseContents`](crate::types::QuickResponseContents).
    pub fn builder() -> crate::types::builders::QuickResponseContentsBuilder {
        crate::types::builders::QuickResponseContentsBuilder::default()
    }
}

/// A builder for [`QuickResponseContents`](crate::types::QuickResponseContents).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QuickResponseContentsBuilder {
    pub(crate) plain_text: ::std::option::Option<crate::types::QuickResponseContentProvider>,
    pub(crate) markdown: ::std::option::Option<crate::types::QuickResponseContentProvider>,
}
impl QuickResponseContentsBuilder {
    /// <p>The container quick response content.</p>
    pub fn plain_text(mut self, input: crate::types::QuickResponseContentProvider) -> Self {
        self.plain_text = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container quick response content.</p>
    pub fn set_plain_text(mut self, input: ::std::option::Option<crate::types::QuickResponseContentProvider>) -> Self {
        self.plain_text = input;
        self
    }
    /// <p>The container quick response content.</p>
    pub fn get_plain_text(&self) -> &::std::option::Option<crate::types::QuickResponseContentProvider> {
        &self.plain_text
    }
    /// <p>The container quick response content.</p>
    pub fn markdown(mut self, input: crate::types::QuickResponseContentProvider) -> Self {
        self.markdown = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container quick response content.</p>
    pub fn set_markdown(mut self, input: ::std::option::Option<crate::types::QuickResponseContentProvider>) -> Self {
        self.markdown = input;
        self
    }
    /// <p>The container quick response content.</p>
    pub fn get_markdown(&self) -> &::std::option::Option<crate::types::QuickResponseContentProvider> {
        &self.markdown
    }
    /// Consumes the builder and constructs a [`QuickResponseContents`](crate::types::QuickResponseContents).
    pub fn build(self) -> crate::types::QuickResponseContents {
        crate::types::QuickResponseContents {
            plain_text: self.plain_text,
            markdown: self.markdown,
        }
    }
}
