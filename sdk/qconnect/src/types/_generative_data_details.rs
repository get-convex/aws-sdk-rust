// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about generative data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerativeDataDetails {
    /// <p>The LLM response.</p>
    pub completion: ::std::string::String,
    /// <p>The references used to generative the LLM response.</p>
    pub references: ::std::vec::Vec<crate::types::DataSummary>,
    /// <p>Details about the generative content ranking data.</p>
    pub ranking_data: ::std::option::Option<crate::types::RankingData>,
}
impl GenerativeDataDetails {
    /// <p>The LLM response.</p>
    pub fn completion(&self) -> &str {
        use std::ops::Deref;
        self.completion.deref()
    }
    /// <p>The references used to generative the LLM response.</p>
    pub fn references(&self) -> &[crate::types::DataSummary] {
        use std::ops::Deref;
        self.references.deref()
    }
    /// <p>Details about the generative content ranking data.</p>
    pub fn ranking_data(&self) -> ::std::option::Option<&crate::types::RankingData> {
        self.ranking_data.as_ref()
    }
}
impl ::std::fmt::Debug for GenerativeDataDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GenerativeDataDetails");
        formatter.field("completion", &"*** Sensitive Data Redacted ***");
        formatter.field("references", &self.references);
        formatter.field("ranking_data", &self.ranking_data);
        formatter.finish()
    }
}
impl GenerativeDataDetails {
    /// Creates a new builder-style object to manufacture [`GenerativeDataDetails`](crate::types::GenerativeDataDetails).
    pub fn builder() -> crate::types::builders::GenerativeDataDetailsBuilder {
        crate::types::builders::GenerativeDataDetailsBuilder::default()
    }
}

/// A builder for [`GenerativeDataDetails`](crate::types::GenerativeDataDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GenerativeDataDetailsBuilder {
    pub(crate) completion: ::std::option::Option<::std::string::String>,
    pub(crate) references: ::std::option::Option<::std::vec::Vec<crate::types::DataSummary>>,
    pub(crate) ranking_data: ::std::option::Option<crate::types::RankingData>,
}
impl GenerativeDataDetailsBuilder {
    /// <p>The LLM response.</p>
    /// This field is required.
    pub fn completion(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.completion = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The LLM response.</p>
    pub fn set_completion(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.completion = input;
        self
    }
    /// <p>The LLM response.</p>
    pub fn get_completion(&self) -> &::std::option::Option<::std::string::String> {
        &self.completion
    }
    /// Appends an item to `references`.
    ///
    /// To override the contents of this collection use [`set_references`](Self::set_references).
    ///
    /// <p>The references used to generative the LLM response.</p>
    pub fn references(mut self, input: crate::types::DataSummary) -> Self {
        let mut v = self.references.unwrap_or_default();
        v.push(input);
        self.references = ::std::option::Option::Some(v);
        self
    }
    /// <p>The references used to generative the LLM response.</p>
    pub fn set_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSummary>>) -> Self {
        self.references = input;
        self
    }
    /// <p>The references used to generative the LLM response.</p>
    pub fn get_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSummary>> {
        &self.references
    }
    /// <p>Details about the generative content ranking data.</p>
    /// This field is required.
    pub fn ranking_data(mut self, input: crate::types::RankingData) -> Self {
        self.ranking_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the generative content ranking data.</p>
    pub fn set_ranking_data(mut self, input: ::std::option::Option<crate::types::RankingData>) -> Self {
        self.ranking_data = input;
        self
    }
    /// <p>Details about the generative content ranking data.</p>
    pub fn get_ranking_data(&self) -> &::std::option::Option<crate::types::RankingData> {
        &self.ranking_data
    }
    /// Consumes the builder and constructs a [`GenerativeDataDetails`](crate::types::GenerativeDataDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`completion`](crate::types::builders::GenerativeDataDetailsBuilder::completion)
    /// - [`references`](crate::types::builders::GenerativeDataDetailsBuilder::references)
    pub fn build(self) -> ::std::result::Result<crate::types::GenerativeDataDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GenerativeDataDetails {
            completion: self.completion.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "completion",
                    "completion was not specified but it is required when building GenerativeDataDetails",
                )
            })?,
            references: self.references.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "references",
                    "references was not specified but it is required when building GenerativeDataDetails",
                )
            })?,
            ranking_data: self.ranking_data,
        })
    }
}
impl ::std::fmt::Debug for GenerativeDataDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GenerativeDataDetailsBuilder");
        formatter.field("completion", &"*** Sensitive Data Redacted ***");
        formatter.field("references", &self.references);
        formatter.field("ranking_data", &self.ranking_data);
        formatter.finish()
    }
}
