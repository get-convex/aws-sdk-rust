// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary information about the quick response.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuickResponseSummary {
    /// <p>The Amazon Resource Name (ARN) of the quick response.</p>
    pub quick_response_arn: ::std::string::String,
    /// <p>The identifier of the quick response.</p>
    pub quick_response_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub knowledge_base_arn: ::std::string::String,
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The name of the quick response.</p>
    pub name: ::std::string::String,
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for quick response written in richtext.</p></li>
    /// </ul>
    pub content_type: ::std::string::String,
    /// <p>The resource status of the quick response.</p>
    pub status: crate::types::QuickResponseStatus,
    /// <p>The timestamp when the quick response was created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the quick response summary was last modified.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>The description of the quick response.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the quick response data.</p>
    pub last_modified_by: ::std::option::Option<::std::string::String>,
    /// <p>Whether the quick response is active.</p>
    pub is_active: ::std::option::Option<bool>,
    /// <p>The Amazon Connect contact channels this quick response applies to. The supported contact channel types include <code>Chat</code>.</p>
    pub channels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl QuickResponseSummary {
    /// <p>The Amazon Resource Name (ARN) of the quick response.</p>
    pub fn quick_response_arn(&self) -> &str {
        use std::ops::Deref;
        self.quick_response_arn.deref()
    }
    /// <p>The identifier of the quick response.</p>
    pub fn quick_response_id(&self) -> &str {
        use std::ops::Deref;
        self.quick_response_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_arn.deref()
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The name of the quick response.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for quick response written in richtext.</p></li>
    /// </ul>
    pub fn content_type(&self) -> &str {
        use std::ops::Deref;
        self.content_type.deref()
    }
    /// <p>The resource status of the quick response.</p>
    pub fn status(&self) -> &crate::types::QuickResponseStatus {
        &self.status
    }
    /// <p>The timestamp when the quick response was created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The timestamp when the quick response summary was last modified.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>The description of the quick response.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the quick response data.</p>
    pub fn last_modified_by(&self) -> ::std::option::Option<&str> {
        self.last_modified_by.as_deref()
    }
    /// <p>Whether the quick response is active.</p>
    pub fn is_active(&self) -> ::std::option::Option<bool> {
        self.is_active
    }
    /// <p>The Amazon Connect contact channels this quick response applies to. The supported contact channel types include <code>Chat</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channels.is_none()`.
    pub fn channels(&self) -> &[::std::string::String] {
        self.channels.as_deref().unwrap_or_default()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl QuickResponseSummary {
    /// Creates a new builder-style object to manufacture [`QuickResponseSummary`](crate::types::QuickResponseSummary).
    pub fn builder() -> crate::types::builders::QuickResponseSummaryBuilder {
        crate::types::builders::QuickResponseSummaryBuilder::default()
    }
}

/// A builder for [`QuickResponseSummary`](crate::types::QuickResponseSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QuickResponseSummaryBuilder {
    pub(crate) quick_response_arn: ::std::option::Option<::std::string::String>,
    pub(crate) quick_response_id: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::QuickResponseStatus>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_by: ::std::option::Option<::std::string::String>,
    pub(crate) is_active: ::std::option::Option<bool>,
    pub(crate) channels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl QuickResponseSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the quick response.</p>
    /// This field is required.
    pub fn quick_response_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.quick_response_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the quick response.</p>
    pub fn set_quick_response_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.quick_response_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the quick response.</p>
    pub fn get_quick_response_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.quick_response_arn
    }
    /// <p>The identifier of the quick response.</p>
    /// This field is required.
    pub fn quick_response_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.quick_response_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the quick response.</p>
    pub fn set_quick_response_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.quick_response_id = input;
        self
    }
    /// <p>The identifier of the quick response.</p>
    pub fn get_quick_response_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.quick_response_id
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn get_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_arn
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The name of the quick response.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the quick response.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the quick response.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for quick response written in richtext.</p></li>
    /// </ul>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for quick response written in richtext.</p></li>
    /// </ul>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The media type of the quick response content.</p>
    /// <ul>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=plain</code> for quick response written in plain text.</p></li>
    /// <li>
    /// <p>Use <code>application/x.quickresponse;format=markdown</code> for quick response written in richtext.</p></li>
    /// </ul>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>The resource status of the quick response.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::QuickResponseStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource status of the quick response.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::QuickResponseStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The resource status of the quick response.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::QuickResponseStatus> {
        &self.status
    }
    /// <p>The timestamp when the quick response was created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the quick response was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp when the quick response was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The timestamp when the quick response summary was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the quick response summary was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp when the quick response summary was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The description of the quick response.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the quick response.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the quick response.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the quick response data.</p>
    pub fn last_modified_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the quick response data.</p>
    pub fn set_last_modified_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the quick response data.</p>
    pub fn get_last_modified_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_by
    }
    /// <p>Whether the quick response is active.</p>
    pub fn is_active(mut self, input: bool) -> Self {
        self.is_active = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the quick response is active.</p>
    pub fn set_is_active(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_active = input;
        self
    }
    /// <p>Whether the quick response is active.</p>
    pub fn get_is_active(&self) -> &::std::option::Option<bool> {
        &self.is_active
    }
    /// Appends an item to `channels`.
    ///
    /// To override the contents of this collection use [`set_channels`](Self::set_channels).
    ///
    /// <p>The Amazon Connect contact channels this quick response applies to. The supported contact channel types include <code>Chat</code>.</p>
    pub fn channels(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.channels.unwrap_or_default();
        v.push(input.into());
        self.channels = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Connect contact channels this quick response applies to. The supported contact channel types include <code>Chat</code>.</p>
    pub fn set_channels(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.channels = input;
        self
    }
    /// <p>The Amazon Connect contact channels this quick response applies to. The supported contact channel types include <code>Chat</code>.</p>
    pub fn get_channels(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.channels
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`QuickResponseSummary`](crate::types::QuickResponseSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`quick_response_arn`](crate::types::builders::QuickResponseSummaryBuilder::quick_response_arn)
    /// - [`quick_response_id`](crate::types::builders::QuickResponseSummaryBuilder::quick_response_id)
    /// - [`knowledge_base_arn`](crate::types::builders::QuickResponseSummaryBuilder::knowledge_base_arn)
    /// - [`knowledge_base_id`](crate::types::builders::QuickResponseSummaryBuilder::knowledge_base_id)
    /// - [`name`](crate::types::builders::QuickResponseSummaryBuilder::name)
    /// - [`content_type`](crate::types::builders::QuickResponseSummaryBuilder::content_type)
    /// - [`status`](crate::types::builders::QuickResponseSummaryBuilder::status)
    /// - [`created_time`](crate::types::builders::QuickResponseSummaryBuilder::created_time)
    /// - [`last_modified_time`](crate::types::builders::QuickResponseSummaryBuilder::last_modified_time)
    pub fn build(self) -> ::std::result::Result<crate::types::QuickResponseSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QuickResponseSummary {
            quick_response_arn: self.quick_response_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "quick_response_arn",
                    "quick_response_arn was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            quick_response_id: self.quick_response_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "quick_response_id",
                    "quick_response_id was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            knowledge_base_arn: self.knowledge_base_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_arn",
                    "knowledge_base_arn was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            content_type: self.content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_type",
                    "content_type was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building QuickResponseSummary",
                )
            })?,
            description: self.description,
            last_modified_by: self.last_modified_by,
            is_active: self.is_active,
            channels: self.channels,
            tags: self.tags,
        })
    }
}
