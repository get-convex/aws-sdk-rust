// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The feedback information for a generative target type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GenerativeContentFeedbackData {
    /// <p>The relevance of the feedback.</p>
    pub relevance: crate::types::Relevance,
}
impl GenerativeContentFeedbackData {
    /// <p>The relevance of the feedback.</p>
    pub fn relevance(&self) -> &crate::types::Relevance {
        &self.relevance
    }
}
impl GenerativeContentFeedbackData {
    /// Creates a new builder-style object to manufacture [`GenerativeContentFeedbackData`](crate::types::GenerativeContentFeedbackData).
    pub fn builder() -> crate::types::builders::GenerativeContentFeedbackDataBuilder {
        crate::types::builders::GenerativeContentFeedbackDataBuilder::default()
    }
}

/// A builder for [`GenerativeContentFeedbackData`](crate::types::GenerativeContentFeedbackData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GenerativeContentFeedbackDataBuilder {
    pub(crate) relevance: ::std::option::Option<crate::types::Relevance>,
}
impl GenerativeContentFeedbackDataBuilder {
    /// <p>The relevance of the feedback.</p>
    /// This field is required.
    pub fn relevance(mut self, input: crate::types::Relevance) -> Self {
        self.relevance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The relevance of the feedback.</p>
    pub fn set_relevance(mut self, input: ::std::option::Option<crate::types::Relevance>) -> Self {
        self.relevance = input;
        self
    }
    /// <p>The relevance of the feedback.</p>
    pub fn get_relevance(&self) -> &::std::option::Option<crate::types::Relevance> {
        &self.relevance
    }
    /// Consumes the builder and constructs a [`GenerativeContentFeedbackData`](crate::types::GenerativeContentFeedbackData).
    /// This method will fail if any of the following fields are not set:
    /// - [`relevance`](crate::types::builders::GenerativeContentFeedbackDataBuilder::relevance)
    pub fn build(self) -> ::std::result::Result<crate::types::GenerativeContentFeedbackData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GenerativeContentFeedbackData {
            relevance: self.relevance.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relevance",
                    "relevance was not specified but it is required when building GenerativeContentFeedbackData",
                )
            })?,
        })
    }
}
