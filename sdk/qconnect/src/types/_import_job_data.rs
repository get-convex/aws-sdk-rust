// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about the import job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ImportJobData {
    /// <p>The identifier of the import job.</p>
    pub import_job_id: ::std::string::String,
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    pub upload_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub knowledge_base_arn: ::std::string::String,
    /// <p>The type of the import job.</p>
    pub import_job_type: crate::types::ImportJobType,
    /// <p>The status of the import job.</p>
    pub status: crate::types::ImportJobStatus,
    /// <p>The download link to the resource file that is uploaded to the import job.</p>
    pub url: ::std::string::String,
    /// <p>The link to donwload the information of resource data that failed to be imported.</p>
    pub failed_record_report: ::std::option::Option<::std::string::String>,
    /// <p>The expiration time of the URL as an epoch timestamp.</p>
    pub url_expiry: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the import job was created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the import job data was last modified.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>The metadata fields of the imported Amazon Q resources.</p>
    pub metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The configuration information of the external data source.</p>
    pub external_source_configuration: ::std::option::Option<crate::types::ExternalSourceConfiguration>,
}
impl ImportJobData {
    /// <p>The identifier of the import job.</p>
    pub fn import_job_id(&self) -> &str {
        use std::ops::Deref;
        self.import_job_id.deref()
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    pub fn upload_id(&self) -> &str {
        use std::ops::Deref;
        self.upload_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_arn.deref()
    }
    /// <p>The type of the import job.</p>
    pub fn import_job_type(&self) -> &crate::types::ImportJobType {
        &self.import_job_type
    }
    /// <p>The status of the import job.</p>
    pub fn status(&self) -> &crate::types::ImportJobStatus {
        &self.status
    }
    /// <p>The download link to the resource file that is uploaded to the import job.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The link to donwload the information of resource data that failed to be imported.</p>
    pub fn failed_record_report(&self) -> ::std::option::Option<&str> {
        self.failed_record_report.as_deref()
    }
    /// <p>The expiration time of the URL as an epoch timestamp.</p>
    pub fn url_expiry(&self) -> &::aws_smithy_types::DateTime {
        &self.url_expiry
    }
    /// <p>The timestamp when the import job was created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The timestamp when the import job data was last modified.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>The metadata fields of the imported Amazon Q resources.</p>
    pub fn metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.metadata.as_ref()
    }
    /// <p>The configuration information of the external data source.</p>
    pub fn external_source_configuration(&self) -> ::std::option::Option<&crate::types::ExternalSourceConfiguration> {
        self.external_source_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for ImportJobData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ImportJobData");
        formatter.field("import_job_id", &self.import_job_id);
        formatter.field("knowledge_base_id", &self.knowledge_base_id);
        formatter.field("upload_id", &self.upload_id);
        formatter.field("knowledge_base_arn", &self.knowledge_base_arn);
        formatter.field("import_job_type", &self.import_job_type);
        formatter.field("status", &self.status);
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("failed_record_report", &"*** Sensitive Data Redacted ***");
        formatter.field("url_expiry", &self.url_expiry);
        formatter.field("created_time", &self.created_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("metadata", &self.metadata);
        formatter.field("external_source_configuration", &self.external_source_configuration);
        formatter.finish()
    }
}
impl ImportJobData {
    /// Creates a new builder-style object to manufacture [`ImportJobData`](crate::types::ImportJobData).
    pub fn builder() -> crate::types::builders::ImportJobDataBuilder {
        crate::types::builders::ImportJobDataBuilder::default()
    }
}

/// A builder for [`ImportJobData`](crate::types::ImportJobData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ImportJobDataBuilder {
    pub(crate) import_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) upload_id: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) import_job_type: ::std::option::Option<crate::types::ImportJobType>,
    pub(crate) status: ::std::option::Option<crate::types::ImportJobStatus>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) failed_record_report: ::std::option::Option<::std::string::String>,
    pub(crate) url_expiry: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) external_source_configuration: ::std::option::Option<crate::types::ExternalSourceConfiguration>,
}
impl ImportJobDataBuilder {
    /// <p>The identifier of the import job.</p>
    /// This field is required.
    pub fn import_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.import_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the import job.</p>
    pub fn set_import_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.import_job_id = input;
        self
    }
    /// <p>The identifier of the import job.</p>
    pub fn get_import_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.import_job_id
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Amazon Q Content resource to it.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    /// This field is required.
    pub fn upload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    pub fn set_upload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id = input;
        self
    }
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    pub fn get_upload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn get_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_arn
    }
    /// <p>The type of the import job.</p>
    /// This field is required.
    pub fn import_job_type(mut self, input: crate::types::ImportJobType) -> Self {
        self.import_job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the import job.</p>
    pub fn set_import_job_type(mut self, input: ::std::option::Option<crate::types::ImportJobType>) -> Self {
        self.import_job_type = input;
        self
    }
    /// <p>The type of the import job.</p>
    pub fn get_import_job_type(&self) -> &::std::option::Option<crate::types::ImportJobType> {
        &self.import_job_type
    }
    /// <p>The status of the import job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ImportJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the import job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ImportJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the import job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ImportJobStatus> {
        &self.status
    }
    /// <p>The download link to the resource file that is uploaded to the import job.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The download link to the resource file that is uploaded to the import job.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The download link to the resource file that is uploaded to the import job.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The link to donwload the information of resource data that failed to be imported.</p>
    pub fn failed_record_report(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failed_record_report = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The link to donwload the information of resource data that failed to be imported.</p>
    pub fn set_failed_record_report(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failed_record_report = input;
        self
    }
    /// <p>The link to donwload the information of resource data that failed to be imported.</p>
    pub fn get_failed_record_report(&self) -> &::std::option::Option<::std::string::String> {
        &self.failed_record_report
    }
    /// <p>The expiration time of the URL as an epoch timestamp.</p>
    /// This field is required.
    pub fn url_expiry(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.url_expiry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiration time of the URL as an epoch timestamp.</p>
    pub fn set_url_expiry(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.url_expiry = input;
        self
    }
    /// <p>The expiration time of the URL as an epoch timestamp.</p>
    pub fn get_url_expiry(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.url_expiry
    }
    /// <p>The timestamp when the import job was created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the import job was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp when the import job was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The timestamp when the import job data was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the import job data was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp when the import job data was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>The metadata fields of the imported Amazon Q resources.</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The metadata fields of the imported Amazon Q resources.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata fields of the imported Amazon Q resources.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.metadata
    }
    /// <p>The configuration information of the external data source.</p>
    pub fn external_source_configuration(mut self, input: crate::types::ExternalSourceConfiguration) -> Self {
        self.external_source_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information of the external data source.</p>
    pub fn set_external_source_configuration(mut self, input: ::std::option::Option<crate::types::ExternalSourceConfiguration>) -> Self {
        self.external_source_configuration = input;
        self
    }
    /// <p>The configuration information of the external data source.</p>
    pub fn get_external_source_configuration(&self) -> &::std::option::Option<crate::types::ExternalSourceConfiguration> {
        &self.external_source_configuration
    }
    /// Consumes the builder and constructs a [`ImportJobData`](crate::types::ImportJobData).
    /// This method will fail if any of the following fields are not set:
    /// - [`import_job_id`](crate::types::builders::ImportJobDataBuilder::import_job_id)
    /// - [`knowledge_base_id`](crate::types::builders::ImportJobDataBuilder::knowledge_base_id)
    /// - [`upload_id`](crate::types::builders::ImportJobDataBuilder::upload_id)
    /// - [`knowledge_base_arn`](crate::types::builders::ImportJobDataBuilder::knowledge_base_arn)
    /// - [`import_job_type`](crate::types::builders::ImportJobDataBuilder::import_job_type)
    /// - [`status`](crate::types::builders::ImportJobDataBuilder::status)
    /// - [`url`](crate::types::builders::ImportJobDataBuilder::url)
    /// - [`url_expiry`](crate::types::builders::ImportJobDataBuilder::url_expiry)
    /// - [`created_time`](crate::types::builders::ImportJobDataBuilder::created_time)
    /// - [`last_modified_time`](crate::types::builders::ImportJobDataBuilder::last_modified_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ImportJobData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImportJobData {
            import_job_id: self.import_job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "import_job_id",
                    "import_job_id was not specified but it is required when building ImportJobData",
                )
            })?,
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building ImportJobData",
                )
            })?,
            upload_id: self.upload_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "upload_id",
                    "upload_id was not specified but it is required when building ImportJobData",
                )
            })?,
            knowledge_base_arn: self.knowledge_base_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_arn",
                    "knowledge_base_arn was not specified but it is required when building ImportJobData",
                )
            })?,
            import_job_type: self.import_job_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "import_job_type",
                    "import_job_type was not specified but it is required when building ImportJobData",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ImportJobData",
                )
            })?,
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building ImportJobData",
                )
            })?,
            failed_record_report: self.failed_record_report,
            url_expiry: self.url_expiry.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url_expiry",
                    "url_expiry was not specified but it is required when building ImportJobData",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building ImportJobData",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building ImportJobData",
                )
            })?,
            metadata: self.metadata,
            external_source_configuration: self.external_source_configuration,
        })
    }
}
impl ::std::fmt::Debug for ImportJobDataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ImportJobDataBuilder");
        formatter.field("import_job_id", &self.import_job_id);
        formatter.field("knowledge_base_id", &self.knowledge_base_id);
        formatter.field("upload_id", &self.upload_id);
        formatter.field("knowledge_base_arn", &self.knowledge_base_arn);
        formatter.field("import_job_type", &self.import_job_type);
        formatter.field("status", &self.status);
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("failed_record_report", &"*** Sensitive Data Redacted ***");
        formatter.field("url_expiry", &self.url_expiry);
        formatter.field("created_time", &self.created_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("metadata", &self.metadata);
        formatter.field("external_source_configuration", &self.external_source_configuration);
        formatter.finish()
    }
}
