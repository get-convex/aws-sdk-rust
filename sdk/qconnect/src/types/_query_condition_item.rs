// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The condition for the query.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryConditionItem {
    /// <p>The name of the field for query condition to query on.</p>
    pub field: crate::types::QueryConditionFieldName,
    /// <p>The comparison operator for query condition to query on.</p>
    pub comparator: crate::types::QueryConditionComparisonOperator,
    /// <p>The value for the query condition to query on.</p>
    pub value: ::std::string::String,
}
impl QueryConditionItem {
    /// <p>The name of the field for query condition to query on.</p>
    pub fn field(&self) -> &crate::types::QueryConditionFieldName {
        &self.field
    }
    /// <p>The comparison operator for query condition to query on.</p>
    pub fn comparator(&self) -> &crate::types::QueryConditionComparisonOperator {
        &self.comparator
    }
    /// <p>The value for the query condition to query on.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl QueryConditionItem {
    /// Creates a new builder-style object to manufacture [`QueryConditionItem`](crate::types::QueryConditionItem).
    pub fn builder() -> crate::types::builders::QueryConditionItemBuilder {
        crate::types::builders::QueryConditionItemBuilder::default()
    }
}

/// A builder for [`QueryConditionItem`](crate::types::QueryConditionItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QueryConditionItemBuilder {
    pub(crate) field: ::std::option::Option<crate::types::QueryConditionFieldName>,
    pub(crate) comparator: ::std::option::Option<crate::types::QueryConditionComparisonOperator>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl QueryConditionItemBuilder {
    /// <p>The name of the field for query condition to query on.</p>
    /// This field is required.
    pub fn field(mut self, input: crate::types::QueryConditionFieldName) -> Self {
        self.field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the field for query condition to query on.</p>
    pub fn set_field(mut self, input: ::std::option::Option<crate::types::QueryConditionFieldName>) -> Self {
        self.field = input;
        self
    }
    /// <p>The name of the field for query condition to query on.</p>
    pub fn get_field(&self) -> &::std::option::Option<crate::types::QueryConditionFieldName> {
        &self.field
    }
    /// <p>The comparison operator for query condition to query on.</p>
    /// This field is required.
    pub fn comparator(mut self, input: crate::types::QueryConditionComparisonOperator) -> Self {
        self.comparator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The comparison operator for query condition to query on.</p>
    pub fn set_comparator(mut self, input: ::std::option::Option<crate::types::QueryConditionComparisonOperator>) -> Self {
        self.comparator = input;
        self
    }
    /// <p>The comparison operator for query condition to query on.</p>
    pub fn get_comparator(&self) -> &::std::option::Option<crate::types::QueryConditionComparisonOperator> {
        &self.comparator
    }
    /// <p>The value for the query condition to query on.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value for the query condition to query on.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value for the query condition to query on.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`QueryConditionItem`](crate::types::QueryConditionItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`field`](crate::types::builders::QueryConditionItemBuilder::field)
    /// - [`comparator`](crate::types::builders::QueryConditionItemBuilder::comparator)
    /// - [`value`](crate::types::builders::QueryConditionItemBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::QueryConditionItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueryConditionItem {
            field: self.field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field",
                    "field was not specified but it is required when building QueryConditionItem",
                )
            })?,
            comparator: self.comparator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "comparator",
                    "comparator was not specified but it is required when building QueryConditionItem",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building QueryConditionItem",
                )
            })?,
        })
    }
}
