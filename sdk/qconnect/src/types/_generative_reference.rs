// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Reference information about generative content.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GenerativeReference {
    /// <p>The identifier of the LLM model.</p>
    pub model_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the LLM model.</p>
    pub generation_id: ::std::option::Option<::std::string::String>,
}
impl GenerativeReference {
    /// <p>The identifier of the LLM model.</p>
    pub fn model_id(&self) -> ::std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p>The identifier of the LLM model.</p>
    pub fn generation_id(&self) -> ::std::option::Option<&str> {
        self.generation_id.as_deref()
    }
}
impl GenerativeReference {
    /// Creates a new builder-style object to manufacture [`GenerativeReference`](crate::types::GenerativeReference).
    pub fn builder() -> crate::types::builders::GenerativeReferenceBuilder {
        crate::types::builders::GenerativeReferenceBuilder::default()
    }
}

/// A builder for [`GenerativeReference`](crate::types::GenerativeReference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GenerativeReferenceBuilder {
    pub(crate) model_id: ::std::option::Option<::std::string::String>,
    pub(crate) generation_id: ::std::option::Option<::std::string::String>,
}
impl GenerativeReferenceBuilder {
    /// <p>The identifier of the LLM model.</p>
    pub fn model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the LLM model.</p>
    pub fn set_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The identifier of the LLM model.</p>
    pub fn get_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_id
    }
    /// <p>The identifier of the LLM model.</p>
    pub fn generation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the LLM model.</p>
    pub fn set_generation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generation_id = input;
        self
    }
    /// <p>The identifier of the LLM model.</p>
    pub fn get_generation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.generation_id
    }
    /// Consumes the builder and constructs a [`GenerativeReference`](crate::types::GenerativeReference).
    pub fn build(self) -> crate::types::GenerativeReference {
        crate::types::GenerativeReference {
            model_id: self.model_id,
            generation_id: self.generation_id,
        }
    }
}
