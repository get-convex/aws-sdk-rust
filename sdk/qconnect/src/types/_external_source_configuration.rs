// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration information of the external data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExternalSourceConfiguration {
    /// <p>The type of the external data source.</p>
    pub source: crate::types::ExternalSource,
    /// <p>The configuration information of the external data source.</p>
    pub configuration: ::std::option::Option<crate::types::Configuration>,
}
impl ExternalSourceConfiguration {
    /// <p>The type of the external data source.</p>
    pub fn source(&self) -> &crate::types::ExternalSource {
        &self.source
    }
    /// <p>The configuration information of the external data source.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::Configuration> {
        self.configuration.as_ref()
    }
}
impl ExternalSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`ExternalSourceConfiguration`](crate::types::ExternalSourceConfiguration).
    pub fn builder() -> crate::types::builders::ExternalSourceConfigurationBuilder {
        crate::types::builders::ExternalSourceConfigurationBuilder::default()
    }
}

/// A builder for [`ExternalSourceConfiguration`](crate::types::ExternalSourceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExternalSourceConfigurationBuilder {
    pub(crate) source: ::std::option::Option<crate::types::ExternalSource>,
    pub(crate) configuration: ::std::option::Option<crate::types::Configuration>,
}
impl ExternalSourceConfigurationBuilder {
    /// <p>The type of the external data source.</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::ExternalSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the external data source.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::ExternalSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The type of the external data source.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::ExternalSource> {
        &self.source
    }
    /// <p>The configuration information of the external data source.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::Configuration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information of the external data source.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::Configuration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration information of the external data source.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::Configuration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`ExternalSourceConfiguration`](crate::types::ExternalSourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`source`](crate::types::builders::ExternalSourceConfigurationBuilder::source)
    pub fn build(self) -> ::std::result::Result<crate::types::ExternalSourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExternalSourceConfiguration {
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building ExternalSourceConfiguration",
                )
            })?,
            configuration: self.configuration,
        })
    }
}
