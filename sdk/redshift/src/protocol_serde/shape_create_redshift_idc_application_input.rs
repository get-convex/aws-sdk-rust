// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_redshift_idc_application_input_input_input(
    input: &crate::operation::create_redshift_idc_application::CreateRedshiftIdcApplicationInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateRedshiftIdcApplication", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("IdcInstanceArn");
    if let Some(var_2) = &input.idc_instance_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RedshiftIdcApplicationName");
    if let Some(var_4) = &input.redshift_idc_application_name {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("IdentityNamespace");
    if let Some(var_6) = &input.identity_namespace {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("IdcDisplayName");
    if let Some(var_8) = &input.idc_display_name {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("IamRoleArn");
    if let Some(var_10) = &input.iam_role_arn {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("AuthorizedTokenIssuerList");
    if let Some(var_12) = &input.authorized_token_issuer_list {
        let mut list_14 = scope_11.start_list(false, None);
        for item_13 in var_12 {
            #[allow(unused_mut)]
            let mut entry_15 = list_14.entry();
            crate::protocol_serde::shape_authorized_token_issuer::ser_authorized_token_issuer(entry_15, item_13)?;
        }
        list_14.finish();
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("ServiceIntegrations");
    if let Some(var_17) = &input.service_integrations {
        let mut list_19 = scope_16.start_list(false, None);
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            #[allow(unused_mut)]
            let mut scope_21 = entry_20.prefix("member");
            crate::protocol_serde::shape_service_integrations_union::ser_service_integrations_union(scope_21, item_18)?;
        }
        list_19.finish();
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
