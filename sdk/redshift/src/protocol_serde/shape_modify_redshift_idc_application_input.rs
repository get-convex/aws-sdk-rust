// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_redshift_idc_application_input_input_input(
    input: &crate::operation::modify_redshift_idc_application::ModifyRedshiftIdcApplicationInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "ModifyRedshiftIdcApplication", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("RedshiftIdcApplicationArn");
    if let Some(var_2) = &input.redshift_idc_application_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("IdentityNamespace");
    if let Some(var_4) = &input.identity_namespace {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("IamRoleArn");
    if let Some(var_6) = &input.iam_role_arn {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("IdcDisplayName");
    if let Some(var_8) = &input.idc_display_name {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("AuthorizedTokenIssuerList");
    if let Some(var_10) = &input.authorized_token_issuer_list {
        let mut list_12 = scope_9.start_list(false, None);
        for item_11 in var_10 {
            #[allow(unused_mut)]
            let mut entry_13 = list_12.entry();
            crate::protocol_serde::shape_authorized_token_issuer::ser_authorized_token_issuer(entry_13, item_11)?;
        }
        list_12.finish();
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ServiceIntegrations");
    if let Some(var_15) = &input.service_integrations {
        let mut list_17 = scope_14.start_list(false, None);
        for item_16 in var_15 {
            #[allow(unused_mut)]
            let mut entry_18 = list_17.entry();
            #[allow(unused_mut)]
            let mut scope_19 = entry_18.prefix("member");
            crate::protocol_serde::shape_service_integrations_union::ser_service_integrations_union(scope_19, item_16)?;
        }
        list_17.finish();
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
