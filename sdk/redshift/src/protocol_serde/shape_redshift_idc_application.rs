// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_redshift_idc_application(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::RedshiftIdcApplication, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::RedshiftIdcApplication::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("IdcInstanceArn") /* IdcInstanceArn com.amazonaws.redshift#RedshiftIdcApplication$IdcInstanceArn */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_idc_instance_arn(var_1);
            }
            ,
            s if s.matches("RedshiftIdcApplicationName") /* RedshiftIdcApplicationName com.amazonaws.redshift#RedshiftIdcApplication$RedshiftIdcApplicationName */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_redshift_idc_application_name(var_2);
            }
            ,
            s if s.matches("RedshiftIdcApplicationArn") /* RedshiftIdcApplicationArn com.amazonaws.redshift#RedshiftIdcApplication$RedshiftIdcApplicationArn */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_redshift_idc_application_arn(var_3);
            }
            ,
            s if s.matches("IdentityNamespace") /* IdentityNamespace com.amazonaws.redshift#RedshiftIdcApplication$IdentityNamespace */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_identity_namespace(var_4);
            }
            ,
            s if s.matches("IdcDisplayName") /* IdcDisplayName com.amazonaws.redshift#RedshiftIdcApplication$IdcDisplayName */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_idc_display_name(var_5);
            }
            ,
            s if s.matches("IamRoleArn") /* IamRoleArn com.amazonaws.redshift#RedshiftIdcApplication$IamRoleArn */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_iam_role_arn(var_6);
            }
            ,
            s if s.matches("IdcManagedApplicationArn") /* IdcManagedApplicationArn com.amazonaws.redshift#RedshiftIdcApplication$IdcManagedApplicationArn */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_idc_managed_application_arn(var_7);
            }
            ,
            s if s.matches("IdcOnboardStatus") /* IdcOnboardStatus com.amazonaws.redshift#RedshiftIdcApplication$IdcOnboardStatus */ =>  {
                let var_8 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_idc_onboard_status(var_8);
            }
            ,
            s if s.matches("AuthorizedTokenIssuerList") /* AuthorizedTokenIssuerList com.amazonaws.redshift#RedshiftIdcApplication$AuthorizedTokenIssuerList */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_authorized_token_issuer_list::de_authorized_token_issuer_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_authorized_token_issuer_list(var_9);
            }
            ,
            s if s.matches("ServiceIntegrations") /* ServiceIntegrations com.amazonaws.redshift#RedshiftIdcApplication$ServiceIntegrations */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_service_integration_list::de_service_integration_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_service_integrations(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
