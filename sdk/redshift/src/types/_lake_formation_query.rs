// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Lake Formation scope.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LakeFormationQuery {
    /// <p>Determines whether the query scope is enabled or disabled.</p>
    pub authorization: ::std::option::Option<crate::types::ServiceAuthorization>,
}
impl LakeFormationQuery {
    /// <p>Determines whether the query scope is enabled or disabled.</p>
    pub fn authorization(&self) -> ::std::option::Option<&crate::types::ServiceAuthorization> {
        self.authorization.as_ref()
    }
}
impl LakeFormationQuery {
    /// Creates a new builder-style object to manufacture [`LakeFormationQuery`](crate::types::LakeFormationQuery).
    pub fn builder() -> crate::types::builders::LakeFormationQueryBuilder {
        crate::types::builders::LakeFormationQueryBuilder::default()
    }
}

/// A builder for [`LakeFormationQuery`](crate::types::LakeFormationQuery).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LakeFormationQueryBuilder {
    pub(crate) authorization: ::std::option::Option<crate::types::ServiceAuthorization>,
}
impl LakeFormationQueryBuilder {
    /// <p>Determines whether the query scope is enabled or disabled.</p>
    /// This field is required.
    pub fn authorization(mut self, input: crate::types::ServiceAuthorization) -> Self {
        self.authorization = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the query scope is enabled or disabled.</p>
    pub fn set_authorization(mut self, input: ::std::option::Option<crate::types::ServiceAuthorization>) -> Self {
        self.authorization = input;
        self
    }
    /// <p>Determines whether the query scope is enabled or disabled.</p>
    pub fn get_authorization(&self) -> &::std::option::Option<crate::types::ServiceAuthorization> {
        &self.authorization
    }
    /// Consumes the builder and constructs a [`LakeFormationQuery`](crate::types::LakeFormationQuery).
    pub fn build(self) -> crate::types::LakeFormationQuery {
        crate::types::LakeFormationQuery {
            authorization: self.authorization,
        }
    }
}
