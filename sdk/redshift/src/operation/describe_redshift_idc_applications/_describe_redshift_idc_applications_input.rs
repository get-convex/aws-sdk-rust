// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeRedshiftIdcApplicationsInput {
    /// <p>The ARN for the Redshift application that integrates with IAM Identity Center.</p>
    pub redshift_idc_application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    pub max_records: ::std::option::Option<i32>,
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}
impl DescribeRedshiftIdcApplicationsInput {
    /// <p>The ARN for the Redshift application that integrates with IAM Identity Center.</p>
    pub fn redshift_idc_application_arn(&self) -> ::std::option::Option<&str> {
        self.redshift_idc_application_arn.as_deref()
    }
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeRedshiftIdcApplicationsInput {
    /// Creates a new builder-style object to manufacture [`DescribeRedshiftIdcApplicationsInput`](crate::operation::describe_redshift_idc_applications::DescribeRedshiftIdcApplicationsInput).
    pub fn builder() -> crate::operation::describe_redshift_idc_applications::builders::DescribeRedshiftIdcApplicationsInputBuilder {
        crate::operation::describe_redshift_idc_applications::builders::DescribeRedshiftIdcApplicationsInputBuilder::default()
    }
}

/// A builder for [`DescribeRedshiftIdcApplicationsInput`](crate::operation::describe_redshift_idc_applications::DescribeRedshiftIdcApplicationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeRedshiftIdcApplicationsInputBuilder {
    pub(crate) redshift_idc_application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) max_records: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
}
impl DescribeRedshiftIdcApplicationsInputBuilder {
    /// <p>The ARN for the Redshift application that integrates with IAM Identity Center.</p>
    pub fn redshift_idc_application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redshift_idc_application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the Redshift application that integrates with IAM Identity Center.</p>
    pub fn set_redshift_idc_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redshift_idc_application_arn = input;
        self
    }
    /// <p>The ARN for the Redshift application that integrates with IAM Identity Center.</p>
    pub fn get_redshift_idc_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.redshift_idc_application_arn
    }
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Consumes the builder and constructs a [`DescribeRedshiftIdcApplicationsInput`](crate::operation::describe_redshift_idc_applications::DescribeRedshiftIdcApplicationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_redshift_idc_applications::DescribeRedshiftIdcApplicationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_redshift_idc_applications::DescribeRedshiftIdcApplicationsInput {
                redshift_idc_application_arn: self.redshift_idc_application_arn,
                max_records: self.max_records,
                marker: self.marker,
            },
        )
    }
}
