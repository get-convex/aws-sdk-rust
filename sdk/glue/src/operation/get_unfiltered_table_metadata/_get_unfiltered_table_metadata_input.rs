// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetUnfilteredTableMetadataInput {
    /// <p>Specified only if the base tables belong to a different Amazon Web Services Region.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The catalog ID where the table resides.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>(Required) Specifies the name of a database that contains the table.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>(Required) Specifies the name of a table for which you are requesting metadata.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A structure containing Lake Formation audit context information.</p>
    pub audit_context: ::std::option::Option<crate::types::AuditContext>,
    /// <p>(Required) A list of supported permission types.</p>
    pub supported_permission_types: ::std::option::Option<::std::vec::Vec<crate::types::PermissionType>>,
    /// <p>A structure specifying the dialect and dialect version used by the query engine.</p>
    pub supported_dialect: ::std::option::Option<crate::types::SupportedDialect>,
    /// <p>The Lake Formation data permissions of the caller on the table. Used to authorize the call when no view context is found.</p>
    pub permissions: ::std::option::Option<::std::vec::Vec<crate::types::Permission>>,
    /// <p>A structure used as a protocol between query engines and Lake Formation or Glue. Contains both a Lake Formation generated authorization identifier and information from the request's authorization context.</p>
    pub query_session_context: ::std::option::Option<crate::types::QuerySessionContext>,
}
impl GetUnfilteredTableMetadataInput {
    /// <p>Specified only if the base tables belong to a different Amazon Web Services Region.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The catalog ID where the table resides.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>(Required) Specifies the name of a database that contains the table.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>(Required) Specifies the name of a table for which you are requesting metadata.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A structure containing Lake Formation audit context information.</p>
    pub fn audit_context(&self) -> ::std::option::Option<&crate::types::AuditContext> {
        self.audit_context.as_ref()
    }
    /// <p>(Required) A list of supported permission types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_permission_types.is_none()`.
    pub fn supported_permission_types(&self) -> &[crate::types::PermissionType] {
        self.supported_permission_types.as_deref().unwrap_or_default()
    }
    /// <p>A structure specifying the dialect and dialect version used by the query engine.</p>
    pub fn supported_dialect(&self) -> ::std::option::Option<&crate::types::SupportedDialect> {
        self.supported_dialect.as_ref()
    }
    /// <p>The Lake Formation data permissions of the caller on the table. Used to authorize the call when no view context is found.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.permissions.is_none()`.
    pub fn permissions(&self) -> &[crate::types::Permission] {
        self.permissions.as_deref().unwrap_or_default()
    }
    /// <p>A structure used as a protocol between query engines and Lake Formation or Glue. Contains both a Lake Formation generated authorization identifier and information from the request's authorization context.</p>
    pub fn query_session_context(&self) -> ::std::option::Option<&crate::types::QuerySessionContext> {
        self.query_session_context.as_ref()
    }
}
impl GetUnfilteredTableMetadataInput {
    /// Creates a new builder-style object to manufacture [`GetUnfilteredTableMetadataInput`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput).
    pub fn builder() -> crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataInputBuilder {
        crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataInputBuilder::default()
    }
}

/// A builder for [`GetUnfilteredTableMetadataInput`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetUnfilteredTableMetadataInputBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) audit_context: ::std::option::Option<crate::types::AuditContext>,
    pub(crate) supported_permission_types: ::std::option::Option<::std::vec::Vec<crate::types::PermissionType>>,
    pub(crate) supported_dialect: ::std::option::Option<crate::types::SupportedDialect>,
    pub(crate) permissions: ::std::option::Option<::std::vec::Vec<crate::types::Permission>>,
    pub(crate) query_session_context: ::std::option::Option<crate::types::QuerySessionContext>,
}
impl GetUnfilteredTableMetadataInputBuilder {
    /// <p>Specified only if the base tables belong to a different Amazon Web Services Region.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specified only if the base tables belong to a different Amazon Web Services Region.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>Specified only if the base tables belong to a different Amazon Web Services Region.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The catalog ID where the table resides.</p>
    /// This field is required.
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog ID where the table resides.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The catalog ID where the table resides.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>(Required) Specifies the name of a database that contains the table.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Required) Specifies the name of a database that contains the table.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>(Required) Specifies the name of a database that contains the table.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>(Required) Specifies the name of a table for which you are requesting metadata.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Required) Specifies the name of a table for which you are requesting metadata.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>(Required) Specifies the name of a table for which you are requesting metadata.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A structure containing Lake Formation audit context information.</p>
    pub fn audit_context(mut self, input: crate::types::AuditContext) -> Self {
        self.audit_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing Lake Formation audit context information.</p>
    pub fn set_audit_context(mut self, input: ::std::option::Option<crate::types::AuditContext>) -> Self {
        self.audit_context = input;
        self
    }
    /// <p>A structure containing Lake Formation audit context information.</p>
    pub fn get_audit_context(&self) -> &::std::option::Option<crate::types::AuditContext> {
        &self.audit_context
    }
    /// Appends an item to `supported_permission_types`.
    ///
    /// To override the contents of this collection use [`set_supported_permission_types`](Self::set_supported_permission_types).
    ///
    /// <p>(Required) A list of supported permission types.</p>
    pub fn supported_permission_types(mut self, input: crate::types::PermissionType) -> Self {
        let mut v = self.supported_permission_types.unwrap_or_default();
        v.push(input);
        self.supported_permission_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>(Required) A list of supported permission types.</p>
    pub fn set_supported_permission_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PermissionType>>) -> Self {
        self.supported_permission_types = input;
        self
    }
    /// <p>(Required) A list of supported permission types.</p>
    pub fn get_supported_permission_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PermissionType>> {
        &self.supported_permission_types
    }
    /// <p>A structure specifying the dialect and dialect version used by the query engine.</p>
    pub fn supported_dialect(mut self, input: crate::types::SupportedDialect) -> Self {
        self.supported_dialect = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure specifying the dialect and dialect version used by the query engine.</p>
    pub fn set_supported_dialect(mut self, input: ::std::option::Option<crate::types::SupportedDialect>) -> Self {
        self.supported_dialect = input;
        self
    }
    /// <p>A structure specifying the dialect and dialect version used by the query engine.</p>
    pub fn get_supported_dialect(&self) -> &::std::option::Option<crate::types::SupportedDialect> {
        &self.supported_dialect
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>The Lake Formation data permissions of the caller on the table. Used to authorize the call when no view context is found.</p>
    pub fn permissions(mut self, input: crate::types::Permission) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Lake Formation data permissions of the caller on the table. Used to authorize the call when no view context is found.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Permission>>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>The Lake Formation data permissions of the caller on the table. Used to authorize the call when no view context is found.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Permission>> {
        &self.permissions
    }
    /// <p>A structure used as a protocol between query engines and Lake Formation or Glue. Contains both a Lake Formation generated authorization identifier and information from the request's authorization context.</p>
    pub fn query_session_context(mut self, input: crate::types::QuerySessionContext) -> Self {
        self.query_session_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure used as a protocol between query engines and Lake Formation or Glue. Contains both a Lake Formation generated authorization identifier and information from the request's authorization context.</p>
    pub fn set_query_session_context(mut self, input: ::std::option::Option<crate::types::QuerySessionContext>) -> Self {
        self.query_session_context = input;
        self
    }
    /// <p>A structure used as a protocol between query engines and Lake Formation or Glue. Contains both a Lake Formation generated authorization identifier and information from the request's authorization context.</p>
    pub fn get_query_session_context(&self) -> &::std::option::Option<crate::types::QuerySessionContext> {
        &self.query_session_context
    }
    /// Consumes the builder and constructs a [`GetUnfilteredTableMetadataInput`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput {
            region: self.region,
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            name: self.name,
            audit_context: self.audit_context,
            supported_permission_types: self.supported_permission_types,
            supported_dialect: self.supported_dialect,
            permissions: self.permissions,
            query_session_context: self.query_session_context,
        })
    }
}
