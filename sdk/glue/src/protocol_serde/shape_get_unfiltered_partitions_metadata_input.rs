// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_unfiltered_partitions_metadata_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_unfiltered_partitions_metadata::GetUnfilteredPartitionsMetadataInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.region {
        object.key("Region").string(var_1.as_str());
    }
    if let Some(var_2) = &input.catalog_id {
        object.key("CatalogId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.database_name {
        object.key("DatabaseName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.table_name {
        object.key("TableName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.expression {
        object.key("Expression").string(var_5.as_str());
    }
    if let Some(var_6) = &input.audit_context {
        #[allow(unused_mut)]
        let mut object_7 = object.key("AuditContext").start_object();
        crate::protocol_serde::shape_audit_context::ser_audit_context(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.supported_permission_types {
        let mut array_9 = object.key("SupportedPermissionTypes").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.next_token {
        object.key("NextToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.segment {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Segment").start_object();
        crate::protocol_serde::shape_segment::ser_segment(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.query_session_context {
        #[allow(unused_mut)]
        let mut object_16 = object.key("QuerySessionContext").start_object();
        crate::protocol_serde::shape_query_session_context::ser_query_session_context(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
