// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_unfiltered_partition_metadata_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_unfiltered_partition_metadata::GetUnfilteredPartitionMetadataInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.region {
        object.key("Region").string(var_1.as_str());
    }
    if let Some(var_2) = &input.catalog_id {
        object.key("CatalogId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.database_name {
        object.key("DatabaseName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.table_name {
        object.key("TableName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.partition_values {
        let mut array_6 = object.key("PartitionValues").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.audit_context {
        #[allow(unused_mut)]
        let mut object_9 = object.key("AuditContext").start_object();
        crate::protocol_serde::shape_audit_context::ser_audit_context(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.supported_permission_types {
        let mut array_11 = object.key("SupportedPermissionTypes").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.query_session_context {
        #[allow(unused_mut)]
        let mut object_14 = object.key("QuerySessionContext").start_object();
        crate::protocol_serde::shape_query_session_context::ser_query_session_context(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}
