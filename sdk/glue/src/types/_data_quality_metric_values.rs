// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the data quality metric value according to the analysis of historical data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataQualityMetricValues {
    /// <p>The actual value of the data quality metric.</p>
    pub actual_value: ::std::option::Option<f64>,
    /// <p>The expected value of the data quality metric according to the analysis of historical data.</p>
    pub expected_value: ::std::option::Option<f64>,
    /// <p>The lower limit of the data quality metric value according to the analysis of historical data.</p>
    pub lower_limit: ::std::option::Option<f64>,
    /// <p>The upper limit of the data quality metric value according to the analysis of historical data.</p>
    pub upper_limit: ::std::option::Option<f64>,
}
impl DataQualityMetricValues {
    /// <p>The actual value of the data quality metric.</p>
    pub fn actual_value(&self) -> ::std::option::Option<f64> {
        self.actual_value
    }
    /// <p>The expected value of the data quality metric according to the analysis of historical data.</p>
    pub fn expected_value(&self) -> ::std::option::Option<f64> {
        self.expected_value
    }
    /// <p>The lower limit of the data quality metric value according to the analysis of historical data.</p>
    pub fn lower_limit(&self) -> ::std::option::Option<f64> {
        self.lower_limit
    }
    /// <p>The upper limit of the data quality metric value according to the analysis of historical data.</p>
    pub fn upper_limit(&self) -> ::std::option::Option<f64> {
        self.upper_limit
    }
}
impl DataQualityMetricValues {
    /// Creates a new builder-style object to manufacture [`DataQualityMetricValues`](crate::types::DataQualityMetricValues).
    pub fn builder() -> crate::types::builders::DataQualityMetricValuesBuilder {
        crate::types::builders::DataQualityMetricValuesBuilder::default()
    }
}

/// A builder for [`DataQualityMetricValues`](crate::types::DataQualityMetricValues).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataQualityMetricValuesBuilder {
    pub(crate) actual_value: ::std::option::Option<f64>,
    pub(crate) expected_value: ::std::option::Option<f64>,
    pub(crate) lower_limit: ::std::option::Option<f64>,
    pub(crate) upper_limit: ::std::option::Option<f64>,
}
impl DataQualityMetricValuesBuilder {
    /// <p>The actual value of the data quality metric.</p>
    pub fn actual_value(mut self, input: f64) -> Self {
        self.actual_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The actual value of the data quality metric.</p>
    pub fn set_actual_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.actual_value = input;
        self
    }
    /// <p>The actual value of the data quality metric.</p>
    pub fn get_actual_value(&self) -> &::std::option::Option<f64> {
        &self.actual_value
    }
    /// <p>The expected value of the data quality metric according to the analysis of historical data.</p>
    pub fn expected_value(mut self, input: f64) -> Self {
        self.expected_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected value of the data quality metric according to the analysis of historical data.</p>
    pub fn set_expected_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.expected_value = input;
        self
    }
    /// <p>The expected value of the data quality metric according to the analysis of historical data.</p>
    pub fn get_expected_value(&self) -> &::std::option::Option<f64> {
        &self.expected_value
    }
    /// <p>The lower limit of the data quality metric value according to the analysis of historical data.</p>
    pub fn lower_limit(mut self, input: f64) -> Self {
        self.lower_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lower limit of the data quality metric value according to the analysis of historical data.</p>
    pub fn set_lower_limit(mut self, input: ::std::option::Option<f64>) -> Self {
        self.lower_limit = input;
        self
    }
    /// <p>The lower limit of the data quality metric value according to the analysis of historical data.</p>
    pub fn get_lower_limit(&self) -> &::std::option::Option<f64> {
        &self.lower_limit
    }
    /// <p>The upper limit of the data quality metric value according to the analysis of historical data.</p>
    pub fn upper_limit(mut self, input: f64) -> Self {
        self.upper_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upper limit of the data quality metric value according to the analysis of historical data.</p>
    pub fn set_upper_limit(mut self, input: ::std::option::Option<f64>) -> Self {
        self.upper_limit = input;
        self
    }
    /// <p>The upper limit of the data quality metric value according to the analysis of historical data.</p>
    pub fn get_upper_limit(&self) -> &::std::option::Option<f64> {
        &self.upper_limit
    }
    /// Consumes the builder and constructs a [`DataQualityMetricValues`](crate::types::DataQualityMetricValues).
    pub fn build(self) -> crate::types::DataQualityMetricValues {
        crate::types::DataQualityMetricValues {
            actual_value: self.actual_value,
            expected_value: self.expected_value,
            lower_limit: self.lower_limit,
            upper_limit: self.upper_limit,
        }
    }
}
