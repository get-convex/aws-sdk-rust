// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure specifying the dialect and dialect version used by the query engine.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SupportedDialect {
    /// <p>The dialect of the query engine.</p>
    pub dialect: ::std::option::Option<crate::types::ViewDialect>,
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub dialect_version: ::std::option::Option<::std::string::String>,
}
impl SupportedDialect {
    /// <p>The dialect of the query engine.</p>
    pub fn dialect(&self) -> ::std::option::Option<&crate::types::ViewDialect> {
        self.dialect.as_ref()
    }
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub fn dialect_version(&self) -> ::std::option::Option<&str> {
        self.dialect_version.as_deref()
    }
}
impl SupportedDialect {
    /// Creates a new builder-style object to manufacture [`SupportedDialect`](crate::types::SupportedDialect).
    pub fn builder() -> crate::types::builders::SupportedDialectBuilder {
        crate::types::builders::SupportedDialectBuilder::default()
    }
}

/// A builder for [`SupportedDialect`](crate::types::SupportedDialect).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SupportedDialectBuilder {
    pub(crate) dialect: ::std::option::Option<crate::types::ViewDialect>,
    pub(crate) dialect_version: ::std::option::Option<::std::string::String>,
}
impl SupportedDialectBuilder {
    /// <p>The dialect of the query engine.</p>
    pub fn dialect(mut self, input: crate::types::ViewDialect) -> Self {
        self.dialect = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dialect of the query engine.</p>
    pub fn set_dialect(mut self, input: ::std::option::Option<crate::types::ViewDialect>) -> Self {
        self.dialect = input;
        self
    }
    /// <p>The dialect of the query engine.</p>
    pub fn get_dialect(&self) -> &::std::option::Option<crate::types::ViewDialect> {
        &self.dialect
    }
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub fn dialect_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dialect_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub fn set_dialect_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dialect_version = input;
        self
    }
    /// <p>The version of the dialect of the query engine. For example, 3.0.0.</p>
    pub fn get_dialect_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.dialect_version
    }
    /// Consumes the builder and constructs a [`SupportedDialect`](crate::types::SupportedDialect).
    pub fn build(self) -> crate::types::SupportedDialect {
        crate::types::SupportedDialect {
            dialect: self.dialect,
            dialect_version: self.dialect_version,
        }
    }
}
