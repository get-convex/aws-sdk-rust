// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the observation generated after evaluating the rules and analyzers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataQualityObservation {
    /// <p>A description of the data quality observation.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>An object of type <code>MetricBasedObservation</code> representing the observation that is based on evaluated data quality metrics.</p>
    pub metric_based_observation: ::std::option::Option<crate::types::MetricBasedObservation>,
}
impl DataQualityObservation {
    /// <p>A description of the data quality observation.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An object of type <code>MetricBasedObservation</code> representing the observation that is based on evaluated data quality metrics.</p>
    pub fn metric_based_observation(&self) -> ::std::option::Option<&crate::types::MetricBasedObservation> {
        self.metric_based_observation.as_ref()
    }
}
impl DataQualityObservation {
    /// Creates a new builder-style object to manufacture [`DataQualityObservation`](crate::types::DataQualityObservation).
    pub fn builder() -> crate::types::builders::DataQualityObservationBuilder {
        crate::types::builders::DataQualityObservationBuilder::default()
    }
}

/// A builder for [`DataQualityObservation`](crate::types::DataQualityObservation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataQualityObservationBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) metric_based_observation: ::std::option::Option<crate::types::MetricBasedObservation>,
}
impl DataQualityObservationBuilder {
    /// <p>A description of the data quality observation.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the data quality observation.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the data quality observation.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>An object of type <code>MetricBasedObservation</code> representing the observation that is based on evaluated data quality metrics.</p>
    pub fn metric_based_observation(mut self, input: crate::types::MetricBasedObservation) -> Self {
        self.metric_based_observation = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object of type <code>MetricBasedObservation</code> representing the observation that is based on evaluated data quality metrics.</p>
    pub fn set_metric_based_observation(mut self, input: ::std::option::Option<crate::types::MetricBasedObservation>) -> Self {
        self.metric_based_observation = input;
        self
    }
    /// <p>An object of type <code>MetricBasedObservation</code> representing the observation that is based on evaluated data quality metrics.</p>
    pub fn get_metric_based_observation(&self) -> &::std::option::Option<crate::types::MetricBasedObservation> {
        &self.metric_based_observation
    }
    /// Consumes the builder and constructs a [`DataQualityObservation`](crate::types::DataQualityObservation).
    pub fn build(self) -> crate::types::DataQualityObservation {
        crate::types::DataQualityObservation {
            description: self.description,
            metric_based_observation: self.metric_based_observation,
        }
    }
}
