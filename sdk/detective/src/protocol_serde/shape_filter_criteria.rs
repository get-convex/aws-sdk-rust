// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_filter_criteria(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FilterCriteria,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.severity {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Severity").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.status {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Status").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.state {
        #[allow(unused_mut)]
        let mut object_6 = object.key("State").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.entity_arn {
        #[allow(unused_mut)]
        let mut object_8 = object.key("EntityArn").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.created_time {
        #[allow(unused_mut)]
        let mut object_10 = object.key("CreatedTime").start_object();
        crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
