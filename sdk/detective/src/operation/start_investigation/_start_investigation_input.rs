// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartInvestigationInput {
    /// <p>The ARN of the behavior graph.</p>
    pub graph_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub entity_arn: ::std::option::Option<::std::string::String>,
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub scope_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub scope_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StartInvestigationInput {
    /// <p>The ARN of the behavior graph.</p>
    pub fn graph_arn(&self) -> ::std::option::Option<&str> {
        self.graph_arn.as_deref()
    }
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub fn entity_arn(&self) -> ::std::option::Option<&str> {
        self.entity_arn.as_deref()
    }
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn scope_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.scope_start_time.as_ref()
    }
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn scope_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.scope_end_time.as_ref()
    }
}
impl StartInvestigationInput {
    /// Creates a new builder-style object to manufacture [`StartInvestigationInput`](crate::operation::start_investigation::StartInvestigationInput).
    pub fn builder() -> crate::operation::start_investigation::builders::StartInvestigationInputBuilder {
        crate::operation::start_investigation::builders::StartInvestigationInputBuilder::default()
    }
}

/// A builder for [`StartInvestigationInput`](crate::operation::start_investigation::StartInvestigationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartInvestigationInputBuilder {
    pub(crate) graph_arn: ::std::option::Option<::std::string::String>,
    pub(crate) entity_arn: ::std::option::Option<::std::string::String>,
    pub(crate) scope_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) scope_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StartInvestigationInputBuilder {
    /// <p>The ARN of the behavior graph.</p>
    /// This field is required.
    pub fn graph_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the behavior graph.</p>
    pub fn set_graph_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_arn = input;
        self
    }
    /// <p>The ARN of the behavior graph.</p>
    pub fn get_graph_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_arn
    }
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    /// This field is required.
    pub fn entity_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub fn set_entity_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub fn get_entity_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_arn
    }
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    /// This field is required.
    pub fn scope_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.scope_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn set_scope_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.scope_start_time = input;
        self
    }
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn get_scope_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.scope_start_time
    }
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    /// This field is required.
    pub fn scope_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.scope_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn set_scope_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.scope_end_time = input;
        self
    }
    /// <p>The data and time when the investigation began. The value is an UTC ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn get_scope_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.scope_end_time
    }
    /// Consumes the builder and constructs a [`StartInvestigationInput`](crate::operation::start_investigation::StartInvestigationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_investigation::StartInvestigationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_investigation::StartInvestigationInput {
            graph_arn: self.graph_arn,
            entity_arn: self.entity_arn,
            scope_start_time: self.scope_start_time,
            scope_end_time: self.scope_end_time,
        })
    }
}
