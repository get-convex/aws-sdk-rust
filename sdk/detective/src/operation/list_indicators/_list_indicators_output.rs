// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListIndicatorsOutput {
    /// <p>The ARN of the behavior graph.</p>
    pub graph_arn: ::std::option::Option<::std::string::String>,
    /// <p>The investigation ID of the investigation report.</p>
    pub investigation_id: ::std::option::Option<::std::string::String>,
    /// <p>List if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Indicators of compromise listed based on severity.</p>
    pub indicators: ::std::option::Option<::std::vec::Vec<crate::types::Indicator>>,
    _request_id: Option<String>,
}
impl ListIndicatorsOutput {
    /// <p>The ARN of the behavior graph.</p>
    pub fn graph_arn(&self) -> ::std::option::Option<&str> {
        self.graph_arn.as_deref()
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn investigation_id(&self) -> ::std::option::Option<&str> {
        self.investigation_id.as_deref()
    }
    /// <p>List if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Indicators of compromise listed based on severity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.indicators.is_none()`.
    pub fn indicators(&self) -> &[crate::types::Indicator] {
        self.indicators.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListIndicatorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListIndicatorsOutput {
    /// Creates a new builder-style object to manufacture [`ListIndicatorsOutput`](crate::operation::list_indicators::ListIndicatorsOutput).
    pub fn builder() -> crate::operation::list_indicators::builders::ListIndicatorsOutputBuilder {
        crate::operation::list_indicators::builders::ListIndicatorsOutputBuilder::default()
    }
}

/// A builder for [`ListIndicatorsOutput`](crate::operation::list_indicators::ListIndicatorsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListIndicatorsOutputBuilder {
    pub(crate) graph_arn: ::std::option::Option<::std::string::String>,
    pub(crate) investigation_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) indicators: ::std::option::Option<::std::vec::Vec<crate::types::Indicator>>,
    _request_id: Option<String>,
}
impl ListIndicatorsOutputBuilder {
    /// <p>The ARN of the behavior graph.</p>
    pub fn graph_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the behavior graph.</p>
    pub fn set_graph_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_arn = input;
        self
    }
    /// <p>The ARN of the behavior graph.</p>
    pub fn get_graph_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_arn
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn investigation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.investigation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn set_investigation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.investigation_id = input;
        self
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn get_investigation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.investigation_id
    }
    /// <p>List if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>List if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>List if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return a Validation Exception error.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `indicators`.
    ///
    /// To override the contents of this collection use [`set_indicators`](Self::set_indicators).
    ///
    /// <p>Indicators of compromise listed based on severity.</p>
    pub fn indicators(mut self, input: crate::types::Indicator) -> Self {
        let mut v = self.indicators.unwrap_or_default();
        v.push(input);
        self.indicators = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicators of compromise listed based on severity.</p>
    pub fn set_indicators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Indicator>>) -> Self {
        self.indicators = input;
        self
    }
    /// <p>Indicators of compromise listed based on severity.</p>
    pub fn get_indicators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Indicator>> {
        &self.indicators
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListIndicatorsOutput`](crate::operation::list_indicators::ListIndicatorsOutput).
    pub fn build(self) -> crate::operation::list_indicators::ListIndicatorsOutput {
        crate::operation::list_indicators::ListIndicatorsOutput {
            graph_arn: self.graph_arn,
            investigation_id: self.investigation_id,
            next_token: self.next_token,
            indicators: self.indicators,
            _request_id: self._request_id,
        }
    }
}
