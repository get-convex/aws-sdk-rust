// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the indicators of compromise which are used to determine if a resource is involved in a security incident.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IndicatorDetail {
    /// <p>Details about the indicator of compromise.</p>
    pub ttps_observed_detail: ::std::option::Option<crate::types::TtPsObservedDetail>,
    /// <p>Identifies unusual and impossible user activity for an account.</p>
    pub impossible_travel_detail: ::std::option::Option<crate::types::ImpossibleTravelDetail>,
    /// <p>Suspicious IP addresses that are flagged, which indicates critical or severe threats based on threat intelligence by Detective. This indicator is derived from AWS threat intelligence.</p>
    pub flagged_ip_address_detail: ::std::option::Option<crate::types::FlaggedIpAddressDetail>,
    /// <p>Contains details about the new geographic location.</p>
    pub new_geolocation_detail: ::std::option::Option<crate::types::NewGeolocationDetail>,
    /// <p>Contains details about the new Autonomous System Organization (ASO).</p>
    pub new_aso_detail: ::std::option::Option<crate::types::NewAsoDetail>,
    /// <p>Contains details about the new user agent.</p>
    pub new_user_agent_detail: ::std::option::Option<crate::types::NewUserAgentDetail>,
    /// <p>Contains details about related findings.</p>
    pub related_finding_detail: ::std::option::Option<crate::types::RelatedFindingDetail>,
    /// <p>Contains details about related finding groups.</p>
    pub related_finding_group_detail: ::std::option::Option<crate::types::RelatedFindingGroupDetail>,
}
impl IndicatorDetail {
    /// <p>Details about the indicator of compromise.</p>
    pub fn ttps_observed_detail(&self) -> ::std::option::Option<&crate::types::TtPsObservedDetail> {
        self.ttps_observed_detail.as_ref()
    }
    /// <p>Identifies unusual and impossible user activity for an account.</p>
    pub fn impossible_travel_detail(&self) -> ::std::option::Option<&crate::types::ImpossibleTravelDetail> {
        self.impossible_travel_detail.as_ref()
    }
    /// <p>Suspicious IP addresses that are flagged, which indicates critical or severe threats based on threat intelligence by Detective. This indicator is derived from AWS threat intelligence.</p>
    pub fn flagged_ip_address_detail(&self) -> ::std::option::Option<&crate::types::FlaggedIpAddressDetail> {
        self.flagged_ip_address_detail.as_ref()
    }
    /// <p>Contains details about the new geographic location.</p>
    pub fn new_geolocation_detail(&self) -> ::std::option::Option<&crate::types::NewGeolocationDetail> {
        self.new_geolocation_detail.as_ref()
    }
    /// <p>Contains details about the new Autonomous System Organization (ASO).</p>
    pub fn new_aso_detail(&self) -> ::std::option::Option<&crate::types::NewAsoDetail> {
        self.new_aso_detail.as_ref()
    }
    /// <p>Contains details about the new user agent.</p>
    pub fn new_user_agent_detail(&self) -> ::std::option::Option<&crate::types::NewUserAgentDetail> {
        self.new_user_agent_detail.as_ref()
    }
    /// <p>Contains details about related findings.</p>
    pub fn related_finding_detail(&self) -> ::std::option::Option<&crate::types::RelatedFindingDetail> {
        self.related_finding_detail.as_ref()
    }
    /// <p>Contains details about related finding groups.</p>
    pub fn related_finding_group_detail(&self) -> ::std::option::Option<&crate::types::RelatedFindingGroupDetail> {
        self.related_finding_group_detail.as_ref()
    }
}
impl IndicatorDetail {
    /// Creates a new builder-style object to manufacture [`IndicatorDetail`](crate::types::IndicatorDetail).
    pub fn builder() -> crate::types::builders::IndicatorDetailBuilder {
        crate::types::builders::IndicatorDetailBuilder::default()
    }
}

/// A builder for [`IndicatorDetail`](crate::types::IndicatorDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IndicatorDetailBuilder {
    pub(crate) ttps_observed_detail: ::std::option::Option<crate::types::TtPsObservedDetail>,
    pub(crate) impossible_travel_detail: ::std::option::Option<crate::types::ImpossibleTravelDetail>,
    pub(crate) flagged_ip_address_detail: ::std::option::Option<crate::types::FlaggedIpAddressDetail>,
    pub(crate) new_geolocation_detail: ::std::option::Option<crate::types::NewGeolocationDetail>,
    pub(crate) new_aso_detail: ::std::option::Option<crate::types::NewAsoDetail>,
    pub(crate) new_user_agent_detail: ::std::option::Option<crate::types::NewUserAgentDetail>,
    pub(crate) related_finding_detail: ::std::option::Option<crate::types::RelatedFindingDetail>,
    pub(crate) related_finding_group_detail: ::std::option::Option<crate::types::RelatedFindingGroupDetail>,
}
impl IndicatorDetailBuilder {
    /// <p>Details about the indicator of compromise.</p>
    pub fn ttps_observed_detail(mut self, input: crate::types::TtPsObservedDetail) -> Self {
        self.ttps_observed_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the indicator of compromise.</p>
    pub fn set_ttps_observed_detail(mut self, input: ::std::option::Option<crate::types::TtPsObservedDetail>) -> Self {
        self.ttps_observed_detail = input;
        self
    }
    /// <p>Details about the indicator of compromise.</p>
    pub fn get_ttps_observed_detail(&self) -> &::std::option::Option<crate::types::TtPsObservedDetail> {
        &self.ttps_observed_detail
    }
    /// <p>Identifies unusual and impossible user activity for an account.</p>
    pub fn impossible_travel_detail(mut self, input: crate::types::ImpossibleTravelDetail) -> Self {
        self.impossible_travel_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies unusual and impossible user activity for an account.</p>
    pub fn set_impossible_travel_detail(mut self, input: ::std::option::Option<crate::types::ImpossibleTravelDetail>) -> Self {
        self.impossible_travel_detail = input;
        self
    }
    /// <p>Identifies unusual and impossible user activity for an account.</p>
    pub fn get_impossible_travel_detail(&self) -> &::std::option::Option<crate::types::ImpossibleTravelDetail> {
        &self.impossible_travel_detail
    }
    /// <p>Suspicious IP addresses that are flagged, which indicates critical or severe threats based on threat intelligence by Detective. This indicator is derived from AWS threat intelligence.</p>
    pub fn flagged_ip_address_detail(mut self, input: crate::types::FlaggedIpAddressDetail) -> Self {
        self.flagged_ip_address_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Suspicious IP addresses that are flagged, which indicates critical or severe threats based on threat intelligence by Detective. This indicator is derived from AWS threat intelligence.</p>
    pub fn set_flagged_ip_address_detail(mut self, input: ::std::option::Option<crate::types::FlaggedIpAddressDetail>) -> Self {
        self.flagged_ip_address_detail = input;
        self
    }
    /// <p>Suspicious IP addresses that are flagged, which indicates critical or severe threats based on threat intelligence by Detective. This indicator is derived from AWS threat intelligence.</p>
    pub fn get_flagged_ip_address_detail(&self) -> &::std::option::Option<crate::types::FlaggedIpAddressDetail> {
        &self.flagged_ip_address_detail
    }
    /// <p>Contains details about the new geographic location.</p>
    pub fn new_geolocation_detail(mut self, input: crate::types::NewGeolocationDetail) -> Self {
        self.new_geolocation_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the new geographic location.</p>
    pub fn set_new_geolocation_detail(mut self, input: ::std::option::Option<crate::types::NewGeolocationDetail>) -> Self {
        self.new_geolocation_detail = input;
        self
    }
    /// <p>Contains details about the new geographic location.</p>
    pub fn get_new_geolocation_detail(&self) -> &::std::option::Option<crate::types::NewGeolocationDetail> {
        &self.new_geolocation_detail
    }
    /// <p>Contains details about the new Autonomous System Organization (ASO).</p>
    pub fn new_aso_detail(mut self, input: crate::types::NewAsoDetail) -> Self {
        self.new_aso_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the new Autonomous System Organization (ASO).</p>
    pub fn set_new_aso_detail(mut self, input: ::std::option::Option<crate::types::NewAsoDetail>) -> Self {
        self.new_aso_detail = input;
        self
    }
    /// <p>Contains details about the new Autonomous System Organization (ASO).</p>
    pub fn get_new_aso_detail(&self) -> &::std::option::Option<crate::types::NewAsoDetail> {
        &self.new_aso_detail
    }
    /// <p>Contains details about the new user agent.</p>
    pub fn new_user_agent_detail(mut self, input: crate::types::NewUserAgentDetail) -> Self {
        self.new_user_agent_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the new user agent.</p>
    pub fn set_new_user_agent_detail(mut self, input: ::std::option::Option<crate::types::NewUserAgentDetail>) -> Self {
        self.new_user_agent_detail = input;
        self
    }
    /// <p>Contains details about the new user agent.</p>
    pub fn get_new_user_agent_detail(&self) -> &::std::option::Option<crate::types::NewUserAgentDetail> {
        &self.new_user_agent_detail
    }
    /// <p>Contains details about related findings.</p>
    pub fn related_finding_detail(mut self, input: crate::types::RelatedFindingDetail) -> Self {
        self.related_finding_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about related findings.</p>
    pub fn set_related_finding_detail(mut self, input: ::std::option::Option<crate::types::RelatedFindingDetail>) -> Self {
        self.related_finding_detail = input;
        self
    }
    /// <p>Contains details about related findings.</p>
    pub fn get_related_finding_detail(&self) -> &::std::option::Option<crate::types::RelatedFindingDetail> {
        &self.related_finding_detail
    }
    /// <p>Contains details about related finding groups.</p>
    pub fn related_finding_group_detail(mut self, input: crate::types::RelatedFindingGroupDetail) -> Self {
        self.related_finding_group_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about related finding groups.</p>
    pub fn set_related_finding_group_detail(mut self, input: ::std::option::Option<crate::types::RelatedFindingGroupDetail>) -> Self {
        self.related_finding_group_detail = input;
        self
    }
    /// <p>Contains details about related finding groups.</p>
    pub fn get_related_finding_group_detail(&self) -> &::std::option::Option<crate::types::RelatedFindingGroupDetail> {
        &self.related_finding_group_detail
    }
    /// Consumes the builder and constructs a [`IndicatorDetail`](crate::types::IndicatorDetail).
    pub fn build(self) -> crate::types::IndicatorDetail {
        crate::types::IndicatorDetail {
            ttps_observed_detail: self.ttps_observed_detail,
            impossible_travel_detail: self.impossible_travel_detail,
            flagged_ip_address_detail: self.flagged_ip_address_detail,
            new_geolocation_detail: self.new_geolocation_detail,
            new_aso_detail: self.new_aso_detail,
            new_user_agent_detail: self.new_user_agent_detail,
            related_finding_detail: self.related_finding_detail,
            related_finding_group_detail: self.related_finding_group_detail,
        }
    }
}
