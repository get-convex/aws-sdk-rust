// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details new geolocations used either at the resource or account level. For example, lists an observed geolocation that is an infrequent or unused location based on previous user activity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NewGeolocationDetail {
    /// <p>Location where the resource was accessed.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>IP address using which the resource was accessed.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>Checks if the gelocation is new for the entire account.</p>
    pub is_new_for_entire_account: bool,
}
impl NewGeolocationDetail {
    /// <p>Location where the resource was accessed.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>IP address using which the resource was accessed.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>Checks if the gelocation is new for the entire account.</p>
    pub fn is_new_for_entire_account(&self) -> bool {
        self.is_new_for_entire_account
    }
}
impl NewGeolocationDetail {
    /// Creates a new builder-style object to manufacture [`NewGeolocationDetail`](crate::types::NewGeolocationDetail).
    pub fn builder() -> crate::types::builders::NewGeolocationDetailBuilder {
        crate::types::builders::NewGeolocationDetailBuilder::default()
    }
}

/// A builder for [`NewGeolocationDetail`](crate::types::NewGeolocationDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NewGeolocationDetailBuilder {
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) is_new_for_entire_account: ::std::option::Option<bool>,
}
impl NewGeolocationDetailBuilder {
    /// <p>Location where the resource was accessed.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Location where the resource was accessed.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>Location where the resource was accessed.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>IP address using which the resource was accessed.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>IP address using which the resource was accessed.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>IP address using which the resource was accessed.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>Checks if the gelocation is new for the entire account.</p>
    pub fn is_new_for_entire_account(mut self, input: bool) -> Self {
        self.is_new_for_entire_account = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks if the gelocation is new for the entire account.</p>
    pub fn set_is_new_for_entire_account(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_new_for_entire_account = input;
        self
    }
    /// <p>Checks if the gelocation is new for the entire account.</p>
    pub fn get_is_new_for_entire_account(&self) -> &::std::option::Option<bool> {
        &self.is_new_for_entire_account
    }
    /// Consumes the builder and constructs a [`NewGeolocationDetail`](crate::types::NewGeolocationDetail).
    pub fn build(self) -> crate::types::NewGeolocationDetail {
        crate::types::NewGeolocationDetail {
            location: self.location,
            ip_address: self.ip_address,
            is_new_for_entire_account: self.is_new_for_entire_account.unwrap_or_default(),
        }
    }
}
