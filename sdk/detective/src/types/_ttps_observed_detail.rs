// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details tactics, techniques, and procedures (TTPs) used in a potential security event. Tactics are based on <a href="https://attack.mitre.org/matrices/enterprise/">MITRE ATT&amp;CK Matrix for Enterprise</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TtPsObservedDetail {
    /// <p>The tactic used, identified by the investigation.</p>
    pub tactic: ::std::option::Option<::std::string::String>,
    /// <p>The technique used, identified by the investigation.</p>
    pub technique: ::std::option::Option<::std::string::String>,
    /// <p>The procedure used, identified by the investigation.</p>
    pub procedure: ::std::option::Option<::std::string::String>,
    /// <p>The IP address where the TTP was observed.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The name of the API where the TTP was observed.</p>
    pub api_name: ::std::option::Option<::std::string::String>,
    /// <p>The total number of successful API requests.</p>
    pub api_success_count: i64,
    /// <p>The total number of failed API requests.</p>
    pub api_failure_count: i64,
}
impl TtPsObservedDetail {
    /// <p>The tactic used, identified by the investigation.</p>
    pub fn tactic(&self) -> ::std::option::Option<&str> {
        self.tactic.as_deref()
    }
    /// <p>The technique used, identified by the investigation.</p>
    pub fn technique(&self) -> ::std::option::Option<&str> {
        self.technique.as_deref()
    }
    /// <p>The procedure used, identified by the investigation.</p>
    pub fn procedure(&self) -> ::std::option::Option<&str> {
        self.procedure.as_deref()
    }
    /// <p>The IP address where the TTP was observed.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The name of the API where the TTP was observed.</p>
    pub fn api_name(&self) -> ::std::option::Option<&str> {
        self.api_name.as_deref()
    }
    /// <p>The total number of successful API requests.</p>
    pub fn api_success_count(&self) -> i64 {
        self.api_success_count
    }
    /// <p>The total number of failed API requests.</p>
    pub fn api_failure_count(&self) -> i64 {
        self.api_failure_count
    }
}
impl TtPsObservedDetail {
    /// Creates a new builder-style object to manufacture [`TtPsObservedDetail`](crate::types::TtPsObservedDetail).
    pub fn builder() -> crate::types::builders::TtPsObservedDetailBuilder {
        crate::types::builders::TtPsObservedDetailBuilder::default()
    }
}

/// A builder for [`TtPsObservedDetail`](crate::types::TtPsObservedDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TtPsObservedDetailBuilder {
    pub(crate) tactic: ::std::option::Option<::std::string::String>,
    pub(crate) technique: ::std::option::Option<::std::string::String>,
    pub(crate) procedure: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) api_name: ::std::option::Option<::std::string::String>,
    pub(crate) api_success_count: ::std::option::Option<i64>,
    pub(crate) api_failure_count: ::std::option::Option<i64>,
}
impl TtPsObservedDetailBuilder {
    /// <p>The tactic used, identified by the investigation.</p>
    pub fn tactic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tactic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tactic used, identified by the investigation.</p>
    pub fn set_tactic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tactic = input;
        self
    }
    /// <p>The tactic used, identified by the investigation.</p>
    pub fn get_tactic(&self) -> &::std::option::Option<::std::string::String> {
        &self.tactic
    }
    /// <p>The technique used, identified by the investigation.</p>
    pub fn technique(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.technique = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The technique used, identified by the investigation.</p>
    pub fn set_technique(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.technique = input;
        self
    }
    /// <p>The technique used, identified by the investigation.</p>
    pub fn get_technique(&self) -> &::std::option::Option<::std::string::String> {
        &self.technique
    }
    /// <p>The procedure used, identified by the investigation.</p>
    pub fn procedure(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.procedure = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The procedure used, identified by the investigation.</p>
    pub fn set_procedure(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.procedure = input;
        self
    }
    /// <p>The procedure used, identified by the investigation.</p>
    pub fn get_procedure(&self) -> &::std::option::Option<::std::string::String> {
        &self.procedure
    }
    /// <p>The IP address where the TTP was observed.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address where the TTP was observed.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IP address where the TTP was observed.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The name of the API where the TTP was observed.</p>
    pub fn api_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the API where the TTP was observed.</p>
    pub fn set_api_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_name = input;
        self
    }
    /// <p>The name of the API where the TTP was observed.</p>
    pub fn get_api_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_name
    }
    /// <p>The total number of successful API requests.</p>
    pub fn api_success_count(mut self, input: i64) -> Self {
        self.api_success_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of successful API requests.</p>
    pub fn set_api_success_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.api_success_count = input;
        self
    }
    /// <p>The total number of successful API requests.</p>
    pub fn get_api_success_count(&self) -> &::std::option::Option<i64> {
        &self.api_success_count
    }
    /// <p>The total number of failed API requests.</p>
    pub fn api_failure_count(mut self, input: i64) -> Self {
        self.api_failure_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of failed API requests.</p>
    pub fn set_api_failure_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.api_failure_count = input;
        self
    }
    /// <p>The total number of failed API requests.</p>
    pub fn get_api_failure_count(&self) -> &::std::option::Option<i64> {
        &self.api_failure_count
    }
    /// Consumes the builder and constructs a [`TtPsObservedDetail`](crate::types::TtPsObservedDetail).
    pub fn build(self) -> crate::types::TtPsObservedDetail {
        crate::types::TtPsObservedDetail {
            tactic: self.tactic,
            technique: self.technique,
            procedure: self.procedure,
            ip_address: self.ip_address,
            api_name: self.api_name,
            api_success_count: self.api_success_count.unwrap_or_default(),
            api_failure_count: self.api_failure_count.unwrap_or_default(),
        }
    }
}
