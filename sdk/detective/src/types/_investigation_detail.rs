// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the investigation related to a potential security event identified by Detective</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvestigationDetail {
    /// <p>The investigation ID of the investigation report.</p>
    pub investigation_id: ::std::option::Option<::std::string::String>,
    /// <p>Severity based on the likelihood and impact of the indicators of compromise discovered in the investigation.</p>
    pub severity: ::std::option::Option<crate::types::Severity>,
    /// <p>Status based on the completion status of the investigation.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The current state of the investigation. An archived investigation indicates you have completed reviewing the investigation.</p>
    pub state: ::std::option::Option<crate::types::State>,
    /// <p>The UTC time stamp of the creation time of the investigation report.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub entity_arn: ::std::option::Option<::std::string::String>,
    /// <p>Type of entity. For example, Amazon Web Services accounts, such as IAM user and role.</p>
    pub entity_type: ::std::option::Option<crate::types::EntityType>,
}
impl InvestigationDetail {
    /// <p>The investigation ID of the investigation report.</p>
    pub fn investigation_id(&self) -> ::std::option::Option<&str> {
        self.investigation_id.as_deref()
    }
    /// <p>Severity based on the likelihood and impact of the indicators of compromise discovered in the investigation.</p>
    pub fn severity(&self) -> ::std::option::Option<&crate::types::Severity> {
        self.severity.as_ref()
    }
    /// <p>Status based on the completion status of the investigation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The current state of the investigation. An archived investigation indicates you have completed reviewing the investigation.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::State> {
        self.state.as_ref()
    }
    /// <p>The UTC time stamp of the creation time of the investigation report.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub fn entity_arn(&self) -> ::std::option::Option<&str> {
        self.entity_arn.as_deref()
    }
    /// <p>Type of entity. For example, Amazon Web Services accounts, such as IAM user and role.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&crate::types::EntityType> {
        self.entity_type.as_ref()
    }
}
impl InvestigationDetail {
    /// Creates a new builder-style object to manufacture [`InvestigationDetail`](crate::types::InvestigationDetail).
    pub fn builder() -> crate::types::builders::InvestigationDetailBuilder {
        crate::types::builders::InvestigationDetailBuilder::default()
    }
}

/// A builder for [`InvestigationDetail`](crate::types::InvestigationDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InvestigationDetailBuilder {
    pub(crate) investigation_id: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<crate::types::Severity>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) state: ::std::option::Option<crate::types::State>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) entity_arn: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<crate::types::EntityType>,
}
impl InvestigationDetailBuilder {
    /// <p>The investigation ID of the investigation report.</p>
    pub fn investigation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.investigation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn set_investigation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.investigation_id = input;
        self
    }
    /// <p>The investigation ID of the investigation report.</p>
    pub fn get_investigation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.investigation_id
    }
    /// <p>Severity based on the likelihood and impact of the indicators of compromise discovered in the investigation.</p>
    pub fn severity(mut self, input: crate::types::Severity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Severity based on the likelihood and impact of the indicators of compromise discovered in the investigation.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::Severity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>Severity based on the likelihood and impact of the indicators of compromise discovered in the investigation.</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::Severity> {
        &self.severity
    }
    /// <p>Status based on the completion status of the investigation.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status based on the completion status of the investigation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status based on the completion status of the investigation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The current state of the investigation. An archived investigation indicates you have completed reviewing the investigation.</p>
    pub fn state(mut self, input: crate::types::State) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the investigation. An archived investigation indicates you have completed reviewing the investigation.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::State>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the investigation. An archived investigation indicates you have completed reviewing the investigation.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::State> {
        &self.state
    }
    /// <p>The UTC time stamp of the creation time of the investigation report.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UTC time stamp of the creation time of the investigation report.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The UTC time stamp of the creation time of the investigation report.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub fn entity_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub fn set_entity_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the IAM user and IAM role.</p>
    pub fn get_entity_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_arn
    }
    /// <p>Type of entity. For example, Amazon Web Services accounts, such as IAM user and role.</p>
    pub fn entity_type(mut self, input: crate::types::EntityType) -> Self {
        self.entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of entity. For example, Amazon Web Services accounts, such as IAM user and role.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<crate::types::EntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>Type of entity. For example, Amazon Web Services accounts, such as IAM user and role.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<crate::types::EntityType> {
        &self.entity_type
    }
    /// Consumes the builder and constructs a [`InvestigationDetail`](crate::types::InvestigationDetail).
    pub fn build(self) -> crate::types::InvestigationDetail {
        crate::types::InvestigationDetail {
            investigation_id: self.investigation_id,
            severity: self.severity,
            status: self.status,
            state: self.state,
            created_time: self.created_time,
            entity_arn: self.entity_arn,
            entity_type: self.entity_type,
        }
    }
}
