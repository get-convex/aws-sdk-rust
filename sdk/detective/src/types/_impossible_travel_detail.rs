// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on unusual and impossible travel in an account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImpossibleTravelDetail {
    /// <p>IP address where the resource was first used in the impossible travel</p>
    pub starting_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>IP address where the resource was last used in the impossible travel.</p>
    pub ending_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>Location where the resource was first used in the impossible travel</p>
    pub starting_location: ::std::option::Option<::std::string::String>,
    /// <p>Location where the resource was last used in the impossible travel.</p>
    pub ending_location: ::std::option::Option<::std::string::String>,
    /// <p>Returns the time difference between the first and last timestamp the resource was used.</p>
    pub hourly_time_delta: ::std::option::Option<i32>,
}
impl ImpossibleTravelDetail {
    /// <p>IP address where the resource was first used in the impossible travel</p>
    pub fn starting_ip_address(&self) -> ::std::option::Option<&str> {
        self.starting_ip_address.as_deref()
    }
    /// <p>IP address where the resource was last used in the impossible travel.</p>
    pub fn ending_ip_address(&self) -> ::std::option::Option<&str> {
        self.ending_ip_address.as_deref()
    }
    /// <p>Location where the resource was first used in the impossible travel</p>
    pub fn starting_location(&self) -> ::std::option::Option<&str> {
        self.starting_location.as_deref()
    }
    /// <p>Location where the resource was last used in the impossible travel.</p>
    pub fn ending_location(&self) -> ::std::option::Option<&str> {
        self.ending_location.as_deref()
    }
    /// <p>Returns the time difference between the first and last timestamp the resource was used.</p>
    pub fn hourly_time_delta(&self) -> ::std::option::Option<i32> {
        self.hourly_time_delta
    }
}
impl ImpossibleTravelDetail {
    /// Creates a new builder-style object to manufacture [`ImpossibleTravelDetail`](crate::types::ImpossibleTravelDetail).
    pub fn builder() -> crate::types::builders::ImpossibleTravelDetailBuilder {
        crate::types::builders::ImpossibleTravelDetailBuilder::default()
    }
}

/// A builder for [`ImpossibleTravelDetail`](crate::types::ImpossibleTravelDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImpossibleTravelDetailBuilder {
    pub(crate) starting_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) ending_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) starting_location: ::std::option::Option<::std::string::String>,
    pub(crate) ending_location: ::std::option::Option<::std::string::String>,
    pub(crate) hourly_time_delta: ::std::option::Option<i32>,
}
impl ImpossibleTravelDetailBuilder {
    /// <p>IP address where the resource was first used in the impossible travel</p>
    pub fn starting_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.starting_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>IP address where the resource was first used in the impossible travel</p>
    pub fn set_starting_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.starting_ip_address = input;
        self
    }
    /// <p>IP address where the resource was first used in the impossible travel</p>
    pub fn get_starting_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.starting_ip_address
    }
    /// <p>IP address where the resource was last used in the impossible travel.</p>
    pub fn ending_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ending_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>IP address where the resource was last used in the impossible travel.</p>
    pub fn set_ending_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ending_ip_address = input;
        self
    }
    /// <p>IP address where the resource was last used in the impossible travel.</p>
    pub fn get_ending_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ending_ip_address
    }
    /// <p>Location where the resource was first used in the impossible travel</p>
    pub fn starting_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.starting_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Location where the resource was first used in the impossible travel</p>
    pub fn set_starting_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.starting_location = input;
        self
    }
    /// <p>Location where the resource was first used in the impossible travel</p>
    pub fn get_starting_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.starting_location
    }
    /// <p>Location where the resource was last used in the impossible travel.</p>
    pub fn ending_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ending_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Location where the resource was last used in the impossible travel.</p>
    pub fn set_ending_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ending_location = input;
        self
    }
    /// <p>Location where the resource was last used in the impossible travel.</p>
    pub fn get_ending_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.ending_location
    }
    /// <p>Returns the time difference between the first and last timestamp the resource was used.</p>
    pub fn hourly_time_delta(mut self, input: i32) -> Self {
        self.hourly_time_delta = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the time difference between the first and last timestamp the resource was used.</p>
    pub fn set_hourly_time_delta(mut self, input: ::std::option::Option<i32>) -> Self {
        self.hourly_time_delta = input;
        self
    }
    /// <p>Returns the time difference between the first and last timestamp the resource was used.</p>
    pub fn get_hourly_time_delta(&self) -> &::std::option::Option<i32> {
        &self.hourly_time_delta
    }
    /// Consumes the builder and constructs a [`ImpossibleTravelDetail`](crate::types::ImpossibleTravelDetail).
    pub fn build(self) -> crate::types::ImpossibleTravelDetail {
        crate::types::ImpossibleTravelDetail {
            starting_ip_address: self.starting_ip_address,
            ending_ip_address: self.ending_ip_address,
            starting_location: self.starting_location,
            ending_location: self.ending_location,
            hourly_time_delta: self.hourly_time_delta,
        }
    }
}
