// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details on the criteria used to define the filter for investigation results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterCriteria {
    /// <p>Filter the investigation results based on the severity.</p>
    pub severity: ::std::option::Option<crate::types::StringFilter>,
    /// <p>Filter the investigation results based on the status.</p>
    pub status: ::std::option::Option<crate::types::StringFilter>,
    /// <p>Filter the investigation results based on the state.</p>
    pub state: ::std::option::Option<crate::types::StringFilter>,
    /// <p>Filter the investigation results based on the Amazon Resource Name (ARN) of the entity.</p>
    pub entity_arn: ::std::option::Option<crate::types::StringFilter>,
    /// <p>Filter the investigation results based on when the investigation was created.</p>
    pub created_time: ::std::option::Option<crate::types::DateFilter>,
}
impl FilterCriteria {
    /// <p>Filter the investigation results based on the severity.</p>
    pub fn severity(&self) -> ::std::option::Option<&crate::types::StringFilter> {
        self.severity.as_ref()
    }
    /// <p>Filter the investigation results based on the status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StringFilter> {
        self.status.as_ref()
    }
    /// <p>Filter the investigation results based on the state.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::StringFilter> {
        self.state.as_ref()
    }
    /// <p>Filter the investigation results based on the Amazon Resource Name (ARN) of the entity.</p>
    pub fn entity_arn(&self) -> ::std::option::Option<&crate::types::StringFilter> {
        self.entity_arn.as_ref()
    }
    /// <p>Filter the investigation results based on when the investigation was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&crate::types::DateFilter> {
        self.created_time.as_ref()
    }
}
impl FilterCriteria {
    /// Creates a new builder-style object to manufacture [`FilterCriteria`](crate::types::FilterCriteria).
    pub fn builder() -> crate::types::builders::FilterCriteriaBuilder {
        crate::types::builders::FilterCriteriaBuilder::default()
    }
}

/// A builder for [`FilterCriteria`](crate::types::FilterCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterCriteriaBuilder {
    pub(crate) severity: ::std::option::Option<crate::types::StringFilter>,
    pub(crate) status: ::std::option::Option<crate::types::StringFilter>,
    pub(crate) state: ::std::option::Option<crate::types::StringFilter>,
    pub(crate) entity_arn: ::std::option::Option<crate::types::StringFilter>,
    pub(crate) created_time: ::std::option::Option<crate::types::DateFilter>,
}
impl FilterCriteriaBuilder {
    /// <p>Filter the investigation results based on the severity.</p>
    pub fn severity(mut self, input: crate::types::StringFilter) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the investigation results based on the severity.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::StringFilter>) -> Self {
        self.severity = input;
        self
    }
    /// <p>Filter the investigation results based on the severity.</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::StringFilter> {
        &self.severity
    }
    /// <p>Filter the investigation results based on the status.</p>
    pub fn status(mut self, input: crate::types::StringFilter) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the investigation results based on the status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StringFilter>) -> Self {
        self.status = input;
        self
    }
    /// <p>Filter the investigation results based on the status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StringFilter> {
        &self.status
    }
    /// <p>Filter the investigation results based on the state.</p>
    pub fn state(mut self, input: crate::types::StringFilter) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the investigation results based on the state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::StringFilter>) -> Self {
        self.state = input;
        self
    }
    /// <p>Filter the investigation results based on the state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::StringFilter> {
        &self.state
    }
    /// <p>Filter the investigation results based on the Amazon Resource Name (ARN) of the entity.</p>
    pub fn entity_arn(mut self, input: crate::types::StringFilter) -> Self {
        self.entity_arn = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the investigation results based on the Amazon Resource Name (ARN) of the entity.</p>
    pub fn set_entity_arn(mut self, input: ::std::option::Option<crate::types::StringFilter>) -> Self {
        self.entity_arn = input;
        self
    }
    /// <p>Filter the investigation results based on the Amazon Resource Name (ARN) of the entity.</p>
    pub fn get_entity_arn(&self) -> &::std::option::Option<crate::types::StringFilter> {
        &self.entity_arn
    }
    /// <p>Filter the investigation results based on when the investigation was created.</p>
    pub fn created_time(mut self, input: crate::types::DateFilter) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the investigation results based on when the investigation was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<crate::types::DateFilter>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>Filter the investigation results based on when the investigation was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<crate::types::DateFilter> {
        &self.created_time
    }
    /// Consumes the builder and constructs a [`FilterCriteria`](crate::types::FilterCriteria).
    pub fn build(self) -> crate::types::FilterCriteria {
        crate::types::FilterCriteria {
            severity: self.severity,
            status: self.status,
            state: self.state,
            entity_arn: self.entity_arn,
            created_time: self.created_time,
        }
    }
}
