// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specify how long Kinesis Data Firehose retries sending data to the New Relic HTTP endpoint. After sending data, Kinesis Data Firehose first waits for an acknowledgment from the HTTP endpoint. If an error occurs or the acknowledgment doesnâ€™t arrive within the acknowledgment timeout period, Kinesis Data Firehose starts the retry duration counter. It keeps retrying until the retry duration expires. After that, Kinesis Data Firehose considers it a data delivery failure and backs up the data to your Amazon S3 bucket. Every time that Kinesis Data Firehose sends data to the HTTP endpoint (either the initial attempt or a retry), it restarts the acknowledgement timeout counter and waits for an acknowledgement from the HTTP endpoint. Even if the retry duration expires, Kinesis Data Firehose still waits for the acknowledgment until it receives it or the acknowledgement timeout period is reached. If the acknowledgment times out, Kinesis Data Firehose determines whether there's time left in the retry counter. If there is time left, it retries again and repeats the logic until it receives an acknowledgment or determines that the retry time has expired. If you don't want Kinesis Data Firehose to retry sending data, set this value to 0.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnowflakeRetryOptions {
    /// <p>the time period where Kinesis Data Firehose will retry sending data to the chosen HTTP endpoint.</p>
    pub duration_in_seconds: ::std::option::Option<i32>,
}
impl SnowflakeRetryOptions {
    /// <p>the time period where Kinesis Data Firehose will retry sending data to the chosen HTTP endpoint.</p>
    pub fn duration_in_seconds(&self) -> ::std::option::Option<i32> {
        self.duration_in_seconds
    }
}
impl SnowflakeRetryOptions {
    /// Creates a new builder-style object to manufacture [`SnowflakeRetryOptions`](crate::types::SnowflakeRetryOptions).
    pub fn builder() -> crate::types::builders::SnowflakeRetryOptionsBuilder {
        crate::types::builders::SnowflakeRetryOptionsBuilder::default()
    }
}

/// A builder for [`SnowflakeRetryOptions`](crate::types::SnowflakeRetryOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SnowflakeRetryOptionsBuilder {
    pub(crate) duration_in_seconds: ::std::option::Option<i32>,
}
impl SnowflakeRetryOptionsBuilder {
    /// <p>the time period where Kinesis Data Firehose will retry sending data to the chosen HTTP endpoint.</p>
    pub fn duration_in_seconds(mut self, input: i32) -> Self {
        self.duration_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>the time period where Kinesis Data Firehose will retry sending data to the chosen HTTP endpoint.</p>
    pub fn set_duration_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.duration_in_seconds = input;
        self
    }
    /// <p>the time period where Kinesis Data Firehose will retry sending data to the chosen HTTP endpoint.</p>
    pub fn get_duration_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.duration_in_seconds
    }
    /// Consumes the builder and constructs a [`SnowflakeRetryOptions`](crate::types::SnowflakeRetryOptions).
    pub fn build(self) -> crate::types::SnowflakeRetryOptions {
        crate::types::SnowflakeRetryOptions {
            duration_in_seconds: self.duration_in_seconds,
        }
    }
}
