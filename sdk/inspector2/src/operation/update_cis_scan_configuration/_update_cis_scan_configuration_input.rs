// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCisScanConfigurationInput {
    /// <p>The CIS scan configuration ARN.</p>
    pub scan_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The scan name for the CIS scan configuration.</p>
    pub scan_name: ::std::option::Option<::std::string::String>,
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub security_level: ::std::option::Option<crate::types::CisSecurityLevel>,
    /// <p>The schedule for the CIS scan configuration.</p>
    pub schedule: ::std::option::Option<crate::types::Schedule>,
    /// <p>The targets for the CIS scan configuration.</p>
    pub targets: ::std::option::Option<crate::types::UpdateCisTargets>,
}
impl UpdateCisScanConfigurationInput {
    /// <p>The CIS scan configuration ARN.</p>
    pub fn scan_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.scan_configuration_arn.as_deref()
    }
    /// <p>The scan name for the CIS scan configuration.</p>
    pub fn scan_name(&self) -> ::std::option::Option<&str> {
        self.scan_name.as_deref()
    }
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn security_level(&self) -> ::std::option::Option<&crate::types::CisSecurityLevel> {
        self.security_level.as_ref()
    }
    /// <p>The schedule for the CIS scan configuration.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::Schedule> {
        self.schedule.as_ref()
    }
    /// <p>The targets for the CIS scan configuration.</p>
    pub fn targets(&self) -> ::std::option::Option<&crate::types::UpdateCisTargets> {
        self.targets.as_ref()
    }
}
impl UpdateCisScanConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateCisScanConfigurationInput`](crate::operation::update_cis_scan_configuration::UpdateCisScanConfigurationInput).
    pub fn builder() -> crate::operation::update_cis_scan_configuration::builders::UpdateCisScanConfigurationInputBuilder {
        crate::operation::update_cis_scan_configuration::builders::UpdateCisScanConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateCisScanConfigurationInput`](crate::operation::update_cis_scan_configuration::UpdateCisScanConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateCisScanConfigurationInputBuilder {
    pub(crate) scan_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) scan_name: ::std::option::Option<::std::string::String>,
    pub(crate) security_level: ::std::option::Option<crate::types::CisSecurityLevel>,
    pub(crate) schedule: ::std::option::Option<crate::types::Schedule>,
    pub(crate) targets: ::std::option::Option<crate::types::UpdateCisTargets>,
}
impl UpdateCisScanConfigurationInputBuilder {
    /// <p>The CIS scan configuration ARN.</p>
    /// This field is required.
    pub fn scan_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIS scan configuration ARN.</p>
    pub fn set_scan_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_configuration_arn = input;
        self
    }
    /// <p>The CIS scan configuration ARN.</p>
    pub fn get_scan_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_configuration_arn
    }
    /// <p>The scan name for the CIS scan configuration.</p>
    pub fn scan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scan name for the CIS scan configuration.</p>
    pub fn set_scan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name = input;
        self
    }
    /// <p>The scan name for the CIS scan configuration.</p>
    pub fn get_scan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name
    }
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn security_level(mut self, input: crate::types::CisSecurityLevel) -> Self {
        self.security_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn set_security_level(mut self, input: ::std::option::Option<crate::types::CisSecurityLevel>) -> Self {
        self.security_level = input;
        self
    }
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn get_security_level(&self) -> &::std::option::Option<crate::types::CisSecurityLevel> {
        &self.security_level
    }
    /// <p>The schedule for the CIS scan configuration.</p>
    pub fn schedule(mut self, input: crate::types::Schedule) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schedule for the CIS scan configuration.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::Schedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The schedule for the CIS scan configuration.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::Schedule> {
        &self.schedule
    }
    /// <p>The targets for the CIS scan configuration.</p>
    pub fn targets(mut self, input: crate::types::UpdateCisTargets) -> Self {
        self.targets = ::std::option::Option::Some(input);
        self
    }
    /// <p>The targets for the CIS scan configuration.</p>
    pub fn set_targets(mut self, input: ::std::option::Option<crate::types::UpdateCisTargets>) -> Self {
        self.targets = input;
        self
    }
    /// <p>The targets for the CIS scan configuration.</p>
    pub fn get_targets(&self) -> &::std::option::Option<crate::types::UpdateCisTargets> {
        &self.targets
    }
    /// Consumes the builder and constructs a [`UpdateCisScanConfigurationInput`](crate::operation::update_cis_scan_configuration::UpdateCisScanConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_cis_scan_configuration::UpdateCisScanConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_cis_scan_configuration::UpdateCisScanConfigurationInput {
            scan_configuration_arn: self.scan_configuration_arn,
            scan_name: self.scan_name,
            security_level: self.security_level,
            schedule: self.schedule,
            targets: self.targets,
        })
    }
}
