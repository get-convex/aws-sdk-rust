// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCisScansInput {
    /// <p>The CIS scan filter criteria.</p>
    pub filter_criteria: ::std::option::Option<crate::types::ListCisScansFilterCriteria>,
    /// <p>The detail applied to the CIS scan.</p>
    pub detail_level: ::std::option::Option<crate::types::ListCisScansDetailLevel>,
    /// <p>The CIS scans sort by order.</p>
    pub sort_by: ::std::option::Option<crate::types::ListCisScansSortBy>,
    /// <p>The CIS scans sort order.</p>
    pub sort_order: ::std::option::Option<crate::types::CisSortOrder>,
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to be returned.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListCisScansInput {
    /// <p>The CIS scan filter criteria.</p>
    pub fn filter_criteria(&self) -> ::std::option::Option<&crate::types::ListCisScansFilterCriteria> {
        self.filter_criteria.as_ref()
    }
    /// <p>The detail applied to the CIS scan.</p>
    pub fn detail_level(&self) -> ::std::option::Option<&crate::types::ListCisScansDetailLevel> {
        self.detail_level.as_ref()
    }
    /// <p>The CIS scans sort by order.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::ListCisScansSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The CIS scans sort order.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::CisSortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListCisScansInput {
    /// Creates a new builder-style object to manufacture [`ListCisScansInput`](crate::operation::list_cis_scans::ListCisScansInput).
    pub fn builder() -> crate::operation::list_cis_scans::builders::ListCisScansInputBuilder {
        crate::operation::list_cis_scans::builders::ListCisScansInputBuilder::default()
    }
}

/// A builder for [`ListCisScansInput`](crate::operation::list_cis_scans::ListCisScansInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCisScansInputBuilder {
    pub(crate) filter_criteria: ::std::option::Option<crate::types::ListCisScansFilterCriteria>,
    pub(crate) detail_level: ::std::option::Option<crate::types::ListCisScansDetailLevel>,
    pub(crate) sort_by: ::std::option::Option<crate::types::ListCisScansSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::CisSortOrder>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListCisScansInputBuilder {
    /// <p>The CIS scan filter criteria.</p>
    pub fn filter_criteria(mut self, input: crate::types::ListCisScansFilterCriteria) -> Self {
        self.filter_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan filter criteria.</p>
    pub fn set_filter_criteria(mut self, input: ::std::option::Option<crate::types::ListCisScansFilterCriteria>) -> Self {
        self.filter_criteria = input;
        self
    }
    /// <p>The CIS scan filter criteria.</p>
    pub fn get_filter_criteria(&self) -> &::std::option::Option<crate::types::ListCisScansFilterCriteria> {
        &self.filter_criteria
    }
    /// <p>The detail applied to the CIS scan.</p>
    pub fn detail_level(mut self, input: crate::types::ListCisScansDetailLevel) -> Self {
        self.detail_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The detail applied to the CIS scan.</p>
    pub fn set_detail_level(mut self, input: ::std::option::Option<crate::types::ListCisScansDetailLevel>) -> Self {
        self.detail_level = input;
        self
    }
    /// <p>The detail applied to the CIS scan.</p>
    pub fn get_detail_level(&self) -> &::std::option::Option<crate::types::ListCisScansDetailLevel> {
        &self.detail_level
    }
    /// <p>The CIS scans sort by order.</p>
    pub fn sort_by(mut self, input: crate::types::ListCisScansSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scans sort by order.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::ListCisScansSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The CIS scans sort by order.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::ListCisScansSortBy> {
        &self.sort_by
    }
    /// <p>The CIS scans sort order.</p>
    pub fn sort_order(mut self, input: crate::types::CisSortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scans sort order.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::CisSortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The CIS scans sort order.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::CisSortOrder> {
        &self.sort_order
    }
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListCisScansInput`](crate::operation::list_cis_scans::ListCisScansInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_cis_scans::ListCisScansInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_cis_scans::ListCisScansInput {
            filter_criteria: self.filter_criteria,
            detail_level: self.detail_level,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
