// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCisScanConfigurationInput {
    /// <p>The scan name for the CIS scan configuration.</p>
    pub scan_name: ::std::option::Option<::std::string::String>,
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub security_level: ::std::option::Option<crate::types::CisSecurityLevel>,
    /// <p>The schedule for the CIS scan configuration.</p>
    pub schedule: ::std::option::Option<crate::types::Schedule>,
    /// <p>The targets for the CIS scan configuration.</p>
    pub targets: ::std::option::Option<crate::types::CreateCisTargets>,
    /// <p>The tags for the CIS scan configuration.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateCisScanConfigurationInput {
    /// <p>The scan name for the CIS scan configuration.</p>
    pub fn scan_name(&self) -> ::std::option::Option<&str> {
        self.scan_name.as_deref()
    }
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn security_level(&self) -> ::std::option::Option<&crate::types::CisSecurityLevel> {
        self.security_level.as_ref()
    }
    /// <p>The schedule for the CIS scan configuration.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::Schedule> {
        self.schedule.as_ref()
    }
    /// <p>The targets for the CIS scan configuration.</p>
    pub fn targets(&self) -> ::std::option::Option<&crate::types::CreateCisTargets> {
        self.targets.as_ref()
    }
    /// <p>The tags for the CIS scan configuration.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateCisScanConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateCisScanConfigurationInput`](crate::operation::create_cis_scan_configuration::CreateCisScanConfigurationInput).
    pub fn builder() -> crate::operation::create_cis_scan_configuration::builders::CreateCisScanConfigurationInputBuilder {
        crate::operation::create_cis_scan_configuration::builders::CreateCisScanConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateCisScanConfigurationInput`](crate::operation::create_cis_scan_configuration::CreateCisScanConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateCisScanConfigurationInputBuilder {
    pub(crate) scan_name: ::std::option::Option<::std::string::String>,
    pub(crate) security_level: ::std::option::Option<crate::types::CisSecurityLevel>,
    pub(crate) schedule: ::std::option::Option<crate::types::Schedule>,
    pub(crate) targets: ::std::option::Option<crate::types::CreateCisTargets>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateCisScanConfigurationInputBuilder {
    /// <p>The scan name for the CIS scan configuration.</p>
    /// This field is required.
    pub fn scan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scan name for the CIS scan configuration.</p>
    pub fn set_scan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name = input;
        self
    }
    /// <p>The scan name for the CIS scan configuration.</p>
    pub fn get_scan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name
    }
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    /// This field is required.
    pub fn security_level(mut self, input: crate::types::CisSecurityLevel) -> Self {
        self.security_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn set_security_level(mut self, input: ::std::option::Option<crate::types::CisSecurityLevel>) -> Self {
        self.security_level = input;
        self
    }
    /// <p>The security level for the CIS scan configuration. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn get_security_level(&self) -> &::std::option::Option<crate::types::CisSecurityLevel> {
        &self.security_level
    }
    /// <p>The schedule for the CIS scan configuration.</p>
    /// This field is required.
    pub fn schedule(mut self, input: crate::types::Schedule) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schedule for the CIS scan configuration.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::Schedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The schedule for the CIS scan configuration.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::Schedule> {
        &self.schedule
    }
    /// <p>The targets for the CIS scan configuration.</p>
    /// This field is required.
    pub fn targets(mut self, input: crate::types::CreateCisTargets) -> Self {
        self.targets = ::std::option::Option::Some(input);
        self
    }
    /// <p>The targets for the CIS scan configuration.</p>
    pub fn set_targets(mut self, input: ::std::option::Option<crate::types::CreateCisTargets>) -> Self {
        self.targets = input;
        self
    }
    /// <p>The targets for the CIS scan configuration.</p>
    pub fn get_targets(&self) -> &::std::option::Option<crate::types::CreateCisTargets> {
        &self.targets
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the CIS scan configuration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags for the CIS scan configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the CIS scan configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateCisScanConfigurationInput`](crate::operation::create_cis_scan_configuration::CreateCisScanConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_cis_scan_configuration::CreateCisScanConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_cis_scan_configuration::CreateCisScanConfigurationInput {
            scan_name: self.scan_name,
            security_level: self.security_level,
            schedule: self.schedule,
            targets: self.targets,
            tags: self.tags,
        })
    }
}
