// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCisScanResultsAggregatedByTargetResourceInput {
    /// <p>The scan ARN.</p>
    pub scan_arn: ::std::option::Option<::std::string::String>,
    /// <p>The filter criteria.</p>
    pub filter_criteria: ::std::option::Option<crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria>,
    /// <p>The sort by order.</p>
    pub sort_by: ::std::option::Option<crate::types::CisScanResultsAggregatedByTargetResourceSortBy>,
    /// <p>The sort order.</p>
    pub sort_order: ::std::option::Option<crate::types::CisSortOrder>,
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of scan results aggregated by a target resource to be returned in a single page of results.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListCisScanResultsAggregatedByTargetResourceInput {
    /// <p>The scan ARN.</p>
    pub fn scan_arn(&self) -> ::std::option::Option<&str> {
        self.scan_arn.as_deref()
    }
    /// <p>The filter criteria.</p>
    pub fn filter_criteria(&self) -> ::std::option::Option<&crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria> {
        self.filter_criteria.as_ref()
    }
    /// <p>The sort by order.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::CisScanResultsAggregatedByTargetResourceSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::CisSortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of scan results aggregated by a target resource to be returned in a single page of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListCisScanResultsAggregatedByTargetResourceInput {
    /// Creates a new builder-style object to manufacture [`ListCisScanResultsAggregatedByTargetResourceInput`](crate::operation::list_cis_scan_results_aggregated_by_target_resource::ListCisScanResultsAggregatedByTargetResourceInput).
    pub fn builder(
    ) -> crate::operation::list_cis_scan_results_aggregated_by_target_resource::builders::ListCisScanResultsAggregatedByTargetResourceInputBuilder
    {
        crate::operation::list_cis_scan_results_aggregated_by_target_resource::builders::ListCisScanResultsAggregatedByTargetResourceInputBuilder::default()
    }
}

/// A builder for [`ListCisScanResultsAggregatedByTargetResourceInput`](crate::operation::list_cis_scan_results_aggregated_by_target_resource::ListCisScanResultsAggregatedByTargetResourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCisScanResultsAggregatedByTargetResourceInputBuilder {
    pub(crate) scan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) filter_criteria: ::std::option::Option<crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria>,
    pub(crate) sort_by: ::std::option::Option<crate::types::CisScanResultsAggregatedByTargetResourceSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::CisSortOrder>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListCisScanResultsAggregatedByTargetResourceInputBuilder {
    /// <p>The scan ARN.</p>
    /// This field is required.
    pub fn scan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scan ARN.</p>
    pub fn set_scan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_arn = input;
        self
    }
    /// <p>The scan ARN.</p>
    pub fn get_scan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_arn
    }
    /// <p>The filter criteria.</p>
    pub fn filter_criteria(mut self, input: crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria) -> Self {
        self.filter_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter criteria.</p>
    pub fn set_filter_criteria(mut self, input: ::std::option::Option<crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria>) -> Self {
        self.filter_criteria = input;
        self
    }
    /// <p>The filter criteria.</p>
    pub fn get_filter_criteria(&self) -> &::std::option::Option<crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria> {
        &self.filter_criteria
    }
    /// <p>The sort by order.</p>
    pub fn sort_by(mut self, input: crate::types::CisScanResultsAggregatedByTargetResourceSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort by order.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::CisScanResultsAggregatedByTargetResourceSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The sort by order.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::CisScanResultsAggregatedByTargetResourceSortBy> {
        &self.sort_by
    }
    /// <p>The sort order.</p>
    pub fn sort_order(mut self, input: crate::types::CisSortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::CisSortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::CisSortOrder> {
        &self.sort_order
    }
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token from a previous request that's used to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of scan results aggregated by a target resource to be returned in a single page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of scan results aggregated by a target resource to be returned in a single page of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of scan results aggregated by a target resource to be returned in a single page of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListCisScanResultsAggregatedByTargetResourceInput`](crate::operation::list_cis_scan_results_aggregated_by_target_resource::ListCisScanResultsAggregatedByTargetResourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_cis_scan_results_aggregated_by_target_resource::ListCisScanResultsAggregatedByTargetResourceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_cis_scan_results_aggregated_by_target_resource::ListCisScanResultsAggregatedByTargetResourceInput {
                scan_arn: self.scan_arn,
                filter_criteria: self.filter_criteria,
                sort_by: self.sort_by,
                sort_order: self.sort_order,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
