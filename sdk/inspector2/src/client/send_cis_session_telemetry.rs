// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SendCisSessionTelemetry`](crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`scan_job_id(impl Into<String>)`](crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder::scan_job_id) / [`set_scan_job_id(Option<String>)`](crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder::set_scan_job_id):<br>required: **true**<br><p>A unique identifier for the scan job.</p><br>
    ///   - [`session_token(impl Into<String>)`](crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder::session_token) / [`set_session_token(Option<String>)`](crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder::set_session_token):<br>required: **true**<br><p>The unique token that identifies the CIS session.</p><br>
    ///   - [`messages(CisSessionMessage)`](crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder::messages) / [`set_messages(Option<Vec::<CisSessionMessage>>)`](crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder::set_messages):<br>required: **true**<br><p>The CIS session telemetry messages.</p><br>
    /// - On success, responds with [`SendCisSessionTelemetryOutput`](crate::operation::send_cis_session_telemetry::SendCisSessionTelemetryOutput)
    /// - On failure, responds with [`SdkError<SendCisSessionTelemetryError>`](crate::operation::send_cis_session_telemetry::SendCisSessionTelemetryError)
    pub fn send_cis_session_telemetry(&self) -> crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder {
        crate::operation::send_cis_session_telemetry::builders::SendCisSessionTelemetryFluentBuilder::new(self.handle.clone())
    }
}
