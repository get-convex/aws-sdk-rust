// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A schedule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum Schedule {
    /// <p>The schedule's daily.</p>
    Daily(crate::types::DailySchedule),
    /// <p>The schedule's monthly.</p>
    Monthly(crate::types::MonthlySchedule),
    /// <p>The schedule's one time.</p>
    OneTime(crate::types::OneTimeSchedule),
    /// <p>The schedule's weekly.</p>
    Weekly(crate::types::WeeklySchedule),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl Schedule {
    /// Tries to convert the enum instance into [`Daily`](crate::types::Schedule::Daily), extracting the inner [`DailySchedule`](crate::types::DailySchedule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_daily(&self) -> ::std::result::Result<&crate::types::DailySchedule, &Self> {
        if let Schedule::Daily(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Daily`](crate::types::Schedule::Daily).
    pub fn is_daily(&self) -> bool {
        self.as_daily().is_ok()
    }
    /// Tries to convert the enum instance into [`Monthly`](crate::types::Schedule::Monthly), extracting the inner [`MonthlySchedule`](crate::types::MonthlySchedule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_monthly(&self) -> ::std::result::Result<&crate::types::MonthlySchedule, &Self> {
        if let Schedule::Monthly(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Monthly`](crate::types::Schedule::Monthly).
    pub fn is_monthly(&self) -> bool {
        self.as_monthly().is_ok()
    }
    /// Tries to convert the enum instance into [`OneTime`](crate::types::Schedule::OneTime), extracting the inner [`OneTimeSchedule`](crate::types::OneTimeSchedule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_one_time(&self) -> ::std::result::Result<&crate::types::OneTimeSchedule, &Self> {
        if let Schedule::OneTime(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OneTime`](crate::types::Schedule::OneTime).
    pub fn is_one_time(&self) -> bool {
        self.as_one_time().is_ok()
    }
    /// Tries to convert the enum instance into [`Weekly`](crate::types::Schedule::Weekly), extracting the inner [`WeeklySchedule`](crate::types::WeeklySchedule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_weekly(&self) -> ::std::result::Result<&crate::types::WeeklySchedule, &Self> {
        if let Schedule::Weekly(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Weekly`](crate::types::Schedule::Weekly).
    pub fn is_weekly(&self) -> bool {
        self.as_weekly().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
