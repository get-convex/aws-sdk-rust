// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the state of your ECR re-scan duration settings. The ECR re-scan duration defines how long an ECR image will be actively scanned by Amazon Inspector. When the number of days since an image was last pushed exceeds the duration configured for image pull date, and the duration configured for image pull date, the monitoring state of that image becomes <code>inactive</code> and all associated findings are scheduled for closure.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EcrRescanDurationState {
    /// <p>The rescan duration configured for image push date.</p>
    pub rescan_duration: ::std::option::Option<crate::types::EcrRescanDuration>,
    /// <p>The status of changes to the ECR automated re-scan duration.</p>
    pub status: ::std::option::Option<crate::types::EcrRescanDurationStatus>,
    /// <p>A timestamp representing when the last time the ECR scan duration setting was changed.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The rescan duration configured for image pull date.</p>
    pub pull_date_rescan_duration: ::std::option::Option<crate::types::EcrPullDateRescanDuration>,
}
impl EcrRescanDurationState {
    /// <p>The rescan duration configured for image push date.</p>
    pub fn rescan_duration(&self) -> ::std::option::Option<&crate::types::EcrRescanDuration> {
        self.rescan_duration.as_ref()
    }
    /// <p>The status of changes to the ECR automated re-scan duration.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::EcrRescanDurationStatus> {
        self.status.as_ref()
    }
    /// <p>A timestamp representing when the last time the ECR scan duration setting was changed.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The rescan duration configured for image pull date.</p>
    pub fn pull_date_rescan_duration(&self) -> ::std::option::Option<&crate::types::EcrPullDateRescanDuration> {
        self.pull_date_rescan_duration.as_ref()
    }
}
impl EcrRescanDurationState {
    /// Creates a new builder-style object to manufacture [`EcrRescanDurationState`](crate::types::EcrRescanDurationState).
    pub fn builder() -> crate::types::builders::EcrRescanDurationStateBuilder {
        crate::types::builders::EcrRescanDurationStateBuilder::default()
    }
}

/// A builder for [`EcrRescanDurationState`](crate::types::EcrRescanDurationState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EcrRescanDurationStateBuilder {
    pub(crate) rescan_duration: ::std::option::Option<crate::types::EcrRescanDuration>,
    pub(crate) status: ::std::option::Option<crate::types::EcrRescanDurationStatus>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) pull_date_rescan_duration: ::std::option::Option<crate::types::EcrPullDateRescanDuration>,
}
impl EcrRescanDurationStateBuilder {
    /// <p>The rescan duration configured for image push date.</p>
    pub fn rescan_duration(mut self, input: crate::types::EcrRescanDuration) -> Self {
        self.rescan_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rescan duration configured for image push date.</p>
    pub fn set_rescan_duration(mut self, input: ::std::option::Option<crate::types::EcrRescanDuration>) -> Self {
        self.rescan_duration = input;
        self
    }
    /// <p>The rescan duration configured for image push date.</p>
    pub fn get_rescan_duration(&self) -> &::std::option::Option<crate::types::EcrRescanDuration> {
        &self.rescan_duration
    }
    /// <p>The status of changes to the ECR automated re-scan duration.</p>
    pub fn status(mut self, input: crate::types::EcrRescanDurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of changes to the ECR automated re-scan duration.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EcrRescanDurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of changes to the ECR automated re-scan duration.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EcrRescanDurationStatus> {
        &self.status
    }
    /// <p>A timestamp representing when the last time the ECR scan duration setting was changed.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp representing when the last time the ECR scan duration setting was changed.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>A timestamp representing when the last time the ECR scan duration setting was changed.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The rescan duration configured for image pull date.</p>
    pub fn pull_date_rescan_duration(mut self, input: crate::types::EcrPullDateRescanDuration) -> Self {
        self.pull_date_rescan_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rescan duration configured for image pull date.</p>
    pub fn set_pull_date_rescan_duration(mut self, input: ::std::option::Option<crate::types::EcrPullDateRescanDuration>) -> Self {
        self.pull_date_rescan_duration = input;
        self
    }
    /// <p>The rescan duration configured for image pull date.</p>
    pub fn get_pull_date_rescan_duration(&self) -> &::std::option::Option<crate::types::EcrPullDateRescanDuration> {
        &self.pull_date_rescan_duration
    }
    /// Consumes the builder and constructs a [`EcrRescanDurationState`](crate::types::EcrRescanDurationState).
    pub fn build(self) -> crate::types::EcrRescanDurationState {
        crate::types::EcrRescanDurationState {
            rescan_duration: self.rescan_duration,
            status: self.status,
            updated_at: self.updated_at,
            pull_date_rescan_duration: self.pull_date_rescan_duration,
        }
    }
}
