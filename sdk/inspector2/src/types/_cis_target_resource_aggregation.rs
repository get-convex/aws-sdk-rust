// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CIS target resource aggregation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CisTargetResourceAggregation {
    /// <p>The scan ARN for the CIS target resource.</p>
    pub scan_arn: ::std::string::String,
    /// <p>The ID of the target resource.</p>
    pub target_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The account ID for the CIS target resource.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The tag for the target resource.</p>
    pub target_resource_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    /// <p>The target resource status counts.</p>
    pub status_counts: ::std::option::Option<crate::types::StatusCounts>,
    /// <p>The platform for the CIS target resource.</p>
    pub platform: ::std::option::Option<::std::string::String>,
    /// <p>The status of the target resource.</p>
    pub target_status: ::std::option::Option<crate::types::CisTargetStatus>,
    /// <p>The reason for the target resource.</p>
    pub target_status_reason: ::std::option::Option<crate::types::CisTargetStatusReason>,
}
impl CisTargetResourceAggregation {
    /// <p>The scan ARN for the CIS target resource.</p>
    pub fn scan_arn(&self) -> &str {
        use std::ops::Deref;
        self.scan_arn.deref()
    }
    /// <p>The ID of the target resource.</p>
    pub fn target_resource_id(&self) -> ::std::option::Option<&str> {
        self.target_resource_id.as_deref()
    }
    /// <p>The account ID for the CIS target resource.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The tag for the target resource.</p>
    pub fn target_resource_tags(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.target_resource_tags.as_ref()
    }
    /// <p>The target resource status counts.</p>
    pub fn status_counts(&self) -> ::std::option::Option<&crate::types::StatusCounts> {
        self.status_counts.as_ref()
    }
    /// <p>The platform for the CIS target resource.</p>
    pub fn platform(&self) -> ::std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The status of the target resource.</p>
    pub fn target_status(&self) -> ::std::option::Option<&crate::types::CisTargetStatus> {
        self.target_status.as_ref()
    }
    /// <p>The reason for the target resource.</p>
    pub fn target_status_reason(&self) -> ::std::option::Option<&crate::types::CisTargetStatusReason> {
        self.target_status_reason.as_ref()
    }
}
impl CisTargetResourceAggregation {
    /// Creates a new builder-style object to manufacture [`CisTargetResourceAggregation`](crate::types::CisTargetResourceAggregation).
    pub fn builder() -> crate::types::builders::CisTargetResourceAggregationBuilder {
        crate::types::builders::CisTargetResourceAggregationBuilder::default()
    }
}

/// A builder for [`CisTargetResourceAggregation`](crate::types::CisTargetResourceAggregation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CisTargetResourceAggregationBuilder {
    pub(crate) scan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_resource_tags:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) status_counts: ::std::option::Option<crate::types::StatusCounts>,
    pub(crate) platform: ::std::option::Option<::std::string::String>,
    pub(crate) target_status: ::std::option::Option<crate::types::CisTargetStatus>,
    pub(crate) target_status_reason: ::std::option::Option<crate::types::CisTargetStatusReason>,
}
impl CisTargetResourceAggregationBuilder {
    /// <p>The scan ARN for the CIS target resource.</p>
    /// This field is required.
    pub fn scan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scan ARN for the CIS target resource.</p>
    pub fn set_scan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_arn = input;
        self
    }
    /// <p>The scan ARN for the CIS target resource.</p>
    pub fn get_scan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_arn
    }
    /// <p>The ID of the target resource.</p>
    pub fn target_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the target resource.</p>
    pub fn set_target_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_resource_id = input;
        self
    }
    /// <p>The ID of the target resource.</p>
    pub fn get_target_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_resource_id
    }
    /// <p>The account ID for the CIS target resource.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID for the CIS target resource.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID for the CIS target resource.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Adds a key-value pair to `target_resource_tags`.
    ///
    /// To override the contents of this collection use [`set_target_resource_tags`](Self::set_target_resource_tags).
    ///
    /// <p>The tag for the target resource.</p>
    pub fn target_resource_tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.target_resource_tags.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.target_resource_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tag for the target resource.</p>
    pub fn set_target_resource_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.target_resource_tags = input;
        self
    }
    /// <p>The tag for the target resource.</p>
    pub fn get_target_resource_tags(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.target_resource_tags
    }
    /// <p>The target resource status counts.</p>
    pub fn status_counts(mut self, input: crate::types::StatusCounts) -> Self {
        self.status_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target resource status counts.</p>
    pub fn set_status_counts(mut self, input: ::std::option::Option<crate::types::StatusCounts>) -> Self {
        self.status_counts = input;
        self
    }
    /// <p>The target resource status counts.</p>
    pub fn get_status_counts(&self) -> &::std::option::Option<crate::types::StatusCounts> {
        &self.status_counts
    }
    /// <p>The platform for the CIS target resource.</p>
    pub fn platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform for the CIS target resource.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform for the CIS target resource.</p>
    pub fn get_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform
    }
    /// <p>The status of the target resource.</p>
    pub fn target_status(mut self, input: crate::types::CisTargetStatus) -> Self {
        self.target_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the target resource.</p>
    pub fn set_target_status(mut self, input: ::std::option::Option<crate::types::CisTargetStatus>) -> Self {
        self.target_status = input;
        self
    }
    /// <p>The status of the target resource.</p>
    pub fn get_target_status(&self) -> &::std::option::Option<crate::types::CisTargetStatus> {
        &self.target_status
    }
    /// <p>The reason for the target resource.</p>
    pub fn target_status_reason(mut self, input: crate::types::CisTargetStatusReason) -> Self {
        self.target_status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason for the target resource.</p>
    pub fn set_target_status_reason(mut self, input: ::std::option::Option<crate::types::CisTargetStatusReason>) -> Self {
        self.target_status_reason = input;
        self
    }
    /// <p>The reason for the target resource.</p>
    pub fn get_target_status_reason(&self) -> &::std::option::Option<crate::types::CisTargetStatusReason> {
        &self.target_status_reason
    }
    /// Consumes the builder and constructs a [`CisTargetResourceAggregation`](crate::types::CisTargetResourceAggregation).
    /// This method will fail if any of the following fields are not set:
    /// - [`scan_arn`](crate::types::builders::CisTargetResourceAggregationBuilder::scan_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CisTargetResourceAggregation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CisTargetResourceAggregation {
            scan_arn: self.scan_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_arn",
                    "scan_arn was not specified but it is required when building CisTargetResourceAggregation",
                )
            })?,
            target_resource_id: self.target_resource_id,
            account_id: self.account_id,
            target_resource_tags: self.target_resource_tags,
            status_counts: self.status_counts,
            platform: self.platform,
            target_status: self.target_status,
            target_status_reason: self.target_status_reason,
        })
    }
}
