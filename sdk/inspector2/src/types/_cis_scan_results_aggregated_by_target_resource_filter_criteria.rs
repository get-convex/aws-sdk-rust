// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scan results aggregated by target resource filter criteria.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CisScanResultsAggregatedByTargetResourceFilterCriteria {
    /// <p>The criteria's account ID filters.</p>
    pub account_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The criteria's status filter.</p>
    pub status_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisResultStatusFilter>>,
    /// <p>The criteria's check ID filters.</p>
    pub check_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The criteria's target resource ID filters.</p>
    pub target_resource_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The criteria's target resource tag filters.</p>
    pub target_resource_tag_filters: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>,
    /// <p>The criteria's platform filters.</p>
    pub platform_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The criteria's target status filters.</p>
    pub target_status_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisTargetStatusFilter>>,
    /// <p>The criteria's target status reason filters.</p>
    pub target_status_reason_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisTargetStatusReasonFilter>>,
    /// <p>The criteria's failed checks filters.</p>
    pub failed_checks_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisNumberFilter>>,
}
impl CisScanResultsAggregatedByTargetResourceFilterCriteria {
    /// <p>The criteria's account ID filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_id_filters.is_none()`.
    pub fn account_id_filters(&self) -> &[crate::types::CisStringFilter] {
        self.account_id_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's status filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_filters.is_none()`.
    pub fn status_filters(&self) -> &[crate::types::CisResultStatusFilter] {
        self.status_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's check ID filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.check_id_filters.is_none()`.
    pub fn check_id_filters(&self) -> &[crate::types::CisStringFilter] {
        self.check_id_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's target resource ID filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_resource_id_filters.is_none()`.
    pub fn target_resource_id_filters(&self) -> &[crate::types::CisStringFilter] {
        self.target_resource_id_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's target resource tag filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_resource_tag_filters.is_none()`.
    pub fn target_resource_tag_filters(&self) -> &[crate::types::TagFilter] {
        self.target_resource_tag_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's platform filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.platform_filters.is_none()`.
    pub fn platform_filters(&self) -> &[crate::types::CisStringFilter] {
        self.platform_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's target status filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_status_filters.is_none()`.
    pub fn target_status_filters(&self) -> &[crate::types::CisTargetStatusFilter] {
        self.target_status_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's target status reason filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_status_reason_filters.is_none()`.
    pub fn target_status_reason_filters(&self) -> &[crate::types::CisTargetStatusReasonFilter] {
        self.target_status_reason_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's failed checks filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failed_checks_filters.is_none()`.
    pub fn failed_checks_filters(&self) -> &[crate::types::CisNumberFilter] {
        self.failed_checks_filters.as_deref().unwrap_or_default()
    }
}
impl CisScanResultsAggregatedByTargetResourceFilterCriteria {
    /// Creates a new builder-style object to manufacture [`CisScanResultsAggregatedByTargetResourceFilterCriteria`](crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria).
    pub fn builder() -> crate::types::builders::CisScanResultsAggregatedByTargetResourceFilterCriteriaBuilder {
        crate::types::builders::CisScanResultsAggregatedByTargetResourceFilterCriteriaBuilder::default()
    }
}

/// A builder for [`CisScanResultsAggregatedByTargetResourceFilterCriteria`](crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CisScanResultsAggregatedByTargetResourceFilterCriteriaBuilder {
    pub(crate) account_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) status_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisResultStatusFilter>>,
    pub(crate) check_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) target_resource_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) target_resource_tag_filters: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>,
    pub(crate) platform_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) target_status_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisTargetStatusFilter>>,
    pub(crate) target_status_reason_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisTargetStatusReasonFilter>>,
    pub(crate) failed_checks_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisNumberFilter>>,
}
impl CisScanResultsAggregatedByTargetResourceFilterCriteriaBuilder {
    /// Appends an item to `account_id_filters`.
    ///
    /// To override the contents of this collection use [`set_account_id_filters`](Self::set_account_id_filters).
    ///
    /// <p>The criteria's account ID filters.</p>
    pub fn account_id_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.account_id_filters.unwrap_or_default();
        v.push(input);
        self.account_id_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's account ID filters.</p>
    pub fn set_account_id_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.account_id_filters = input;
        self
    }
    /// <p>The criteria's account ID filters.</p>
    pub fn get_account_id_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.account_id_filters
    }
    /// Appends an item to `status_filters`.
    ///
    /// To override the contents of this collection use [`set_status_filters`](Self::set_status_filters).
    ///
    /// <p>The criteria's status filter.</p>
    pub fn status_filters(mut self, input: crate::types::CisResultStatusFilter) -> Self {
        let mut v = self.status_filters.unwrap_or_default();
        v.push(input);
        self.status_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's status filter.</p>
    pub fn set_status_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisResultStatusFilter>>) -> Self {
        self.status_filters = input;
        self
    }
    /// <p>The criteria's status filter.</p>
    pub fn get_status_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisResultStatusFilter>> {
        &self.status_filters
    }
    /// Appends an item to `check_id_filters`.
    ///
    /// To override the contents of this collection use [`set_check_id_filters`](Self::set_check_id_filters).
    ///
    /// <p>The criteria's check ID filters.</p>
    pub fn check_id_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.check_id_filters.unwrap_or_default();
        v.push(input);
        self.check_id_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's check ID filters.</p>
    pub fn set_check_id_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.check_id_filters = input;
        self
    }
    /// <p>The criteria's check ID filters.</p>
    pub fn get_check_id_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.check_id_filters
    }
    /// Appends an item to `target_resource_id_filters`.
    ///
    /// To override the contents of this collection use [`set_target_resource_id_filters`](Self::set_target_resource_id_filters).
    ///
    /// <p>The criteria's target resource ID filters.</p>
    pub fn target_resource_id_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.target_resource_id_filters.unwrap_or_default();
        v.push(input);
        self.target_resource_id_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's target resource ID filters.</p>
    pub fn set_target_resource_id_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.target_resource_id_filters = input;
        self
    }
    /// <p>The criteria's target resource ID filters.</p>
    pub fn get_target_resource_id_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.target_resource_id_filters
    }
    /// Appends an item to `target_resource_tag_filters`.
    ///
    /// To override the contents of this collection use [`set_target_resource_tag_filters`](Self::set_target_resource_tag_filters).
    ///
    /// <p>The criteria's target resource tag filters.</p>
    pub fn target_resource_tag_filters(mut self, input: crate::types::TagFilter) -> Self {
        let mut v = self.target_resource_tag_filters.unwrap_or_default();
        v.push(input);
        self.target_resource_tag_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's target resource tag filters.</p>
    pub fn set_target_resource_tag_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>) -> Self {
        self.target_resource_tag_filters = input;
        self
    }
    /// <p>The criteria's target resource tag filters.</p>
    pub fn get_target_resource_tag_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagFilter>> {
        &self.target_resource_tag_filters
    }
    /// Appends an item to `platform_filters`.
    ///
    /// To override the contents of this collection use [`set_platform_filters`](Self::set_platform_filters).
    ///
    /// <p>The criteria's platform filters.</p>
    pub fn platform_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.platform_filters.unwrap_or_default();
        v.push(input);
        self.platform_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's platform filters.</p>
    pub fn set_platform_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.platform_filters = input;
        self
    }
    /// <p>The criteria's platform filters.</p>
    pub fn get_platform_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.platform_filters
    }
    /// Appends an item to `target_status_filters`.
    ///
    /// To override the contents of this collection use [`set_target_status_filters`](Self::set_target_status_filters).
    ///
    /// <p>The criteria's target status filters.</p>
    pub fn target_status_filters(mut self, input: crate::types::CisTargetStatusFilter) -> Self {
        let mut v = self.target_status_filters.unwrap_or_default();
        v.push(input);
        self.target_status_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's target status filters.</p>
    pub fn set_target_status_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisTargetStatusFilter>>) -> Self {
        self.target_status_filters = input;
        self
    }
    /// <p>The criteria's target status filters.</p>
    pub fn get_target_status_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisTargetStatusFilter>> {
        &self.target_status_filters
    }
    /// Appends an item to `target_status_reason_filters`.
    ///
    /// To override the contents of this collection use [`set_target_status_reason_filters`](Self::set_target_status_reason_filters).
    ///
    /// <p>The criteria's target status reason filters.</p>
    pub fn target_status_reason_filters(mut self, input: crate::types::CisTargetStatusReasonFilter) -> Self {
        let mut v = self.target_status_reason_filters.unwrap_or_default();
        v.push(input);
        self.target_status_reason_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's target status reason filters.</p>
    pub fn set_target_status_reason_filters(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CisTargetStatusReasonFilter>>,
    ) -> Self {
        self.target_status_reason_filters = input;
        self
    }
    /// <p>The criteria's target status reason filters.</p>
    pub fn get_target_status_reason_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisTargetStatusReasonFilter>> {
        &self.target_status_reason_filters
    }
    /// Appends an item to `failed_checks_filters`.
    ///
    /// To override the contents of this collection use [`set_failed_checks_filters`](Self::set_failed_checks_filters).
    ///
    /// <p>The criteria's failed checks filters.</p>
    pub fn failed_checks_filters(mut self, input: crate::types::CisNumberFilter) -> Self {
        let mut v = self.failed_checks_filters.unwrap_or_default();
        v.push(input);
        self.failed_checks_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's failed checks filters.</p>
    pub fn set_failed_checks_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisNumberFilter>>) -> Self {
        self.failed_checks_filters = input;
        self
    }
    /// <p>The criteria's failed checks filters.</p>
    pub fn get_failed_checks_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisNumberFilter>> {
        &self.failed_checks_filters
    }
    /// Consumes the builder and constructs a [`CisScanResultsAggregatedByTargetResourceFilterCriteria`](crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria).
    pub fn build(self) -> crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria {
        crate::types::CisScanResultsAggregatedByTargetResourceFilterCriteria {
            account_id_filters: self.account_id_filters,
            status_filters: self.status_filters,
            check_id_filters: self.check_id_filters,
            target_resource_id_filters: self.target_resource_id_filters,
            target_resource_tag_filters: self.target_resource_tag_filters,
            platform_filters: self.platform_filters,
            target_status_filters: self.target_status_filters,
            target_status_reason_filters: self.target_status_reason_filters,
            failed_checks_filters: self.failed_checks_filters,
        }
    }
}
