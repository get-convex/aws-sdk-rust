// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CIS scan result details filter criteria.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CisScanResultDetailsFilterCriteria {
    /// <p>The criteria's finding status filters.</p>
    pub finding_status_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisFindingStatusFilter>>,
    /// <p>The criteria's check ID filters.</p>
    pub check_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The criteria's title filters.</p>
    pub title_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The criteria's security level filters. . Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub security_level_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisSecurityLevelFilter>>,
    /// <p>The criteria's finding ARN filters.</p>
    pub finding_arn_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
}
impl CisScanResultDetailsFilterCriteria {
    /// <p>The criteria's finding status filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_status_filters.is_none()`.
    pub fn finding_status_filters(&self) -> &[crate::types::CisFindingStatusFilter] {
        self.finding_status_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's check ID filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.check_id_filters.is_none()`.
    pub fn check_id_filters(&self) -> &[crate::types::CisStringFilter] {
        self.check_id_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's title filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.title_filters.is_none()`.
    pub fn title_filters(&self) -> &[crate::types::CisStringFilter] {
        self.title_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's security level filters. . Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_level_filters.is_none()`.
    pub fn security_level_filters(&self) -> &[crate::types::CisSecurityLevelFilter] {
        self.security_level_filters.as_deref().unwrap_or_default()
    }
    /// <p>The criteria's finding ARN filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_arn_filters.is_none()`.
    pub fn finding_arn_filters(&self) -> &[crate::types::CisStringFilter] {
        self.finding_arn_filters.as_deref().unwrap_or_default()
    }
}
impl CisScanResultDetailsFilterCriteria {
    /// Creates a new builder-style object to manufacture [`CisScanResultDetailsFilterCriteria`](crate::types::CisScanResultDetailsFilterCriteria).
    pub fn builder() -> crate::types::builders::CisScanResultDetailsFilterCriteriaBuilder {
        crate::types::builders::CisScanResultDetailsFilterCriteriaBuilder::default()
    }
}

/// A builder for [`CisScanResultDetailsFilterCriteria`](crate::types::CisScanResultDetailsFilterCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CisScanResultDetailsFilterCriteriaBuilder {
    pub(crate) finding_status_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisFindingStatusFilter>>,
    pub(crate) check_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) title_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) security_level_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisSecurityLevelFilter>>,
    pub(crate) finding_arn_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
}
impl CisScanResultDetailsFilterCriteriaBuilder {
    /// Appends an item to `finding_status_filters`.
    ///
    /// To override the contents of this collection use [`set_finding_status_filters`](Self::set_finding_status_filters).
    ///
    /// <p>The criteria's finding status filters.</p>
    pub fn finding_status_filters(mut self, input: crate::types::CisFindingStatusFilter) -> Self {
        let mut v = self.finding_status_filters.unwrap_or_default();
        v.push(input);
        self.finding_status_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's finding status filters.</p>
    pub fn set_finding_status_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisFindingStatusFilter>>) -> Self {
        self.finding_status_filters = input;
        self
    }
    /// <p>The criteria's finding status filters.</p>
    pub fn get_finding_status_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisFindingStatusFilter>> {
        &self.finding_status_filters
    }
    /// Appends an item to `check_id_filters`.
    ///
    /// To override the contents of this collection use [`set_check_id_filters`](Self::set_check_id_filters).
    ///
    /// <p>The criteria's check ID filters.</p>
    pub fn check_id_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.check_id_filters.unwrap_or_default();
        v.push(input);
        self.check_id_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's check ID filters.</p>
    pub fn set_check_id_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.check_id_filters = input;
        self
    }
    /// <p>The criteria's check ID filters.</p>
    pub fn get_check_id_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.check_id_filters
    }
    /// Appends an item to `title_filters`.
    ///
    /// To override the contents of this collection use [`set_title_filters`](Self::set_title_filters).
    ///
    /// <p>The criteria's title filters.</p>
    pub fn title_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.title_filters.unwrap_or_default();
        v.push(input);
        self.title_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's title filters.</p>
    pub fn set_title_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.title_filters = input;
        self
    }
    /// <p>The criteria's title filters.</p>
    pub fn get_title_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.title_filters
    }
    /// Appends an item to `security_level_filters`.
    ///
    /// To override the contents of this collection use [`set_security_level_filters`](Self::set_security_level_filters).
    ///
    /// <p>The criteria's security level filters. . Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn security_level_filters(mut self, input: crate::types::CisSecurityLevelFilter) -> Self {
        let mut v = self.security_level_filters.unwrap_or_default();
        v.push(input);
        self.security_level_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's security level filters. . Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn set_security_level_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisSecurityLevelFilter>>) -> Self {
        self.security_level_filters = input;
        self
    }
    /// <p>The criteria's security level filters. . Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn get_security_level_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisSecurityLevelFilter>> {
        &self.security_level_filters
    }
    /// Appends an item to `finding_arn_filters`.
    ///
    /// To override the contents of this collection use [`set_finding_arn_filters`](Self::set_finding_arn_filters).
    ///
    /// <p>The criteria's finding ARN filters.</p>
    pub fn finding_arn_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.finding_arn_filters.unwrap_or_default();
        v.push(input);
        self.finding_arn_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The criteria's finding ARN filters.</p>
    pub fn set_finding_arn_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.finding_arn_filters = input;
        self
    }
    /// <p>The criteria's finding ARN filters.</p>
    pub fn get_finding_arn_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.finding_arn_filters
    }
    /// Consumes the builder and constructs a [`CisScanResultDetailsFilterCriteria`](crate::types::CisScanResultDetailsFilterCriteria).
    pub fn build(self) -> crate::types::CisScanResultDetailsFilterCriteria {
        crate::types::CisScanResultDetailsFilterCriteria {
            finding_status_filters: self.finding_status_filters,
            check_id_filters: self.check_id_filters,
            title_filters: self.title_filters,
            security_level_filters: self.security_level_filters,
            finding_arn_filters: self.finding_arn_filters,
        }
    }
}
