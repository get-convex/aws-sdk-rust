// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A weekly schedule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WeeklySchedule {
    /// <p>The weekly schedule's start time.</p>
    pub start_time: ::std::option::Option<crate::types::Time>,
    /// <p>The weekly schedule's days.</p>
    pub days: ::std::vec::Vec<crate::types::Day>,
}
impl WeeklySchedule {
    /// <p>The weekly schedule's start time.</p>
    pub fn start_time(&self) -> ::std::option::Option<&crate::types::Time> {
        self.start_time.as_ref()
    }
    /// <p>The weekly schedule's days.</p>
    pub fn days(&self) -> &[crate::types::Day] {
        use std::ops::Deref;
        self.days.deref()
    }
}
impl WeeklySchedule {
    /// Creates a new builder-style object to manufacture [`WeeklySchedule`](crate::types::WeeklySchedule).
    pub fn builder() -> crate::types::builders::WeeklyScheduleBuilder {
        crate::types::builders::WeeklyScheduleBuilder::default()
    }
}

/// A builder for [`WeeklySchedule`](crate::types::WeeklySchedule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WeeklyScheduleBuilder {
    pub(crate) start_time: ::std::option::Option<crate::types::Time>,
    pub(crate) days: ::std::option::Option<::std::vec::Vec<crate::types::Day>>,
}
impl WeeklyScheduleBuilder {
    /// <p>The weekly schedule's start time.</p>
    /// This field is required.
    pub fn start_time(mut self, input: crate::types::Time) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The weekly schedule's start time.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<crate::types::Time>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The weekly schedule's start time.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<crate::types::Time> {
        &self.start_time
    }
    /// Appends an item to `days`.
    ///
    /// To override the contents of this collection use [`set_days`](Self::set_days).
    ///
    /// <p>The weekly schedule's days.</p>
    pub fn days(mut self, input: crate::types::Day) -> Self {
        let mut v = self.days.unwrap_or_default();
        v.push(input);
        self.days = ::std::option::Option::Some(v);
        self
    }
    /// <p>The weekly schedule's days.</p>
    pub fn set_days(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Day>>) -> Self {
        self.days = input;
        self
    }
    /// <p>The weekly schedule's days.</p>
    pub fn get_days(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Day>> {
        &self.days
    }
    /// Consumes the builder and constructs a [`WeeklySchedule`](crate::types::WeeklySchedule).
    /// This method will fail if any of the following fields are not set:
    /// - [`days`](crate::types::builders::WeeklyScheduleBuilder::days)
    pub fn build(self) -> ::std::result::Result<crate::types::WeeklySchedule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WeeklySchedule {
            start_time: self.start_time,
            days: self.days.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "days",
                    "days was not specified but it is required when building WeeklySchedule",
                )
            })?,
        })
    }
}
