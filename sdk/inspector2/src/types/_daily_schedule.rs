// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A daily schedule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DailySchedule {
    /// <p>The schedule start time.</p>
    pub start_time: ::std::option::Option<crate::types::Time>,
}
impl DailySchedule {
    /// <p>The schedule start time.</p>
    pub fn start_time(&self) -> ::std::option::Option<&crate::types::Time> {
        self.start_time.as_ref()
    }
}
impl DailySchedule {
    /// Creates a new builder-style object to manufacture [`DailySchedule`](crate::types::DailySchedule).
    pub fn builder() -> crate::types::builders::DailyScheduleBuilder {
        crate::types::builders::DailyScheduleBuilder::default()
    }
}

/// A builder for [`DailySchedule`](crate::types::DailySchedule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DailyScheduleBuilder {
    pub(crate) start_time: ::std::option::Option<crate::types::Time>,
}
impl DailyScheduleBuilder {
    /// <p>The schedule start time.</p>
    /// This field is required.
    pub fn start_time(mut self, input: crate::types::Time) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schedule start time.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<crate::types::Time>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The schedule start time.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<crate::types::Time> {
        &self.start_time
    }
    /// Consumes the builder and constructs a [`DailySchedule`](crate::types::DailySchedule).
    pub fn build(self) -> crate::types::DailySchedule {
        crate::types::DailySchedule { start_time: self.start_time }
    }
}
