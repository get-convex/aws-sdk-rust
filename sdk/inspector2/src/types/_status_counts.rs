// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status counts.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StatusCounts {
    /// <p>The number of checks that failed.</p>
    pub failed: ::std::option::Option<i32>,
    /// <p>The number of checks that were skipped.</p>
    pub skipped: ::std::option::Option<i32>,
    /// <p>The number of checks that passed.</p>
    pub passed: ::std::option::Option<i32>,
}
impl StatusCounts {
    /// <p>The number of checks that failed.</p>
    pub fn failed(&self) -> ::std::option::Option<i32> {
        self.failed
    }
    /// <p>The number of checks that were skipped.</p>
    pub fn skipped(&self) -> ::std::option::Option<i32> {
        self.skipped
    }
    /// <p>The number of checks that passed.</p>
    pub fn passed(&self) -> ::std::option::Option<i32> {
        self.passed
    }
}
impl StatusCounts {
    /// Creates a new builder-style object to manufacture [`StatusCounts`](crate::types::StatusCounts).
    pub fn builder() -> crate::types::builders::StatusCountsBuilder {
        crate::types::builders::StatusCountsBuilder::default()
    }
}

/// A builder for [`StatusCounts`](crate::types::StatusCounts).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StatusCountsBuilder {
    pub(crate) failed: ::std::option::Option<i32>,
    pub(crate) skipped: ::std::option::Option<i32>,
    pub(crate) passed: ::std::option::Option<i32>,
}
impl StatusCountsBuilder {
    /// <p>The number of checks that failed.</p>
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of checks that failed.</p>
    pub fn set_failed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed = input;
        self
    }
    /// <p>The number of checks that failed.</p>
    pub fn get_failed(&self) -> &::std::option::Option<i32> {
        &self.failed
    }
    /// <p>The number of checks that were skipped.</p>
    pub fn skipped(mut self, input: i32) -> Self {
        self.skipped = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of checks that were skipped.</p>
    pub fn set_skipped(mut self, input: ::std::option::Option<i32>) -> Self {
        self.skipped = input;
        self
    }
    /// <p>The number of checks that were skipped.</p>
    pub fn get_skipped(&self) -> &::std::option::Option<i32> {
        &self.skipped
    }
    /// <p>The number of checks that passed.</p>
    pub fn passed(mut self, input: i32) -> Self {
        self.passed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of checks that passed.</p>
    pub fn set_passed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.passed = input;
        self
    }
    /// <p>The number of checks that passed.</p>
    pub fn get_passed(&self) -> &::std::option::Option<i32> {
        &self.passed
    }
    /// Consumes the builder and constructs a [`StatusCounts`](crate::types::StatusCounts).
    pub fn build(self) -> crate::types::StatusCounts {
        crate::types::StatusCounts {
            failed: self.failed,
            skipped: self.skipped,
            passed: self.passed,
        }
    }
}
