// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of CIS scans filter criteria.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCisScansFilterCriteria {
    /// <p>The list of scan name filters.</p>
    pub scan_name_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The list of target resource tag filters.</p>
    pub target_resource_tag_filters: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>,
    /// <p>The list of target resource ID filters.</p>
    pub target_resource_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The list of scan status filters.</p>
    pub scan_status_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisScanStatusFilter>>,
    /// <p>The list of scan at filters.</p>
    pub scan_at_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisDateFilter>>,
    /// <p>The list of scan configuration ARN filters.</p>
    pub scan_configuration_arn_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The list of scan ARN filters.</p>
    pub scan_arn_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The list of scheduled by filters.</p>
    pub scheduled_by_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    /// <p>The list of failed checks filters.</p>
    pub failed_checks_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisNumberFilter>>,
    /// <p>The list of target account ID filters.</p>
    pub target_account_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
}
impl ListCisScansFilterCriteria {
    /// <p>The list of scan name filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scan_name_filters.is_none()`.
    pub fn scan_name_filters(&self) -> &[crate::types::CisStringFilter] {
        self.scan_name_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of target resource tag filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_resource_tag_filters.is_none()`.
    pub fn target_resource_tag_filters(&self) -> &[crate::types::TagFilter] {
        self.target_resource_tag_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of target resource ID filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_resource_id_filters.is_none()`.
    pub fn target_resource_id_filters(&self) -> &[crate::types::CisStringFilter] {
        self.target_resource_id_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of scan status filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scan_status_filters.is_none()`.
    pub fn scan_status_filters(&self) -> &[crate::types::CisScanStatusFilter] {
        self.scan_status_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of scan at filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scan_at_filters.is_none()`.
    pub fn scan_at_filters(&self) -> &[crate::types::CisDateFilter] {
        self.scan_at_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of scan configuration ARN filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scan_configuration_arn_filters.is_none()`.
    pub fn scan_configuration_arn_filters(&self) -> &[crate::types::CisStringFilter] {
        self.scan_configuration_arn_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of scan ARN filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scan_arn_filters.is_none()`.
    pub fn scan_arn_filters(&self) -> &[crate::types::CisStringFilter] {
        self.scan_arn_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of scheduled by filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scheduled_by_filters.is_none()`.
    pub fn scheduled_by_filters(&self) -> &[crate::types::CisStringFilter] {
        self.scheduled_by_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of failed checks filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failed_checks_filters.is_none()`.
    pub fn failed_checks_filters(&self) -> &[crate::types::CisNumberFilter] {
        self.failed_checks_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of target account ID filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_account_id_filters.is_none()`.
    pub fn target_account_id_filters(&self) -> &[crate::types::CisStringFilter] {
        self.target_account_id_filters.as_deref().unwrap_or_default()
    }
}
impl ListCisScansFilterCriteria {
    /// Creates a new builder-style object to manufacture [`ListCisScansFilterCriteria`](crate::types::ListCisScansFilterCriteria).
    pub fn builder() -> crate::types::builders::ListCisScansFilterCriteriaBuilder {
        crate::types::builders::ListCisScansFilterCriteriaBuilder::default()
    }
}

/// A builder for [`ListCisScansFilterCriteria`](crate::types::ListCisScansFilterCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCisScansFilterCriteriaBuilder {
    pub(crate) scan_name_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) target_resource_tag_filters: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>,
    pub(crate) target_resource_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) scan_status_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisScanStatusFilter>>,
    pub(crate) scan_at_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisDateFilter>>,
    pub(crate) scan_configuration_arn_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) scan_arn_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) scheduled_by_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
    pub(crate) failed_checks_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisNumberFilter>>,
    pub(crate) target_account_id_filters: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>,
}
impl ListCisScansFilterCriteriaBuilder {
    /// Appends an item to `scan_name_filters`.
    ///
    /// To override the contents of this collection use [`set_scan_name_filters`](Self::set_scan_name_filters).
    ///
    /// <p>The list of scan name filters.</p>
    pub fn scan_name_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.scan_name_filters.unwrap_or_default();
        v.push(input);
        self.scan_name_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of scan name filters.</p>
    pub fn set_scan_name_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.scan_name_filters = input;
        self
    }
    /// <p>The list of scan name filters.</p>
    pub fn get_scan_name_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.scan_name_filters
    }
    /// Appends an item to `target_resource_tag_filters`.
    ///
    /// To override the contents of this collection use [`set_target_resource_tag_filters`](Self::set_target_resource_tag_filters).
    ///
    /// <p>The list of target resource tag filters.</p>
    pub fn target_resource_tag_filters(mut self, input: crate::types::TagFilter) -> Self {
        let mut v = self.target_resource_tag_filters.unwrap_or_default();
        v.push(input);
        self.target_resource_tag_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of target resource tag filters.</p>
    pub fn set_target_resource_tag_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>) -> Self {
        self.target_resource_tag_filters = input;
        self
    }
    /// <p>The list of target resource tag filters.</p>
    pub fn get_target_resource_tag_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagFilter>> {
        &self.target_resource_tag_filters
    }
    /// Appends an item to `target_resource_id_filters`.
    ///
    /// To override the contents of this collection use [`set_target_resource_id_filters`](Self::set_target_resource_id_filters).
    ///
    /// <p>The list of target resource ID filters.</p>
    pub fn target_resource_id_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.target_resource_id_filters.unwrap_or_default();
        v.push(input);
        self.target_resource_id_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of target resource ID filters.</p>
    pub fn set_target_resource_id_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.target_resource_id_filters = input;
        self
    }
    /// <p>The list of target resource ID filters.</p>
    pub fn get_target_resource_id_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.target_resource_id_filters
    }
    /// Appends an item to `scan_status_filters`.
    ///
    /// To override the contents of this collection use [`set_scan_status_filters`](Self::set_scan_status_filters).
    ///
    /// <p>The list of scan status filters.</p>
    pub fn scan_status_filters(mut self, input: crate::types::CisScanStatusFilter) -> Self {
        let mut v = self.scan_status_filters.unwrap_or_default();
        v.push(input);
        self.scan_status_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of scan status filters.</p>
    pub fn set_scan_status_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisScanStatusFilter>>) -> Self {
        self.scan_status_filters = input;
        self
    }
    /// <p>The list of scan status filters.</p>
    pub fn get_scan_status_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisScanStatusFilter>> {
        &self.scan_status_filters
    }
    /// Appends an item to `scan_at_filters`.
    ///
    /// To override the contents of this collection use [`set_scan_at_filters`](Self::set_scan_at_filters).
    ///
    /// <p>The list of scan at filters.</p>
    pub fn scan_at_filters(mut self, input: crate::types::CisDateFilter) -> Self {
        let mut v = self.scan_at_filters.unwrap_or_default();
        v.push(input);
        self.scan_at_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of scan at filters.</p>
    pub fn set_scan_at_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisDateFilter>>) -> Self {
        self.scan_at_filters = input;
        self
    }
    /// <p>The list of scan at filters.</p>
    pub fn get_scan_at_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisDateFilter>> {
        &self.scan_at_filters
    }
    /// Appends an item to `scan_configuration_arn_filters`.
    ///
    /// To override the contents of this collection use [`set_scan_configuration_arn_filters`](Self::set_scan_configuration_arn_filters).
    ///
    /// <p>The list of scan configuration ARN filters.</p>
    pub fn scan_configuration_arn_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.scan_configuration_arn_filters.unwrap_or_default();
        v.push(input);
        self.scan_configuration_arn_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of scan configuration ARN filters.</p>
    pub fn set_scan_configuration_arn_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.scan_configuration_arn_filters = input;
        self
    }
    /// <p>The list of scan configuration ARN filters.</p>
    pub fn get_scan_configuration_arn_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.scan_configuration_arn_filters
    }
    /// Appends an item to `scan_arn_filters`.
    ///
    /// To override the contents of this collection use [`set_scan_arn_filters`](Self::set_scan_arn_filters).
    ///
    /// <p>The list of scan ARN filters.</p>
    pub fn scan_arn_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.scan_arn_filters.unwrap_or_default();
        v.push(input);
        self.scan_arn_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of scan ARN filters.</p>
    pub fn set_scan_arn_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.scan_arn_filters = input;
        self
    }
    /// <p>The list of scan ARN filters.</p>
    pub fn get_scan_arn_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.scan_arn_filters
    }
    /// Appends an item to `scheduled_by_filters`.
    ///
    /// To override the contents of this collection use [`set_scheduled_by_filters`](Self::set_scheduled_by_filters).
    ///
    /// <p>The list of scheduled by filters.</p>
    pub fn scheduled_by_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.scheduled_by_filters.unwrap_or_default();
        v.push(input);
        self.scheduled_by_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of scheduled by filters.</p>
    pub fn set_scheduled_by_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.scheduled_by_filters = input;
        self
    }
    /// <p>The list of scheduled by filters.</p>
    pub fn get_scheduled_by_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.scheduled_by_filters
    }
    /// Appends an item to `failed_checks_filters`.
    ///
    /// To override the contents of this collection use [`set_failed_checks_filters`](Self::set_failed_checks_filters).
    ///
    /// <p>The list of failed checks filters.</p>
    pub fn failed_checks_filters(mut self, input: crate::types::CisNumberFilter) -> Self {
        let mut v = self.failed_checks_filters.unwrap_or_default();
        v.push(input);
        self.failed_checks_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of failed checks filters.</p>
    pub fn set_failed_checks_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisNumberFilter>>) -> Self {
        self.failed_checks_filters = input;
        self
    }
    /// <p>The list of failed checks filters.</p>
    pub fn get_failed_checks_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisNumberFilter>> {
        &self.failed_checks_filters
    }
    /// Appends an item to `target_account_id_filters`.
    ///
    /// To override the contents of this collection use [`set_target_account_id_filters`](Self::set_target_account_id_filters).
    ///
    /// <p>The list of target account ID filters.</p>
    pub fn target_account_id_filters(mut self, input: crate::types::CisStringFilter) -> Self {
        let mut v = self.target_account_id_filters.unwrap_or_default();
        v.push(input);
        self.target_account_id_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of target account ID filters.</p>
    pub fn set_target_account_id_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>>) -> Self {
        self.target_account_id_filters = input;
        self
    }
    /// <p>The list of target account ID filters.</p>
    pub fn get_target_account_id_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CisStringFilter>> {
        &self.target_account_id_filters
    }
    /// Consumes the builder and constructs a [`ListCisScansFilterCriteria`](crate::types::ListCisScansFilterCriteria).
    pub fn build(self) -> crate::types::ListCisScansFilterCriteria {
        crate::types::ListCisScansFilterCriteria {
            scan_name_filters: self.scan_name_filters,
            target_resource_tag_filters: self.target_resource_tag_filters,
            target_resource_id_filters: self.target_resource_id_filters,
            scan_status_filters: self.scan_status_filters,
            scan_at_filters: self.scan_at_filters,
            scan_configuration_arn_filters: self.scan_configuration_arn_filters,
            scan_arn_filters: self.scan_arn_filters,
            scheduled_by_filters: self.scheduled_by_filters,
            failed_checks_filters: self.failed_checks_filters,
            target_account_id_filters: self.target_account_id_filters,
        }
    }
}
