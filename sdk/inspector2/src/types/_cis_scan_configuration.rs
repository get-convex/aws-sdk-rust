// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CIS scan configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CisScanConfiguration {
    /// <p>The CIS scan configuration's scan configuration ARN.</p>
    pub scan_configuration_arn: ::std::string::String,
    /// <p>The CIS scan configuration's owner ID.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the CIS scan configuration.</p>
    pub scan_name: ::std::option::Option<::std::string::String>,
    /// <p>The CIS scan configuration's security level.</p>
    pub security_level: ::std::option::Option<crate::types::CisSecurityLevel>,
    /// <p>The CIS scan configuration's schedule.</p>
    pub schedule: ::std::option::Option<crate::types::Schedule>,
    /// <p>The CIS scan configuration's targets.</p>
    pub targets: ::std::option::Option<crate::types::CisTargets>,
    /// <p>The CIS scan configuration's tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CisScanConfiguration {
    /// <p>The CIS scan configuration's scan configuration ARN.</p>
    pub fn scan_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.scan_configuration_arn.deref()
    }
    /// <p>The CIS scan configuration's owner ID.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The name of the CIS scan configuration.</p>
    pub fn scan_name(&self) -> ::std::option::Option<&str> {
        self.scan_name.as_deref()
    }
    /// <p>The CIS scan configuration's security level.</p>
    pub fn security_level(&self) -> ::std::option::Option<&crate::types::CisSecurityLevel> {
        self.security_level.as_ref()
    }
    /// <p>The CIS scan configuration's schedule.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::Schedule> {
        self.schedule.as_ref()
    }
    /// <p>The CIS scan configuration's targets.</p>
    pub fn targets(&self) -> ::std::option::Option<&crate::types::CisTargets> {
        self.targets.as_ref()
    }
    /// <p>The CIS scan configuration's tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CisScanConfiguration {
    /// Creates a new builder-style object to manufacture [`CisScanConfiguration`](crate::types::CisScanConfiguration).
    pub fn builder() -> crate::types::builders::CisScanConfigurationBuilder {
        crate::types::builders::CisScanConfigurationBuilder::default()
    }
}

/// A builder for [`CisScanConfiguration`](crate::types::CisScanConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CisScanConfigurationBuilder {
    pub(crate) scan_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) scan_name: ::std::option::Option<::std::string::String>,
    pub(crate) security_level: ::std::option::Option<crate::types::CisSecurityLevel>,
    pub(crate) schedule: ::std::option::Option<crate::types::Schedule>,
    pub(crate) targets: ::std::option::Option<crate::types::CisTargets>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CisScanConfigurationBuilder {
    /// <p>The CIS scan configuration's scan configuration ARN.</p>
    /// This field is required.
    pub fn scan_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIS scan configuration's scan configuration ARN.</p>
    pub fn set_scan_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_configuration_arn = input;
        self
    }
    /// <p>The CIS scan configuration's scan configuration ARN.</p>
    pub fn get_scan_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_configuration_arn
    }
    /// <p>The CIS scan configuration's owner ID.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIS scan configuration's owner ID.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The CIS scan configuration's owner ID.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The name of the CIS scan configuration.</p>
    pub fn scan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the CIS scan configuration.</p>
    pub fn set_scan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name = input;
        self
    }
    /// <p>The name of the CIS scan configuration.</p>
    pub fn get_scan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name
    }
    /// <p>The CIS scan configuration's security level.</p>
    pub fn security_level(mut self, input: crate::types::CisSecurityLevel) -> Self {
        self.security_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan configuration's security level.</p>
    pub fn set_security_level(mut self, input: ::std::option::Option<crate::types::CisSecurityLevel>) -> Self {
        self.security_level = input;
        self
    }
    /// <p>The CIS scan configuration's security level.</p>
    pub fn get_security_level(&self) -> &::std::option::Option<crate::types::CisSecurityLevel> {
        &self.security_level
    }
    /// <p>The CIS scan configuration's schedule.</p>
    pub fn schedule(mut self, input: crate::types::Schedule) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan configuration's schedule.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::Schedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The CIS scan configuration's schedule.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::Schedule> {
        &self.schedule
    }
    /// <p>The CIS scan configuration's targets.</p>
    pub fn targets(mut self, input: crate::types::CisTargets) -> Self {
        self.targets = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan configuration's targets.</p>
    pub fn set_targets(mut self, input: ::std::option::Option<crate::types::CisTargets>) -> Self {
        self.targets = input;
        self
    }
    /// <p>The CIS scan configuration's targets.</p>
    pub fn get_targets(&self) -> &::std::option::Option<crate::types::CisTargets> {
        &self.targets
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The CIS scan configuration's tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The CIS scan configuration's tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The CIS scan configuration's tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CisScanConfiguration`](crate::types::CisScanConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`scan_configuration_arn`](crate::types::builders::CisScanConfigurationBuilder::scan_configuration_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CisScanConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CisScanConfiguration {
            scan_configuration_arn: self.scan_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_configuration_arn",
                    "scan_configuration_arn was not specified but it is required when building CisScanConfiguration",
                )
            })?,
            owner_id: self.owner_id,
            scan_name: self.scan_name,
            security_level: self.security_level,
            schedule: self.schedule,
            targets: self.targets,
            tags: self.tags,
        })
    }
}
