// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The stop CIS session message.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopCisSessionMessage {
    /// <p>The status of the message.</p>
    pub status: crate::types::StopCisSessionStatus,
    /// <p>The reason for the message.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The progress of the message.</p>
    pub progress: ::std::option::Option<crate::types::StopCisMessageProgress>,
    /// <p>The message compute platform.</p>
    pub compute_platform: ::std::option::Option<crate::types::ComputePlatform>,
    /// <p>The message benchmark version.</p>
    pub benchmark_version: ::std::option::Option<::std::string::String>,
    /// <p>The message benchmark profile.</p>
    pub benchmark_profile: ::std::option::Option<::std::string::String>,
}
impl StopCisSessionMessage {
    /// <p>The status of the message.</p>
    pub fn status(&self) -> &crate::types::StopCisSessionStatus {
        &self.status
    }
    /// <p>The reason for the message.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The progress of the message.</p>
    pub fn progress(&self) -> ::std::option::Option<&crate::types::StopCisMessageProgress> {
        self.progress.as_ref()
    }
    /// <p>The message compute platform.</p>
    pub fn compute_platform(&self) -> ::std::option::Option<&crate::types::ComputePlatform> {
        self.compute_platform.as_ref()
    }
    /// <p>The message benchmark version.</p>
    pub fn benchmark_version(&self) -> ::std::option::Option<&str> {
        self.benchmark_version.as_deref()
    }
    /// <p>The message benchmark profile.</p>
    pub fn benchmark_profile(&self) -> ::std::option::Option<&str> {
        self.benchmark_profile.as_deref()
    }
}
impl StopCisSessionMessage {
    /// Creates a new builder-style object to manufacture [`StopCisSessionMessage`](crate::types::StopCisSessionMessage).
    pub fn builder() -> crate::types::builders::StopCisSessionMessageBuilder {
        crate::types::builders::StopCisSessionMessageBuilder::default()
    }
}

/// A builder for [`StopCisSessionMessage`](crate::types::StopCisSessionMessage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StopCisSessionMessageBuilder {
    pub(crate) status: ::std::option::Option<crate::types::StopCisSessionStatus>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) progress: ::std::option::Option<crate::types::StopCisMessageProgress>,
    pub(crate) compute_platform: ::std::option::Option<crate::types::ComputePlatform>,
    pub(crate) benchmark_version: ::std::option::Option<::std::string::String>,
    pub(crate) benchmark_profile: ::std::option::Option<::std::string::String>,
}
impl StopCisSessionMessageBuilder {
    /// <p>The status of the message.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StopCisSessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the message.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StopCisSessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the message.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StopCisSessionStatus> {
        &self.status
    }
    /// <p>The reason for the message.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the message.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for the message.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>The progress of the message.</p>
    /// This field is required.
    pub fn progress(mut self, input: crate::types::StopCisMessageProgress) -> Self {
        self.progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>The progress of the message.</p>
    pub fn set_progress(mut self, input: ::std::option::Option<crate::types::StopCisMessageProgress>) -> Self {
        self.progress = input;
        self
    }
    /// <p>The progress of the message.</p>
    pub fn get_progress(&self) -> &::std::option::Option<crate::types::StopCisMessageProgress> {
        &self.progress
    }
    /// <p>The message compute platform.</p>
    pub fn compute_platform(mut self, input: crate::types::ComputePlatform) -> Self {
        self.compute_platform = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message compute platform.</p>
    pub fn set_compute_platform(mut self, input: ::std::option::Option<crate::types::ComputePlatform>) -> Self {
        self.compute_platform = input;
        self
    }
    /// <p>The message compute platform.</p>
    pub fn get_compute_platform(&self) -> &::std::option::Option<crate::types::ComputePlatform> {
        &self.compute_platform
    }
    /// <p>The message benchmark version.</p>
    pub fn benchmark_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.benchmark_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message benchmark version.</p>
    pub fn set_benchmark_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.benchmark_version = input;
        self
    }
    /// <p>The message benchmark version.</p>
    pub fn get_benchmark_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.benchmark_version
    }
    /// <p>The message benchmark profile.</p>
    pub fn benchmark_profile(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.benchmark_profile = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message benchmark profile.</p>
    pub fn set_benchmark_profile(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.benchmark_profile = input;
        self
    }
    /// <p>The message benchmark profile.</p>
    pub fn get_benchmark_profile(&self) -> &::std::option::Option<::std::string::String> {
        &self.benchmark_profile
    }
    /// Consumes the builder and constructs a [`StopCisSessionMessage`](crate::types::StopCisSessionMessage).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::StopCisSessionMessageBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::StopCisSessionMessage, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StopCisSessionMessage {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building StopCisSessionMessage",
                )
            })?,
            reason: self.reason,
            progress: self.progress,
            compute_platform: self.compute_platform,
            benchmark_version: self.benchmark_version,
            benchmark_profile: self.benchmark_profile,
        })
    }
}
