// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A CIS check.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CisCheckAggregation {
    /// <p>The scan ARN for the CIS check scan ARN.</p>
    pub scan_arn: ::std::string::String,
    /// <p>The check ID for the CIS check.</p>
    pub check_id: ::std::option::Option<::std::string::String>,
    /// <p>The CIS check title.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The description for the CIS check.</p>
    pub check_description: ::std::option::Option<::std::string::String>,
    /// <p>The CIS check level.</p>
    pub level: ::std::option::Option<crate::types::CisSecurityLevel>,
    /// <p>The account ID for the CIS check.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The CIS check status counts.</p>
    pub status_counts: ::std::option::Option<crate::types::StatusCounts>,
    /// <p>The CIS check platform.</p>
    pub platform: ::std::option::Option<::std::string::String>,
}
impl CisCheckAggregation {
    /// <p>The scan ARN for the CIS check scan ARN.</p>
    pub fn scan_arn(&self) -> &str {
        use std::ops::Deref;
        self.scan_arn.deref()
    }
    /// <p>The check ID for the CIS check.</p>
    pub fn check_id(&self) -> ::std::option::Option<&str> {
        self.check_id.as_deref()
    }
    /// <p>The CIS check title.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The description for the CIS check.</p>
    pub fn check_description(&self) -> ::std::option::Option<&str> {
        self.check_description.as_deref()
    }
    /// <p>The CIS check level.</p>
    pub fn level(&self) -> ::std::option::Option<&crate::types::CisSecurityLevel> {
        self.level.as_ref()
    }
    /// <p>The account ID for the CIS check.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The CIS check status counts.</p>
    pub fn status_counts(&self) -> ::std::option::Option<&crate::types::StatusCounts> {
        self.status_counts.as_ref()
    }
    /// <p>The CIS check platform.</p>
    pub fn platform(&self) -> ::std::option::Option<&str> {
        self.platform.as_deref()
    }
}
impl CisCheckAggregation {
    /// Creates a new builder-style object to manufacture [`CisCheckAggregation`](crate::types::CisCheckAggregation).
    pub fn builder() -> crate::types::builders::CisCheckAggregationBuilder {
        crate::types::builders::CisCheckAggregationBuilder::default()
    }
}

/// A builder for [`CisCheckAggregation`](crate::types::CisCheckAggregation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CisCheckAggregationBuilder {
    pub(crate) scan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) check_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) check_description: ::std::option::Option<::std::string::String>,
    pub(crate) level: ::std::option::Option<crate::types::CisSecurityLevel>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) status_counts: ::std::option::Option<crate::types::StatusCounts>,
    pub(crate) platform: ::std::option::Option<::std::string::String>,
}
impl CisCheckAggregationBuilder {
    /// <p>The scan ARN for the CIS check scan ARN.</p>
    /// This field is required.
    pub fn scan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scan ARN for the CIS check scan ARN.</p>
    pub fn set_scan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_arn = input;
        self
    }
    /// <p>The scan ARN for the CIS check scan ARN.</p>
    pub fn get_scan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_arn
    }
    /// <p>The check ID for the CIS check.</p>
    pub fn check_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.check_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The check ID for the CIS check.</p>
    pub fn set_check_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.check_id = input;
        self
    }
    /// <p>The check ID for the CIS check.</p>
    pub fn get_check_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.check_id
    }
    /// <p>The CIS check title.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIS check title.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The CIS check title.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The description for the CIS check.</p>
    pub fn check_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.check_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the CIS check.</p>
    pub fn set_check_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.check_description = input;
        self
    }
    /// <p>The description for the CIS check.</p>
    pub fn get_check_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.check_description
    }
    /// <p>The CIS check level.</p>
    pub fn level(mut self, input: crate::types::CisSecurityLevel) -> Self {
        self.level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS check level.</p>
    pub fn set_level(mut self, input: ::std::option::Option<crate::types::CisSecurityLevel>) -> Self {
        self.level = input;
        self
    }
    /// <p>The CIS check level.</p>
    pub fn get_level(&self) -> &::std::option::Option<crate::types::CisSecurityLevel> {
        &self.level
    }
    /// <p>The account ID for the CIS check.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID for the CIS check.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID for the CIS check.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The CIS check status counts.</p>
    pub fn status_counts(mut self, input: crate::types::StatusCounts) -> Self {
        self.status_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS check status counts.</p>
    pub fn set_status_counts(mut self, input: ::std::option::Option<crate::types::StatusCounts>) -> Self {
        self.status_counts = input;
        self
    }
    /// <p>The CIS check status counts.</p>
    pub fn get_status_counts(&self) -> &::std::option::Option<crate::types::StatusCounts> {
        &self.status_counts
    }
    /// <p>The CIS check platform.</p>
    pub fn platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIS check platform.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The CIS check platform.</p>
    pub fn get_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform
    }
    /// Consumes the builder and constructs a [`CisCheckAggregation`](crate::types::CisCheckAggregation).
    /// This method will fail if any of the following fields are not set:
    /// - [`scan_arn`](crate::types::builders::CisCheckAggregationBuilder::scan_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CisCheckAggregation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CisCheckAggregation {
            scan_arn: self.scan_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_arn",
                    "scan_arn was not specified but it is required when building CisCheckAggregation",
                )
            })?,
            check_id: self.check_id,
            title: self.title,
            check_description: self.check_description,
            level: self.level,
            account_id: self.account_id,
            status_counts: self.status_counts,
            platform: self.platform,
        })
    }
}
