// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CIS security level filter. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CisSecurityLevelFilter {
    /// <p>The CIS security filter comparison value.</p>
    pub comparison: crate::types::CisSecurityLevelComparison,
    /// <p>The CIS security filter value.</p>
    pub value: crate::types::CisSecurityLevel,
}
impl CisSecurityLevelFilter {
    /// <p>The CIS security filter comparison value.</p>
    pub fn comparison(&self) -> &crate::types::CisSecurityLevelComparison {
        &self.comparison
    }
    /// <p>The CIS security filter value.</p>
    pub fn value(&self) -> &crate::types::CisSecurityLevel {
        &self.value
    }
}
impl CisSecurityLevelFilter {
    /// Creates a new builder-style object to manufacture [`CisSecurityLevelFilter`](crate::types::CisSecurityLevelFilter).
    pub fn builder() -> crate::types::builders::CisSecurityLevelFilterBuilder {
        crate::types::builders::CisSecurityLevelFilterBuilder::default()
    }
}

/// A builder for [`CisSecurityLevelFilter`](crate::types::CisSecurityLevelFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CisSecurityLevelFilterBuilder {
    pub(crate) comparison: ::std::option::Option<crate::types::CisSecurityLevelComparison>,
    pub(crate) value: ::std::option::Option<crate::types::CisSecurityLevel>,
}
impl CisSecurityLevelFilterBuilder {
    /// <p>The CIS security filter comparison value.</p>
    /// This field is required.
    pub fn comparison(mut self, input: crate::types::CisSecurityLevelComparison) -> Self {
        self.comparison = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS security filter comparison value.</p>
    pub fn set_comparison(mut self, input: ::std::option::Option<crate::types::CisSecurityLevelComparison>) -> Self {
        self.comparison = input;
        self
    }
    /// <p>The CIS security filter comparison value.</p>
    pub fn get_comparison(&self) -> &::std::option::Option<crate::types::CisSecurityLevelComparison> {
        &self.comparison
    }
    /// <p>The CIS security filter value.</p>
    /// This field is required.
    pub fn value(mut self, input: crate::types::CisSecurityLevel) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS security filter value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::CisSecurityLevel>) -> Self {
        self.value = input;
        self
    }
    /// <p>The CIS security filter value.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::CisSecurityLevel> {
        &self.value
    }
    /// Consumes the builder and constructs a [`CisSecurityLevelFilter`](crate::types::CisSecurityLevelFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`comparison`](crate::types::builders::CisSecurityLevelFilterBuilder::comparison)
    /// - [`value`](crate::types::builders::CisSecurityLevelFilterBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::CisSecurityLevelFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CisSecurityLevelFilter {
            comparison: self.comparison.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "comparison",
                    "comparison was not specified but it is required when building CisSecurityLevelFilter",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building CisSecurityLevelFilter",
                )
            })?,
        })
    }
}
