// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CIS scan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CisScan {
    /// <p>The CIS scan's ARN.</p>
    pub scan_arn: ::std::string::String,
    /// <p>The CIS scan's configuration ARN.</p>
    pub scan_configuration_arn: ::std::string::String,
    /// <p>The CIS scan's status.</p>
    pub status: ::std::option::Option<crate::types::CisScanStatus>,
    /// <p>The the name of the scan configuration that's associated with this scan.</p>
    pub scan_name: ::std::option::Option<::std::string::String>,
    /// <p>The CIS scan's date.</p>
    pub scan_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The CIS scan's failed checks.</p>
    pub failed_checks: ::std::option::Option<i32>,
    /// <p>The CIS scan's total checks.</p>
    pub total_checks: ::std::option::Option<i32>,
    /// <p>The CIS scan's targets.</p>
    pub targets: ::std::option::Option<crate::types::CisTargets>,
    /// <p>The account or organization that schedules the CIS scan.</p>
    pub scheduled_by: ::std::option::Option<::std::string::String>,
    /// <p>The security level for the CIS scan. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub security_level: ::std::option::Option<crate::types::CisSecurityLevel>,
}
impl CisScan {
    /// <p>The CIS scan's ARN.</p>
    pub fn scan_arn(&self) -> &str {
        use std::ops::Deref;
        self.scan_arn.deref()
    }
    /// <p>The CIS scan's configuration ARN.</p>
    pub fn scan_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.scan_configuration_arn.deref()
    }
    /// <p>The CIS scan's status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CisScanStatus> {
        self.status.as_ref()
    }
    /// <p>The the name of the scan configuration that's associated with this scan.</p>
    pub fn scan_name(&self) -> ::std::option::Option<&str> {
        self.scan_name.as_deref()
    }
    /// <p>The CIS scan's date.</p>
    pub fn scan_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.scan_date.as_ref()
    }
    /// <p>The CIS scan's failed checks.</p>
    pub fn failed_checks(&self) -> ::std::option::Option<i32> {
        self.failed_checks
    }
    /// <p>The CIS scan's total checks.</p>
    pub fn total_checks(&self) -> ::std::option::Option<i32> {
        self.total_checks
    }
    /// <p>The CIS scan's targets.</p>
    pub fn targets(&self) -> ::std::option::Option<&crate::types::CisTargets> {
        self.targets.as_ref()
    }
    /// <p>The account or organization that schedules the CIS scan.</p>
    pub fn scheduled_by(&self) -> ::std::option::Option<&str> {
        self.scheduled_by.as_deref()
    }
    /// <p>The security level for the CIS scan. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn security_level(&self) -> ::std::option::Option<&crate::types::CisSecurityLevel> {
        self.security_level.as_ref()
    }
}
impl CisScan {
    /// Creates a new builder-style object to manufacture [`CisScan`](crate::types::CisScan).
    pub fn builder() -> crate::types::builders::CisScanBuilder {
        crate::types::builders::CisScanBuilder::default()
    }
}

/// A builder for [`CisScan`](crate::types::CisScan).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CisScanBuilder {
    pub(crate) scan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) scan_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CisScanStatus>,
    pub(crate) scan_name: ::std::option::Option<::std::string::String>,
    pub(crate) scan_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failed_checks: ::std::option::Option<i32>,
    pub(crate) total_checks: ::std::option::Option<i32>,
    pub(crate) targets: ::std::option::Option<crate::types::CisTargets>,
    pub(crate) scheduled_by: ::std::option::Option<::std::string::String>,
    pub(crate) security_level: ::std::option::Option<crate::types::CisSecurityLevel>,
}
impl CisScanBuilder {
    /// <p>The CIS scan's ARN.</p>
    /// This field is required.
    pub fn scan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIS scan's ARN.</p>
    pub fn set_scan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_arn = input;
        self
    }
    /// <p>The CIS scan's ARN.</p>
    pub fn get_scan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_arn
    }
    /// <p>The CIS scan's configuration ARN.</p>
    /// This field is required.
    pub fn scan_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIS scan's configuration ARN.</p>
    pub fn set_scan_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_configuration_arn = input;
        self
    }
    /// <p>The CIS scan's configuration ARN.</p>
    pub fn get_scan_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_configuration_arn
    }
    /// <p>The CIS scan's status.</p>
    pub fn status(mut self, input: crate::types::CisScanStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CisScanStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The CIS scan's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CisScanStatus> {
        &self.status
    }
    /// <p>The the name of the scan configuration that's associated with this scan.</p>
    pub fn scan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The the name of the scan configuration that's associated with this scan.</p>
    pub fn set_scan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name = input;
        self
    }
    /// <p>The the name of the scan configuration that's associated with this scan.</p>
    pub fn get_scan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name
    }
    /// <p>The CIS scan's date.</p>
    pub fn scan_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.scan_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan's date.</p>
    pub fn set_scan_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.scan_date = input;
        self
    }
    /// <p>The CIS scan's date.</p>
    pub fn get_scan_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.scan_date
    }
    /// <p>The CIS scan's failed checks.</p>
    pub fn failed_checks(mut self, input: i32) -> Self {
        self.failed_checks = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan's failed checks.</p>
    pub fn set_failed_checks(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed_checks = input;
        self
    }
    /// <p>The CIS scan's failed checks.</p>
    pub fn get_failed_checks(&self) -> &::std::option::Option<i32> {
        &self.failed_checks
    }
    /// <p>The CIS scan's total checks.</p>
    pub fn total_checks(mut self, input: i32) -> Self {
        self.total_checks = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan's total checks.</p>
    pub fn set_total_checks(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_checks = input;
        self
    }
    /// <p>The CIS scan's total checks.</p>
    pub fn get_total_checks(&self) -> &::std::option::Option<i32> {
        &self.total_checks
    }
    /// <p>The CIS scan's targets.</p>
    pub fn targets(mut self, input: crate::types::CisTargets) -> Self {
        self.targets = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CIS scan's targets.</p>
    pub fn set_targets(mut self, input: ::std::option::Option<crate::types::CisTargets>) -> Self {
        self.targets = input;
        self
    }
    /// <p>The CIS scan's targets.</p>
    pub fn get_targets(&self) -> &::std::option::Option<crate::types::CisTargets> {
        &self.targets
    }
    /// <p>The account or organization that schedules the CIS scan.</p>
    pub fn scheduled_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scheduled_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account or organization that schedules the CIS scan.</p>
    pub fn set_scheduled_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scheduled_by = input;
        self
    }
    /// <p>The account or organization that schedules the CIS scan.</p>
    pub fn get_scheduled_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.scheduled_by
    }
    /// <p>The security level for the CIS scan. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn security_level(mut self, input: crate::types::CisSecurityLevel) -> Self {
        self.security_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The security level for the CIS scan. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn set_security_level(mut self, input: ::std::option::Option<crate::types::CisSecurityLevel>) -> Self {
        self.security_level = input;
        self
    }
    /// <p>The security level for the CIS scan. Security level refers to the Benchmark levels that CIS assigns to a profile.</p>
    pub fn get_security_level(&self) -> &::std::option::Option<crate::types::CisSecurityLevel> {
        &self.security_level
    }
    /// Consumes the builder and constructs a [`CisScan`](crate::types::CisScan).
    /// This method will fail if any of the following fields are not set:
    /// - [`scan_arn`](crate::types::builders::CisScanBuilder::scan_arn)
    /// - [`scan_configuration_arn`](crate::types::builders::CisScanBuilder::scan_configuration_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CisScan, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CisScan {
            scan_arn: self.scan_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_arn",
                    "scan_arn was not specified but it is required when building CisScan",
                )
            })?,
            scan_configuration_arn: self.scan_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_configuration_arn",
                    "scan_configuration_arn was not specified but it is required when building CisScan",
                )
            })?,
            status: self.status,
            scan_name: self.scan_name,
            scan_date: self.scan_date,
            failed_checks: self.failed_checks,
            total_checks: self.total_checks,
            targets: self.targets,
            scheduled_by: self.scheduled_by,
            security_level: self.security_level,
        })
    }
}
