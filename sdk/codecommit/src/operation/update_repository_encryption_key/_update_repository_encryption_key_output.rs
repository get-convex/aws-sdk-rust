// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRepositoryEncryptionKeyOutput {
    /// <p>The ID of the repository.</p>
    pub repository_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the encryption key.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the encryption key formerly used to encrypt and decrypt the repository.</p>
    pub original_kms_key_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateRepositoryEncryptionKeyOutput {
    /// <p>The ID of the repository.</p>
    pub fn repository_id(&self) -> ::std::option::Option<&str> {
        self.repository_id.as_deref()
    }
    /// <p>The ID of the encryption key.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The ID of the encryption key formerly used to encrypt and decrypt the repository.</p>
    pub fn original_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.original_kms_key_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateRepositoryEncryptionKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateRepositoryEncryptionKeyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRepositoryEncryptionKeyOutput`](crate::operation::update_repository_encryption_key::UpdateRepositoryEncryptionKeyOutput).
    pub fn builder() -> crate::operation::update_repository_encryption_key::builders::UpdateRepositoryEncryptionKeyOutputBuilder {
        crate::operation::update_repository_encryption_key::builders::UpdateRepositoryEncryptionKeyOutputBuilder::default()
    }
}

/// A builder for [`UpdateRepositoryEncryptionKeyOutput`](crate::operation::update_repository_encryption_key::UpdateRepositoryEncryptionKeyOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateRepositoryEncryptionKeyOutputBuilder {
    pub(crate) repository_id: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) original_kms_key_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateRepositoryEncryptionKeyOutputBuilder {
    /// <p>The ID of the repository.</p>
    pub fn repository_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the repository.</p>
    pub fn set_repository_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_id = input;
        self
    }
    /// <p>The ID of the repository.</p>
    pub fn get_repository_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_id
    }
    /// <p>The ID of the encryption key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the encryption key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ID of the encryption key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The ID of the encryption key formerly used to encrypt and decrypt the repository.</p>
    pub fn original_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.original_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the encryption key formerly used to encrypt and decrypt the repository.</p>
    pub fn set_original_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.original_kms_key_id = input;
        self
    }
    /// <p>The ID of the encryption key formerly used to encrypt and decrypt the repository.</p>
    pub fn get_original_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.original_kms_key_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRepositoryEncryptionKeyOutput`](crate::operation::update_repository_encryption_key::UpdateRepositoryEncryptionKeyOutput).
    pub fn build(self) -> crate::operation::update_repository_encryption_key::UpdateRepositoryEncryptionKeyOutput {
        crate::operation::update_repository_encryption_key::UpdateRepositoryEncryptionKeyOutput {
            repository_id: self.repository_id,
            kms_key_id: self.kms_key_id,
            original_kms_key_id: self.original_kms_key_id,
            _request_id: self._request_id,
        }
    }
}
