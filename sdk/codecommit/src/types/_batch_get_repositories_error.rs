// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about errors in a BatchGetRepositories operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetRepositoriesError {
    /// <p>The ID of a repository that either could not be found or was not in a valid state.</p>
    pub repository_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of a repository that either could not be found or was not in a valid state.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>An error code that specifies the type of failure.</p>
    pub error_code: ::std::option::Option<crate::types::BatchGetRepositoriesErrorCodeEnum>,
    /// <p>An error message that provides detail about why the repository either was not found or was not in a valid state.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl BatchGetRepositoriesError {
    /// <p>The ID of a repository that either could not be found or was not in a valid state.</p>
    pub fn repository_id(&self) -> ::std::option::Option<&str> {
        self.repository_id.as_deref()
    }
    /// <p>The name of a repository that either could not be found or was not in a valid state.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>An error code that specifies the type of failure.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::BatchGetRepositoriesErrorCodeEnum> {
        self.error_code.as_ref()
    }
    /// <p>An error message that provides detail about why the repository either was not found or was not in a valid state.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl BatchGetRepositoriesError {
    /// Creates a new builder-style object to manufacture [`BatchGetRepositoriesError`](crate::types::BatchGetRepositoriesError).
    pub fn builder() -> crate::types::builders::BatchGetRepositoriesErrorBuilder {
        crate::types::builders::BatchGetRepositoriesErrorBuilder::default()
    }
}

/// A builder for [`BatchGetRepositoriesError`](crate::types::BatchGetRepositoriesError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetRepositoriesErrorBuilder {
    pub(crate) repository_id: ::std::option::Option<::std::string::String>,
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<crate::types::BatchGetRepositoriesErrorCodeEnum>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl BatchGetRepositoriesErrorBuilder {
    /// <p>The ID of a repository that either could not be found or was not in a valid state.</p>
    pub fn repository_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a repository that either could not be found or was not in a valid state.</p>
    pub fn set_repository_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_id = input;
        self
    }
    /// <p>The ID of a repository that either could not be found or was not in a valid state.</p>
    pub fn get_repository_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_id
    }
    /// <p>The name of a repository that either could not be found or was not in a valid state.</p>
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a repository that either could not be found or was not in a valid state.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of a repository that either could not be found or was not in a valid state.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>An error code that specifies the type of failure.</p>
    pub fn error_code(mut self, input: crate::types::BatchGetRepositoriesErrorCodeEnum) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>An error code that specifies the type of failure.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::BatchGetRepositoriesErrorCodeEnum>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>An error code that specifies the type of failure.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::BatchGetRepositoriesErrorCodeEnum> {
        &self.error_code
    }
    /// <p>An error message that provides detail about why the repository either was not found or was not in a valid state.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message that provides detail about why the repository either was not found or was not in a valid state.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>An error message that provides detail about why the repository either was not found or was not in a valid state.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`BatchGetRepositoriesError`](crate::types::BatchGetRepositoriesError).
    pub fn build(self) -> crate::types::BatchGetRepositoriesError {
        crate::types::BatchGetRepositoriesError {
            repository_id: self.repository_id,
            repository_name: self.repository_name,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
