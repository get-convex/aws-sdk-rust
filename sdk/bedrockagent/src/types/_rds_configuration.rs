// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Contains the configurations to use RDS to store knowledge base data.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsConfiguration {
    /// Arn of a RDS Resource.
    pub resource_arn: ::std::string::String,
    /// Arn of a SecretsManager Secret.
    pub credentials_secret_arn: ::std::string::String,
    /// Name of the database within RDS
    pub database_name: ::std::string::String,
    /// Name of the table within RDS
    pub table_name: ::std::string::String,
    /// A mapping of Bedrock Knowledge Base fields to RDS column names
    pub field_mapping: ::std::option::Option<crate::types::RdsFieldMapping>,
}
impl RdsConfiguration {
    /// Arn of a RDS Resource.
    pub fn resource_arn(&self) -> &str {
        use std::ops::Deref;
        self.resource_arn.deref()
    }
    /// Arn of a SecretsManager Secret.
    pub fn credentials_secret_arn(&self) -> &str {
        use std::ops::Deref;
        self.credentials_secret_arn.deref()
    }
    /// Name of the database within RDS
    pub fn database_name(&self) -> &str {
        use std::ops::Deref;
        self.database_name.deref()
    }
    /// Name of the table within RDS
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
    /// A mapping of Bedrock Knowledge Base fields to RDS column names
    pub fn field_mapping(&self) -> ::std::option::Option<&crate::types::RdsFieldMapping> {
        self.field_mapping.as_ref()
    }
}
impl RdsConfiguration {
    /// Creates a new builder-style object to manufacture [`RdsConfiguration`](crate::types::RdsConfiguration).
    pub fn builder() -> crate::types::builders::RdsConfigurationBuilder {
        crate::types::builders::RdsConfigurationBuilder::default()
    }
}

/// A builder for [`RdsConfiguration`](crate::types::RdsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RdsConfigurationBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) credentials_secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) field_mapping: ::std::option::Option<crate::types::RdsFieldMapping>,
}
impl RdsConfigurationBuilder {
    /// Arn of a RDS Resource.
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// Arn of a RDS Resource.
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// Arn of a RDS Resource.
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// Arn of a SecretsManager Secret.
    /// This field is required.
    pub fn credentials_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credentials_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// Arn of a SecretsManager Secret.
    pub fn set_credentials_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credentials_secret_arn = input;
        self
    }
    /// Arn of a SecretsManager Secret.
    pub fn get_credentials_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.credentials_secret_arn
    }
    /// Name of the database within RDS
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the database within RDS
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// Name of the database within RDS
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// Name of the table within RDS
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the table within RDS
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// Name of the table within RDS
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// A mapping of Bedrock Knowledge Base fields to RDS column names
    /// This field is required.
    pub fn field_mapping(mut self, input: crate::types::RdsFieldMapping) -> Self {
        self.field_mapping = ::std::option::Option::Some(input);
        self
    }
    /// A mapping of Bedrock Knowledge Base fields to RDS column names
    pub fn set_field_mapping(mut self, input: ::std::option::Option<crate::types::RdsFieldMapping>) -> Self {
        self.field_mapping = input;
        self
    }
    /// A mapping of Bedrock Knowledge Base fields to RDS column names
    pub fn get_field_mapping(&self) -> &::std::option::Option<crate::types::RdsFieldMapping> {
        &self.field_mapping
    }
    /// Consumes the builder and constructs a [`RdsConfiguration`](crate::types::RdsConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource_arn`](crate::types::builders::RdsConfigurationBuilder::resource_arn)
    /// - [`credentials_secret_arn`](crate::types::builders::RdsConfigurationBuilder::credentials_secret_arn)
    /// - [`database_name`](crate::types::builders::RdsConfigurationBuilder::database_name)
    /// - [`table_name`](crate::types::builders::RdsConfigurationBuilder::table_name)
    pub fn build(self) -> ::std::result::Result<crate::types::RdsConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RdsConfiguration {
            resource_arn: self.resource_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_arn",
                    "resource_arn was not specified but it is required when building RdsConfiguration",
                )
            })?,
            credentials_secret_arn: self.credentials_secret_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "credentials_secret_arn",
                    "credentials_secret_arn was not specified but it is required when building RdsConfiguration",
                )
            })?,
            database_name: self.database_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_name",
                    "database_name was not specified but it is required when building RdsConfiguration",
                )
            })?,
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building RdsConfiguration",
                )
            })?,
            field_mapping: self.field_mapping,
        })
    }
}
