// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// BasePromptConfiguration per Prompt Type.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PromptConfiguration {
    /// Prompt Type.
    pub prompt_type: ::std::option::Option<crate::types::PromptType>,
    /// Creation Mode for Prompt Configuration.
    pub prompt_creation_mode: ::std::option::Option<crate::types::CreationMode>,
    /// Prompt State.
    pub prompt_state: ::std::option::Option<crate::types::PromptState>,
    /// Base Prompt Template.
    pub base_prompt_template: ::std::option::Option<::std::string::String>,
    /// Configuration for inference in prompt configuration
    pub inference_configuration: ::std::option::Option<crate::types::InferenceConfiguration>,
    /// Creation Mode for Prompt Configuration.
    pub parser_mode: ::std::option::Option<crate::types::CreationMode>,
}
impl PromptConfiguration {
    /// Prompt Type.
    pub fn prompt_type(&self) -> ::std::option::Option<&crate::types::PromptType> {
        self.prompt_type.as_ref()
    }
    /// Creation Mode for Prompt Configuration.
    pub fn prompt_creation_mode(&self) -> ::std::option::Option<&crate::types::CreationMode> {
        self.prompt_creation_mode.as_ref()
    }
    /// Prompt State.
    pub fn prompt_state(&self) -> ::std::option::Option<&crate::types::PromptState> {
        self.prompt_state.as_ref()
    }
    /// Base Prompt Template.
    pub fn base_prompt_template(&self) -> ::std::option::Option<&str> {
        self.base_prompt_template.as_deref()
    }
    /// Configuration for inference in prompt configuration
    pub fn inference_configuration(&self) -> ::std::option::Option<&crate::types::InferenceConfiguration> {
        self.inference_configuration.as_ref()
    }
    /// Creation Mode for Prompt Configuration.
    pub fn parser_mode(&self) -> ::std::option::Option<&crate::types::CreationMode> {
        self.parser_mode.as_ref()
    }
}
impl PromptConfiguration {
    /// Creates a new builder-style object to manufacture [`PromptConfiguration`](crate::types::PromptConfiguration).
    pub fn builder() -> crate::types::builders::PromptConfigurationBuilder {
        crate::types::builders::PromptConfigurationBuilder::default()
    }
}

/// A builder for [`PromptConfiguration`](crate::types::PromptConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PromptConfigurationBuilder {
    pub(crate) prompt_type: ::std::option::Option<crate::types::PromptType>,
    pub(crate) prompt_creation_mode: ::std::option::Option<crate::types::CreationMode>,
    pub(crate) prompt_state: ::std::option::Option<crate::types::PromptState>,
    pub(crate) base_prompt_template: ::std::option::Option<::std::string::String>,
    pub(crate) inference_configuration: ::std::option::Option<crate::types::InferenceConfiguration>,
    pub(crate) parser_mode: ::std::option::Option<crate::types::CreationMode>,
}
impl PromptConfigurationBuilder {
    /// Prompt Type.
    pub fn prompt_type(mut self, input: crate::types::PromptType) -> Self {
        self.prompt_type = ::std::option::Option::Some(input);
        self
    }
    /// Prompt Type.
    pub fn set_prompt_type(mut self, input: ::std::option::Option<crate::types::PromptType>) -> Self {
        self.prompt_type = input;
        self
    }
    /// Prompt Type.
    pub fn get_prompt_type(&self) -> &::std::option::Option<crate::types::PromptType> {
        &self.prompt_type
    }
    /// Creation Mode for Prompt Configuration.
    pub fn prompt_creation_mode(mut self, input: crate::types::CreationMode) -> Self {
        self.prompt_creation_mode = ::std::option::Option::Some(input);
        self
    }
    /// Creation Mode for Prompt Configuration.
    pub fn set_prompt_creation_mode(mut self, input: ::std::option::Option<crate::types::CreationMode>) -> Self {
        self.prompt_creation_mode = input;
        self
    }
    /// Creation Mode for Prompt Configuration.
    pub fn get_prompt_creation_mode(&self) -> &::std::option::Option<crate::types::CreationMode> {
        &self.prompt_creation_mode
    }
    /// Prompt State.
    pub fn prompt_state(mut self, input: crate::types::PromptState) -> Self {
        self.prompt_state = ::std::option::Option::Some(input);
        self
    }
    /// Prompt State.
    pub fn set_prompt_state(mut self, input: ::std::option::Option<crate::types::PromptState>) -> Self {
        self.prompt_state = input;
        self
    }
    /// Prompt State.
    pub fn get_prompt_state(&self) -> &::std::option::Option<crate::types::PromptState> {
        &self.prompt_state
    }
    /// Base Prompt Template.
    pub fn base_prompt_template(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_prompt_template = ::std::option::Option::Some(input.into());
        self
    }
    /// Base Prompt Template.
    pub fn set_base_prompt_template(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_prompt_template = input;
        self
    }
    /// Base Prompt Template.
    pub fn get_base_prompt_template(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_prompt_template
    }
    /// Configuration for inference in prompt configuration
    pub fn inference_configuration(mut self, input: crate::types::InferenceConfiguration) -> Self {
        self.inference_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Configuration for inference in prompt configuration
    pub fn set_inference_configuration(mut self, input: ::std::option::Option<crate::types::InferenceConfiguration>) -> Self {
        self.inference_configuration = input;
        self
    }
    /// Configuration for inference in prompt configuration
    pub fn get_inference_configuration(&self) -> &::std::option::Option<crate::types::InferenceConfiguration> {
        &self.inference_configuration
    }
    /// Creation Mode for Prompt Configuration.
    pub fn parser_mode(mut self, input: crate::types::CreationMode) -> Self {
        self.parser_mode = ::std::option::Option::Some(input);
        self
    }
    /// Creation Mode for Prompt Configuration.
    pub fn set_parser_mode(mut self, input: ::std::option::Option<crate::types::CreationMode>) -> Self {
        self.parser_mode = input;
        self
    }
    /// Creation Mode for Prompt Configuration.
    pub fn get_parser_mode(&self) -> &::std::option::Option<crate::types::CreationMode> {
        &self.parser_mode
    }
    /// Consumes the builder and constructs a [`PromptConfiguration`](crate::types::PromptConfiguration).
    pub fn build(self) -> crate::types::PromptConfiguration {
        crate::types::PromptConfiguration {
            prompt_type: self.prompt_type,
            prompt_creation_mode: self.prompt_creation_mode,
            prompt_state: self.prompt_state,
            base_prompt_template: self.base_prompt_template,
            inference_configuration: self.inference_configuration,
            parser_mode: self.parser_mode,
        }
    }
}
