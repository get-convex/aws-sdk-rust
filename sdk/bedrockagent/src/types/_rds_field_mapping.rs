// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A mapping of Bedrock Knowledge Base fields to RDS column names
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsFieldMapping {
    /// Name of the column
    pub primary_key_field: ::std::string::String,
    /// Name of the column
    pub vector_field: ::std::string::String,
    /// Name of the column
    pub text_field: ::std::string::String,
    /// Name of the column
    pub metadata_field: ::std::string::String,
}
impl RdsFieldMapping {
    /// Name of the column
    pub fn primary_key_field(&self) -> &str {
        use std::ops::Deref;
        self.primary_key_field.deref()
    }
    /// Name of the column
    pub fn vector_field(&self) -> &str {
        use std::ops::Deref;
        self.vector_field.deref()
    }
    /// Name of the column
    pub fn text_field(&self) -> &str {
        use std::ops::Deref;
        self.text_field.deref()
    }
    /// Name of the column
    pub fn metadata_field(&self) -> &str {
        use std::ops::Deref;
        self.metadata_field.deref()
    }
}
impl RdsFieldMapping {
    /// Creates a new builder-style object to manufacture [`RdsFieldMapping`](crate::types::RdsFieldMapping).
    pub fn builder() -> crate::types::builders::RdsFieldMappingBuilder {
        crate::types::builders::RdsFieldMappingBuilder::default()
    }
}

/// A builder for [`RdsFieldMapping`](crate::types::RdsFieldMapping).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RdsFieldMappingBuilder {
    pub(crate) primary_key_field: ::std::option::Option<::std::string::String>,
    pub(crate) vector_field: ::std::option::Option<::std::string::String>,
    pub(crate) text_field: ::std::option::Option<::std::string::String>,
    pub(crate) metadata_field: ::std::option::Option<::std::string::String>,
}
impl RdsFieldMappingBuilder {
    /// Name of the column
    /// This field is required.
    pub fn primary_key_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_key_field = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the column
    pub fn set_primary_key_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_key_field = input;
        self
    }
    /// Name of the column
    pub fn get_primary_key_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_key_field
    }
    /// Name of the column
    /// This field is required.
    pub fn vector_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vector_field = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the column
    pub fn set_vector_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vector_field = input;
        self
    }
    /// Name of the column
    pub fn get_vector_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.vector_field
    }
    /// Name of the column
    /// This field is required.
    pub fn text_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text_field = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the column
    pub fn set_text_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text_field = input;
        self
    }
    /// Name of the column
    pub fn get_text_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.text_field
    }
    /// Name of the column
    /// This field is required.
    pub fn metadata_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata_field = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the column
    pub fn set_metadata_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata_field = input;
        self
    }
    /// Name of the column
    pub fn get_metadata_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata_field
    }
    /// Consumes the builder and constructs a [`RdsFieldMapping`](crate::types::RdsFieldMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`primary_key_field`](crate::types::builders::RdsFieldMappingBuilder::primary_key_field)
    /// - [`vector_field`](crate::types::builders::RdsFieldMappingBuilder::vector_field)
    /// - [`text_field`](crate::types::builders::RdsFieldMappingBuilder::text_field)
    /// - [`metadata_field`](crate::types::builders::RdsFieldMappingBuilder::metadata_field)
    pub fn build(self) -> ::std::result::Result<crate::types::RdsFieldMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RdsFieldMapping {
            primary_key_field: self.primary_key_field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "primary_key_field",
                    "primary_key_field was not specified but it is required when building RdsFieldMapping",
                )
            })?,
            vector_field: self.vector_field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vector_field",
                    "vector_field was not specified but it is required when building RdsFieldMapping",
                )
            })?,
            text_field: self.text_field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text_field",
                    "text_field was not specified but it is required when building RdsFieldMapping",
                )
            })?,
            metadata_field: self.metadata_field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metadata_field",
                    "metadata_field was not specified but it is required when building RdsFieldMapping",
                )
            })?,
        })
    }
}
