// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Contains information about the API Schema for the Action Group
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum ApiSchema {
    /// String OpenAPI Payload
    Payload(::std::string::String),
    /// The identifier for the S3 resource.
    S3(crate::types::S3Identifier),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ApiSchema {
    /// Tries to convert the enum instance into [`Payload`](crate::types::ApiSchema::Payload), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_payload(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let ApiSchema::Payload(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Payload`](crate::types::ApiSchema::Payload).
    pub fn is_payload(&self) -> bool {
        self.as_payload().is_ok()
    }
    /// Tries to convert the enum instance into [`S3`](crate::types::ApiSchema::S3), extracting the inner [`S3Identifier`](crate::types::S3Identifier).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_s3(&self) -> ::std::result::Result<&crate::types::S3Identifier, &Self> {
        if let ApiSchema::S3(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`S3`](crate::types::ApiSchema::S3).
    pub fn is_s3(&self) -> bool {
        self.as_s3().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for ApiSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            ApiSchema::Payload(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            ApiSchema::S3(val) => f.debug_tuple("S3").field(&val).finish(),
            ApiSchema::Unknown => f.debug_tuple("Unknown").finish(),
        }
    }
}
