// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Configures fixed size chunking strategy
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FixedSizeChunkingConfiguration {
    /// The maximum number of tokens per chunk.
    pub max_tokens: i32,
    /// The overlap percentage between adjacent chunks.
    pub overlap_percentage: i32,
}
impl FixedSizeChunkingConfiguration {
    /// The maximum number of tokens per chunk.
    pub fn max_tokens(&self) -> i32 {
        self.max_tokens
    }
    /// The overlap percentage between adjacent chunks.
    pub fn overlap_percentage(&self) -> i32 {
        self.overlap_percentage
    }
}
impl FixedSizeChunkingConfiguration {
    /// Creates a new builder-style object to manufacture [`FixedSizeChunkingConfiguration`](crate::types::FixedSizeChunkingConfiguration).
    pub fn builder() -> crate::types::builders::FixedSizeChunkingConfigurationBuilder {
        crate::types::builders::FixedSizeChunkingConfigurationBuilder::default()
    }
}

/// A builder for [`FixedSizeChunkingConfiguration`](crate::types::FixedSizeChunkingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FixedSizeChunkingConfigurationBuilder {
    pub(crate) max_tokens: ::std::option::Option<i32>,
    pub(crate) overlap_percentage: ::std::option::Option<i32>,
}
impl FixedSizeChunkingConfigurationBuilder {
    /// The maximum number of tokens per chunk.
    /// This field is required.
    pub fn max_tokens(mut self, input: i32) -> Self {
        self.max_tokens = ::std::option::Option::Some(input);
        self
    }
    /// The maximum number of tokens per chunk.
    pub fn set_max_tokens(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_tokens = input;
        self
    }
    /// The maximum number of tokens per chunk.
    pub fn get_max_tokens(&self) -> &::std::option::Option<i32> {
        &self.max_tokens
    }
    /// The overlap percentage between adjacent chunks.
    /// This field is required.
    pub fn overlap_percentage(mut self, input: i32) -> Self {
        self.overlap_percentage = ::std::option::Option::Some(input);
        self
    }
    /// The overlap percentage between adjacent chunks.
    pub fn set_overlap_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.overlap_percentage = input;
        self
    }
    /// The overlap percentage between adjacent chunks.
    pub fn get_overlap_percentage(&self) -> &::std::option::Option<i32> {
        &self.overlap_percentage
    }
    /// Consumes the builder and constructs a [`FixedSizeChunkingConfiguration`](crate::types::FixedSizeChunkingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`max_tokens`](crate::types::builders::FixedSizeChunkingConfigurationBuilder::max_tokens)
    /// - [`overlap_percentage`](crate::types::builders::FixedSizeChunkingConfigurationBuilder::overlap_percentage)
    pub fn build(self) -> ::std::result::Result<crate::types::FixedSizeChunkingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FixedSizeChunkingConfiguration {
            max_tokens: self.max_tokens.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_tokens",
                    "max_tokens was not specified but it is required when building FixedSizeChunkingConfiguration",
                )
            })?,
            overlap_percentage: self.overlap_percentage.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "overlap_percentage",
                    "overlap_percentage was not specified but it is required when building FixedSizeChunkingConfiguration",
                )
            })?,
        })
    }
}
