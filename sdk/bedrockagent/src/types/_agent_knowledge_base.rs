// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Contains the information of an Agent Knowledge Base.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentKnowledgeBase {
    /// Identifier for a resource.
    pub agent_id: ::std::string::String,
    /// Agent Version.
    pub agent_version: ::std::string::String,
    /// Identifier for a resource.
    pub knowledge_base_id: ::std::string::String,
    /// Description of the Resource.
    pub description: ::std::string::String,
    /// Time Stamp.
    pub created_at: ::aws_smithy_types::DateTime,
    /// Time Stamp.
    pub updated_at: ::aws_smithy_types::DateTime,
    /// State of the knowledge base; whether it is enabled or disabled
    pub knowledge_base_state: crate::types::KnowledgeBaseState,
}
impl AgentKnowledgeBase {
    /// Identifier for a resource.
    pub fn agent_id(&self) -> &str {
        use std::ops::Deref;
        self.agent_id.deref()
    }
    /// Agent Version.
    pub fn agent_version(&self) -> &str {
        use std::ops::Deref;
        self.agent_version.deref()
    }
    /// Identifier for a resource.
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// Description of the Resource.
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// Time Stamp.
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// Time Stamp.
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// State of the knowledge base; whether it is enabled or disabled
    pub fn knowledge_base_state(&self) -> &crate::types::KnowledgeBaseState {
        &self.knowledge_base_state
    }
}
impl AgentKnowledgeBase {
    /// Creates a new builder-style object to manufacture [`AgentKnowledgeBase`](crate::types::AgentKnowledgeBase).
    pub fn builder() -> crate::types::builders::AgentKnowledgeBaseBuilder {
        crate::types::builders::AgentKnowledgeBaseBuilder::default()
    }
}

/// A builder for [`AgentKnowledgeBase`](crate::types::AgentKnowledgeBase).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgentKnowledgeBaseBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) knowledge_base_state: ::std::option::Option<crate::types::KnowledgeBaseState>,
}
impl AgentKnowledgeBaseBuilder {
    /// Identifier for a resource.
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Identifier for a resource.
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// Identifier for a resource.
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// Agent Version.
    /// This field is required.
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// Agent Version.
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// Agent Version.
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// Identifier for a resource.
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Identifier for a resource.
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// Identifier for a resource.
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// Description of the Resource.
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// Description of the Resource.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Description of the Resource.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Time Stamp.
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// Time Stamp.
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// Time Stamp.
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Time Stamp.
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// Time Stamp.
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// Time Stamp.
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// State of the knowledge base; whether it is enabled or disabled
    /// This field is required.
    pub fn knowledge_base_state(mut self, input: crate::types::KnowledgeBaseState) -> Self {
        self.knowledge_base_state = ::std::option::Option::Some(input);
        self
    }
    /// State of the knowledge base; whether it is enabled or disabled
    pub fn set_knowledge_base_state(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseState>) -> Self {
        self.knowledge_base_state = input;
        self
    }
    /// State of the knowledge base; whether it is enabled or disabled
    pub fn get_knowledge_base_state(&self) -> &::std::option::Option<crate::types::KnowledgeBaseState> {
        &self.knowledge_base_state
    }
    /// Consumes the builder and constructs a [`AgentKnowledgeBase`](crate::types::AgentKnowledgeBase).
    /// This method will fail if any of the following fields are not set:
    /// - [`agent_id`](crate::types::builders::AgentKnowledgeBaseBuilder::agent_id)
    /// - [`agent_version`](crate::types::builders::AgentKnowledgeBaseBuilder::agent_version)
    /// - [`knowledge_base_id`](crate::types::builders::AgentKnowledgeBaseBuilder::knowledge_base_id)
    /// - [`description`](crate::types::builders::AgentKnowledgeBaseBuilder::description)
    /// - [`created_at`](crate::types::builders::AgentKnowledgeBaseBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::AgentKnowledgeBaseBuilder::updated_at)
    /// - [`knowledge_base_state`](crate::types::builders::AgentKnowledgeBaseBuilder::knowledge_base_state)
    pub fn build(self) -> ::std::result::Result<crate::types::AgentKnowledgeBase, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AgentKnowledgeBase {
            agent_id: self.agent_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_id",
                    "agent_id was not specified but it is required when building AgentKnowledgeBase",
                )
            })?,
            agent_version: self.agent_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_version",
                    "agent_version was not specified but it is required when building AgentKnowledgeBase",
                )
            })?,
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building AgentKnowledgeBase",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building AgentKnowledgeBase",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AgentKnowledgeBase",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building AgentKnowledgeBase",
                )
            })?,
            knowledge_base_state: self.knowledge_base_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_state",
                    "knowledge_base_state was not specified but it is required when building AgentKnowledgeBase",
                )
            })?,
        })
    }
}
