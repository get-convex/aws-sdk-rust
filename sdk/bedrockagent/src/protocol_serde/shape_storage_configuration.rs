// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_storage_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::StorageConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("type").string(input.r#type.as_str());
    }
    if let Some(var_1) = &input.opensearch_serverless_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("opensearchServerlessConfiguration").start_object();
        crate::protocol_serde::shape_open_search_serverless_configuration::ser_open_search_serverless_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.pinecone_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("pineconeConfiguration").start_object();
        crate::protocol_serde::shape_pinecone_configuration::ser_pinecone_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.redis_enterprise_cloud_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("redisEnterpriseCloudConfiguration").start_object();
        crate::protocol_serde::shape_redis_enterprise_cloud_configuration::ser_redis_enterprise_cloud_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.rds_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("rdsConfiguration").start_object();
        crate::protocol_serde::shape_rds_configuration::ser_rds_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}

pub(crate) fn de_storage_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::StorageConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::StorageConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::KnowledgeBaseStorageType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "opensearchServerlessConfiguration" => {
                            builder = builder.set_opensearch_serverless_configuration(
                                crate::protocol_serde::shape_open_search_serverless_configuration::de_open_search_serverless_configuration(tokens)?,
                            );
                        }
                        "pineconeConfiguration" => {
                            builder = builder
                                .set_pinecone_configuration(crate::protocol_serde::shape_pinecone_configuration::de_pinecone_configuration(tokens)?);
                        }
                        "redisEnterpriseCloudConfiguration" => {
                            builder = builder.set_redis_enterprise_cloud_configuration(
                                crate::protocol_serde::shape_redis_enterprise_cloud_configuration::de_redis_enterprise_cloud_configuration(tokens)?,
                            );
                        }
                        "rdsConfiguration" => {
                            builder = builder.set_rds_configuration(crate::protocol_serde::shape_rds_configuration::de_rds_configuration(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::storage_configuration_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
