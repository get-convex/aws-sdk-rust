// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_data_source_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_data_source::UpdateDataSourceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.data_source_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("dataSourceConfiguration").start_object();
        crate::protocol_serde::shape_data_source_configuration::ser_data_source_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.name {
        object.key("name").string(var_4.as_str());
    }
    if let Some(var_5) = &input.server_side_encryption_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("serverSideEncryptionConfiguration").start_object();
        crate::protocol_serde::shape_server_side_encryption_configuration::ser_server_side_encryption_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.vector_ingestion_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("vectorIngestionConfiguration").start_object();
        crate::protocol_serde::shape_vector_ingestion_configuration::ser_vector_ingestion_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
