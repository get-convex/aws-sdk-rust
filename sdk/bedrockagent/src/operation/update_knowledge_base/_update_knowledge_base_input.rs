// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateKnowledgeBaseInput {
    /// Identifier for a resource.
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// Name for a resource.
    pub name: ::std::option::Option<::std::string::String>,
    /// Description of the Resource.
    pub description: ::std::option::Option<::std::string::String>,
    /// ARN of a IAM role.
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// Configures a bedrock knowledge base.
    pub knowledge_base_configuration: ::std::option::Option<crate::types::KnowledgeBaseConfiguration>,
    /// Configures the physical storage of ingested data in a knowledge base.
    pub storage_configuration: ::std::option::Option<crate::types::StorageConfiguration>,
}
impl UpdateKnowledgeBaseInput {
    /// Identifier for a resource.
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// Name for a resource.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Description of the Resource.
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// ARN of a IAM role.
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// Configures a bedrock knowledge base.
    pub fn knowledge_base_configuration(&self) -> ::std::option::Option<&crate::types::KnowledgeBaseConfiguration> {
        self.knowledge_base_configuration.as_ref()
    }
    /// Configures the physical storage of ingested data in a knowledge base.
    pub fn storage_configuration(&self) -> ::std::option::Option<&crate::types::StorageConfiguration> {
        self.storage_configuration.as_ref()
    }
}
impl UpdateKnowledgeBaseInput {
    /// Creates a new builder-style object to manufacture [`UpdateKnowledgeBaseInput`](crate::operation::update_knowledge_base::UpdateKnowledgeBaseInput).
    pub fn builder() -> crate::operation::update_knowledge_base::builders::UpdateKnowledgeBaseInputBuilder {
        crate::operation::update_knowledge_base::builders::UpdateKnowledgeBaseInputBuilder::default()
    }
}

/// A builder for [`UpdateKnowledgeBaseInput`](crate::operation::update_knowledge_base::UpdateKnowledgeBaseInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateKnowledgeBaseInputBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_configuration: ::std::option::Option<crate::types::KnowledgeBaseConfiguration>,
    pub(crate) storage_configuration: ::std::option::Option<crate::types::StorageConfiguration>,
}
impl UpdateKnowledgeBaseInputBuilder {
    /// Identifier for a resource.
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Identifier for a resource.
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// Identifier for a resource.
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// Name for a resource.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name for a resource.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Name for a resource.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Description of the Resource.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// Description of the Resource.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Description of the Resource.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// ARN of a IAM role.
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// ARN of a IAM role.
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// ARN of a IAM role.
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Configures a bedrock knowledge base.
    /// This field is required.
    pub fn knowledge_base_configuration(mut self, input: crate::types::KnowledgeBaseConfiguration) -> Self {
        self.knowledge_base_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Configures a bedrock knowledge base.
    pub fn set_knowledge_base_configuration(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseConfiguration>) -> Self {
        self.knowledge_base_configuration = input;
        self
    }
    /// Configures a bedrock knowledge base.
    pub fn get_knowledge_base_configuration(&self) -> &::std::option::Option<crate::types::KnowledgeBaseConfiguration> {
        &self.knowledge_base_configuration
    }
    /// Configures the physical storage of ingested data in a knowledge base.
    /// This field is required.
    pub fn storage_configuration(mut self, input: crate::types::StorageConfiguration) -> Self {
        self.storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Configures the physical storage of ingested data in a knowledge base.
    pub fn set_storage_configuration(mut self, input: ::std::option::Option<crate::types::StorageConfiguration>) -> Self {
        self.storage_configuration = input;
        self
    }
    /// Configures the physical storage of ingested data in a knowledge base.
    pub fn get_storage_configuration(&self) -> &::std::option::Option<crate::types::StorageConfiguration> {
        &self.storage_configuration
    }
    /// Consumes the builder and constructs a [`UpdateKnowledgeBaseInput`](crate::operation::update_knowledge_base::UpdateKnowledgeBaseInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_knowledge_base::UpdateKnowledgeBaseInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_knowledge_base::UpdateKnowledgeBaseInput {
            knowledge_base_id: self.knowledge_base_id,
            name: self.name,
            description: self.description,
            role_arn: self.role_arn,
            knowledge_base_configuration: self.knowledge_base_configuration,
            storage_configuration: self.storage_configuration,
        })
    }
}
