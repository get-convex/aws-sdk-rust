// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Delete Action Group Request
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteAgentActionGroupInput {
    /// Id generated at the server side when an Agent is created
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// Draft Version of the Agent.
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// Id generated at the server side when an Agent ActionGroup is created
    pub action_group_id: ::std::option::Option<::std::string::String>,
    /// Skips checking if resource is in use when set to true. Defaults to false
    pub skip_resource_in_use_check: ::std::option::Option<bool>,
}
impl DeleteAgentActionGroupInput {
    /// Id generated at the server side when an Agent is created
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// Draft Version of the Agent.
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// Id generated at the server side when an Agent ActionGroup is created
    pub fn action_group_id(&self) -> ::std::option::Option<&str> {
        self.action_group_id.as_deref()
    }
    /// Skips checking if resource is in use when set to true. Defaults to false
    pub fn skip_resource_in_use_check(&self) -> ::std::option::Option<bool> {
        self.skip_resource_in_use_check
    }
}
impl DeleteAgentActionGroupInput {
    /// Creates a new builder-style object to manufacture [`DeleteAgentActionGroupInput`](crate::operation::delete_agent_action_group::DeleteAgentActionGroupInput).
    pub fn builder() -> crate::operation::delete_agent_action_group::builders::DeleteAgentActionGroupInputBuilder {
        crate::operation::delete_agent_action_group::builders::DeleteAgentActionGroupInputBuilder::default()
    }
}

/// A builder for [`DeleteAgentActionGroupInput`](crate::operation::delete_agent_action_group::DeleteAgentActionGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteAgentActionGroupInputBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) action_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) skip_resource_in_use_check: ::std::option::Option<bool>,
}
impl DeleteAgentActionGroupInputBuilder {
    /// Id generated at the server side when an Agent is created
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Id generated at the server side when an Agent is created
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// Id generated at the server side when an Agent is created
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// Draft Version of the Agent.
    /// This field is required.
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// Draft Version of the Agent.
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// Draft Version of the Agent.
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// Id generated at the server side when an Agent ActionGroup is created
    /// This field is required.
    pub fn action_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Id generated at the server side when an Agent ActionGroup is created
    pub fn set_action_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_group_id = input;
        self
    }
    /// Id generated at the server side when an Agent ActionGroup is created
    pub fn get_action_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_group_id
    }
    /// Skips checking if resource is in use when set to true. Defaults to false
    pub fn skip_resource_in_use_check(mut self, input: bool) -> Self {
        self.skip_resource_in_use_check = ::std::option::Option::Some(input);
        self
    }
    /// Skips checking if resource is in use when set to true. Defaults to false
    pub fn set_skip_resource_in_use_check(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_resource_in_use_check = input;
        self
    }
    /// Skips checking if resource is in use when set to true. Defaults to false
    pub fn get_skip_resource_in_use_check(&self) -> &::std::option::Option<bool> {
        &self.skip_resource_in_use_check
    }
    /// Consumes the builder and constructs a [`DeleteAgentActionGroupInput`](crate::operation::delete_agent_action_group::DeleteAgentActionGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_agent_action_group::DeleteAgentActionGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_agent_action_group::DeleteAgentActionGroupInput {
            agent_id: self.agent_id,
            agent_version: self.agent_version,
            action_group_id: self.action_group_id,
            skip_resource_in_use_check: self.skip_resource_in_use_check,
        })
    }
}
