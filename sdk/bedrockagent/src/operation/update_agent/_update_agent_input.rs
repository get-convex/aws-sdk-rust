// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Update Agent Request
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAgentInput {
    /// Id generated at the server side when an Agent is created
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// Name for a resource.
    pub agent_name: ::std::option::Option<::std::string::String>,
    /// Instruction for the agent.
    pub instruction: ::std::option::Option<::std::string::String>,
    /// ARN or name of a Bedrock model.
    pub foundation_model: ::std::option::Option<::std::string::String>,
    /// Description of the Resource.
    pub description: ::std::option::Option<::std::string::String>,
    /// Max Session Time.
    pub idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    /// ARN of a IAM role.
    pub agent_resource_role_arn: ::std::option::Option<::std::string::String>,
    /// A KMS key ARN
    pub customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// Configuration for prompt override.
    pub prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
}
impl UpdateAgentInput {
    /// Id generated at the server side when an Agent is created
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// Name for a resource.
    pub fn agent_name(&self) -> ::std::option::Option<&str> {
        self.agent_name.as_deref()
    }
    /// Instruction for the agent.
    pub fn instruction(&self) -> ::std::option::Option<&str> {
        self.instruction.as_deref()
    }
    /// ARN or name of a Bedrock model.
    pub fn foundation_model(&self) -> ::std::option::Option<&str> {
        self.foundation_model.as_deref()
    }
    /// Description of the Resource.
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// Max Session Time.
    pub fn idle_session_ttl_in_seconds(&self) -> ::std::option::Option<i32> {
        self.idle_session_ttl_in_seconds
    }
    /// ARN of a IAM role.
    pub fn agent_resource_role_arn(&self) -> ::std::option::Option<&str> {
        self.agent_resource_role_arn.as_deref()
    }
    /// A KMS key ARN
    pub fn customer_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.customer_encryption_key_arn.as_deref()
    }
    /// Configuration for prompt override.
    pub fn prompt_override_configuration(&self) -> ::std::option::Option<&crate::types::PromptOverrideConfiguration> {
        self.prompt_override_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateAgentInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAgentInput");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_name", &self.agent_name);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("description", &self.description);
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("agent_resource_role_arn", &self.agent_resource_role_arn);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateAgentInput {
    /// Creates a new builder-style object to manufacture [`UpdateAgentInput`](crate::operation::update_agent::UpdateAgentInput).
    pub fn builder() -> crate::operation::update_agent::builders::UpdateAgentInputBuilder {
        crate::operation::update_agent::builders::UpdateAgentInputBuilder::default()
    }
}

/// A builder for [`UpdateAgentInput`](crate::operation::update_agent::UpdateAgentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateAgentInputBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_name: ::std::option::Option<::std::string::String>,
    pub(crate) instruction: ::std::option::Option<::std::string::String>,
    pub(crate) foundation_model: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    pub(crate) agent_resource_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
}
impl UpdateAgentInputBuilder {
    /// Id generated at the server side when an Agent is created
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Id generated at the server side when an Agent is created
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// Id generated at the server side when an Agent is created
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// Name for a resource.
    /// This field is required.
    pub fn agent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name for a resource.
    pub fn set_agent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_name = input;
        self
    }
    /// Name for a resource.
    pub fn get_agent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_name
    }
    /// Instruction for the agent.
    pub fn instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instruction = ::std::option::Option::Some(input.into());
        self
    }
    /// Instruction for the agent.
    pub fn set_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instruction = input;
        self
    }
    /// Instruction for the agent.
    pub fn get_instruction(&self) -> &::std::option::Option<::std::string::String> {
        &self.instruction
    }
    /// ARN or name of a Bedrock model.
    pub fn foundation_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model = ::std::option::Option::Some(input.into());
        self
    }
    /// ARN or name of a Bedrock model.
    pub fn set_foundation_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model = input;
        self
    }
    /// ARN or name of a Bedrock model.
    pub fn get_foundation_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model
    }
    /// Description of the Resource.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// Description of the Resource.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Description of the Resource.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Max Session Time.
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.idle_session_ttl_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// Max Session Time.
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_session_ttl_in_seconds = input;
        self
    }
    /// Max Session Time.
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.idle_session_ttl_in_seconds
    }
    /// ARN of a IAM role.
    /// This field is required.
    pub fn agent_resource_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_resource_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// ARN of a IAM role.
    pub fn set_agent_resource_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_resource_role_arn = input;
        self
    }
    /// ARN of a IAM role.
    pub fn get_agent_resource_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_resource_role_arn
    }
    /// A KMS key ARN
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// A KMS key ARN
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = input;
        self
    }
    /// A KMS key ARN
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_encryption_key_arn
    }
    /// Configuration for prompt override.
    pub fn prompt_override_configuration(mut self, input: crate::types::PromptOverrideConfiguration) -> Self {
        self.prompt_override_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Configuration for prompt override.
    pub fn set_prompt_override_configuration(mut self, input: ::std::option::Option<crate::types::PromptOverrideConfiguration>) -> Self {
        self.prompt_override_configuration = input;
        self
    }
    /// Configuration for prompt override.
    pub fn get_prompt_override_configuration(&self) -> &::std::option::Option<crate::types::PromptOverrideConfiguration> {
        &self.prompt_override_configuration
    }
    /// Consumes the builder and constructs a [`UpdateAgentInput`](crate::operation::update_agent::UpdateAgentInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_agent::UpdateAgentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_agent::UpdateAgentInput {
            agent_id: self.agent_id,
            agent_name: self.agent_name,
            instruction: self.instruction,
            foundation_model: self.foundation_model,
            description: self.description,
            idle_session_ttl_in_seconds: self.idle_session_ttl_in_seconds,
            agent_resource_role_arn: self.agent_resource_role_arn,
            customer_encryption_key_arn: self.customer_encryption_key_arn,
            prompt_override_configuration: self.prompt_override_configuration,
        })
    }
}
impl ::std::fmt::Debug for UpdateAgentInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAgentInputBuilder");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_name", &self.agent_name);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("description", &self.description);
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("agent_resource_role_arn", &self.agent_resource_role_arn);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
