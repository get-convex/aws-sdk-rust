// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_agent::_update_agent_output::UpdateAgentOutputBuilder;

pub use crate::operation::update_agent::_update_agent_input::UpdateAgentInputBuilder;

impl UpdateAgentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_agent::UpdateAgentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_agent::UpdateAgentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_agent();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateAgent`.
///
/// Updates an existing Amazon Bedrock Agent
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateAgentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_agent::builders::UpdateAgentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_agent::UpdateAgentOutput,
        crate::operation::update_agent::UpdateAgentError,
    > for UpdateAgentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_agent::UpdateAgentOutput,
            crate::operation::update_agent::UpdateAgentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateAgentFluentBuilder {
    /// Creates a new `UpdateAgent`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateAgent as a reference.
    pub fn as_input(&self) -> &crate::operation::update_agent::builders::UpdateAgentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_agent::UpdateAgentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_agent::UpdateAgentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_agent::UpdateAgent::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_agent::UpdateAgent::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_agent::UpdateAgentOutput,
        crate::operation::update_agent::UpdateAgentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Id generated at the server side when an Agent is created
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.agent_id(input.into());
        self
    }
    /// Id generated at the server side when an Agent is created
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_agent_id(input);
        self
    }
    /// Id generated at the server side when an Agent is created
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_agent_id()
    }
    /// Name for a resource.
    pub fn agent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.agent_name(input.into());
        self
    }
    /// Name for a resource.
    pub fn set_agent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_agent_name(input);
        self
    }
    /// Name for a resource.
    pub fn get_agent_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_agent_name()
    }
    /// Instruction for the agent.
    pub fn instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instruction(input.into());
        self
    }
    /// Instruction for the agent.
    pub fn set_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instruction(input);
        self
    }
    /// Instruction for the agent.
    pub fn get_instruction(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instruction()
    }
    /// ARN or name of a Bedrock model.
    pub fn foundation_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.foundation_model(input.into());
        self
    }
    /// ARN or name of a Bedrock model.
    pub fn set_foundation_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_foundation_model(input);
        self
    }
    /// ARN or name of a Bedrock model.
    pub fn get_foundation_model(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_foundation_model()
    }
    /// Description of the Resource.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// Description of the Resource.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Description of the Resource.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// Max Session Time.
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.idle_session_ttl_in_seconds(input);
        self
    }
    /// Max Session Time.
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_idle_session_ttl_in_seconds(input);
        self
    }
    /// Max Session Time.
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_idle_session_ttl_in_seconds()
    }
    /// ARN of a IAM role.
    pub fn agent_resource_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.agent_resource_role_arn(input.into());
        self
    }
    /// ARN of a IAM role.
    pub fn set_agent_resource_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_agent_resource_role_arn(input);
        self
    }
    /// ARN of a IAM role.
    pub fn get_agent_resource_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_agent_resource_role_arn()
    }
    /// A KMS key ARN
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.customer_encryption_key_arn(input.into());
        self
    }
    /// A KMS key ARN
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_customer_encryption_key_arn(input);
        self
    }
    /// A KMS key ARN
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_customer_encryption_key_arn()
    }
    /// Configuration for prompt override.
    pub fn prompt_override_configuration(mut self, input: crate::types::PromptOverrideConfiguration) -> Self {
        self.inner = self.inner.prompt_override_configuration(input);
        self
    }
    /// Configuration for prompt override.
    pub fn set_prompt_override_configuration(mut self, input: ::std::option::Option<crate::types::PromptOverrideConfiguration>) -> Self {
        self.inner = self.inner.set_prompt_override_configuration(input);
        self
    }
    /// Configuration for prompt override.
    pub fn get_prompt_override_configuration(&self) -> &::std::option::Option<crate::types::PromptOverrideConfiguration> {
        self.inner.get_prompt_override_configuration()
    }
}
