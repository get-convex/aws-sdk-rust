// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Get Agent Response
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAgentOutput {
    /// Contains the information of an agent
    pub agent: ::std::option::Option<crate::types::Agent>,
    _request_id: Option<String>,
}
impl GetAgentOutput {
    /// Contains the information of an agent
    pub fn agent(&self) -> ::std::option::Option<&crate::types::Agent> {
        self.agent.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetAgentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAgentOutput {
    /// Creates a new builder-style object to manufacture [`GetAgentOutput`](crate::operation::get_agent::GetAgentOutput).
    pub fn builder() -> crate::operation::get_agent::builders::GetAgentOutputBuilder {
        crate::operation::get_agent::builders::GetAgentOutputBuilder::default()
    }
}

/// A builder for [`GetAgentOutput`](crate::operation::get_agent::GetAgentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetAgentOutputBuilder {
    pub(crate) agent: ::std::option::Option<crate::types::Agent>,
    _request_id: Option<String>,
}
impl GetAgentOutputBuilder {
    /// Contains the information of an agent
    /// This field is required.
    pub fn agent(mut self, input: crate::types::Agent) -> Self {
        self.agent = ::std::option::Option::Some(input);
        self
    }
    /// Contains the information of an agent
    pub fn set_agent(mut self, input: ::std::option::Option<crate::types::Agent>) -> Self {
        self.agent = input;
        self
    }
    /// Contains the information of an agent
    pub fn get_agent(&self) -> &::std::option::Option<crate::types::Agent> {
        &self.agent
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAgentOutput`](crate::operation::get_agent::GetAgentOutput).
    pub fn build(self) -> crate::operation::get_agent::GetAgentOutput {
        crate::operation::get_agent::GetAgentOutput {
            agent: self.agent,
            _request_id: self._request_id,
        }
    }
}
