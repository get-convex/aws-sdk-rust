// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_describe_agreement;

pub(crate) mod shape_get_agreement_terms;

pub(crate) mod shape_search_agreements;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_describe_agreement_input;

pub(crate) mod shape_get_agreement_terms_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_search_agreements_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_accepted_term_list;

pub(crate) mod shape_acceptor;

pub(crate) mod shape_agreement_view_summary_list;

pub(crate) mod shape_estimated_charges;

pub(crate) mod shape_filter;

pub(crate) mod shape_proposal_summary;

pub(crate) mod shape_proposer;

pub(crate) mod shape_sort;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_accepted_term;

pub(crate) mod shape_agreement_view_summary;

pub(crate) mod shape_resources;

pub(crate) mod shape_validation_exception_field;

pub(crate) mod shape_byol_pricing_term;

pub(crate) mod shape_configurable_upfront_pricing_term;

pub(crate) mod shape_fixed_upfront_pricing_term;

pub(crate) mod shape_free_trial_pricing_term;

pub(crate) mod shape_legal_term;

pub(crate) mod shape_payment_schedule_term;

pub(crate) mod shape_recurring_payment_term;

pub(crate) mod shape_renewal_term;

pub(crate) mod shape_resource;

pub(crate) mod shape_support_term;

pub(crate) mod shape_usage_based_pricing_term;

pub(crate) mod shape_validity_term;

pub(crate) mod shape_configurable_upfront_pricing_term_configuration;

pub(crate) mod shape_configurable_upfront_rate_card_list;

pub(crate) mod shape_document_list;

pub(crate) mod shape_grant_list;

pub(crate) mod shape_renewal_term_configuration;

pub(crate) mod shape_schedule_list;

pub(crate) mod shape_usage_based_rate_card_list;

pub(crate) mod shape_configurable_upfront_rate_card_item;

pub(crate) mod shape_dimension_list;

pub(crate) mod shape_document_item;

pub(crate) mod shape_grant_item;

pub(crate) mod shape_schedule_item;

pub(crate) mod shape_usage_based_rate_card_item;

pub(crate) mod shape_constraints;

pub(crate) mod shape_dimension;

pub(crate) mod shape_rate_card_list;

pub(crate) mod shape_selector;

pub(crate) mod shape_rate_card_item;
