// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Within the pay-as-you-go model defined under <code>UsageBasedPricingTerm</code>, the <code>UsageBasedRateCardItem</code> defines an individual rate for a product dimension.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsageBasedRateCardItem {
    /// <p>Defines the per unit rates for product dimensions.</p>
    pub rate_card: ::std::option::Option<::std::vec::Vec<crate::types::RateCardItem>>,
}
impl UsageBasedRateCardItem {
    /// <p>Defines the per unit rates for product dimensions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rate_card.is_none()`.
    pub fn rate_card(&self) -> &[crate::types::RateCardItem] {
        self.rate_card.as_deref().unwrap_or_default()
    }
}
impl UsageBasedRateCardItem {
    /// Creates a new builder-style object to manufacture [`UsageBasedRateCardItem`](crate::types::UsageBasedRateCardItem).
    pub fn builder() -> crate::types::builders::UsageBasedRateCardItemBuilder {
        crate::types::builders::UsageBasedRateCardItemBuilder::default()
    }
}

/// A builder for [`UsageBasedRateCardItem`](crate::types::UsageBasedRateCardItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UsageBasedRateCardItemBuilder {
    pub(crate) rate_card: ::std::option::Option<::std::vec::Vec<crate::types::RateCardItem>>,
}
impl UsageBasedRateCardItemBuilder {
    /// Appends an item to `rate_card`.
    ///
    /// To override the contents of this collection use [`set_rate_card`](Self::set_rate_card).
    ///
    /// <p>Defines the per unit rates for product dimensions.</p>
    pub fn rate_card(mut self, input: crate::types::RateCardItem) -> Self {
        let mut v = self.rate_card.unwrap_or_default();
        v.push(input);
        self.rate_card = ::std::option::Option::Some(v);
        self
    }
    /// <p>Defines the per unit rates for product dimensions.</p>
    pub fn set_rate_card(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RateCardItem>>) -> Self {
        self.rate_card = input;
        self
    }
    /// <p>Defines the per unit rates for product dimensions.</p>
    pub fn get_rate_card(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RateCardItem>> {
        &self.rate_card
    }
    /// Consumes the builder and constructs a [`UsageBasedRateCardItem`](crate::types::UsageBasedRateCardItem).
    pub fn build(self) -> crate::types::UsageBasedRateCardItem {
        crate::types::UsageBasedRateCardItem { rate_card: self.rate_card }
    }
}
