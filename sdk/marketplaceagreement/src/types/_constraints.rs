// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines limits on how the term can be configured by acceptors.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Constraints {
    /// <p>Determines if buyers are allowed to select multiple dimensions in the rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub multiple_dimension_selection: ::std::option::Option<::std::string::String>,
    /// <p>Determines if acceptors are allowed to configure quantity for each dimension in rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub quantity_configuration: ::std::option::Option<::std::string::String>,
}
impl Constraints {
    /// <p>Determines if buyers are allowed to select multiple dimensions in the rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub fn multiple_dimension_selection(&self) -> ::std::option::Option<&str> {
        self.multiple_dimension_selection.as_deref()
    }
    /// <p>Determines if acceptors are allowed to configure quantity for each dimension in rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub fn quantity_configuration(&self) -> ::std::option::Option<&str> {
        self.quantity_configuration.as_deref()
    }
}
impl Constraints {
    /// Creates a new builder-style object to manufacture [`Constraints`](crate::types::Constraints).
    pub fn builder() -> crate::types::builders::ConstraintsBuilder {
        crate::types::builders::ConstraintsBuilder::default()
    }
}

/// A builder for [`Constraints`](crate::types::Constraints).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConstraintsBuilder {
    pub(crate) multiple_dimension_selection: ::std::option::Option<::std::string::String>,
    pub(crate) quantity_configuration: ::std::option::Option<::std::string::String>,
}
impl ConstraintsBuilder {
    /// <p>Determines if buyers are allowed to select multiple dimensions in the rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub fn multiple_dimension_selection(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multiple_dimension_selection = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines if buyers are allowed to select multiple dimensions in the rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub fn set_multiple_dimension_selection(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multiple_dimension_selection = input;
        self
    }
    /// <p>Determines if buyers are allowed to select multiple dimensions in the rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub fn get_multiple_dimension_selection(&self) -> &::std::option::Option<::std::string::String> {
        &self.multiple_dimension_selection
    }
    /// <p>Determines if acceptors are allowed to configure quantity for each dimension in rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub fn quantity_configuration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.quantity_configuration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines if acceptors are allowed to configure quantity for each dimension in rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub fn set_quantity_configuration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.quantity_configuration = input;
        self
    }
    /// <p>Determines if acceptors are allowed to configure quantity for each dimension in rate card. The possible values are <code>Allowed</code> and <code>Disallowed</code>. The default value is <code>Allowed</code>.</p>
    pub fn get_quantity_configuration(&self) -> &::std::option::Option<::std::string::String> {
        &self.quantity_configuration
    }
    /// Consumes the builder and constructs a [`Constraints`](crate::types::Constraints).
    pub fn build(self) -> crate::types::Constraints {
        crate::types::Constraints {
            multiple_dimension_selection: self.multiple_dimension_selection,
            quantity_configuration: self.quantity_configuration,
        }
    }
}
