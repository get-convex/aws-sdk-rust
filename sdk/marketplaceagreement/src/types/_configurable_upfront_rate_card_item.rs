// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Within the prepaid payment model defined under <code>ConfigurableUpfrontPricingTerm</code>, the <code>RateCardItem</code> defines all the various rate cards (including pricing and dimensions) that have been proposed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurableUpfrontRateCardItem {
    /// <p>Differentiates between the mutually exclusive rate cards in the same pricing term to be selected by the buyer.</p>
    pub selector: ::std::option::Option<crate::types::Selector>,
    /// <p>Defines limits on how the term can be configured by acceptors.</p>
    pub constraints: ::std::option::Option<crate::types::Constraints>,
    /// <p>Defines the per unit rates for product dimensions.</p>
    pub rate_card: ::std::option::Option<::std::vec::Vec<crate::types::RateCardItem>>,
}
impl ConfigurableUpfrontRateCardItem {
    /// <p>Differentiates between the mutually exclusive rate cards in the same pricing term to be selected by the buyer.</p>
    pub fn selector(&self) -> ::std::option::Option<&crate::types::Selector> {
        self.selector.as_ref()
    }
    /// <p>Defines limits on how the term can be configured by acceptors.</p>
    pub fn constraints(&self) -> ::std::option::Option<&crate::types::Constraints> {
        self.constraints.as_ref()
    }
    /// <p>Defines the per unit rates for product dimensions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rate_card.is_none()`.
    pub fn rate_card(&self) -> &[crate::types::RateCardItem] {
        self.rate_card.as_deref().unwrap_or_default()
    }
}
impl ConfigurableUpfrontRateCardItem {
    /// Creates a new builder-style object to manufacture [`ConfigurableUpfrontRateCardItem`](crate::types::ConfigurableUpfrontRateCardItem).
    pub fn builder() -> crate::types::builders::ConfigurableUpfrontRateCardItemBuilder {
        crate::types::builders::ConfigurableUpfrontRateCardItemBuilder::default()
    }
}

/// A builder for [`ConfigurableUpfrontRateCardItem`](crate::types::ConfigurableUpfrontRateCardItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigurableUpfrontRateCardItemBuilder {
    pub(crate) selector: ::std::option::Option<crate::types::Selector>,
    pub(crate) constraints: ::std::option::Option<crate::types::Constraints>,
    pub(crate) rate_card: ::std::option::Option<::std::vec::Vec<crate::types::RateCardItem>>,
}
impl ConfigurableUpfrontRateCardItemBuilder {
    /// <p>Differentiates between the mutually exclusive rate cards in the same pricing term to be selected by the buyer.</p>
    pub fn selector(mut self, input: crate::types::Selector) -> Self {
        self.selector = ::std::option::Option::Some(input);
        self
    }
    /// <p>Differentiates between the mutually exclusive rate cards in the same pricing term to be selected by the buyer.</p>
    pub fn set_selector(mut self, input: ::std::option::Option<crate::types::Selector>) -> Self {
        self.selector = input;
        self
    }
    /// <p>Differentiates between the mutually exclusive rate cards in the same pricing term to be selected by the buyer.</p>
    pub fn get_selector(&self) -> &::std::option::Option<crate::types::Selector> {
        &self.selector
    }
    /// <p>Defines limits on how the term can be configured by acceptors.</p>
    pub fn constraints(mut self, input: crate::types::Constraints) -> Self {
        self.constraints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines limits on how the term can be configured by acceptors.</p>
    pub fn set_constraints(mut self, input: ::std::option::Option<crate::types::Constraints>) -> Self {
        self.constraints = input;
        self
    }
    /// <p>Defines limits on how the term can be configured by acceptors.</p>
    pub fn get_constraints(&self) -> &::std::option::Option<crate::types::Constraints> {
        &self.constraints
    }
    /// Appends an item to `rate_card`.
    ///
    /// To override the contents of this collection use [`set_rate_card`](Self::set_rate_card).
    ///
    /// <p>Defines the per unit rates for product dimensions.</p>
    pub fn rate_card(mut self, input: crate::types::RateCardItem) -> Self {
        let mut v = self.rate_card.unwrap_or_default();
        v.push(input);
        self.rate_card = ::std::option::Option::Some(v);
        self
    }
    /// <p>Defines the per unit rates for product dimensions.</p>
    pub fn set_rate_card(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RateCardItem>>) -> Self {
        self.rate_card = input;
        self
    }
    /// <p>Defines the per unit rates for product dimensions.</p>
    pub fn get_rate_card(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RateCardItem>> {
        &self.rate_card
    }
    /// Consumes the builder and constructs a [`ConfigurableUpfrontRateCardItem`](crate::types::ConfigurableUpfrontRateCardItem).
    pub fn build(self) -> crate::types::ConfigurableUpfrontRateCardItem {
        crate::types::ConfigurableUpfrontRateCardItem {
            selector: self.selector,
            constraints: self.constraints,
            rate_card: self.rate_card,
        }
    }
}
