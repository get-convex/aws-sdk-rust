// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines that on graceful expiration of the agreement (when the agreement ends on its pre-defined end date), a new agreement will be created using the accepted terms on the existing agreement. In other words, the agreement will be renewed. The presence of <code>RenewalTerm</code> in the offer document means that auto-renewal is allowed. Buyers will have the option to accept or decline auto-renewal at the offer acceptance/agreement creation. Buyers can also change this flag from <code>True</code> to <code>False</code> or <code>False</code> to <code>True</code> at anytime during the agreement's lifecycle.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RenewalTerm {
    /// <p>Category of the term being updated.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>Additional parameters specified by the acceptor while accepting the term.</p>
    pub configuration: ::std::option::Option<crate::types::RenewalTermConfiguration>,
}
impl RenewalTerm {
    /// <p>Category of the term being updated.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Additional parameters specified by the acceptor while accepting the term.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::RenewalTermConfiguration> {
        self.configuration.as_ref()
    }
}
impl RenewalTerm {
    /// Creates a new builder-style object to manufacture [`RenewalTerm`](crate::types::RenewalTerm).
    pub fn builder() -> crate::types::builders::RenewalTermBuilder {
        crate::types::builders::RenewalTermBuilder::default()
    }
}

/// A builder for [`RenewalTerm`](crate::types::RenewalTerm).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RenewalTermBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::RenewalTermConfiguration>,
}
impl RenewalTermBuilder {
    /// <p>Category of the term being updated.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Category of the term being updated.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Category of the term being updated.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>Additional parameters specified by the acceptor while accepting the term.</p>
    pub fn configuration(mut self, input: crate::types::RenewalTermConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional parameters specified by the acceptor while accepting the term.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::RenewalTermConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Additional parameters specified by the acceptor while accepting the term.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::RenewalTermConfiguration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`RenewalTerm`](crate::types::RenewalTerm).
    pub fn build(self) -> crate::types::RenewalTerm {
        crate::types::RenewalTerm {
            r#type: self.r#type,
            configuration: self.configuration,
        }
    }
}
