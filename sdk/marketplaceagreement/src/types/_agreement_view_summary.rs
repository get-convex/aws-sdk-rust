// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the agreement, including top-level attributes (for example, the agreement ID, version, proposer, and acceptor).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgreementViewSummary {
    /// <p>The unique identifier of the agreement.</p>
    pub agreement_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the agreement was accepted.</p>
    pub acceptance_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the agreement starts.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the agreement ends. The field is <code>null</code> for pay-as-you-go agreements, which don’t have end dates.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of agreement. Values are <code>PurchaseAgreement</code> or <code>VendorInsightsAgreement</code>.</p>
    pub agreement_type: ::std::option::Option<::std::string::String>,
    /// <p>Details of the party accepting the agreement terms. This is commonly the buyer for <code>PurchaseAgreement.</code></p>
    pub acceptor: ::std::option::Option<crate::types::Acceptor>,
    /// <p>Details of the party proposing the agreement terms, most commonly the seller for <code>PurchaseAgreement</code>.</p>
    pub proposer: ::std::option::Option<crate::types::Proposer>,
    /// <p>A summary of the proposal</p>
    pub proposal_summary: ::std::option::Option<crate::types::ProposalSummary>,
    /// <p>The current status of the agreement.</p>
    pub status: ::std::option::Option<crate::types::AgreementStatus>,
}
impl AgreementViewSummary {
    /// <p>The unique identifier of the agreement.</p>
    pub fn agreement_id(&self) -> ::std::option::Option<&str> {
        self.agreement_id.as_deref()
    }
    /// <p>The date and time that the agreement was accepted.</p>
    pub fn acceptance_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.acceptance_time.as_ref()
    }
    /// <p>The date and time when the agreement starts.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time when the agreement ends. The field is <code>null</code> for pay-as-you-go agreements, which don’t have end dates.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The type of agreement. Values are <code>PurchaseAgreement</code> or <code>VendorInsightsAgreement</code>.</p>
    pub fn agreement_type(&self) -> ::std::option::Option<&str> {
        self.agreement_type.as_deref()
    }
    /// <p>Details of the party accepting the agreement terms. This is commonly the buyer for <code>PurchaseAgreement.</code></p>
    pub fn acceptor(&self) -> ::std::option::Option<&crate::types::Acceptor> {
        self.acceptor.as_ref()
    }
    /// <p>Details of the party proposing the agreement terms, most commonly the seller for <code>PurchaseAgreement</code>.</p>
    pub fn proposer(&self) -> ::std::option::Option<&crate::types::Proposer> {
        self.proposer.as_ref()
    }
    /// <p>A summary of the proposal</p>
    pub fn proposal_summary(&self) -> ::std::option::Option<&crate::types::ProposalSummary> {
        self.proposal_summary.as_ref()
    }
    /// <p>The current status of the agreement.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AgreementStatus> {
        self.status.as_ref()
    }
}
impl AgreementViewSummary {
    /// Creates a new builder-style object to manufacture [`AgreementViewSummary`](crate::types::AgreementViewSummary).
    pub fn builder() -> crate::types::builders::AgreementViewSummaryBuilder {
        crate::types::builders::AgreementViewSummaryBuilder::default()
    }
}

/// A builder for [`AgreementViewSummary`](crate::types::AgreementViewSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgreementViewSummaryBuilder {
    pub(crate) agreement_id: ::std::option::Option<::std::string::String>,
    pub(crate) acceptance_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) agreement_type: ::std::option::Option<::std::string::String>,
    pub(crate) acceptor: ::std::option::Option<crate::types::Acceptor>,
    pub(crate) proposer: ::std::option::Option<crate::types::Proposer>,
    pub(crate) proposal_summary: ::std::option::Option<crate::types::ProposalSummary>,
    pub(crate) status: ::std::option::Option<crate::types::AgreementStatus>,
}
impl AgreementViewSummaryBuilder {
    /// <p>The unique identifier of the agreement.</p>
    pub fn agreement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agreement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agreement.</p>
    pub fn set_agreement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agreement_id = input;
        self
    }
    /// <p>The unique identifier of the agreement.</p>
    pub fn get_agreement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agreement_id
    }
    /// <p>The date and time that the agreement was accepted.</p>
    pub fn acceptance_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.acceptance_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the agreement was accepted.</p>
    pub fn set_acceptance_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.acceptance_time = input;
        self
    }
    /// <p>The date and time that the agreement was accepted.</p>
    pub fn get_acceptance_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.acceptance_time
    }
    /// <p>The date and time when the agreement starts.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the agreement starts.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time when the agreement starts.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The date and time when the agreement ends. The field is <code>null</code> for pay-as-you-go agreements, which don’t have end dates.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the agreement ends. The field is <code>null</code> for pay-as-you-go agreements, which don’t have end dates.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The date and time when the agreement ends. The field is <code>null</code> for pay-as-you-go agreements, which don’t have end dates.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The type of agreement. Values are <code>PurchaseAgreement</code> or <code>VendorInsightsAgreement</code>.</p>
    pub fn agreement_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agreement_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of agreement. Values are <code>PurchaseAgreement</code> or <code>VendorInsightsAgreement</code>.</p>
    pub fn set_agreement_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agreement_type = input;
        self
    }
    /// <p>The type of agreement. Values are <code>PurchaseAgreement</code> or <code>VendorInsightsAgreement</code>.</p>
    pub fn get_agreement_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.agreement_type
    }
    /// <p>Details of the party accepting the agreement terms. This is commonly the buyer for <code>PurchaseAgreement.</code></p>
    pub fn acceptor(mut self, input: crate::types::Acceptor) -> Self {
        self.acceptor = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of the party accepting the agreement terms. This is commonly the buyer for <code>PurchaseAgreement.</code></p>
    pub fn set_acceptor(mut self, input: ::std::option::Option<crate::types::Acceptor>) -> Self {
        self.acceptor = input;
        self
    }
    /// <p>Details of the party accepting the agreement terms. This is commonly the buyer for <code>PurchaseAgreement.</code></p>
    pub fn get_acceptor(&self) -> &::std::option::Option<crate::types::Acceptor> {
        &self.acceptor
    }
    /// <p>Details of the party proposing the agreement terms, most commonly the seller for <code>PurchaseAgreement</code>.</p>
    pub fn proposer(mut self, input: crate::types::Proposer) -> Self {
        self.proposer = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of the party proposing the agreement terms, most commonly the seller for <code>PurchaseAgreement</code>.</p>
    pub fn set_proposer(mut self, input: ::std::option::Option<crate::types::Proposer>) -> Self {
        self.proposer = input;
        self
    }
    /// <p>Details of the party proposing the agreement terms, most commonly the seller for <code>PurchaseAgreement</code>.</p>
    pub fn get_proposer(&self) -> &::std::option::Option<crate::types::Proposer> {
        &self.proposer
    }
    /// <p>A summary of the proposal</p>
    pub fn proposal_summary(mut self, input: crate::types::ProposalSummary) -> Self {
        self.proposal_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>A summary of the proposal</p>
    pub fn set_proposal_summary(mut self, input: ::std::option::Option<crate::types::ProposalSummary>) -> Self {
        self.proposal_summary = input;
        self
    }
    /// <p>A summary of the proposal</p>
    pub fn get_proposal_summary(&self) -> &::std::option::Option<crate::types::ProposalSummary> {
        &self.proposal_summary
    }
    /// <p>The current status of the agreement.</p>
    pub fn status(mut self, input: crate::types::AgreementStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the agreement.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AgreementStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the agreement.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AgreementStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`AgreementViewSummary`](crate::types::AgreementViewSummary).
    pub fn build(self) -> crate::types::AgreementViewSummary {
        crate::types::AgreementViewSummary {
            agreement_id: self.agreement_id,
            acceptance_time: self.acceptance_time,
            start_time: self.start_time,
            end_time: self.end_time,
            agreement_type: self.agreement_type,
            acceptor: self.acceptor,
            proposer: self.proposer,
            proposal_summary: self.proposal_summary,
            status: self.status,
        }
    }
}
