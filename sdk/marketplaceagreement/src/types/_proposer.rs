// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the party proposing the agreement terms,. This is commonly the seller for <code>PurchaseAgreement</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Proposer {
    /// <p>The AWS account ID of the proposer.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
}
impl Proposer {
    /// <p>The AWS account ID of the proposer.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
}
impl Proposer {
    /// Creates a new builder-style object to manufacture [`Proposer`](crate::types::Proposer).
    pub fn builder() -> crate::types::builders::ProposerBuilder {
        crate::types::builders::ProposerBuilder::default()
    }
}

/// A builder for [`Proposer`](crate::types::Proposer).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProposerBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
}
impl ProposerBuilder {
    /// <p>The AWS account ID of the proposer.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID of the proposer.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The AWS account ID of the proposer.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Consumes the builder and constructs a [`Proposer`](crate::types::Proposer).
    pub fn build(self) -> crate::types::Proposer {
        crate::types::Proposer { account_id: self.account_id }
    }
}
