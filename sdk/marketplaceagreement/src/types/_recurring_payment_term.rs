// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a pricing model where customers are charged a fixed recurring price at the end of each billing period.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecurringPaymentTerm {
    /// <p>Type of the term being updated.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>Defines the currency for the prices mentioned in this term.</p>
    pub currency_code: ::std::option::Option<::std::string::String>,
    /// <p>Defines the recurrence at which buyers are charged.</p>
    pub billing_period: ::std::option::Option<::std::string::String>,
    /// <p>Amount charged to the buyer every billing period.</p>
    pub price: ::std::option::Option<::std::string::String>,
}
impl RecurringPaymentTerm {
    /// <p>Type of the term being updated.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Defines the currency for the prices mentioned in this term.</p>
    pub fn currency_code(&self) -> ::std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>Defines the recurrence at which buyers are charged.</p>
    pub fn billing_period(&self) -> ::std::option::Option<&str> {
        self.billing_period.as_deref()
    }
    /// <p>Amount charged to the buyer every billing period.</p>
    pub fn price(&self) -> ::std::option::Option<&str> {
        self.price.as_deref()
    }
}
impl RecurringPaymentTerm {
    /// Creates a new builder-style object to manufacture [`RecurringPaymentTerm`](crate::types::RecurringPaymentTerm).
    pub fn builder() -> crate::types::builders::RecurringPaymentTermBuilder {
        crate::types::builders::RecurringPaymentTermBuilder::default()
    }
}

/// A builder for [`RecurringPaymentTerm`](crate::types::RecurringPaymentTerm).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecurringPaymentTermBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) billing_period: ::std::option::Option<::std::string::String>,
    pub(crate) price: ::std::option::Option<::std::string::String>,
}
impl RecurringPaymentTermBuilder {
    /// <p>Type of the term being updated.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of the term being updated.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of the term being updated.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>Defines the currency for the prices mentioned in this term.</p>
    pub fn currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the currency for the prices mentioned in this term.</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>Defines the currency for the prices mentioned in this term.</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency_code
    }
    /// <p>Defines the recurrence at which buyers are charged.</p>
    pub fn billing_period(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_period = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the recurrence at which buyers are charged.</p>
    pub fn set_billing_period(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_period = input;
        self
    }
    /// <p>Defines the recurrence at which buyers are charged.</p>
    pub fn get_billing_period(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_period
    }
    /// <p>Amount charged to the buyer every billing period.</p>
    pub fn price(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.price = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amount charged to the buyer every billing period.</p>
    pub fn set_price(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.price = input;
        self
    }
    /// <p>Amount charged to the buyer every billing period.</p>
    pub fn get_price(&self) -> &::std::option::Option<::std::string::String> {
        &self.price
    }
    /// Consumes the builder and constructs a [`RecurringPaymentTerm`](crate::types::RecurringPaymentTerm).
    pub fn build(self) -> crate::types::RecurringPaymentTerm {
        crate::types::RecurringPaymentTerm {
            r#type: self.r#type,
            currency_code: self.currency_code,
            billing_period: self.billing_period,
            price: self.price,
        }
    }
}
