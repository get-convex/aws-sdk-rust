// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional parameters specified by the acceptor while accepting the term.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RenewalTermConfiguration {
    /// <p>Defines whether the acceptor has chosen to auto-renew the agreement at the end of its lifecycle. Can be set to <code>True</code> or <code>False</code>.</p>
    pub enable_auto_renew: bool,
}
impl RenewalTermConfiguration {
    /// <p>Defines whether the acceptor has chosen to auto-renew the agreement at the end of its lifecycle. Can be set to <code>True</code> or <code>False</code>.</p>
    pub fn enable_auto_renew(&self) -> bool {
        self.enable_auto_renew
    }
}
impl RenewalTermConfiguration {
    /// Creates a new builder-style object to manufacture [`RenewalTermConfiguration`](crate::types::RenewalTermConfiguration).
    pub fn builder() -> crate::types::builders::RenewalTermConfigurationBuilder {
        crate::types::builders::RenewalTermConfigurationBuilder::default()
    }
}

/// A builder for [`RenewalTermConfiguration`](crate::types::RenewalTermConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RenewalTermConfigurationBuilder {
    pub(crate) enable_auto_renew: ::std::option::Option<bool>,
}
impl RenewalTermConfigurationBuilder {
    /// <p>Defines whether the acceptor has chosen to auto-renew the agreement at the end of its lifecycle. Can be set to <code>True</code> or <code>False</code>.</p>
    /// This field is required.
    pub fn enable_auto_renew(mut self, input: bool) -> Self {
        self.enable_auto_renew = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines whether the acceptor has chosen to auto-renew the agreement at the end of its lifecycle. Can be set to <code>True</code> or <code>False</code>.</p>
    pub fn set_enable_auto_renew(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_auto_renew = input;
        self
    }
    /// <p>Defines whether the acceptor has chosen to auto-renew the agreement at the end of its lifecycle. Can be set to <code>True</code> or <code>False</code>.</p>
    pub fn get_enable_auto_renew(&self) -> &::std::option::Option<bool> {
        &self.enable_auto_renew
    }
    /// Consumes the builder and constructs a [`RenewalTermConfiguration`](crate::types::RenewalTermConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`enable_auto_renew`](crate::types::builders::RenewalTermConfigurationBuilder::enable_auto_renew)
    pub fn build(self) -> ::std::result::Result<crate::types::RenewalTermConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RenewalTermConfiguration {
            enable_auto_renew: self.enable_auto_renew.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enable_auto_renew",
                    "enable_auto_renew was not specified but it is required when building RenewalTermConfiguration",
                )
            })?,
        })
    }
}
