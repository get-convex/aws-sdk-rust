// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFileSystemProtectionInput {
    /// <p>The ID of the file system to update.</p>
    pub file_system_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the file system's replication overwrite protection.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is <code>ENABLED</code> by default.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.</p></li>
    /// <li>
    /// <p><code>REPLICATING</code> – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.</p></li>
    /// </ul>
    /// <p>If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.</p>
    pub replication_overwrite_protection: ::std::option::Option<crate::types::ReplicationOverwriteProtection>,
}
impl UpdateFileSystemProtectionInput {
    /// <p>The ID of the file system to update.</p>
    pub fn file_system_id(&self) -> ::std::option::Option<&str> {
        self.file_system_id.as_deref()
    }
    /// <p>The status of the file system's replication overwrite protection.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is <code>ENABLED</code> by default.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.</p></li>
    /// <li>
    /// <p><code>REPLICATING</code> – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.</p></li>
    /// </ul>
    /// <p>If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.</p>
    pub fn replication_overwrite_protection(&self) -> ::std::option::Option<&crate::types::ReplicationOverwriteProtection> {
        self.replication_overwrite_protection.as_ref()
    }
}
impl UpdateFileSystemProtectionInput {
    /// Creates a new builder-style object to manufacture [`UpdateFileSystemProtectionInput`](crate::operation::update_file_system_protection::UpdateFileSystemProtectionInput).
    pub fn builder() -> crate::operation::update_file_system_protection::builders::UpdateFileSystemProtectionInputBuilder {
        crate::operation::update_file_system_protection::builders::UpdateFileSystemProtectionInputBuilder::default()
    }
}

/// A builder for [`UpdateFileSystemProtectionInput`](crate::operation::update_file_system_protection::UpdateFileSystemProtectionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateFileSystemProtectionInputBuilder {
    pub(crate) file_system_id: ::std::option::Option<::std::string::String>,
    pub(crate) replication_overwrite_protection: ::std::option::Option<crate::types::ReplicationOverwriteProtection>,
}
impl UpdateFileSystemProtectionInputBuilder {
    /// <p>The ID of the file system to update.</p>
    /// This field is required.
    pub fn file_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_system_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the file system to update.</p>
    pub fn set_file_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_system_id = input;
        self
    }
    /// <p>The ID of the file system to update.</p>
    pub fn get_file_system_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_system_id
    }
    /// <p>The status of the file system's replication overwrite protection.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is <code>ENABLED</code> by default.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.</p></li>
    /// <li>
    /// <p><code>REPLICATING</code> – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.</p></li>
    /// </ul>
    /// <p>If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.</p>
    pub fn replication_overwrite_protection(mut self, input: crate::types::ReplicationOverwriteProtection) -> Self {
        self.replication_overwrite_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the file system's replication overwrite protection.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is <code>ENABLED</code> by default.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.</p></li>
    /// <li>
    /// <p><code>REPLICATING</code> – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.</p></li>
    /// </ul>
    /// <p>If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.</p>
    pub fn set_replication_overwrite_protection(mut self, input: ::std::option::Option<crate::types::ReplicationOverwriteProtection>) -> Self {
        self.replication_overwrite_protection = input;
        self
    }
    /// <p>The status of the file system's replication overwrite protection.</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is <code>ENABLED</code> by default.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.</p></li>
    /// <li>
    /// <p><code>REPLICATING</code> – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.</p></li>
    /// </ul>
    /// <p>If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.</p>
    pub fn get_replication_overwrite_protection(&self) -> &::std::option::Option<crate::types::ReplicationOverwriteProtection> {
        &self.replication_overwrite_protection
    }
    /// Consumes the builder and constructs a [`UpdateFileSystemProtectionInput`](crate::operation::update_file_system_protection::UpdateFileSystemProtectionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_file_system_protection::UpdateFileSystemProtectionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_file_system_protection::UpdateFileSystemProtectionInput {
            file_system_id: self.file_system_id,
            replication_overwrite_protection: self.replication_overwrite_protection,
        })
    }
}
