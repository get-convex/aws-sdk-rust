// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetParametersForImportInput {
    /// <p>The method to use for key material import. Import token is only required for TR-34 WrappedKeyBlock (<code>TR34_KEY_BLOCK</code>) and RSA WrappedKeyCryptogram (<code>KEY_CRYPTOGRAM</code>).</p>
    /// <p>Import token is not required for TR-31, root public key cerificate or trusted public key certificate.</p>
    pub key_material_type: ::std::option::Option<crate::types::KeyMaterialType>,
    /// <p>The wrapping key algorithm to generate a wrapping key certificate. This certificate wraps the key under import.</p>
    /// <p>At this time, <code>RSA_2048</code> is the allowed algorithm for TR-34 WrappedKeyBlock import. Additionally, <code>RSA_2048</code>, <code>RSA_3072</code>, <code>RSA_4096</code> are the allowed algorithms for RSA WrappedKeyCryptogram import.</p>
    pub wrapping_key_algorithm: ::std::option::Option<crate::types::KeyAlgorithm>,
}
impl GetParametersForImportInput {
    /// <p>The method to use for key material import. Import token is only required for TR-34 WrappedKeyBlock (<code>TR34_KEY_BLOCK</code>) and RSA WrappedKeyCryptogram (<code>KEY_CRYPTOGRAM</code>).</p>
    /// <p>Import token is not required for TR-31, root public key cerificate or trusted public key certificate.</p>
    pub fn key_material_type(&self) -> ::std::option::Option<&crate::types::KeyMaterialType> {
        self.key_material_type.as_ref()
    }
    /// <p>The wrapping key algorithm to generate a wrapping key certificate. This certificate wraps the key under import.</p>
    /// <p>At this time, <code>RSA_2048</code> is the allowed algorithm for TR-34 WrappedKeyBlock import. Additionally, <code>RSA_2048</code>, <code>RSA_3072</code>, <code>RSA_4096</code> are the allowed algorithms for RSA WrappedKeyCryptogram import.</p>
    pub fn wrapping_key_algorithm(&self) -> ::std::option::Option<&crate::types::KeyAlgorithm> {
        self.wrapping_key_algorithm.as_ref()
    }
}
impl GetParametersForImportInput {
    /// Creates a new builder-style object to manufacture [`GetParametersForImportInput`](crate::operation::get_parameters_for_import::GetParametersForImportInput).
    pub fn builder() -> crate::operation::get_parameters_for_import::builders::GetParametersForImportInputBuilder {
        crate::operation::get_parameters_for_import::builders::GetParametersForImportInputBuilder::default()
    }
}

/// A builder for [`GetParametersForImportInput`](crate::operation::get_parameters_for_import::GetParametersForImportInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetParametersForImportInputBuilder {
    pub(crate) key_material_type: ::std::option::Option<crate::types::KeyMaterialType>,
    pub(crate) wrapping_key_algorithm: ::std::option::Option<crate::types::KeyAlgorithm>,
}
impl GetParametersForImportInputBuilder {
    /// <p>The method to use for key material import. Import token is only required for TR-34 WrappedKeyBlock (<code>TR34_KEY_BLOCK</code>) and RSA WrappedKeyCryptogram (<code>KEY_CRYPTOGRAM</code>).</p>
    /// <p>Import token is not required for TR-31, root public key cerificate or trusted public key certificate.</p>
    /// This field is required.
    pub fn key_material_type(mut self, input: crate::types::KeyMaterialType) -> Self {
        self.key_material_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method to use for key material import. Import token is only required for TR-34 WrappedKeyBlock (<code>TR34_KEY_BLOCK</code>) and RSA WrappedKeyCryptogram (<code>KEY_CRYPTOGRAM</code>).</p>
    /// <p>Import token is not required for TR-31, root public key cerificate or trusted public key certificate.</p>
    pub fn set_key_material_type(mut self, input: ::std::option::Option<crate::types::KeyMaterialType>) -> Self {
        self.key_material_type = input;
        self
    }
    /// <p>The method to use for key material import. Import token is only required for TR-34 WrappedKeyBlock (<code>TR34_KEY_BLOCK</code>) and RSA WrappedKeyCryptogram (<code>KEY_CRYPTOGRAM</code>).</p>
    /// <p>Import token is not required for TR-31, root public key cerificate or trusted public key certificate.</p>
    pub fn get_key_material_type(&self) -> &::std::option::Option<crate::types::KeyMaterialType> {
        &self.key_material_type
    }
    /// <p>The wrapping key algorithm to generate a wrapping key certificate. This certificate wraps the key under import.</p>
    /// <p>At this time, <code>RSA_2048</code> is the allowed algorithm for TR-34 WrappedKeyBlock import. Additionally, <code>RSA_2048</code>, <code>RSA_3072</code>, <code>RSA_4096</code> are the allowed algorithms for RSA WrappedKeyCryptogram import.</p>
    /// This field is required.
    pub fn wrapping_key_algorithm(mut self, input: crate::types::KeyAlgorithm) -> Self {
        self.wrapping_key_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The wrapping key algorithm to generate a wrapping key certificate. This certificate wraps the key under import.</p>
    /// <p>At this time, <code>RSA_2048</code> is the allowed algorithm for TR-34 WrappedKeyBlock import. Additionally, <code>RSA_2048</code>, <code>RSA_3072</code>, <code>RSA_4096</code> are the allowed algorithms for RSA WrappedKeyCryptogram import.</p>
    pub fn set_wrapping_key_algorithm(mut self, input: ::std::option::Option<crate::types::KeyAlgorithm>) -> Self {
        self.wrapping_key_algorithm = input;
        self
    }
    /// <p>The wrapping key algorithm to generate a wrapping key certificate. This certificate wraps the key under import.</p>
    /// <p>At this time, <code>RSA_2048</code> is the allowed algorithm for TR-34 WrappedKeyBlock import. Additionally, <code>RSA_2048</code>, <code>RSA_3072</code>, <code>RSA_4096</code> are the allowed algorithms for RSA WrappedKeyCryptogram import.</p>
    pub fn get_wrapping_key_algorithm(&self) -> &::std::option::Option<crate::types::KeyAlgorithm> {
        &self.wrapping_key_algorithm
    }
    /// Consumes the builder and constructs a [`GetParametersForImportInput`](crate::operation::get_parameters_for_import::GetParametersForImportInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_parameters_for_import::GetParametersForImportInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_parameters_for_import::GetParametersForImportInput {
            key_material_type: self.key_material_type,
            wrapping_key_algorithm: self.wrapping_key_algorithm,
        })
    }
}
