// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameter information for key material import using asymmetric RSA wrap and unwrap key exchange method.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportKeyCryptogram {
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub key_attributes: ::std::option::Option<crate::types::KeyAttributes>,
    /// <p>Specifies whether the key is exportable from the service.</p>
    pub exportable: bool,
    /// <p>The RSA wrapped key cryptogram under import.</p>
    pub wrapped_key_cryptogram: ::std::string::String,
    /// <p>The import token that initiates key import using the asymmetric RSA wrap and unwrap key exchange method into AWS Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.</p>
    pub import_token: ::std::string::String,
    /// <p>The wrapping spec for the wrapped key cryptogram.</p>
    pub wrapping_spec: ::std::option::Option<crate::types::WrappingKeySpec>,
}
impl ImportKeyCryptogram {
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn key_attributes(&self) -> ::std::option::Option<&crate::types::KeyAttributes> {
        self.key_attributes.as_ref()
    }
    /// <p>Specifies whether the key is exportable from the service.</p>
    pub fn exportable(&self) -> bool {
        self.exportable
    }
    /// <p>The RSA wrapped key cryptogram under import.</p>
    pub fn wrapped_key_cryptogram(&self) -> &str {
        use std::ops::Deref;
        self.wrapped_key_cryptogram.deref()
    }
    /// <p>The import token that initiates key import using the asymmetric RSA wrap and unwrap key exchange method into AWS Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.</p>
    pub fn import_token(&self) -> &str {
        use std::ops::Deref;
        self.import_token.deref()
    }
    /// <p>The wrapping spec for the wrapped key cryptogram.</p>
    pub fn wrapping_spec(&self) -> ::std::option::Option<&crate::types::WrappingKeySpec> {
        self.wrapping_spec.as_ref()
    }
}
impl ImportKeyCryptogram {
    /// Creates a new builder-style object to manufacture [`ImportKeyCryptogram`](crate::types::ImportKeyCryptogram).
    pub fn builder() -> crate::types::builders::ImportKeyCryptogramBuilder {
        crate::types::builders::ImportKeyCryptogramBuilder::default()
    }
}

/// A builder for [`ImportKeyCryptogram`](crate::types::ImportKeyCryptogram).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportKeyCryptogramBuilder {
    pub(crate) key_attributes: ::std::option::Option<crate::types::KeyAttributes>,
    pub(crate) exportable: ::std::option::Option<bool>,
    pub(crate) wrapped_key_cryptogram: ::std::option::Option<::std::string::String>,
    pub(crate) import_token: ::std::option::Option<::std::string::String>,
    pub(crate) wrapping_spec: ::std::option::Option<crate::types::WrappingKeySpec>,
}
impl ImportKeyCryptogramBuilder {
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    /// This field is required.
    pub fn key_attributes(mut self, input: crate::types::KeyAttributes) -> Self {
        self.key_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn set_key_attributes(mut self, input: ::std::option::Option<crate::types::KeyAttributes>) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn get_key_attributes(&self) -> &::std::option::Option<crate::types::KeyAttributes> {
        &self.key_attributes
    }
    /// <p>Specifies whether the key is exportable from the service.</p>
    /// This field is required.
    pub fn exportable(mut self, input: bool) -> Self {
        self.exportable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the key is exportable from the service.</p>
    pub fn set_exportable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exportable = input;
        self
    }
    /// <p>Specifies whether the key is exportable from the service.</p>
    pub fn get_exportable(&self) -> &::std::option::Option<bool> {
        &self.exportable
    }
    /// <p>The RSA wrapped key cryptogram under import.</p>
    /// This field is required.
    pub fn wrapped_key_cryptogram(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.wrapped_key_cryptogram = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The RSA wrapped key cryptogram under import.</p>
    pub fn set_wrapped_key_cryptogram(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.wrapped_key_cryptogram = input;
        self
    }
    /// <p>The RSA wrapped key cryptogram under import.</p>
    pub fn get_wrapped_key_cryptogram(&self) -> &::std::option::Option<::std::string::String> {
        &self.wrapped_key_cryptogram
    }
    /// <p>The import token that initiates key import using the asymmetric RSA wrap and unwrap key exchange method into AWS Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.</p>
    /// This field is required.
    pub fn import_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.import_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The import token that initiates key import using the asymmetric RSA wrap and unwrap key exchange method into AWS Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.</p>
    pub fn set_import_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.import_token = input;
        self
    }
    /// <p>The import token that initiates key import using the asymmetric RSA wrap and unwrap key exchange method into AWS Payment Cryptography. It expires after 7 days. You can use the same import token to import multiple keys to the same service account.</p>
    pub fn get_import_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.import_token
    }
    /// <p>The wrapping spec for the wrapped key cryptogram.</p>
    pub fn wrapping_spec(mut self, input: crate::types::WrappingKeySpec) -> Self {
        self.wrapping_spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>The wrapping spec for the wrapped key cryptogram.</p>
    pub fn set_wrapping_spec(mut self, input: ::std::option::Option<crate::types::WrappingKeySpec>) -> Self {
        self.wrapping_spec = input;
        self
    }
    /// <p>The wrapping spec for the wrapped key cryptogram.</p>
    pub fn get_wrapping_spec(&self) -> &::std::option::Option<crate::types::WrappingKeySpec> {
        &self.wrapping_spec
    }
    /// Consumes the builder and constructs a [`ImportKeyCryptogram`](crate::types::ImportKeyCryptogram).
    /// This method will fail if any of the following fields are not set:
    /// - [`exportable`](crate::types::builders::ImportKeyCryptogramBuilder::exportable)
    /// - [`wrapped_key_cryptogram`](crate::types::builders::ImportKeyCryptogramBuilder::wrapped_key_cryptogram)
    /// - [`import_token`](crate::types::builders::ImportKeyCryptogramBuilder::import_token)
    pub fn build(self) -> ::std::result::Result<crate::types::ImportKeyCryptogram, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImportKeyCryptogram {
            key_attributes: self.key_attributes,
            exportable: self.exportable.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "exportable",
                    "exportable was not specified but it is required when building ImportKeyCryptogram",
                )
            })?,
            wrapped_key_cryptogram: self.wrapped_key_cryptogram.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "wrapped_key_cryptogram",
                    "wrapped_key_cryptogram was not specified but it is required when building ImportKeyCryptogram",
                )
            })?,
            import_token: self.import_token.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "import_token",
                    "import_token was not specified but it is required when building ImportKeyCryptogram",
                )
            })?,
            wrapping_spec: self.wrapping_spec,
        })
    }
}
