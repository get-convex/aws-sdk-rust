// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The attributes for IPEK generation during export.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportAttributes {
    /// <p>Parameter information for IPEK export.</p>
    pub export_dukpt_initial_key: ::std::option::Option<crate::types::ExportDukptInitialKey>,
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. Specify KCV for IPEK export only.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub key_check_value_algorithm: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>,
}
impl ExportAttributes {
    /// <p>Parameter information for IPEK export.</p>
    pub fn export_dukpt_initial_key(&self) -> ::std::option::Option<&crate::types::ExportDukptInitialKey> {
        self.export_dukpt_initial_key.as_ref()
    }
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. Specify KCV for IPEK export only.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn key_check_value_algorithm(&self) -> ::std::option::Option<&crate::types::KeyCheckValueAlgorithm> {
        self.key_check_value_algorithm.as_ref()
    }
}
impl ExportAttributes {
    /// Creates a new builder-style object to manufacture [`ExportAttributes`](crate::types::ExportAttributes).
    pub fn builder() -> crate::types::builders::ExportAttributesBuilder {
        crate::types::builders::ExportAttributesBuilder::default()
    }
}

/// A builder for [`ExportAttributes`](crate::types::ExportAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportAttributesBuilder {
    pub(crate) export_dukpt_initial_key: ::std::option::Option<crate::types::ExportDukptInitialKey>,
    pub(crate) key_check_value_algorithm: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>,
}
impl ExportAttributesBuilder {
    /// <p>Parameter information for IPEK export.</p>
    pub fn export_dukpt_initial_key(mut self, input: crate::types::ExportDukptInitialKey) -> Self {
        self.export_dukpt_initial_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parameter information for IPEK export.</p>
    pub fn set_export_dukpt_initial_key(mut self, input: ::std::option::Option<crate::types::ExportDukptInitialKey>) -> Self {
        self.export_dukpt_initial_key = input;
        self
    }
    /// <p>Parameter information for IPEK export.</p>
    pub fn get_export_dukpt_initial_key(&self) -> &::std::option::Option<crate::types::ExportDukptInitialKey> {
        &self.export_dukpt_initial_key
    }
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. Specify KCV for IPEK export only.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn key_check_value_algorithm(mut self, input: crate::types::KeyCheckValueAlgorithm) -> Self {
        self.key_check_value_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. Specify KCV for IPEK export only.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn set_key_check_value_algorithm(mut self, input: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>) -> Self {
        self.key_check_value_algorithm = input;
        self
    }
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity. Specify KCV for IPEK export only.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn get_key_check_value_algorithm(&self) -> &::std::option::Option<crate::types::KeyCheckValueAlgorithm> {
        &self.key_check_value_algorithm
    }
    /// Consumes the builder and constructs a [`ExportAttributes`](crate::types::ExportAttributes).
    pub fn build(self) -> crate::types::ExportAttributes {
        crate::types::ExportAttributes {
            export_dukpt_initial_key: self.export_dukpt_initial_key,
            key_check_value_algorithm: self.key_check_value_algorithm,
        }
    }
}
