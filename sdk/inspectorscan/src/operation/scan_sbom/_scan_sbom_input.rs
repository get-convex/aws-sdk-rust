// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScanSbomInput {
    /// <p>The JSON file for the SBOM you want to scan. The SBOM must be in CycloneDX 1.5 format.</p>
    pub sbom: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>The output format for the vulnerability report.</p>
    pub output_format: ::std::option::Option<crate::types::OutputFormat>,
}
impl ScanSbomInput {
    /// <p>The JSON file for the SBOM you want to scan. The SBOM must be in CycloneDX 1.5 format.</p>
    pub fn sbom(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.sbom.as_ref()
    }
    /// <p>The output format for the vulnerability report.</p>
    pub fn output_format(&self) -> ::std::option::Option<&crate::types::OutputFormat> {
        self.output_format.as_ref()
    }
}
impl ScanSbomInput {
    /// Creates a new builder-style object to manufacture [`ScanSbomInput`](crate::operation::scan_sbom::ScanSbomInput).
    pub fn builder() -> crate::operation::scan_sbom::builders::ScanSbomInputBuilder {
        crate::operation::scan_sbom::builders::ScanSbomInputBuilder::default()
    }
}

/// A builder for [`ScanSbomInput`](crate::operation::scan_sbom::ScanSbomInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScanSbomInputBuilder {
    pub(crate) sbom: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) output_format: ::std::option::Option<crate::types::OutputFormat>,
}
impl ScanSbomInputBuilder {
    /// <p>The JSON file for the SBOM you want to scan. The SBOM must be in CycloneDX 1.5 format.</p>
    /// This field is required.
    pub fn sbom(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.sbom = ::std::option::Option::Some(input);
        self
    }
    /// <p>The JSON file for the SBOM you want to scan. The SBOM must be in CycloneDX 1.5 format.</p>
    pub fn set_sbom(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.sbom = input;
        self
    }
    /// <p>The JSON file for the SBOM you want to scan. The SBOM must be in CycloneDX 1.5 format.</p>
    pub fn get_sbom(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.sbom
    }
    /// <p>The output format for the vulnerability report.</p>
    pub fn output_format(mut self, input: crate::types::OutputFormat) -> Self {
        self.output_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output format for the vulnerability report.</p>
    pub fn set_output_format(mut self, input: ::std::option::Option<crate::types::OutputFormat>) -> Self {
        self.output_format = input;
        self
    }
    /// <p>The output format for the vulnerability report.</p>
    pub fn get_output_format(&self) -> &::std::option::Option<crate::types::OutputFormat> {
        &self.output_format
    }
    /// Consumes the builder and constructs a [`ScanSbomInput`](crate::operation::scan_sbom::ScanSbomInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::scan_sbom::ScanSbomInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::scan_sbom::ScanSbomInput {
            sbom: self.sbom,
            output_format: self.output_format,
        })
    }
}
