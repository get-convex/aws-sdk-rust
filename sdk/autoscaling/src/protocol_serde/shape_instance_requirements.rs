// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_instance_requirements(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::InstanceRequirements,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("VCpuCount");
    if let Some(var_2) = &input.v_cpu_count {
        crate::protocol_serde::shape_v_cpu_count_request::ser_v_cpu_count_request(scope_1, var_2)?;
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("MemoryMiB");
    if let Some(var_4) = &input.memory_mib {
        crate::protocol_serde::shape_memory_mib_request::ser_memory_mib_request(scope_3, var_4)?;
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("CpuManufacturers");
    if let Some(var_6) = &input.cpu_manufacturers {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            entry_9.string(item_7.as_str());
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_11) = &input.memory_gib_per_v_cpu {
        crate::protocol_serde::shape_memory_gib_per_v_cpu_request::ser_memory_gib_per_v_cpu_request(scope_10, var_11)?;
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("ExcludedInstanceTypes");
    if let Some(var_13) = &input.excluded_instance_types {
        let mut list_15 = scope_12.start_list(false, None);
        for item_14 in var_13 {
            #[allow(unused_mut)]
            let mut entry_16 = list_15.entry();
            entry_16.string(item_14);
        }
        list_15.finish();
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("InstanceGenerations");
    if let Some(var_18) = &input.instance_generations {
        let mut list_20 = scope_17.start_list(false, None);
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19.as_str());
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_23) = &input.spot_max_price_percentage_over_lowest_price {
        scope_22.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("MaxSpotPriceAsPercentageOfOptimalOnDemandPrice");
    if let Some(var_25) = &input.max_spot_price_as_percentage_of_optimal_on_demand_price {
        scope_24.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_27) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_26.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_27).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("BareMetal");
    if let Some(var_29) = &input.bare_metal {
        scope_28.string(var_29.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("BurstablePerformance");
    if let Some(var_31) = &input.burstable_performance {
        scope_30.string(var_31.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("RequireHibernateSupport");
    if let Some(var_33) = &input.require_hibernate_support {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_35) = &input.network_interface_count {
        crate::protocol_serde::shape_network_interface_count_request::ser_network_interface_count_request(scope_34, var_35)?;
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("LocalStorage");
    if let Some(var_37) = &input.local_storage {
        scope_36.string(var_37.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("LocalStorageTypes");
    if let Some(var_39) = &input.local_storage_types {
        let mut list_41 = scope_38.start_list(false, None);
        for item_40 in var_39 {
            #[allow(unused_mut)]
            let mut entry_42 = list_41.entry();
            entry_42.string(item_40.as_str());
        }
        list_41.finish();
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_44) = &input.total_local_storage_gb {
        crate::protocol_serde::shape_total_local_storage_gb_request::ser_total_local_storage_gb_request(scope_43, var_44)?;
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_46) = &input.baseline_ebs_bandwidth_mbps {
        crate::protocol_serde::shape_baseline_ebs_bandwidth_mbps_request::ser_baseline_ebs_bandwidth_mbps_request(scope_45, var_46)?;
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("AcceleratorTypes");
    if let Some(var_48) = &input.accelerator_types {
        let mut list_50 = scope_47.start_list(false, None);
        for item_49 in var_48 {
            #[allow(unused_mut)]
            let mut entry_51 = list_50.entry();
            entry_51.string(item_49.as_str());
        }
        list_50.finish();
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("AcceleratorCount");
    if let Some(var_53) = &input.accelerator_count {
        crate::protocol_serde::shape_accelerator_count_request::ser_accelerator_count_request(scope_52, var_53)?;
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("AcceleratorManufacturers");
    if let Some(var_55) = &input.accelerator_manufacturers {
        let mut list_57 = scope_54.start_list(false, None);
        for item_56 in var_55 {
            #[allow(unused_mut)]
            let mut entry_58 = list_57.entry();
            entry_58.string(item_56.as_str());
        }
        list_57.finish();
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("AcceleratorNames");
    if let Some(var_60) = &input.accelerator_names {
        let mut list_62 = scope_59.start_list(false, None);
        for item_61 in var_60 {
            #[allow(unused_mut)]
            let mut entry_63 = list_62.entry();
            entry_63.string(item_61.as_str());
        }
        list_62.finish();
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_65) = &input.accelerator_total_memory_mib {
        crate::protocol_serde::shape_accelerator_total_memory_mib_request::ser_accelerator_total_memory_mib_request(scope_64, var_65)?;
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("NetworkBandwidthGbps");
    if let Some(var_67) = &input.network_bandwidth_gbps {
        crate::protocol_serde::shape_network_bandwidth_gbps_request::ser_network_bandwidth_gbps_request(scope_66, var_67)?;
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AllowedInstanceTypes");
    if let Some(var_69) = &input.allowed_instance_types {
        let mut list_71 = scope_68.start_list(false, None);
        for item_70 in var_69 {
            #[allow(unused_mut)]
            let mut entry_72 = list_71.entry();
            entry_72.string(item_70);
        }
        list_71.finish();
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_instance_requirements(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::InstanceRequirements, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::InstanceRequirements::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("VCpuCount") /* VCpuCount com.amazonaws.autoscaling#InstanceRequirements$VCpuCount */ =>  {
                let var_73 =
                    Some(
                        crate::protocol_serde::shape_v_cpu_count_request::de_v_cpu_count_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_v_cpu_count(var_73);
            }
            ,
            s if s.matches("MemoryMiB") /* MemoryMiB com.amazonaws.autoscaling#InstanceRequirements$MemoryMiB */ =>  {
                let var_74 =
                    Some(
                        crate::protocol_serde::shape_memory_mib_request::de_memory_mib_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_memory_mib(var_74);
            }
            ,
            s if s.matches("CpuManufacturers") /* CpuManufacturers com.amazonaws.autoscaling#InstanceRequirements$CpuManufacturers */ =>  {
                let var_75 =
                    Some(
                        crate::protocol_serde::shape_cpu_manufacturers::de_cpu_manufacturers(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cpu_manufacturers(var_75);
            }
            ,
            s if s.matches("MemoryGiBPerVCpu") /* MemoryGiBPerVCpu com.amazonaws.autoscaling#InstanceRequirements$MemoryGiBPerVCpu */ =>  {
                let var_76 =
                    Some(
                        crate::protocol_serde::shape_memory_gib_per_v_cpu_request::de_memory_gib_per_v_cpu_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_memory_gib_per_v_cpu(var_76);
            }
            ,
            s if s.matches("ExcludedInstanceTypes") /* ExcludedInstanceTypes com.amazonaws.autoscaling#InstanceRequirements$ExcludedInstanceTypes */ =>  {
                let var_77 =
                    Some(
                        crate::protocol_serde::shape_excluded_instance_types::de_excluded_instance_types(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_excluded_instance_types(var_77);
            }
            ,
            s if s.matches("InstanceGenerations") /* InstanceGenerations com.amazonaws.autoscaling#InstanceRequirements$InstanceGenerations */ =>  {
                let var_78 =
                    Some(
                        crate::protocol_serde::shape_instance_generations::de_instance_generations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_generations(var_78);
            }
            ,
            s if s.matches("SpotMaxPricePercentageOverLowestPrice") /* SpotMaxPricePercentageOverLowestPrice com.amazonaws.autoscaling#InstanceRequirements$SpotMaxPricePercentageOverLowestPrice */ =>  {
                let var_79 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#NullablePositiveInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_spot_max_price_percentage_over_lowest_price(var_79);
            }
            ,
            s if s.matches("MaxSpotPriceAsPercentageOfOptimalOnDemandPrice") /* MaxSpotPriceAsPercentageOfOptimalOnDemandPrice com.amazonaws.autoscaling#InstanceRequirements$MaxSpotPriceAsPercentageOfOptimalOnDemandPrice */ =>  {
                let var_80 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#NullablePositiveInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_spot_price_as_percentage_of_optimal_on_demand_price(var_80);
            }
            ,
            s if s.matches("OnDemandMaxPricePercentageOverLowestPrice") /* OnDemandMaxPricePercentageOverLowestPrice com.amazonaws.autoscaling#InstanceRequirements$OnDemandMaxPricePercentageOverLowestPrice */ =>  {
                let var_81 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#NullablePositiveInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_on_demand_max_price_percentage_over_lowest_price(var_81);
            }
            ,
            s if s.matches("BareMetal") /* BareMetal com.amazonaws.autoscaling#InstanceRequirements$BareMetal */ =>  {
                let var_82 =
                    Some(
                        Result::<crate::types::BareMetal, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::BareMetal::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_bare_metal(var_82);
            }
            ,
            s if s.matches("BurstablePerformance") /* BurstablePerformance com.amazonaws.autoscaling#InstanceRequirements$BurstablePerformance */ =>  {
                let var_83 =
                    Some(
                        Result::<crate::types::BurstablePerformance, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::BurstablePerformance::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_burstable_performance(var_83);
            }
            ,
            s if s.matches("RequireHibernateSupport") /* RequireHibernateSupport com.amazonaws.autoscaling#InstanceRequirements$RequireHibernateSupport */ =>  {
                let var_84 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.autoscaling#NullableBoolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_require_hibernate_support(var_84);
            }
            ,
            s if s.matches("NetworkInterfaceCount") /* NetworkInterfaceCount com.amazonaws.autoscaling#InstanceRequirements$NetworkInterfaceCount */ =>  {
                let var_85 =
                    Some(
                        crate::protocol_serde::shape_network_interface_count_request::de_network_interface_count_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interface_count(var_85);
            }
            ,
            s if s.matches("LocalStorage") /* LocalStorage com.amazonaws.autoscaling#InstanceRequirements$LocalStorage */ =>  {
                let var_86 =
                    Some(
                        Result::<crate::types::LocalStorage, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::LocalStorage::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_local_storage(var_86);
            }
            ,
            s if s.matches("LocalStorageTypes") /* LocalStorageTypes com.amazonaws.autoscaling#InstanceRequirements$LocalStorageTypes */ =>  {
                let var_87 =
                    Some(
                        crate::protocol_serde::shape_local_storage_types::de_local_storage_types(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_storage_types(var_87);
            }
            ,
            s if s.matches("TotalLocalStorageGB") /* TotalLocalStorageGB com.amazonaws.autoscaling#InstanceRequirements$TotalLocalStorageGB */ =>  {
                let var_88 =
                    Some(
                        crate::protocol_serde::shape_total_local_storage_gb_request::de_total_local_storage_gb_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_total_local_storage_gb(var_88);
            }
            ,
            s if s.matches("BaselineEbsBandwidthMbps") /* BaselineEbsBandwidthMbps com.amazonaws.autoscaling#InstanceRequirements$BaselineEbsBandwidthMbps */ =>  {
                let var_89 =
                    Some(
                        crate::protocol_serde::shape_baseline_ebs_bandwidth_mbps_request::de_baseline_ebs_bandwidth_mbps_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_baseline_ebs_bandwidth_mbps(var_89);
            }
            ,
            s if s.matches("AcceleratorTypes") /* AcceleratorTypes com.amazonaws.autoscaling#InstanceRequirements$AcceleratorTypes */ =>  {
                let var_90 =
                    Some(
                        crate::protocol_serde::shape_accelerator_types::de_accelerator_types(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_types(var_90);
            }
            ,
            s if s.matches("AcceleratorCount") /* AcceleratorCount com.amazonaws.autoscaling#InstanceRequirements$AcceleratorCount */ =>  {
                let var_91 =
                    Some(
                        crate::protocol_serde::shape_accelerator_count_request::de_accelerator_count_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_count(var_91);
            }
            ,
            s if s.matches("AcceleratorManufacturers") /* AcceleratorManufacturers com.amazonaws.autoscaling#InstanceRequirements$AcceleratorManufacturers */ =>  {
                let var_92 =
                    Some(
                        crate::protocol_serde::shape_accelerator_manufacturers::de_accelerator_manufacturers(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_manufacturers(var_92);
            }
            ,
            s if s.matches("AcceleratorNames") /* AcceleratorNames com.amazonaws.autoscaling#InstanceRequirements$AcceleratorNames */ =>  {
                let var_93 =
                    Some(
                        crate::protocol_serde::shape_accelerator_names::de_accelerator_names(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_names(var_93);
            }
            ,
            s if s.matches("AcceleratorTotalMemoryMiB") /* AcceleratorTotalMemoryMiB com.amazonaws.autoscaling#InstanceRequirements$AcceleratorTotalMemoryMiB */ =>  {
                let var_94 =
                    Some(
                        crate::protocol_serde::shape_accelerator_total_memory_mib_request::de_accelerator_total_memory_mib_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_total_memory_mib(var_94);
            }
            ,
            s if s.matches("NetworkBandwidthGbps") /* NetworkBandwidthGbps com.amazonaws.autoscaling#InstanceRequirements$NetworkBandwidthGbps */ =>  {
                let var_95 =
                    Some(
                        crate::protocol_serde::shape_network_bandwidth_gbps_request::de_network_bandwidth_gbps_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_bandwidth_gbps(var_95);
            }
            ,
            s if s.matches("AllowedInstanceTypes") /* AllowedInstanceTypes com.amazonaws.autoscaling#InstanceRequirements$AllowedInstanceTypes */ =>  {
                let var_96 =
                    Some(
                        crate::protocol_serde::shape_allowed_instance_types::de_allowed_instance_types(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_allowed_instance_types(var_96);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::instance_requirements_correct_errors(builder).build())
}
