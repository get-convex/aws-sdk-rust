// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Amazon Elastic Block Store performance configuration of the current and recommended resource configuration for a recommendation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BlockStoragePerformanceConfiguration {
    /// <p>The number of I/O operations per second.</p>
    pub iops: ::std::option::Option<f64>,
    /// <p>The throughput that the volume supports.</p>
    pub throughput: ::std::option::Option<f64>,
}
impl BlockStoragePerformanceConfiguration {
    /// <p>The number of I/O operations per second.</p>
    pub fn iops(&self) -> ::std::option::Option<f64> {
        self.iops
    }
    /// <p>The throughput that the volume supports.</p>
    pub fn throughput(&self) -> ::std::option::Option<f64> {
        self.throughput
    }
}
impl BlockStoragePerformanceConfiguration {
    /// Creates a new builder-style object to manufacture [`BlockStoragePerformanceConfiguration`](crate::types::BlockStoragePerformanceConfiguration).
    pub fn builder() -> crate::types::builders::BlockStoragePerformanceConfigurationBuilder {
        crate::types::builders::BlockStoragePerformanceConfigurationBuilder::default()
    }
}

/// A builder for [`BlockStoragePerformanceConfiguration`](crate::types::BlockStoragePerformanceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BlockStoragePerformanceConfigurationBuilder {
    pub(crate) iops: ::std::option::Option<f64>,
    pub(crate) throughput: ::std::option::Option<f64>,
}
impl BlockStoragePerformanceConfigurationBuilder {
    /// <p>The number of I/O operations per second.</p>
    pub fn iops(mut self, input: f64) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of I/O operations per second.</p>
    pub fn set_iops(mut self, input: ::std::option::Option<f64>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The number of I/O operations per second.</p>
    pub fn get_iops(&self) -> &::std::option::Option<f64> {
        &self.iops
    }
    /// <p>The throughput that the volume supports.</p>
    pub fn throughput(mut self, input: f64) -> Self {
        self.throughput = ::std::option::Option::Some(input);
        self
    }
    /// <p>The throughput that the volume supports.</p>
    pub fn set_throughput(mut self, input: ::std::option::Option<f64>) -> Self {
        self.throughput = input;
        self
    }
    /// <p>The throughput that the volume supports.</p>
    pub fn get_throughput(&self) -> &::std::option::Option<f64> {
        &self.throughput
    }
    /// Consumes the builder and constructs a [`BlockStoragePerformanceConfiguration`](crate::types::BlockStoragePerformanceConfiguration).
    pub fn build(self) -> crate::types::BlockStoragePerformanceConfiguration {
        crate::types::BlockStoragePerformanceConfiguration {
            iops: self.iops,
            throughput: self.throughput,
        }
    }
}
