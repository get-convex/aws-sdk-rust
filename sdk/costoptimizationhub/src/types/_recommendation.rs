// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a recommendation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Recommendation {
    /// <p>The ID for the recommendation.</p>
    pub recommendation_id: ::std::option::Option<::std::string::String>,
    /// <p>The account that the recommendation is for.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The resource ID for the recommendation.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the recommendation.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current resource type.</p>
    pub current_resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The recommended resource type.</p>
    pub recommended_resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The estimated monthly savings amount for the recommendation.</p>
    pub estimated_monthly_savings: ::std::option::Option<f64>,
    /// <p>The estimated savings percentage relative to the total cost over the cost calculation lookback period.</p>
    pub estimated_savings_percentage: ::std::option::Option<f64>,
    /// <p>The estimated monthly cost for the recommendation.</p>
    pub estimated_monthly_cost: ::std::option::Option<f64>,
    /// <p>The currency code used for the recommendation.</p>
    pub currency_code: ::std::option::Option<::std::string::String>,
    /// <p>The effort required to implement the recommendation.</p>
    pub implementation_effort: ::std::option::Option<::std::string::String>,
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub restart_needed: ::std::option::Option<bool>,
    /// <p>The type of tasks that can be carried out by this action.</p>
    pub action_type: ::std::option::Option<::std::string::String>,
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub rollback_possible: ::std::option::Option<bool>,
    /// <p>Describes the current resource.</p>
    pub current_resource_summary: ::std::option::Option<::std::string::String>,
    /// <p>Describes the recommended resource.</p>
    pub recommended_resource_summary: ::std::option::Option<::std::string::String>,
    /// <p>The time when the recommendation was last generated.</p>
    pub last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The lookback period that's used to generate the recommendation.</p>
    pub recommendation_lookback_period_in_days: ::std::option::Option<i32>,
    /// <p>The source of the recommendation.</p>
    pub source: ::std::option::Option<crate::types::Source>,
    /// <p>A list of tags assigned to the recommendation.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl Recommendation {
    /// <p>The ID for the recommendation.</p>
    pub fn recommendation_id(&self) -> ::std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>The account that the recommendation is for.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The resource ID for the recommendation.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the recommendation.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The current resource type.</p>
    pub fn current_resource_type(&self) -> ::std::option::Option<&str> {
        self.current_resource_type.as_deref()
    }
    /// <p>The recommended resource type.</p>
    pub fn recommended_resource_type(&self) -> ::std::option::Option<&str> {
        self.recommended_resource_type.as_deref()
    }
    /// <p>The estimated monthly savings amount for the recommendation.</p>
    pub fn estimated_monthly_savings(&self) -> ::std::option::Option<f64> {
        self.estimated_monthly_savings
    }
    /// <p>The estimated savings percentage relative to the total cost over the cost calculation lookback period.</p>
    pub fn estimated_savings_percentage(&self) -> ::std::option::Option<f64> {
        self.estimated_savings_percentage
    }
    /// <p>The estimated monthly cost for the recommendation.</p>
    pub fn estimated_monthly_cost(&self) -> ::std::option::Option<f64> {
        self.estimated_monthly_cost
    }
    /// <p>The currency code used for the recommendation.</p>
    pub fn currency_code(&self) -> ::std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>The effort required to implement the recommendation.</p>
    pub fn implementation_effort(&self) -> ::std::option::Option<&str> {
        self.implementation_effort.as_deref()
    }
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub fn restart_needed(&self) -> ::std::option::Option<bool> {
        self.restart_needed
    }
    /// <p>The type of tasks that can be carried out by this action.</p>
    pub fn action_type(&self) -> ::std::option::Option<&str> {
        self.action_type.as_deref()
    }
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub fn rollback_possible(&self) -> ::std::option::Option<bool> {
        self.rollback_possible
    }
    /// <p>Describes the current resource.</p>
    pub fn current_resource_summary(&self) -> ::std::option::Option<&str> {
        self.current_resource_summary.as_deref()
    }
    /// <p>Describes the recommended resource.</p>
    pub fn recommended_resource_summary(&self) -> ::std::option::Option<&str> {
        self.recommended_resource_summary.as_deref()
    }
    /// <p>The time when the recommendation was last generated.</p>
    pub fn last_refresh_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_refresh_timestamp.as_ref()
    }
    /// <p>The lookback period that's used to generate the recommendation.</p>
    pub fn recommendation_lookback_period_in_days(&self) -> ::std::option::Option<i32> {
        self.recommendation_lookback_period_in_days
    }
    /// <p>The source of the recommendation.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::Source> {
        self.source.as_ref()
    }
    /// <p>A list of tags assigned to the recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl Recommendation {
    /// Creates a new builder-style object to manufacture [`Recommendation`](crate::types::Recommendation).
    pub fn builder() -> crate::types::builders::RecommendationBuilder {
        crate::types::builders::RecommendationBuilder::default()
    }
}

/// A builder for [`Recommendation`](crate::types::Recommendation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationBuilder {
    pub(crate) recommendation_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) current_resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) recommended_resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_monthly_savings: ::std::option::Option<f64>,
    pub(crate) estimated_savings_percentage: ::std::option::Option<f64>,
    pub(crate) estimated_monthly_cost: ::std::option::Option<f64>,
    pub(crate) currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) implementation_effort: ::std::option::Option<::std::string::String>,
    pub(crate) restart_needed: ::std::option::Option<bool>,
    pub(crate) action_type: ::std::option::Option<::std::string::String>,
    pub(crate) rollback_possible: ::std::option::Option<bool>,
    pub(crate) current_resource_summary: ::std::option::Option<::std::string::String>,
    pub(crate) recommended_resource_summary: ::std::option::Option<::std::string::String>,
    pub(crate) last_refresh_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) recommendation_lookback_period_in_days: ::std::option::Option<i32>,
    pub(crate) source: ::std::option::Option<crate::types::Source>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RecommendationBuilder {
    /// <p>The ID for the recommendation.</p>
    pub fn recommendation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommendation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the recommendation.</p>
    pub fn set_recommendation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>The ID for the recommendation.</p>
    pub fn get_recommendation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommendation_id
    }
    /// <p>The account that the recommendation is for.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that the recommendation is for.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account that the recommendation is for.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The resource ID for the recommendation.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ID for the recommendation.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The resource ID for the recommendation.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The Amazon Resource Name (ARN) for the recommendation.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the recommendation.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the recommendation.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The current resource type.</p>
    pub fn current_resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current resource type.</p>
    pub fn set_current_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_resource_type = input;
        self
    }
    /// <p>The current resource type.</p>
    pub fn get_current_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_resource_type
    }
    /// <p>The recommended resource type.</p>
    pub fn recommended_resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommended_resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommended resource type.</p>
    pub fn set_recommended_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommended_resource_type = input;
        self
    }
    /// <p>The recommended resource type.</p>
    pub fn get_recommended_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommended_resource_type
    }
    /// <p>The estimated monthly savings amount for the recommendation.</p>
    pub fn estimated_monthly_savings(mut self, input: f64) -> Self {
        self.estimated_monthly_savings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated monthly savings amount for the recommendation.</p>
    pub fn set_estimated_monthly_savings(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_monthly_savings = input;
        self
    }
    /// <p>The estimated monthly savings amount for the recommendation.</p>
    pub fn get_estimated_monthly_savings(&self) -> &::std::option::Option<f64> {
        &self.estimated_monthly_savings
    }
    /// <p>The estimated savings percentage relative to the total cost over the cost calculation lookback period.</p>
    pub fn estimated_savings_percentage(mut self, input: f64) -> Self {
        self.estimated_savings_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated savings percentage relative to the total cost over the cost calculation lookback period.</p>
    pub fn set_estimated_savings_percentage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_savings_percentage = input;
        self
    }
    /// <p>The estimated savings percentage relative to the total cost over the cost calculation lookback period.</p>
    pub fn get_estimated_savings_percentage(&self) -> &::std::option::Option<f64> {
        &self.estimated_savings_percentage
    }
    /// <p>The estimated monthly cost for the recommendation.</p>
    pub fn estimated_monthly_cost(mut self, input: f64) -> Self {
        self.estimated_monthly_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated monthly cost for the recommendation.</p>
    pub fn set_estimated_monthly_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_monthly_cost = input;
        self
    }
    /// <p>The estimated monthly cost for the recommendation.</p>
    pub fn get_estimated_monthly_cost(&self) -> &::std::option::Option<f64> {
        &self.estimated_monthly_cost
    }
    /// <p>The currency code used for the recommendation.</p>
    pub fn currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The currency code used for the recommendation.</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The currency code used for the recommendation.</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency_code
    }
    /// <p>The effort required to implement the recommendation.</p>
    pub fn implementation_effort(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.implementation_effort = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The effort required to implement the recommendation.</p>
    pub fn set_implementation_effort(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.implementation_effort = input;
        self
    }
    /// <p>The effort required to implement the recommendation.</p>
    pub fn get_implementation_effort(&self) -> &::std::option::Option<::std::string::String> {
        &self.implementation_effort
    }
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub fn restart_needed(mut self, input: bool) -> Self {
        self.restart_needed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub fn set_restart_needed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.restart_needed = input;
        self
    }
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub fn get_restart_needed(&self) -> &::std::option::Option<bool> {
        &self.restart_needed
    }
    /// <p>The type of tasks that can be carried out by this action.</p>
    pub fn action_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of tasks that can be carried out by this action.</p>
    pub fn set_action_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>The type of tasks that can be carried out by this action.</p>
    pub fn get_action_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_type
    }
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub fn rollback_possible(mut self, input: bool) -> Self {
        self.rollback_possible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub fn set_rollback_possible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.rollback_possible = input;
        self
    }
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub fn get_rollback_possible(&self) -> &::std::option::Option<bool> {
        &self.rollback_possible
    }
    /// <p>Describes the current resource.</p>
    pub fn current_resource_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_resource_summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the current resource.</p>
    pub fn set_current_resource_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_resource_summary = input;
        self
    }
    /// <p>Describes the current resource.</p>
    pub fn get_current_resource_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_resource_summary
    }
    /// <p>Describes the recommended resource.</p>
    pub fn recommended_resource_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommended_resource_summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the recommended resource.</p>
    pub fn set_recommended_resource_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommended_resource_summary = input;
        self
    }
    /// <p>Describes the recommended resource.</p>
    pub fn get_recommended_resource_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommended_resource_summary
    }
    /// <p>The time when the recommendation was last generated.</p>
    pub fn last_refresh_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_refresh_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the recommendation was last generated.</p>
    pub fn set_last_refresh_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_refresh_timestamp = input;
        self
    }
    /// <p>The time when the recommendation was last generated.</p>
    pub fn get_last_refresh_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_refresh_timestamp
    }
    /// <p>The lookback period that's used to generate the recommendation.</p>
    pub fn recommendation_lookback_period_in_days(mut self, input: i32) -> Self {
        self.recommendation_lookback_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lookback period that's used to generate the recommendation.</p>
    pub fn set_recommendation_lookback_period_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recommendation_lookback_period_in_days = input;
        self
    }
    /// <p>The lookback period that's used to generate the recommendation.</p>
    pub fn get_recommendation_lookback_period_in_days(&self) -> &::std::option::Option<i32> {
        &self.recommendation_lookback_period_in_days
    }
    /// <p>The source of the recommendation.</p>
    pub fn source(mut self, input: crate::types::Source) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the recommendation.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::Source>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the recommendation.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::Source> {
        &self.source
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags assigned to the recommendation.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags assigned to the recommendation.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags assigned to the recommendation.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`Recommendation`](crate::types::Recommendation).
    pub fn build(self) -> crate::types::Recommendation {
        crate::types::Recommendation {
            recommendation_id: self.recommendation_id,
            account_id: self.account_id,
            region: self.region,
            resource_id: self.resource_id,
            resource_arn: self.resource_arn,
            current_resource_type: self.current_resource_type,
            recommended_resource_type: self.recommended_resource_type,
            estimated_monthly_savings: self.estimated_monthly_savings,
            estimated_savings_percentage: self.estimated_savings_percentage,
            estimated_monthly_cost: self.estimated_monthly_cost,
            currency_code: self.currency_code,
            implementation_effort: self.implementation_effort,
            restart_needed: self.restart_needed,
            action_type: self.action_type,
            rollback_possible: self.rollback_possible,
            current_resource_summary: self.current_resource_summary,
            recommended_resource_summary: self.recommended_resource_summary,
            last_refresh_timestamp: self.last_refresh_timestamp,
            recommendation_lookback_period_in_days: self.recommendation_lookback_period_in_days,
            source: self.source,
            tags: self.tags,
        }
    }
}
