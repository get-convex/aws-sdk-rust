// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains pricing information about the specified resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourcePricing {
    /// <p>The savings estimate using Amazon Web Services public pricing without incorporating any discounts.</p>
    pub estimated_cost_before_discounts: ::std::option::Option<f64>,
    /// <p>The estimated net unused amortized commitment for the recommendation.</p>
    pub estimated_net_unused_amortized_commitments: ::std::option::Option<f64>,
    /// <p>The estimated discounts for a recommendation.</p>
    pub estimated_discounts: ::std::option::Option<crate::types::EstimatedDiscounts>,
    /// <p>The savings estimate incorporating all discounts with Amazon Web Services, such as Reserved Instances and Savings Plans.</p>
    pub estimated_cost_after_discounts: ::std::option::Option<f64>,
}
impl ResourcePricing {
    /// <p>The savings estimate using Amazon Web Services public pricing without incorporating any discounts.</p>
    pub fn estimated_cost_before_discounts(&self) -> ::std::option::Option<f64> {
        self.estimated_cost_before_discounts
    }
    /// <p>The estimated net unused amortized commitment for the recommendation.</p>
    pub fn estimated_net_unused_amortized_commitments(&self) -> ::std::option::Option<f64> {
        self.estimated_net_unused_amortized_commitments
    }
    /// <p>The estimated discounts for a recommendation.</p>
    pub fn estimated_discounts(&self) -> ::std::option::Option<&crate::types::EstimatedDiscounts> {
        self.estimated_discounts.as_ref()
    }
    /// <p>The savings estimate incorporating all discounts with Amazon Web Services, such as Reserved Instances and Savings Plans.</p>
    pub fn estimated_cost_after_discounts(&self) -> ::std::option::Option<f64> {
        self.estimated_cost_after_discounts
    }
}
impl ResourcePricing {
    /// Creates a new builder-style object to manufacture [`ResourcePricing`](crate::types::ResourcePricing).
    pub fn builder() -> crate::types::builders::ResourcePricingBuilder {
        crate::types::builders::ResourcePricingBuilder::default()
    }
}

/// A builder for [`ResourcePricing`](crate::types::ResourcePricing).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourcePricingBuilder {
    pub(crate) estimated_cost_before_discounts: ::std::option::Option<f64>,
    pub(crate) estimated_net_unused_amortized_commitments: ::std::option::Option<f64>,
    pub(crate) estimated_discounts: ::std::option::Option<crate::types::EstimatedDiscounts>,
    pub(crate) estimated_cost_after_discounts: ::std::option::Option<f64>,
}
impl ResourcePricingBuilder {
    /// <p>The savings estimate using Amazon Web Services public pricing without incorporating any discounts.</p>
    pub fn estimated_cost_before_discounts(mut self, input: f64) -> Self {
        self.estimated_cost_before_discounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The savings estimate using Amazon Web Services public pricing without incorporating any discounts.</p>
    pub fn set_estimated_cost_before_discounts(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_cost_before_discounts = input;
        self
    }
    /// <p>The savings estimate using Amazon Web Services public pricing without incorporating any discounts.</p>
    pub fn get_estimated_cost_before_discounts(&self) -> &::std::option::Option<f64> {
        &self.estimated_cost_before_discounts
    }
    /// <p>The estimated net unused amortized commitment for the recommendation.</p>
    pub fn estimated_net_unused_amortized_commitments(mut self, input: f64) -> Self {
        self.estimated_net_unused_amortized_commitments = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated net unused amortized commitment for the recommendation.</p>
    pub fn set_estimated_net_unused_amortized_commitments(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_net_unused_amortized_commitments = input;
        self
    }
    /// <p>The estimated net unused amortized commitment for the recommendation.</p>
    pub fn get_estimated_net_unused_amortized_commitments(&self) -> &::std::option::Option<f64> {
        &self.estimated_net_unused_amortized_commitments
    }
    /// <p>The estimated discounts for a recommendation.</p>
    pub fn estimated_discounts(mut self, input: crate::types::EstimatedDiscounts) -> Self {
        self.estimated_discounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated discounts for a recommendation.</p>
    pub fn set_estimated_discounts(mut self, input: ::std::option::Option<crate::types::EstimatedDiscounts>) -> Self {
        self.estimated_discounts = input;
        self
    }
    /// <p>The estimated discounts for a recommendation.</p>
    pub fn get_estimated_discounts(&self) -> &::std::option::Option<crate::types::EstimatedDiscounts> {
        &self.estimated_discounts
    }
    /// <p>The savings estimate incorporating all discounts with Amazon Web Services, such as Reserved Instances and Savings Plans.</p>
    pub fn estimated_cost_after_discounts(mut self, input: f64) -> Self {
        self.estimated_cost_after_discounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The savings estimate incorporating all discounts with Amazon Web Services, such as Reserved Instances and Savings Plans.</p>
    pub fn set_estimated_cost_after_discounts(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_cost_after_discounts = input;
        self
    }
    /// <p>The savings estimate incorporating all discounts with Amazon Web Services, such as Reserved Instances and Savings Plans.</p>
    pub fn get_estimated_cost_after_discounts(&self) -> &::std::option::Option<f64> {
        &self.estimated_cost_after_discounts
    }
    /// Consumes the builder and constructs a [`ResourcePricing`](crate::types::ResourcePricing).
    pub fn build(self) -> crate::types::ResourcePricing {
        crate::types::ResourcePricing {
            estimated_cost_before_discounts: self.estimated_cost_before_discounts,
            estimated_net_unused_amortized_commitments: self.estimated_net_unused_amortized_commitments,
            estimated_discounts: self.estimated_discounts,
            estimated_cost_after_discounts: self.estimated_cost_after_discounts,
        }
    }
}
