// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a filter that returns a more specific list of recommendations. Filters recommendations by different dimensions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Filter {
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub restart_needed: ::std::option::Option<bool>,
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub rollback_possible: ::std::option::Option<bool>,
    /// <p>The effort required to implement the recommendation.</p>
    pub implementation_efforts: ::std::option::Option<::std::vec::Vec<crate::types::ImplementationEffort>>,
    /// <p>The account that the recommendation is for.</p>
    pub account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The resource type of the recommendation.</p>
    pub resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
    /// <p>The type of action you can take by adopting the recommendation.</p>
    pub action_types: ::std::option::Option<::std::vec::Vec<crate::types::ActionType>>,
    /// <p>A list of tags assigned to the recommendation.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The resource ID of the recommendation.</p>
    pub resource_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the recommendation.</p>
    pub resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IDs for the recommendations.</p>
    pub recommendation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Filter {
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub fn restart_needed(&self) -> ::std::option::Option<bool> {
        self.restart_needed
    }
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub fn rollback_possible(&self) -> ::std::option::Option<bool> {
        self.rollback_possible
    }
    /// <p>The effort required to implement the recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.implementation_efforts.is_none()`.
    pub fn implementation_efforts(&self) -> &[crate::types::ImplementationEffort] {
        self.implementation_efforts.as_deref().unwrap_or_default()
    }
    /// <p>The account that the recommendation is for.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_ids.is_none()`.
    pub fn account_ids(&self) -> &[::std::string::String] {
        self.account_ids.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Web Services Region of the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.regions.is_none()`.
    pub fn regions(&self) -> &[::std::string::String] {
        self.regions.as_deref().unwrap_or_default()
    }
    /// <p>The resource type of the recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_types.is_none()`.
    pub fn resource_types(&self) -> &[crate::types::ResourceType] {
        self.resource_types.as_deref().unwrap_or_default()
    }
    /// <p>The type of action you can take by adopting the recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action_types.is_none()`.
    pub fn action_types(&self) -> &[crate::types::ActionType] {
        self.action_types.as_deref().unwrap_or_default()
    }
    /// <p>A list of tags assigned to the recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The resource ID of the recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_ids.is_none()`.
    pub fn resource_ids(&self) -> &[::std::string::String] {
        self.resource_ids.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_arns.is_none()`.
    pub fn resource_arns(&self) -> &[::std::string::String] {
        self.resource_arns.as_deref().unwrap_or_default()
    }
    /// <p>The IDs for the recommendations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.recommendation_ids.is_none()`.
    pub fn recommendation_ids(&self) -> &[::std::string::String] {
        self.recommendation_ids.as_deref().unwrap_or_default()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterBuilder {
    pub(crate) restart_needed: ::std::option::Option<bool>,
    pub(crate) rollback_possible: ::std::option::Option<bool>,
    pub(crate) implementation_efforts: ::std::option::Option<::std::vec::Vec<crate::types::ImplementationEffort>>,
    pub(crate) account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
    pub(crate) action_types: ::std::option::Option<::std::vec::Vec<crate::types::ActionType>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) resource_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) recommendation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FilterBuilder {
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub fn restart_needed(mut self, input: bool) -> Self {
        self.restart_needed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub fn set_restart_needed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.restart_needed = input;
        self
    }
    /// <p>Whether or not implementing the recommendation requires a restart.</p>
    pub fn get_restart_needed(&self) -> &::std::option::Option<bool> {
        &self.restart_needed
    }
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub fn rollback_possible(mut self, input: bool) -> Self {
        self.rollback_possible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub fn set_rollback_possible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.rollback_possible = input;
        self
    }
    /// <p>Whether or not implementing the recommendation can be rolled back.</p>
    pub fn get_rollback_possible(&self) -> &::std::option::Option<bool> {
        &self.rollback_possible
    }
    /// Appends an item to `implementation_efforts`.
    ///
    /// To override the contents of this collection use [`set_implementation_efforts`](Self::set_implementation_efforts).
    ///
    /// <p>The effort required to implement the recommendation.</p>
    pub fn implementation_efforts(mut self, input: crate::types::ImplementationEffort) -> Self {
        let mut v = self.implementation_efforts.unwrap_or_default();
        v.push(input);
        self.implementation_efforts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The effort required to implement the recommendation.</p>
    pub fn set_implementation_efforts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImplementationEffort>>) -> Self {
        self.implementation_efforts = input;
        self
    }
    /// <p>The effort required to implement the recommendation.</p>
    pub fn get_implementation_efforts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImplementationEffort>> {
        &self.implementation_efforts
    }
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The account that the recommendation is for.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The account that the recommendation is for.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_ids = input;
        self
    }
    /// <p>The account that the recommendation is for.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_ids
    }
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub fn regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input.into());
        self.regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub fn set_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.regions = input;
        self
    }
    /// <p>The Amazon Web Services Region of the resource.</p>
    pub fn get_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.regions
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>The resource type of the recommendation.</p>
    pub fn resource_types(mut self, input: crate::types::ResourceType) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input);
        self.resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resource type of the recommendation.</p>
    pub fn set_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>) -> Self {
        self.resource_types = input;
        self
    }
    /// <p>The resource type of the recommendation.</p>
    pub fn get_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceType>> {
        &self.resource_types
    }
    /// Appends an item to `action_types`.
    ///
    /// To override the contents of this collection use [`set_action_types`](Self::set_action_types).
    ///
    /// <p>The type of action you can take by adopting the recommendation.</p>
    pub fn action_types(mut self, input: crate::types::ActionType) -> Self {
        let mut v = self.action_types.unwrap_or_default();
        v.push(input);
        self.action_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of action you can take by adopting the recommendation.</p>
    pub fn set_action_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionType>>) -> Self {
        self.action_types = input;
        self
    }
    /// <p>The type of action you can take by adopting the recommendation.</p>
    pub fn get_action_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionType>> {
        &self.action_types
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags assigned to the recommendation.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags assigned to the recommendation.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags assigned to the recommendation.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Appends an item to `resource_ids`.
    ///
    /// To override the contents of this collection use [`set_resource_ids`](Self::set_resource_ids).
    ///
    /// <p>The resource ID of the recommendation.</p>
    pub fn resource_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_ids.unwrap_or_default();
        v.push(input.into());
        self.resource_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resource ID of the recommendation.</p>
    pub fn set_resource_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource_ids = input;
        self
    }
    /// <p>The resource ID of the recommendation.</p>
    pub fn get_resource_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource_ids
    }
    /// Appends an item to `resource_arns`.
    ///
    /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
    ///
    /// <p>The Amazon Resource Name (ARN) of the recommendation.</p>
    pub fn resource_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_arns.unwrap_or_default();
        v.push(input.into());
        self.resource_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recommendation.</p>
    pub fn set_resource_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource_arns = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recommendation.</p>
    pub fn get_resource_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource_arns
    }
    /// Appends an item to `recommendation_ids`.
    ///
    /// To override the contents of this collection use [`set_recommendation_ids`](Self::set_recommendation_ids).
    ///
    /// <p>The IDs for the recommendations.</p>
    pub fn recommendation_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.recommendation_ids.unwrap_or_default();
        v.push(input.into());
        self.recommendation_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs for the recommendations.</p>
    pub fn set_recommendation_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.recommendation_ids = input;
        self
    }
    /// <p>The IDs for the recommendations.</p>
    pub fn get_recommendation_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.recommendation_ids
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    pub fn build(self) -> crate::types::Filter {
        crate::types::Filter {
            restart_needed: self.restart_needed,
            rollback_possible: self.rollback_possible,
            implementation_efforts: self.implementation_efforts,
            account_ids: self.account_ids,
            regions: self.regions,
            resource_types: self.resource_types,
            action_types: self.action_types,
            tags: self.tags,
            resource_ids: self.resource_ids,
            resource_arns: self.resource_arns,
            recommendation_ids: self.recommendation_ids,
        }
    }
}
