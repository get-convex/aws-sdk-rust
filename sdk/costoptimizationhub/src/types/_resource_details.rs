// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains detailed information about the specified resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ResourceDetails {
    /// <p>The Compute Savings Plans recommendation details.</p>
    ComputeSavingsPlans(crate::types::ComputeSavingsPlans),
    /// <p>The Amazon Elastic Block Store volume recommendation details.</p>
    EbsVolume(crate::types::EbsVolume),
    /// <p>The EC2 Auto Scaling group recommendation details.</p>
    Ec2AutoScalingGroup(crate::types::Ec2AutoScalingGroup),
    /// <p>The EC2 instance recommendation details.</p>
    Ec2Instance(crate::types::Ec2Instance),
    /// <p>The EC2 instance Savings Plans recommendation details.</p>
    Ec2InstanceSavingsPlans(crate::types::Ec2InstanceSavingsPlans),
    /// <p>The EC2 reserved instances recommendation details.</p>
    Ec2ReservedInstances(crate::types::Ec2ReservedInstances),
    /// <p>The ECS service recommendation details.</p>
    EcsService(crate::types::EcsService),
    /// <p>The ElastiCache reserved instances recommendation details.</p>
    ElastiCacheReservedInstances(crate::types::ElastiCacheReservedInstances),
    /// <p>The Lambda function recommendation details.</p>
    LambdaFunction(crate::types::LambdaFunction),
    /// <p>The OpenSearch reserved instances recommendation details.</p>
    OpenSearchReservedInstances(crate::types::OpenSearchReservedInstances),
    /// <p>The RDS reserved instances recommendation details.</p>
    RdsReservedInstances(crate::types::RdsReservedInstances),
    /// <p>The Redshift reserved instances recommendation details.</p>
    RedshiftReservedInstances(crate::types::RedshiftReservedInstances),
    /// <p>The SageMaker Savings Plans recommendation details.</p>
    SageMakerSavingsPlans(crate::types::SageMakerSavingsPlans),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ResourceDetails {
    /// Tries to convert the enum instance into [`ComputeSavingsPlans`](crate::types::ResourceDetails::ComputeSavingsPlans), extracting the inner [`ComputeSavingsPlans`](crate::types::ComputeSavingsPlans).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_compute_savings_plans(&self) -> ::std::result::Result<&crate::types::ComputeSavingsPlans, &Self> {
        if let ResourceDetails::ComputeSavingsPlans(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ComputeSavingsPlans`](crate::types::ResourceDetails::ComputeSavingsPlans).
    pub fn is_compute_savings_plans(&self) -> bool {
        self.as_compute_savings_plans().is_ok()
    }
    /// Tries to convert the enum instance into [`EbsVolume`](crate::types::ResourceDetails::EbsVolume), extracting the inner [`EbsVolume`](crate::types::EbsVolume).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ebs_volume(&self) -> ::std::result::Result<&crate::types::EbsVolume, &Self> {
        if let ResourceDetails::EbsVolume(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EbsVolume`](crate::types::ResourceDetails::EbsVolume).
    pub fn is_ebs_volume(&self) -> bool {
        self.as_ebs_volume().is_ok()
    }
    /// Tries to convert the enum instance into [`Ec2AutoScalingGroup`](crate::types::ResourceDetails::Ec2AutoScalingGroup), extracting the inner [`Ec2AutoScalingGroup`](crate::types::Ec2AutoScalingGroup).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ec2_auto_scaling_group(&self) -> ::std::result::Result<&crate::types::Ec2AutoScalingGroup, &Self> {
        if let ResourceDetails::Ec2AutoScalingGroup(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ec2AutoScalingGroup`](crate::types::ResourceDetails::Ec2AutoScalingGroup).
    pub fn is_ec2_auto_scaling_group(&self) -> bool {
        self.as_ec2_auto_scaling_group().is_ok()
    }
    /// Tries to convert the enum instance into [`Ec2Instance`](crate::types::ResourceDetails::Ec2Instance), extracting the inner [`Ec2Instance`](crate::types::Ec2Instance).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ec2_instance(&self) -> ::std::result::Result<&crate::types::Ec2Instance, &Self> {
        if let ResourceDetails::Ec2Instance(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ec2Instance`](crate::types::ResourceDetails::Ec2Instance).
    pub fn is_ec2_instance(&self) -> bool {
        self.as_ec2_instance().is_ok()
    }
    /// Tries to convert the enum instance into [`Ec2InstanceSavingsPlans`](crate::types::ResourceDetails::Ec2InstanceSavingsPlans), extracting the inner [`Ec2InstanceSavingsPlans`](crate::types::Ec2InstanceSavingsPlans).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ec2_instance_savings_plans(&self) -> ::std::result::Result<&crate::types::Ec2InstanceSavingsPlans, &Self> {
        if let ResourceDetails::Ec2InstanceSavingsPlans(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ec2InstanceSavingsPlans`](crate::types::ResourceDetails::Ec2InstanceSavingsPlans).
    pub fn is_ec2_instance_savings_plans(&self) -> bool {
        self.as_ec2_instance_savings_plans().is_ok()
    }
    /// Tries to convert the enum instance into [`Ec2ReservedInstances`](crate::types::ResourceDetails::Ec2ReservedInstances), extracting the inner [`Ec2ReservedInstances`](crate::types::Ec2ReservedInstances).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ec2_reserved_instances(&self) -> ::std::result::Result<&crate::types::Ec2ReservedInstances, &Self> {
        if let ResourceDetails::Ec2ReservedInstances(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ec2ReservedInstances`](crate::types::ResourceDetails::Ec2ReservedInstances).
    pub fn is_ec2_reserved_instances(&self) -> bool {
        self.as_ec2_reserved_instances().is_ok()
    }
    /// Tries to convert the enum instance into [`EcsService`](crate::types::ResourceDetails::EcsService), extracting the inner [`EcsService`](crate::types::EcsService).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ecs_service(&self) -> ::std::result::Result<&crate::types::EcsService, &Self> {
        if let ResourceDetails::EcsService(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EcsService`](crate::types::ResourceDetails::EcsService).
    pub fn is_ecs_service(&self) -> bool {
        self.as_ecs_service().is_ok()
    }
    /// Tries to convert the enum instance into [`ElastiCacheReservedInstances`](crate::types::ResourceDetails::ElastiCacheReservedInstances), extracting the inner [`ElastiCacheReservedInstances`](crate::types::ElastiCacheReservedInstances).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_elasti_cache_reserved_instances(&self) -> ::std::result::Result<&crate::types::ElastiCacheReservedInstances, &Self> {
        if let ResourceDetails::ElastiCacheReservedInstances(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ElastiCacheReservedInstances`](crate::types::ResourceDetails::ElastiCacheReservedInstances).
    pub fn is_elasti_cache_reserved_instances(&self) -> bool {
        self.as_elasti_cache_reserved_instances().is_ok()
    }
    /// Tries to convert the enum instance into [`LambdaFunction`](crate::types::ResourceDetails::LambdaFunction), extracting the inner [`LambdaFunction`](crate::types::LambdaFunction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_lambda_function(&self) -> ::std::result::Result<&crate::types::LambdaFunction, &Self> {
        if let ResourceDetails::LambdaFunction(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`LambdaFunction`](crate::types::ResourceDetails::LambdaFunction).
    pub fn is_lambda_function(&self) -> bool {
        self.as_lambda_function().is_ok()
    }
    /// Tries to convert the enum instance into [`OpenSearchReservedInstances`](crate::types::ResourceDetails::OpenSearchReservedInstances), extracting the inner [`OpenSearchReservedInstances`](crate::types::OpenSearchReservedInstances).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_open_search_reserved_instances(&self) -> ::std::result::Result<&crate::types::OpenSearchReservedInstances, &Self> {
        if let ResourceDetails::OpenSearchReservedInstances(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OpenSearchReservedInstances`](crate::types::ResourceDetails::OpenSearchReservedInstances).
    pub fn is_open_search_reserved_instances(&self) -> bool {
        self.as_open_search_reserved_instances().is_ok()
    }
    /// Tries to convert the enum instance into [`RdsReservedInstances`](crate::types::ResourceDetails::RdsReservedInstances), extracting the inner [`RdsReservedInstances`](crate::types::RdsReservedInstances).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_rds_reserved_instances(&self) -> ::std::result::Result<&crate::types::RdsReservedInstances, &Self> {
        if let ResourceDetails::RdsReservedInstances(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`RdsReservedInstances`](crate::types::ResourceDetails::RdsReservedInstances).
    pub fn is_rds_reserved_instances(&self) -> bool {
        self.as_rds_reserved_instances().is_ok()
    }
    /// Tries to convert the enum instance into [`RedshiftReservedInstances`](crate::types::ResourceDetails::RedshiftReservedInstances), extracting the inner [`RedshiftReservedInstances`](crate::types::RedshiftReservedInstances).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_redshift_reserved_instances(&self) -> ::std::result::Result<&crate::types::RedshiftReservedInstances, &Self> {
        if let ResourceDetails::RedshiftReservedInstances(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`RedshiftReservedInstances`](crate::types::ResourceDetails::RedshiftReservedInstances).
    pub fn is_redshift_reserved_instances(&self) -> bool {
        self.as_redshift_reserved_instances().is_ok()
    }
    /// Tries to convert the enum instance into [`SageMakerSavingsPlans`](crate::types::ResourceDetails::SageMakerSavingsPlans), extracting the inner [`SageMakerSavingsPlans`](crate::types::SageMakerSavingsPlans).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_sage_maker_savings_plans(&self) -> ::std::result::Result<&crate::types::SageMakerSavingsPlans, &Self> {
        if let ResourceDetails::SageMakerSavingsPlans(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SageMakerSavingsPlans`](crate::types::ResourceDetails::SageMakerSavingsPlans).
    pub fn is_sage_maker_savings_plans(&self) -> bool {
        self.as_sage_maker_savings_plans().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
