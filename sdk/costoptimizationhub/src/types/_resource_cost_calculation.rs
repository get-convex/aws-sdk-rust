// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Cost impact of the resource recommendation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceCostCalculation {
    /// <p>Usage details of the resource recommendation.</p>
    pub usages: ::std::option::Option<::std::vec::Vec<crate::types::Usage>>,
    /// <p>Pricing details of the resource recommendation.</p>
    pub pricing: ::std::option::Option<crate::types::ResourcePricing>,
}
impl ResourceCostCalculation {
    /// <p>Usage details of the resource recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.usages.is_none()`.
    pub fn usages(&self) -> &[crate::types::Usage] {
        self.usages.as_deref().unwrap_or_default()
    }
    /// <p>Pricing details of the resource recommendation.</p>
    pub fn pricing(&self) -> ::std::option::Option<&crate::types::ResourcePricing> {
        self.pricing.as_ref()
    }
}
impl ResourceCostCalculation {
    /// Creates a new builder-style object to manufacture [`ResourceCostCalculation`](crate::types::ResourceCostCalculation).
    pub fn builder() -> crate::types::builders::ResourceCostCalculationBuilder {
        crate::types::builders::ResourceCostCalculationBuilder::default()
    }
}

/// A builder for [`ResourceCostCalculation`](crate::types::ResourceCostCalculation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceCostCalculationBuilder {
    pub(crate) usages: ::std::option::Option<::std::vec::Vec<crate::types::Usage>>,
    pub(crate) pricing: ::std::option::Option<crate::types::ResourcePricing>,
}
impl ResourceCostCalculationBuilder {
    /// Appends an item to `usages`.
    ///
    /// To override the contents of this collection use [`set_usages`](Self::set_usages).
    ///
    /// <p>Usage details of the resource recommendation.</p>
    pub fn usages(mut self, input: crate::types::Usage) -> Self {
        let mut v = self.usages.unwrap_or_default();
        v.push(input);
        self.usages = ::std::option::Option::Some(v);
        self
    }
    /// <p>Usage details of the resource recommendation.</p>
    pub fn set_usages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Usage>>) -> Self {
        self.usages = input;
        self
    }
    /// <p>Usage details of the resource recommendation.</p>
    pub fn get_usages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Usage>> {
        &self.usages
    }
    /// <p>Pricing details of the resource recommendation.</p>
    pub fn pricing(mut self, input: crate::types::ResourcePricing) -> Self {
        self.pricing = ::std::option::Option::Some(input);
        self
    }
    /// <p>Pricing details of the resource recommendation.</p>
    pub fn set_pricing(mut self, input: ::std::option::Option<crate::types::ResourcePricing>) -> Self {
        self.pricing = input;
        self
    }
    /// <p>Pricing details of the resource recommendation.</p>
    pub fn get_pricing(&self) -> &::std::option::Option<crate::types::ResourcePricing> {
        &self.pricing
    }
    /// Consumes the builder and constructs a [`ResourceCostCalculation`](crate::types::ResourceCostCalculation).
    pub fn build(self) -> crate::types::ResourceCostCalculation {
        crate::types::ResourceCostCalculation {
            usages: self.usages,
            pricing: self.pricing,
        }
    }
}
