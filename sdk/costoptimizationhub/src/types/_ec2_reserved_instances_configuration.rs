// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The EC2 reserved instances configuration used for recommendations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2ReservedInstancesConfiguration {
    /// <p>The account scope that you want your recommendations for.</p>
    pub account_scope: ::std::option::Option<::std::string::String>,
    /// <p>The service that you want your recommendations for.</p>
    pub service: ::std::option::Option<::std::string::String>,
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    pub normalized_units_to_purchase: ::std::option::Option<::std::string::String>,
    /// <p>The reserved instances recommendation term in years.</p>
    pub term: ::std::option::Option<::std::string::String>,
    /// <p>The payment option for the commitment.</p>
    pub payment_option: ::std::option::Option<::std::string::String>,
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    pub number_of_instances_to_purchase: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the recommendation is for standard or convertible reservations.</p>
    pub offering_class: ::std::option::Option<::std::string::String>,
    /// <p>The instance family of the recommended reservation.</p>
    pub instance_family: ::std::option::Option<::std::string::String>,
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub reserved_instances_region: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether the recommendation is for a current generation instance.</p>
    pub current_generation: ::std::option::Option<::std::string::String>,
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub platform: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    pub tenancy: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether the recommendation is size flexible.</p>
    pub size_flex_eligible: ::std::option::Option<bool>,
    /// <p>How much purchasing this instance costs you upfront.</p>
    pub upfront_cost: ::std::option::Option<::std::string::String>,
    /// <p>How much purchasing reserved instances costs you on a monthly basis.</p>
    pub monthly_recurring_cost: ::std::option::Option<::std::string::String>,
}
impl Ec2ReservedInstancesConfiguration {
    /// <p>The account scope that you want your recommendations for.</p>
    pub fn account_scope(&self) -> ::std::option::Option<&str> {
        self.account_scope.as_deref()
    }
    /// <p>The service that you want your recommendations for.</p>
    pub fn service(&self) -> ::std::option::Option<&str> {
        self.service.as_deref()
    }
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    pub fn normalized_units_to_purchase(&self) -> ::std::option::Option<&str> {
        self.normalized_units_to_purchase.as_deref()
    }
    /// <p>The reserved instances recommendation term in years.</p>
    pub fn term(&self) -> ::std::option::Option<&str> {
        self.term.as_deref()
    }
    /// <p>The payment option for the commitment.</p>
    pub fn payment_option(&self) -> ::std::option::Option<&str> {
        self.payment_option.as_deref()
    }
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    pub fn number_of_instances_to_purchase(&self) -> ::std::option::Option<&str> {
        self.number_of_instances_to_purchase.as_deref()
    }
    /// <p>Indicates whether the recommendation is for standard or convertible reservations.</p>
    pub fn offering_class(&self) -> ::std::option::Option<&str> {
        self.offering_class.as_deref()
    }
    /// <p>The instance family of the recommended reservation.</p>
    pub fn instance_family(&self) -> ::std::option::Option<&str> {
        self.instance_family.as_deref()
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub fn reserved_instances_region(&self) -> ::std::option::Option<&str> {
        self.reserved_instances_region.as_deref()
    }
    /// <p>Determines whether the recommendation is for a current generation instance.</p>
    pub fn current_generation(&self) -> ::std::option::Option<&str> {
        self.current_generation.as_deref()
    }
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn platform(&self) -> ::std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    pub fn tenancy(&self) -> ::std::option::Option<&str> {
        self.tenancy.as_deref()
    }
    /// <p>Determines whether the recommendation is size flexible.</p>
    pub fn size_flex_eligible(&self) -> ::std::option::Option<bool> {
        self.size_flex_eligible
    }
    /// <p>How much purchasing this instance costs you upfront.</p>
    pub fn upfront_cost(&self) -> ::std::option::Option<&str> {
        self.upfront_cost.as_deref()
    }
    /// <p>How much purchasing reserved instances costs you on a monthly basis.</p>
    pub fn monthly_recurring_cost(&self) -> ::std::option::Option<&str> {
        self.monthly_recurring_cost.as_deref()
    }
}
impl Ec2ReservedInstancesConfiguration {
    /// Creates a new builder-style object to manufacture [`Ec2ReservedInstancesConfiguration`](crate::types::Ec2ReservedInstancesConfiguration).
    pub fn builder() -> crate::types::builders::Ec2ReservedInstancesConfigurationBuilder {
        crate::types::builders::Ec2ReservedInstancesConfigurationBuilder::default()
    }
}

/// A builder for [`Ec2ReservedInstancesConfiguration`](crate::types::Ec2ReservedInstancesConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Ec2ReservedInstancesConfigurationBuilder {
    pub(crate) account_scope: ::std::option::Option<::std::string::String>,
    pub(crate) service: ::std::option::Option<::std::string::String>,
    pub(crate) normalized_units_to_purchase: ::std::option::Option<::std::string::String>,
    pub(crate) term: ::std::option::Option<::std::string::String>,
    pub(crate) payment_option: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_instances_to_purchase: ::std::option::Option<::std::string::String>,
    pub(crate) offering_class: ::std::option::Option<::std::string::String>,
    pub(crate) instance_family: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) reserved_instances_region: ::std::option::Option<::std::string::String>,
    pub(crate) current_generation: ::std::option::Option<::std::string::String>,
    pub(crate) platform: ::std::option::Option<::std::string::String>,
    pub(crate) tenancy: ::std::option::Option<::std::string::String>,
    pub(crate) size_flex_eligible: ::std::option::Option<bool>,
    pub(crate) upfront_cost: ::std::option::Option<::std::string::String>,
    pub(crate) monthly_recurring_cost: ::std::option::Option<::std::string::String>,
}
impl Ec2ReservedInstancesConfigurationBuilder {
    /// <p>The account scope that you want your recommendations for.</p>
    pub fn account_scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account scope that you want your recommendations for.</p>
    pub fn set_account_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_scope = input;
        self
    }
    /// <p>The account scope that you want your recommendations for.</p>
    pub fn get_account_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_scope
    }
    /// <p>The service that you want your recommendations for.</p>
    pub fn service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service that you want your recommendations for.</p>
    pub fn set_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service = input;
        self
    }
    /// <p>The service that you want your recommendations for.</p>
    pub fn get_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.service
    }
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    pub fn normalized_units_to_purchase(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.normalized_units_to_purchase = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    pub fn set_normalized_units_to_purchase(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.normalized_units_to_purchase = input;
        self
    }
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    pub fn get_normalized_units_to_purchase(&self) -> &::std::option::Option<::std::string::String> {
        &self.normalized_units_to_purchase
    }
    /// <p>The reserved instances recommendation term in years.</p>
    pub fn term(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.term = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reserved instances recommendation term in years.</p>
    pub fn set_term(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.term = input;
        self
    }
    /// <p>The reserved instances recommendation term in years.</p>
    pub fn get_term(&self) -> &::std::option::Option<::std::string::String> {
        &self.term
    }
    /// <p>The payment option for the commitment.</p>
    pub fn payment_option(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payment_option = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The payment option for the commitment.</p>
    pub fn set_payment_option(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payment_option = input;
        self
    }
    /// <p>The payment option for the commitment.</p>
    pub fn get_payment_option(&self) -> &::std::option::Option<::std::string::String> {
        &self.payment_option
    }
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    pub fn number_of_instances_to_purchase(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.number_of_instances_to_purchase = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    pub fn set_number_of_instances_to_purchase(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.number_of_instances_to_purchase = input;
        self
    }
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    pub fn get_number_of_instances_to_purchase(&self) -> &::std::option::Option<::std::string::String> {
        &self.number_of_instances_to_purchase
    }
    /// <p>Indicates whether the recommendation is for standard or convertible reservations.</p>
    pub fn offering_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.offering_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates whether the recommendation is for standard or convertible reservations.</p>
    pub fn set_offering_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.offering_class = input;
        self
    }
    /// <p>Indicates whether the recommendation is for standard or convertible reservations.</p>
    pub fn get_offering_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.offering_class
    }
    /// <p>The instance family of the recommended reservation.</p>
    pub fn instance_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance family of the recommended reservation.</p>
    pub fn set_instance_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_family = input;
        self
    }
    /// <p>The instance family of the recommended reservation.</p>
    pub fn get_instance_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_family
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub fn reserved_instances_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reserved_instances_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub fn set_reserved_instances_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reserved_instances_region = input;
        self
    }
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub fn get_reserved_instances_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.reserved_instances_region
    }
    /// <p>Determines whether the recommendation is for a current generation instance.</p>
    pub fn current_generation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_generation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines whether the recommendation is for a current generation instance.</p>
    pub fn set_current_generation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_generation = input;
        self
    }
    /// <p>Determines whether the recommendation is for a current generation instance.</p>
    pub fn get_current_generation(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_generation
    }
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn get_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform
    }
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    pub fn tenancy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenancy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    pub fn set_tenancy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenancy = input;
        self
    }
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    pub fn get_tenancy(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenancy
    }
    /// <p>Determines whether the recommendation is size flexible.</p>
    pub fn size_flex_eligible(mut self, input: bool) -> Self {
        self.size_flex_eligible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the recommendation is size flexible.</p>
    pub fn set_size_flex_eligible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.size_flex_eligible = input;
        self
    }
    /// <p>Determines whether the recommendation is size flexible.</p>
    pub fn get_size_flex_eligible(&self) -> &::std::option::Option<bool> {
        &self.size_flex_eligible
    }
    /// <p>How much purchasing this instance costs you upfront.</p>
    pub fn upfront_cost(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upfront_cost = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>How much purchasing this instance costs you upfront.</p>
    pub fn set_upfront_cost(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upfront_cost = input;
        self
    }
    /// <p>How much purchasing this instance costs you upfront.</p>
    pub fn get_upfront_cost(&self) -> &::std::option::Option<::std::string::String> {
        &self.upfront_cost
    }
    /// <p>How much purchasing reserved instances costs you on a monthly basis.</p>
    pub fn monthly_recurring_cost(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monthly_recurring_cost = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>How much purchasing reserved instances costs you on a monthly basis.</p>
    pub fn set_monthly_recurring_cost(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monthly_recurring_cost = input;
        self
    }
    /// <p>How much purchasing reserved instances costs you on a monthly basis.</p>
    pub fn get_monthly_recurring_cost(&self) -> &::std::option::Option<::std::string::String> {
        &self.monthly_recurring_cost
    }
    /// Consumes the builder and constructs a [`Ec2ReservedInstancesConfiguration`](crate::types::Ec2ReservedInstancesConfiguration).
    pub fn build(self) -> crate::types::Ec2ReservedInstancesConfiguration {
        crate::types::Ec2ReservedInstancesConfiguration {
            account_scope: self.account_scope,
            service: self.service,
            normalized_units_to_purchase: self.normalized_units_to_purchase,
            term: self.term,
            payment_option: self.payment_option,
            number_of_instances_to_purchase: self.number_of_instances_to_purchase,
            offering_class: self.offering_class,
            instance_family: self.instance_family,
            instance_type: self.instance_type,
            reserved_instances_region: self.reserved_instances_region,
            current_generation: self.current_generation,
            platform: self.platform,
            tenancy: self.tenancy,
            size_flex_eligible: self.size_flex_eligible,
            upfront_cost: self.upfront_cost,
            monthly_recurring_cost: self.monthly_recurring_cost,
        }
    }
}
