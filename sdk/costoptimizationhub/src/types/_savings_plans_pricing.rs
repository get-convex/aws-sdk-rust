// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Pricing information about a Savings Plan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SavingsPlansPricing {
    /// <p>The cost of paying for the recommended Savings Plan monthly.</p>
    pub monthly_savings_plans_eligible_cost: ::std::option::Option<f64>,
    /// <p>Estimated monthly commitment for the Savings Plan.</p>
    pub estimated_monthly_commitment: ::std::option::Option<f64>,
    /// <p>Estimated savings as a percentage of your overall costs after buying the Savings Plan.</p>
    pub savings_percentage: ::std::option::Option<f64>,
    /// <p>Estimated On-Demand cost you will pay after buying the Savings Plan.</p>
    pub estimated_on_demand_cost: ::std::option::Option<f64>,
}
impl SavingsPlansPricing {
    /// <p>The cost of paying for the recommended Savings Plan monthly.</p>
    pub fn monthly_savings_plans_eligible_cost(&self) -> ::std::option::Option<f64> {
        self.monthly_savings_plans_eligible_cost
    }
    /// <p>Estimated monthly commitment for the Savings Plan.</p>
    pub fn estimated_monthly_commitment(&self) -> ::std::option::Option<f64> {
        self.estimated_monthly_commitment
    }
    /// <p>Estimated savings as a percentage of your overall costs after buying the Savings Plan.</p>
    pub fn savings_percentage(&self) -> ::std::option::Option<f64> {
        self.savings_percentage
    }
    /// <p>Estimated On-Demand cost you will pay after buying the Savings Plan.</p>
    pub fn estimated_on_demand_cost(&self) -> ::std::option::Option<f64> {
        self.estimated_on_demand_cost
    }
}
impl SavingsPlansPricing {
    /// Creates a new builder-style object to manufacture [`SavingsPlansPricing`](crate::types::SavingsPlansPricing).
    pub fn builder() -> crate::types::builders::SavingsPlansPricingBuilder {
        crate::types::builders::SavingsPlansPricingBuilder::default()
    }
}

/// A builder for [`SavingsPlansPricing`](crate::types::SavingsPlansPricing).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SavingsPlansPricingBuilder {
    pub(crate) monthly_savings_plans_eligible_cost: ::std::option::Option<f64>,
    pub(crate) estimated_monthly_commitment: ::std::option::Option<f64>,
    pub(crate) savings_percentage: ::std::option::Option<f64>,
    pub(crate) estimated_on_demand_cost: ::std::option::Option<f64>,
}
impl SavingsPlansPricingBuilder {
    /// <p>The cost of paying for the recommended Savings Plan monthly.</p>
    pub fn monthly_savings_plans_eligible_cost(mut self, input: f64) -> Self {
        self.monthly_savings_plans_eligible_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cost of paying for the recommended Savings Plan monthly.</p>
    pub fn set_monthly_savings_plans_eligible_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.monthly_savings_plans_eligible_cost = input;
        self
    }
    /// <p>The cost of paying for the recommended Savings Plan monthly.</p>
    pub fn get_monthly_savings_plans_eligible_cost(&self) -> &::std::option::Option<f64> {
        &self.monthly_savings_plans_eligible_cost
    }
    /// <p>Estimated monthly commitment for the Savings Plan.</p>
    pub fn estimated_monthly_commitment(mut self, input: f64) -> Self {
        self.estimated_monthly_commitment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated monthly commitment for the Savings Plan.</p>
    pub fn set_estimated_monthly_commitment(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_monthly_commitment = input;
        self
    }
    /// <p>Estimated monthly commitment for the Savings Plan.</p>
    pub fn get_estimated_monthly_commitment(&self) -> &::std::option::Option<f64> {
        &self.estimated_monthly_commitment
    }
    /// <p>Estimated savings as a percentage of your overall costs after buying the Savings Plan.</p>
    pub fn savings_percentage(mut self, input: f64) -> Self {
        self.savings_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated savings as a percentage of your overall costs after buying the Savings Plan.</p>
    pub fn set_savings_percentage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.savings_percentage = input;
        self
    }
    /// <p>Estimated savings as a percentage of your overall costs after buying the Savings Plan.</p>
    pub fn get_savings_percentage(&self) -> &::std::option::Option<f64> {
        &self.savings_percentage
    }
    /// <p>Estimated On-Demand cost you will pay after buying the Savings Plan.</p>
    pub fn estimated_on_demand_cost(mut self, input: f64) -> Self {
        self.estimated_on_demand_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated On-Demand cost you will pay after buying the Savings Plan.</p>
    pub fn set_estimated_on_demand_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_on_demand_cost = input;
        self
    }
    /// <p>Estimated On-Demand cost you will pay after buying the Savings Plan.</p>
    pub fn get_estimated_on_demand_cost(&self) -> &::std::option::Option<f64> {
        &self.estimated_on_demand_cost
    }
    /// Consumes the builder and constructs a [`SavingsPlansPricing`](crate::types::SavingsPlansPricing).
    pub fn build(self) -> crate::types::SavingsPlansPricing {
        crate::types::SavingsPlansPricing {
            monthly_savings_plans_eligible_cost: self.monthly_savings_plans_eligible_cost,
            estimated_monthly_commitment: self.estimated_monthly_commitment,
            savings_percentage: self.savings_percentage,
            estimated_on_demand_cost: self.estimated_on_demand_cost,
        }
    }
}
