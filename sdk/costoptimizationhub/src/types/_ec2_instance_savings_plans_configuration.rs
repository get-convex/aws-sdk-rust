// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The EC2 instance Savings Plans configuration used for recommendations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2InstanceSavingsPlansConfiguration {
    /// <p>The account scope that you want your recommendations for.</p>
    pub account_scope: ::std::option::Option<::std::string::String>,
    /// <p>The Savings Plans recommendation term in years.</p>
    pub term: ::std::option::Option<::std::string::String>,
    /// <p>The payment option for the commitment.</p>
    pub payment_option: ::std::option::Option<::std::string::String>,
    /// <p>The hourly commitment for the Savings Plans type.</p>
    pub hourly_commitment: ::std::option::Option<::std::string::String>,
    /// <p>The instance family of the recommended Savings Plan.</p>
    pub instance_family: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub savings_plans_region: ::std::option::Option<::std::string::String>,
}
impl Ec2InstanceSavingsPlansConfiguration {
    /// <p>The account scope that you want your recommendations for.</p>
    pub fn account_scope(&self) -> ::std::option::Option<&str> {
        self.account_scope.as_deref()
    }
    /// <p>The Savings Plans recommendation term in years.</p>
    pub fn term(&self) -> ::std::option::Option<&str> {
        self.term.as_deref()
    }
    /// <p>The payment option for the commitment.</p>
    pub fn payment_option(&self) -> ::std::option::Option<&str> {
        self.payment_option.as_deref()
    }
    /// <p>The hourly commitment for the Savings Plans type.</p>
    pub fn hourly_commitment(&self) -> ::std::option::Option<&str> {
        self.hourly_commitment.as_deref()
    }
    /// <p>The instance family of the recommended Savings Plan.</p>
    pub fn instance_family(&self) -> ::std::option::Option<&str> {
        self.instance_family.as_deref()
    }
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub fn savings_plans_region(&self) -> ::std::option::Option<&str> {
        self.savings_plans_region.as_deref()
    }
}
impl Ec2InstanceSavingsPlansConfiguration {
    /// Creates a new builder-style object to manufacture [`Ec2InstanceSavingsPlansConfiguration`](crate::types::Ec2InstanceSavingsPlansConfiguration).
    pub fn builder() -> crate::types::builders::Ec2InstanceSavingsPlansConfigurationBuilder {
        crate::types::builders::Ec2InstanceSavingsPlansConfigurationBuilder::default()
    }
}

/// A builder for [`Ec2InstanceSavingsPlansConfiguration`](crate::types::Ec2InstanceSavingsPlansConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Ec2InstanceSavingsPlansConfigurationBuilder {
    pub(crate) account_scope: ::std::option::Option<::std::string::String>,
    pub(crate) term: ::std::option::Option<::std::string::String>,
    pub(crate) payment_option: ::std::option::Option<::std::string::String>,
    pub(crate) hourly_commitment: ::std::option::Option<::std::string::String>,
    pub(crate) instance_family: ::std::option::Option<::std::string::String>,
    pub(crate) savings_plans_region: ::std::option::Option<::std::string::String>,
}
impl Ec2InstanceSavingsPlansConfigurationBuilder {
    /// <p>The account scope that you want your recommendations for.</p>
    pub fn account_scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account scope that you want your recommendations for.</p>
    pub fn set_account_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_scope = input;
        self
    }
    /// <p>The account scope that you want your recommendations for.</p>
    pub fn get_account_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_scope
    }
    /// <p>The Savings Plans recommendation term in years.</p>
    pub fn term(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.term = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Savings Plans recommendation term in years.</p>
    pub fn set_term(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.term = input;
        self
    }
    /// <p>The Savings Plans recommendation term in years.</p>
    pub fn get_term(&self) -> &::std::option::Option<::std::string::String> {
        &self.term
    }
    /// <p>The payment option for the commitment.</p>
    pub fn payment_option(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payment_option = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The payment option for the commitment.</p>
    pub fn set_payment_option(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payment_option = input;
        self
    }
    /// <p>The payment option for the commitment.</p>
    pub fn get_payment_option(&self) -> &::std::option::Option<::std::string::String> {
        &self.payment_option
    }
    /// <p>The hourly commitment for the Savings Plans type.</p>
    pub fn hourly_commitment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hourly_commitment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hourly commitment for the Savings Plans type.</p>
    pub fn set_hourly_commitment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hourly_commitment = input;
        self
    }
    /// <p>The hourly commitment for the Savings Plans type.</p>
    pub fn get_hourly_commitment(&self) -> &::std::option::Option<::std::string::String> {
        &self.hourly_commitment
    }
    /// <p>The instance family of the recommended Savings Plan.</p>
    pub fn instance_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance family of the recommended Savings Plan.</p>
    pub fn set_instance_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_family = input;
        self
    }
    /// <p>The instance family of the recommended Savings Plan.</p>
    pub fn get_instance_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_family
    }
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub fn savings_plans_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.savings_plans_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub fn set_savings_plans_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.savings_plans_region = input;
        self
    }
    /// <p>The Amazon Web Services Region of the commitment.</p>
    pub fn get_savings_plans_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.savings_plans_region
    }
    /// Consumes the builder and constructs a [`Ec2InstanceSavingsPlansConfiguration`](crate::types::Ec2InstanceSavingsPlansConfiguration).
    pub fn build(self) -> crate::types::Ec2InstanceSavingsPlansConfiguration {
        crate::types::Ec2InstanceSavingsPlansConfiguration {
            account_scope: self.account_scope,
            term: self.term,
            payment_option: self.payment_option,
            hourly_commitment: self.hourly_commitment,
            instance_family: self.instance_family,
            savings_plans_region: self.savings_plans_region,
        }
    }
}
