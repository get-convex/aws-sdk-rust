// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Estimated discount details of the current and recommended resource configuration for a recommendation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EstimatedDiscounts {
    /// <p>Estimated Savings Plans discounts.</p>
    pub savings_plans_discount: ::std::option::Option<f64>,
    /// <p>Estimated reserved instance discounts.</p>
    pub reserved_instances_discount: ::std::option::Option<f64>,
    /// <p>Estimated other discounts include all discounts that are not itemized. Itemized discounts include <code>reservedInstanceDiscount</code> and <code>savingsPlansDiscount</code>.</p>
    pub other_discount: ::std::option::Option<f64>,
}
impl EstimatedDiscounts {
    /// <p>Estimated Savings Plans discounts.</p>
    pub fn savings_plans_discount(&self) -> ::std::option::Option<f64> {
        self.savings_plans_discount
    }
    /// <p>Estimated reserved instance discounts.</p>
    pub fn reserved_instances_discount(&self) -> ::std::option::Option<f64> {
        self.reserved_instances_discount
    }
    /// <p>Estimated other discounts include all discounts that are not itemized. Itemized discounts include <code>reservedInstanceDiscount</code> and <code>savingsPlansDiscount</code>.</p>
    pub fn other_discount(&self) -> ::std::option::Option<f64> {
        self.other_discount
    }
}
impl EstimatedDiscounts {
    /// Creates a new builder-style object to manufacture [`EstimatedDiscounts`](crate::types::EstimatedDiscounts).
    pub fn builder() -> crate::types::builders::EstimatedDiscountsBuilder {
        crate::types::builders::EstimatedDiscountsBuilder::default()
    }
}

/// A builder for [`EstimatedDiscounts`](crate::types::EstimatedDiscounts).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EstimatedDiscountsBuilder {
    pub(crate) savings_plans_discount: ::std::option::Option<f64>,
    pub(crate) reserved_instances_discount: ::std::option::Option<f64>,
    pub(crate) other_discount: ::std::option::Option<f64>,
}
impl EstimatedDiscountsBuilder {
    /// <p>Estimated Savings Plans discounts.</p>
    pub fn savings_plans_discount(mut self, input: f64) -> Self {
        self.savings_plans_discount = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated Savings Plans discounts.</p>
    pub fn set_savings_plans_discount(mut self, input: ::std::option::Option<f64>) -> Self {
        self.savings_plans_discount = input;
        self
    }
    /// <p>Estimated Savings Plans discounts.</p>
    pub fn get_savings_plans_discount(&self) -> &::std::option::Option<f64> {
        &self.savings_plans_discount
    }
    /// <p>Estimated reserved instance discounts.</p>
    pub fn reserved_instances_discount(mut self, input: f64) -> Self {
        self.reserved_instances_discount = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated reserved instance discounts.</p>
    pub fn set_reserved_instances_discount(mut self, input: ::std::option::Option<f64>) -> Self {
        self.reserved_instances_discount = input;
        self
    }
    /// <p>Estimated reserved instance discounts.</p>
    pub fn get_reserved_instances_discount(&self) -> &::std::option::Option<f64> {
        &self.reserved_instances_discount
    }
    /// <p>Estimated other discounts include all discounts that are not itemized. Itemized discounts include <code>reservedInstanceDiscount</code> and <code>savingsPlansDiscount</code>.</p>
    pub fn other_discount(mut self, input: f64) -> Self {
        self.other_discount = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated other discounts include all discounts that are not itemized. Itemized discounts include <code>reservedInstanceDiscount</code> and <code>savingsPlansDiscount</code>.</p>
    pub fn set_other_discount(mut self, input: ::std::option::Option<f64>) -> Self {
        self.other_discount = input;
        self
    }
    /// <p>Estimated other discounts include all discounts that are not itemized. Itemized discounts include <code>reservedInstanceDiscount</code> and <code>savingsPlansDiscount</code>.</p>
    pub fn get_other_discount(&self) -> &::std::option::Option<f64> {
        &self.other_discount
    }
    /// Consumes the builder and constructs a [`EstimatedDiscounts`](crate::types::EstimatedDiscounts).
    pub fn build(self) -> crate::types::EstimatedDiscounts {
        crate::types::EstimatedDiscounts {
            savings_plans_discount: self.savings_plans_discount,
            reserved_instances_discount: self.reserved_instances_discount,
            other_discount: self.other_discount,
        }
    }
}
