// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the performance configuration for compute services such as Amazon EC2, Lambda, and ECS.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeConfiguration {
    /// <p>The number of vCPU cores in the resource.</p>
    pub v_cpu: ::std::option::Option<f64>,
    /// <p>The memory size of the resource.</p>
    pub memory_size_in_mb: ::std::option::Option<i32>,
    /// <p>The architecture of the resource.</p>
    pub architecture: ::std::option::Option<::std::string::String>,
    /// <p>The platform of the resource. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub platform: ::std::option::Option<::std::string::String>,
}
impl ComputeConfiguration {
    /// <p>The number of vCPU cores in the resource.</p>
    pub fn v_cpu(&self) -> ::std::option::Option<f64> {
        self.v_cpu
    }
    /// <p>The memory size of the resource.</p>
    pub fn memory_size_in_mb(&self) -> ::std::option::Option<i32> {
        self.memory_size_in_mb
    }
    /// <p>The architecture of the resource.</p>
    pub fn architecture(&self) -> ::std::option::Option<&str> {
        self.architecture.as_deref()
    }
    /// <p>The platform of the resource. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn platform(&self) -> ::std::option::Option<&str> {
        self.platform.as_deref()
    }
}
impl ComputeConfiguration {
    /// Creates a new builder-style object to manufacture [`ComputeConfiguration`](crate::types::ComputeConfiguration).
    pub fn builder() -> crate::types::builders::ComputeConfigurationBuilder {
        crate::types::builders::ComputeConfigurationBuilder::default()
    }
}

/// A builder for [`ComputeConfiguration`](crate::types::ComputeConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComputeConfigurationBuilder {
    pub(crate) v_cpu: ::std::option::Option<f64>,
    pub(crate) memory_size_in_mb: ::std::option::Option<i32>,
    pub(crate) architecture: ::std::option::Option<::std::string::String>,
    pub(crate) platform: ::std::option::Option<::std::string::String>,
}
impl ComputeConfigurationBuilder {
    /// <p>The number of vCPU cores in the resource.</p>
    pub fn v_cpu(mut self, input: f64) -> Self {
        self.v_cpu = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of vCPU cores in the resource.</p>
    pub fn set_v_cpu(mut self, input: ::std::option::Option<f64>) -> Self {
        self.v_cpu = input;
        self
    }
    /// <p>The number of vCPU cores in the resource.</p>
    pub fn get_v_cpu(&self) -> &::std::option::Option<f64> {
        &self.v_cpu
    }
    /// <p>The memory size of the resource.</p>
    pub fn memory_size_in_mb(mut self, input: i32) -> Self {
        self.memory_size_in_mb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The memory size of the resource.</p>
    pub fn set_memory_size_in_mb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_size_in_mb = input;
        self
    }
    /// <p>The memory size of the resource.</p>
    pub fn get_memory_size_in_mb(&self) -> &::std::option::Option<i32> {
        &self.memory_size_in_mb
    }
    /// <p>The architecture of the resource.</p>
    pub fn architecture(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.architecture = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The architecture of the resource.</p>
    pub fn set_architecture(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.architecture = input;
        self
    }
    /// <p>The architecture of the resource.</p>
    pub fn get_architecture(&self) -> &::std::option::Option<::std::string::String> {
        &self.architecture
    }
    /// <p>The platform of the resource. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform of the resource. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform of the resource. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn get_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform
    }
    /// Consumes the builder and constructs a [`ComputeConfiguration`](crate::types::ComputeConfiguration).
    pub fn build(self) -> crate::types::ComputeConfiguration {
        crate::types::ComputeConfiguration {
            v_cpu: self.v_cpu,
            memory_size_in_mb: self.memory_size_in_mb,
            architecture: self.architecture,
            platform: self.platform,
        }
    }
}
