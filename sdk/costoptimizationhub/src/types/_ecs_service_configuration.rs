// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The ECS service configuration used for recommendations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EcsServiceConfiguration {
    /// <p>Details about the compute configuration.</p>
    pub compute: ::std::option::Option<crate::types::ComputeConfiguration>,
}
impl EcsServiceConfiguration {
    /// <p>Details about the compute configuration.</p>
    pub fn compute(&self) -> ::std::option::Option<&crate::types::ComputeConfiguration> {
        self.compute.as_ref()
    }
}
impl EcsServiceConfiguration {
    /// Creates a new builder-style object to manufacture [`EcsServiceConfiguration`](crate::types::EcsServiceConfiguration).
    pub fn builder() -> crate::types::builders::EcsServiceConfigurationBuilder {
        crate::types::builders::EcsServiceConfigurationBuilder::default()
    }
}

/// A builder for [`EcsServiceConfiguration`](crate::types::EcsServiceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EcsServiceConfigurationBuilder {
    pub(crate) compute: ::std::option::Option<crate::types::ComputeConfiguration>,
}
impl EcsServiceConfigurationBuilder {
    /// <p>Details about the compute configuration.</p>
    pub fn compute(mut self, input: crate::types::ComputeConfiguration) -> Self {
        self.compute = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the compute configuration.</p>
    pub fn set_compute(mut self, input: ::std::option::Option<crate::types::ComputeConfiguration>) -> Self {
        self.compute = input;
        self
    }
    /// <p>Details about the compute configuration.</p>
    pub fn get_compute(&self) -> &::std::option::Option<crate::types::ComputeConfiguration> {
        &self.compute
    }
    /// Consumes the builder and constructs a [`EcsServiceConfiguration`](crate::types::EcsServiceConfiguration).
    pub fn build(self) -> crate::types::EcsServiceConfiguration {
        crate::types::EcsServiceConfiguration { compute: self.compute }
    }
}
