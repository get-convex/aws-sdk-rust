// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Pricing details for your recommended reserved instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReservedInstancesPricing {
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended reserved instance, over the length of the lookback period.</p>
    pub estimated_on_demand_cost: ::std::option::Option<f64>,
    /// <p>The cost of paying for the recommended reserved instance monthly.</p>
    pub monthly_reservation_eligible_cost: ::std::option::Option<f64>,
    /// <p>The savings percentage relative to the total On-Demand costs that are associated with this instance.</p>
    pub savings_percentage: ::std::option::Option<f64>,
    /// <p>The estimated cost of your recurring monthly fees for the recommended reserved instance across the month.</p>
    pub estimated_monthly_amortized_reservation_cost: ::std::option::Option<f64>,
}
impl ReservedInstancesPricing {
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended reserved instance, over the length of the lookback period.</p>
    pub fn estimated_on_demand_cost(&self) -> ::std::option::Option<f64> {
        self.estimated_on_demand_cost
    }
    /// <p>The cost of paying for the recommended reserved instance monthly.</p>
    pub fn monthly_reservation_eligible_cost(&self) -> ::std::option::Option<f64> {
        self.monthly_reservation_eligible_cost
    }
    /// <p>The savings percentage relative to the total On-Demand costs that are associated with this instance.</p>
    pub fn savings_percentage(&self) -> ::std::option::Option<f64> {
        self.savings_percentage
    }
    /// <p>The estimated cost of your recurring monthly fees for the recommended reserved instance across the month.</p>
    pub fn estimated_monthly_amortized_reservation_cost(&self) -> ::std::option::Option<f64> {
        self.estimated_monthly_amortized_reservation_cost
    }
}
impl ReservedInstancesPricing {
    /// Creates a new builder-style object to manufacture [`ReservedInstancesPricing`](crate::types::ReservedInstancesPricing).
    pub fn builder() -> crate::types::builders::ReservedInstancesPricingBuilder {
        crate::types::builders::ReservedInstancesPricingBuilder::default()
    }
}

/// A builder for [`ReservedInstancesPricing`](crate::types::ReservedInstancesPricing).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReservedInstancesPricingBuilder {
    pub(crate) estimated_on_demand_cost: ::std::option::Option<f64>,
    pub(crate) monthly_reservation_eligible_cost: ::std::option::Option<f64>,
    pub(crate) savings_percentage: ::std::option::Option<f64>,
    pub(crate) estimated_monthly_amortized_reservation_cost: ::std::option::Option<f64>,
}
impl ReservedInstancesPricingBuilder {
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended reserved instance, over the length of the lookback period.</p>
    pub fn estimated_on_demand_cost(mut self, input: f64) -> Self {
        self.estimated_on_demand_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended reserved instance, over the length of the lookback period.</p>
    pub fn set_estimated_on_demand_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_on_demand_cost = input;
        self
    }
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended reserved instance, over the length of the lookback period.</p>
    pub fn get_estimated_on_demand_cost(&self) -> &::std::option::Option<f64> {
        &self.estimated_on_demand_cost
    }
    /// <p>The cost of paying for the recommended reserved instance monthly.</p>
    pub fn monthly_reservation_eligible_cost(mut self, input: f64) -> Self {
        self.monthly_reservation_eligible_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cost of paying for the recommended reserved instance monthly.</p>
    pub fn set_monthly_reservation_eligible_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.monthly_reservation_eligible_cost = input;
        self
    }
    /// <p>The cost of paying for the recommended reserved instance monthly.</p>
    pub fn get_monthly_reservation_eligible_cost(&self) -> &::std::option::Option<f64> {
        &self.monthly_reservation_eligible_cost
    }
    /// <p>The savings percentage relative to the total On-Demand costs that are associated with this instance.</p>
    pub fn savings_percentage(mut self, input: f64) -> Self {
        self.savings_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The savings percentage relative to the total On-Demand costs that are associated with this instance.</p>
    pub fn set_savings_percentage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.savings_percentage = input;
        self
    }
    /// <p>The savings percentage relative to the total On-Demand costs that are associated with this instance.</p>
    pub fn get_savings_percentage(&self) -> &::std::option::Option<f64> {
        &self.savings_percentage
    }
    /// <p>The estimated cost of your recurring monthly fees for the recommended reserved instance across the month.</p>
    pub fn estimated_monthly_amortized_reservation_cost(mut self, input: f64) -> Self {
        self.estimated_monthly_amortized_reservation_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated cost of your recurring monthly fees for the recommended reserved instance across the month.</p>
    pub fn set_estimated_monthly_amortized_reservation_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.estimated_monthly_amortized_reservation_cost = input;
        self
    }
    /// <p>The estimated cost of your recurring monthly fees for the recommended reserved instance across the month.</p>
    pub fn get_estimated_monthly_amortized_reservation_cost(&self) -> &::std::option::Option<f64> {
        &self.estimated_monthly_amortized_reservation_cost
    }
    /// Consumes the builder and constructs a [`ReservedInstancesPricing`](crate::types::ReservedInstancesPricing).
    pub fn build(self) -> crate::types::ReservedInstancesPricing {
        crate::types::ReservedInstancesPricing {
            estimated_on_demand_cost: self.estimated_on_demand_cost,
            monthly_reservation_eligible_cost: self.monthly_reservation_eligible_cost,
            savings_percentage: self.savings_percentage,
            estimated_monthly_amortized_reservation_cost: self.estimated_monthly_amortized_reservation_cost,
        }
    }
}
