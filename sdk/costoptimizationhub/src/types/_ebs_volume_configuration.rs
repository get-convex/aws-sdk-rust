// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Elastic Block Store volume configuration used for recommendations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EbsVolumeConfiguration {
    /// <p>The disk storage of the Amazon Elastic Block Store volume.</p>
    pub storage: ::std::option::Option<crate::types::StorageConfiguration>,
    /// <p>The Amazon Elastic Block Store performance configuration.</p>
    pub performance: ::std::option::Option<crate::types::BlockStoragePerformanceConfiguration>,
    /// <p>The Amazon Elastic Block Store attachment state.</p>
    pub attachment_state: ::std::option::Option<::std::string::String>,
}
impl EbsVolumeConfiguration {
    /// <p>The disk storage of the Amazon Elastic Block Store volume.</p>
    pub fn storage(&self) -> ::std::option::Option<&crate::types::StorageConfiguration> {
        self.storage.as_ref()
    }
    /// <p>The Amazon Elastic Block Store performance configuration.</p>
    pub fn performance(&self) -> ::std::option::Option<&crate::types::BlockStoragePerformanceConfiguration> {
        self.performance.as_ref()
    }
    /// <p>The Amazon Elastic Block Store attachment state.</p>
    pub fn attachment_state(&self) -> ::std::option::Option<&str> {
        self.attachment_state.as_deref()
    }
}
impl EbsVolumeConfiguration {
    /// Creates a new builder-style object to manufacture [`EbsVolumeConfiguration`](crate::types::EbsVolumeConfiguration).
    pub fn builder() -> crate::types::builders::EbsVolumeConfigurationBuilder {
        crate::types::builders::EbsVolumeConfigurationBuilder::default()
    }
}

/// A builder for [`EbsVolumeConfiguration`](crate::types::EbsVolumeConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EbsVolumeConfigurationBuilder {
    pub(crate) storage: ::std::option::Option<crate::types::StorageConfiguration>,
    pub(crate) performance: ::std::option::Option<crate::types::BlockStoragePerformanceConfiguration>,
    pub(crate) attachment_state: ::std::option::Option<::std::string::String>,
}
impl EbsVolumeConfigurationBuilder {
    /// <p>The disk storage of the Amazon Elastic Block Store volume.</p>
    pub fn storage(mut self, input: crate::types::StorageConfiguration) -> Self {
        self.storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The disk storage of the Amazon Elastic Block Store volume.</p>
    pub fn set_storage(mut self, input: ::std::option::Option<crate::types::StorageConfiguration>) -> Self {
        self.storage = input;
        self
    }
    /// <p>The disk storage of the Amazon Elastic Block Store volume.</p>
    pub fn get_storage(&self) -> &::std::option::Option<crate::types::StorageConfiguration> {
        &self.storage
    }
    /// <p>The Amazon Elastic Block Store performance configuration.</p>
    pub fn performance(mut self, input: crate::types::BlockStoragePerformanceConfiguration) -> Self {
        self.performance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Elastic Block Store performance configuration.</p>
    pub fn set_performance(mut self, input: ::std::option::Option<crate::types::BlockStoragePerformanceConfiguration>) -> Self {
        self.performance = input;
        self
    }
    /// <p>The Amazon Elastic Block Store performance configuration.</p>
    pub fn get_performance(&self) -> &::std::option::Option<crate::types::BlockStoragePerformanceConfiguration> {
        &self.performance
    }
    /// <p>The Amazon Elastic Block Store attachment state.</p>
    pub fn attachment_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Elastic Block Store attachment state.</p>
    pub fn set_attachment_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_state = input;
        self
    }
    /// <p>The Amazon Elastic Block Store attachment state.</p>
    pub fn get_attachment_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_state
    }
    /// Consumes the builder and constructs a [`EbsVolumeConfiguration`](crate::types::EbsVolumeConfiguration).
    pub fn build(self) -> crate::types::EbsVolumeConfiguration {
        crate::types::EbsVolumeConfiguration {
            storage: self.storage,
            performance: self.performance,
            attachment_state: self.attachment_state,
        }
    }
}
