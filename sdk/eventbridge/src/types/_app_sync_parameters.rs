// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the GraphQL operation to be parsed and executed, if the event target is an AppSync API.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AppSyncParameters {
    /// <p>The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations">Operations</a> in the <i>AppSync User Guide</i>.</p>
    pub graph_ql_operation: ::std::option::Option<::std::string::String>,
}
impl AppSyncParameters {
    /// <p>The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations">Operations</a> in the <i>AppSync User Guide</i>.</p>
    pub fn graph_ql_operation(&self) -> ::std::option::Option<&str> {
        self.graph_ql_operation.as_deref()
    }
}
impl ::std::fmt::Debug for AppSyncParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AppSyncParameters");
        formatter.field("graph_ql_operation", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AppSyncParameters {
    /// Creates a new builder-style object to manufacture [`AppSyncParameters`](crate::types::AppSyncParameters).
    pub fn builder() -> crate::types::builders::AppSyncParametersBuilder {
        crate::types::builders::AppSyncParametersBuilder::default()
    }
}

/// A builder for [`AppSyncParameters`](crate::types::AppSyncParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AppSyncParametersBuilder {
    pub(crate) graph_ql_operation: ::std::option::Option<::std::string::String>,
}
impl AppSyncParametersBuilder {
    /// <p>The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations">Operations</a> in the <i>AppSync User Guide</i>.</p>
    pub fn graph_ql_operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.graph_ql_operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations">Operations</a> in the <i>AppSync User Guide</i>.</p>
    pub fn set_graph_ql_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.graph_ql_operation = input;
        self
    }
    /// <p>The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations">Operations</a> in the <i>AppSync User Guide</i>.</p>
    pub fn get_graph_ql_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.graph_ql_operation
    }
    /// Consumes the builder and constructs a [`AppSyncParameters`](crate::types::AppSyncParameters).
    pub fn build(self) -> crate::types::AppSyncParameters {
        crate::types::AppSyncParameters {
            graph_ql_operation: self.graph_ql_operation,
        }
    }
}
impl ::std::fmt::Debug for AppSyncParametersBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AppSyncParametersBuilder");
        formatter.field("graph_ql_operation", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
