// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides additional detail about why the request failed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvalidRequestDetail {
    /// <p>Reason codes include the following values:</p>
    /// <ul>
    /// <li>
    /// <p>DOCUMENT_SIZE_EXCEEDED - Document size is too large. Check the size of your file and resubmit the request.</p></li>
    /// <li>
    /// <p>UNSUPPORTED_DOC_TYPE - Document type is not supported. Check the file type and resubmit the request.</p></li>
    /// <li>
    /// <p>PAGE_LIMIT_EXCEEDED - Too many pages in the document. Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>TEXTRACT_ACCESS_DENIED - Access denied to Amazon Textract. Verify that your account has permission to use Amazon Textract API operations and resubmit the request.</p></li>
    /// <li>
    /// <p>NOT_TEXTRACT_JSON - Document is not Amazon Textract JSON format. Verify the format and resubmit the request.</p></li>
    /// <li>
    /// <p>MISMATCHED_TOTAL_PAGE_COUNT - Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>INVALID_DOCUMENT - Invalid document. Check the file and resubmit the request.</p></li>
    /// </ul>
    pub reason: ::std::option::Option<crate::types::InvalidRequestDetailReason>,
}
impl InvalidRequestDetail {
    /// <p>Reason codes include the following values:</p>
    /// <ul>
    /// <li>
    /// <p>DOCUMENT_SIZE_EXCEEDED - Document size is too large. Check the size of your file and resubmit the request.</p></li>
    /// <li>
    /// <p>UNSUPPORTED_DOC_TYPE - Document type is not supported. Check the file type and resubmit the request.</p></li>
    /// <li>
    /// <p>PAGE_LIMIT_EXCEEDED - Too many pages in the document. Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>TEXTRACT_ACCESS_DENIED - Access denied to Amazon Textract. Verify that your account has permission to use Amazon Textract API operations and resubmit the request.</p></li>
    /// <li>
    /// <p>NOT_TEXTRACT_JSON - Document is not Amazon Textract JSON format. Verify the format and resubmit the request.</p></li>
    /// <li>
    /// <p>MISMATCHED_TOTAL_PAGE_COUNT - Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>INVALID_DOCUMENT - Invalid document. Check the file and resubmit the request.</p></li>
    /// </ul>
    pub fn reason(&self) -> ::std::option::Option<&crate::types::InvalidRequestDetailReason> {
        self.reason.as_ref()
    }
}
impl InvalidRequestDetail {
    /// Creates a new builder-style object to manufacture [`InvalidRequestDetail`](crate::types::InvalidRequestDetail).
    pub fn builder() -> crate::types::builders::InvalidRequestDetailBuilder {
        crate::types::builders::InvalidRequestDetailBuilder::default()
    }
}

/// A builder for [`InvalidRequestDetail`](crate::types::InvalidRequestDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InvalidRequestDetailBuilder {
    pub(crate) reason: ::std::option::Option<crate::types::InvalidRequestDetailReason>,
}
impl InvalidRequestDetailBuilder {
    /// <p>Reason codes include the following values:</p>
    /// <ul>
    /// <li>
    /// <p>DOCUMENT_SIZE_EXCEEDED - Document size is too large. Check the size of your file and resubmit the request.</p></li>
    /// <li>
    /// <p>UNSUPPORTED_DOC_TYPE - Document type is not supported. Check the file type and resubmit the request.</p></li>
    /// <li>
    /// <p>PAGE_LIMIT_EXCEEDED - Too many pages in the document. Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>TEXTRACT_ACCESS_DENIED - Access denied to Amazon Textract. Verify that your account has permission to use Amazon Textract API operations and resubmit the request.</p></li>
    /// <li>
    /// <p>NOT_TEXTRACT_JSON - Document is not Amazon Textract JSON format. Verify the format and resubmit the request.</p></li>
    /// <li>
    /// <p>MISMATCHED_TOTAL_PAGE_COUNT - Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>INVALID_DOCUMENT - Invalid document. Check the file and resubmit the request.</p></li>
    /// </ul>
    pub fn reason(mut self, input: crate::types::InvalidRequestDetailReason) -> Self {
        self.reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reason codes include the following values:</p>
    /// <ul>
    /// <li>
    /// <p>DOCUMENT_SIZE_EXCEEDED - Document size is too large. Check the size of your file and resubmit the request.</p></li>
    /// <li>
    /// <p>UNSUPPORTED_DOC_TYPE - Document type is not supported. Check the file type and resubmit the request.</p></li>
    /// <li>
    /// <p>PAGE_LIMIT_EXCEEDED - Too many pages in the document. Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>TEXTRACT_ACCESS_DENIED - Access denied to Amazon Textract. Verify that your account has permission to use Amazon Textract API operations and resubmit the request.</p></li>
    /// <li>
    /// <p>NOT_TEXTRACT_JSON - Document is not Amazon Textract JSON format. Verify the format and resubmit the request.</p></li>
    /// <li>
    /// <p>MISMATCHED_TOTAL_PAGE_COUNT - Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>INVALID_DOCUMENT - Invalid document. Check the file and resubmit the request.</p></li>
    /// </ul>
    pub fn set_reason(mut self, input: ::std::option::Option<crate::types::InvalidRequestDetailReason>) -> Self {
        self.reason = input;
        self
    }
    /// <p>Reason codes include the following values:</p>
    /// <ul>
    /// <li>
    /// <p>DOCUMENT_SIZE_EXCEEDED - Document size is too large. Check the size of your file and resubmit the request.</p></li>
    /// <li>
    /// <p>UNSUPPORTED_DOC_TYPE - Document type is not supported. Check the file type and resubmit the request.</p></li>
    /// <li>
    /// <p>PAGE_LIMIT_EXCEEDED - Too many pages in the document. Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>TEXTRACT_ACCESS_DENIED - Access denied to Amazon Textract. Verify that your account has permission to use Amazon Textract API operations and resubmit the request.</p></li>
    /// <li>
    /// <p>NOT_TEXTRACT_JSON - Document is not Amazon Textract JSON format. Verify the format and resubmit the request.</p></li>
    /// <li>
    /// <p>MISMATCHED_TOTAL_PAGE_COUNT - Check the number of pages in your file and resubmit the request.</p></li>
    /// <li>
    /// <p>INVALID_DOCUMENT - Invalid document. Check the file and resubmit the request.</p></li>
    /// </ul>
    pub fn get_reason(&self) -> &::std::option::Option<crate::types::InvalidRequestDetailReason> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`InvalidRequestDetail`](crate::types::InvalidRequestDetail).
    pub fn build(self) -> crate::types::InvalidRequestDetail {
        crate::types::InvalidRequestDetail { reason: self.reason }
    }
}
