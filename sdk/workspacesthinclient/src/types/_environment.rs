// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an environment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Environment {
    /// <p>The ID of the environment.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the environment.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.</p>
    pub desktop_arn: ::std::option::Option<::std::string::String>,
    /// <p>The URL for the identity provider login (only for environments that use AppStream 2.0).</p>
    pub desktop_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The type of streaming desktop for the environment.</p>
    pub desktop_type: ::std::option::Option<crate::types::DesktopType>,
    /// <p>The activation code to register a device to the environment.</p>
    pub activation_code: ::std::option::Option<::std::string::String>,
    /// <p>The number of devices registered to the environment.</p>
    pub registered_devices_count: ::std::option::Option<i32>,
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub software_set_update_schedule: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>,
    /// <p>A specification for a time window to apply software updates.</p>
    pub maintenance_window: ::std::option::Option<crate::types::MaintenanceWindow>,
    /// <p>An option to define which software updates to apply.</p>
    pub software_set_update_mode: ::std::option::Option<crate::types::SoftwareSetUpdateMode>,
    /// <p>The ID of the software set to apply.</p>
    pub desired_software_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the software set that is pending to be installed.</p>
    pub pending_software_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the software set that is pending to be installed.</p>
    pub pending_software_set_version: ::std::option::Option<::std::string::String>,
    /// <p>Describes if the software currently installed on all devices in the environment is a supported version.</p>
    pub software_set_compliance_status: ::std::option::Option<crate::types::EnvironmentSoftwareSetComplianceStatus>,
    /// <p>The timestamp of when the environment was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the device was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key used to encrypt the environment.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tag keys and optional values for the resource.</p>
    pub tags: ::std::option::Option<crate::types::EmbeddedTag>,
}
impl Environment {
    /// <p>The ID of the environment.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the environment.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.</p>
    pub fn desktop_arn(&self) -> ::std::option::Option<&str> {
        self.desktop_arn.as_deref()
    }
    /// <p>The URL for the identity provider login (only for environments that use AppStream 2.0).</p>
    pub fn desktop_endpoint(&self) -> ::std::option::Option<&str> {
        self.desktop_endpoint.as_deref()
    }
    /// <p>The type of streaming desktop for the environment.</p>
    pub fn desktop_type(&self) -> ::std::option::Option<&crate::types::DesktopType> {
        self.desktop_type.as_ref()
    }
    /// <p>The activation code to register a device to the environment.</p>
    pub fn activation_code(&self) -> ::std::option::Option<&str> {
        self.activation_code.as_deref()
    }
    /// <p>The number of devices registered to the environment.</p>
    pub fn registered_devices_count(&self) -> ::std::option::Option<i32> {
        self.registered_devices_count
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn software_set_update_schedule(&self) -> ::std::option::Option<&crate::types::SoftwareSetUpdateSchedule> {
        self.software_set_update_schedule.as_ref()
    }
    /// <p>A specification for a time window to apply software updates.</p>
    pub fn maintenance_window(&self) -> ::std::option::Option<&crate::types::MaintenanceWindow> {
        self.maintenance_window.as_ref()
    }
    /// <p>An option to define which software updates to apply.</p>
    pub fn software_set_update_mode(&self) -> ::std::option::Option<&crate::types::SoftwareSetUpdateMode> {
        self.software_set_update_mode.as_ref()
    }
    /// <p>The ID of the software set to apply.</p>
    pub fn desired_software_set_id(&self) -> ::std::option::Option<&str> {
        self.desired_software_set_id.as_deref()
    }
    /// <p>The ID of the software set that is pending to be installed.</p>
    pub fn pending_software_set_id(&self) -> ::std::option::Option<&str> {
        self.pending_software_set_id.as_deref()
    }
    /// <p>The version of the software set that is pending to be installed.</p>
    pub fn pending_software_set_version(&self) -> ::std::option::Option<&str> {
        self.pending_software_set_version.as_deref()
    }
    /// <p>Describes if the software currently installed on all devices in the environment is a supported version.</p>
    pub fn software_set_compliance_status(&self) -> ::std::option::Option<&crate::types::EnvironmentSoftwareSetComplianceStatus> {
        self.software_set_compliance_status.as_ref()
    }
    /// <p>The timestamp of when the environment was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the device was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key used to encrypt the environment.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The tag keys and optional values for the resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&crate::types::EmbeddedTag> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for Environment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Environment");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("desktop_arn", &self.desktop_arn);
        formatter.field("desktop_endpoint", &"*** Sensitive Data Redacted ***");
        formatter.field("desktop_type", &self.desktop_type);
        formatter.field("activation_code", &self.activation_code);
        formatter.field("registered_devices_count", &self.registered_devices_count);
        formatter.field("software_set_update_schedule", &self.software_set_update_schedule);
        formatter.field("maintenance_window", &self.maintenance_window);
        formatter.field("software_set_update_mode", &self.software_set_update_mode);
        formatter.field("desired_software_set_id", &self.desired_software_set_id);
        formatter.field("pending_software_set_id", &self.pending_software_set_id);
        formatter.field("pending_software_set_version", &self.pending_software_set_version);
        formatter.field("software_set_compliance_status", &self.software_set_compliance_status);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("arn", &self.arn);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Environment {
    /// Creates a new builder-style object to manufacture [`Environment`](crate::types::Environment).
    pub fn builder() -> crate::types::builders::EnvironmentBuilder {
        crate::types::builders::EnvironmentBuilder::default()
    }
}

/// A builder for [`Environment`](crate::types::Environment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EnvironmentBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) desktop_arn: ::std::option::Option<::std::string::String>,
    pub(crate) desktop_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) desktop_type: ::std::option::Option<crate::types::DesktopType>,
    pub(crate) activation_code: ::std::option::Option<::std::string::String>,
    pub(crate) registered_devices_count: ::std::option::Option<i32>,
    pub(crate) software_set_update_schedule: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>,
    pub(crate) maintenance_window: ::std::option::Option<crate::types::MaintenanceWindow>,
    pub(crate) software_set_update_mode: ::std::option::Option<crate::types::SoftwareSetUpdateMode>,
    pub(crate) desired_software_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) pending_software_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) pending_software_set_version: ::std::option::Option<::std::string::String>,
    pub(crate) software_set_compliance_status: ::std::option::Option<crate::types::EnvironmentSoftwareSetComplianceStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<crate::types::EmbeddedTag>,
}
impl EnvironmentBuilder {
    /// <p>The ID of the environment.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the environment.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the environment.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the environment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.</p>
    pub fn desktop_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.desktop_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.</p>
    pub fn set_desktop_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.desktop_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.</p>
    pub fn get_desktop_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.desktop_arn
    }
    /// <p>The URL for the identity provider login (only for environments that use AppStream 2.0).</p>
    pub fn desktop_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.desktop_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL for the identity provider login (only for environments that use AppStream 2.0).</p>
    pub fn set_desktop_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.desktop_endpoint = input;
        self
    }
    /// <p>The URL for the identity provider login (only for environments that use AppStream 2.0).</p>
    pub fn get_desktop_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.desktop_endpoint
    }
    /// <p>The type of streaming desktop for the environment.</p>
    pub fn desktop_type(mut self, input: crate::types::DesktopType) -> Self {
        self.desktop_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of streaming desktop for the environment.</p>
    pub fn set_desktop_type(mut self, input: ::std::option::Option<crate::types::DesktopType>) -> Self {
        self.desktop_type = input;
        self
    }
    /// <p>The type of streaming desktop for the environment.</p>
    pub fn get_desktop_type(&self) -> &::std::option::Option<crate::types::DesktopType> {
        &self.desktop_type
    }
    /// <p>The activation code to register a device to the environment.</p>
    pub fn activation_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.activation_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The activation code to register a device to the environment.</p>
    pub fn set_activation_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.activation_code = input;
        self
    }
    /// <p>The activation code to register a device to the environment.</p>
    pub fn get_activation_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.activation_code
    }
    /// <p>The number of devices registered to the environment.</p>
    pub fn registered_devices_count(mut self, input: i32) -> Self {
        self.registered_devices_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of devices registered to the environment.</p>
    pub fn set_registered_devices_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.registered_devices_count = input;
        self
    }
    /// <p>The number of devices registered to the environment.</p>
    pub fn get_registered_devices_count(&self) -> &::std::option::Option<i32> {
        &self.registered_devices_count
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn software_set_update_schedule(mut self, input: crate::types::SoftwareSetUpdateSchedule) -> Self {
        self.software_set_update_schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn set_software_set_update_schedule(mut self, input: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>) -> Self {
        self.software_set_update_schedule = input;
        self
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn get_software_set_update_schedule(&self) -> &::std::option::Option<crate::types::SoftwareSetUpdateSchedule> {
        &self.software_set_update_schedule
    }
    /// <p>A specification for a time window to apply software updates.</p>
    pub fn maintenance_window(mut self, input: crate::types::MaintenanceWindow) -> Self {
        self.maintenance_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>A specification for a time window to apply software updates.</p>
    pub fn set_maintenance_window(mut self, input: ::std::option::Option<crate::types::MaintenanceWindow>) -> Self {
        self.maintenance_window = input;
        self
    }
    /// <p>A specification for a time window to apply software updates.</p>
    pub fn get_maintenance_window(&self) -> &::std::option::Option<crate::types::MaintenanceWindow> {
        &self.maintenance_window
    }
    /// <p>An option to define which software updates to apply.</p>
    pub fn software_set_update_mode(mut self, input: crate::types::SoftwareSetUpdateMode) -> Self {
        self.software_set_update_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>An option to define which software updates to apply.</p>
    pub fn set_software_set_update_mode(mut self, input: ::std::option::Option<crate::types::SoftwareSetUpdateMode>) -> Self {
        self.software_set_update_mode = input;
        self
    }
    /// <p>An option to define which software updates to apply.</p>
    pub fn get_software_set_update_mode(&self) -> &::std::option::Option<crate::types::SoftwareSetUpdateMode> {
        &self.software_set_update_mode
    }
    /// <p>The ID of the software set to apply.</p>
    pub fn desired_software_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.desired_software_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the software set to apply.</p>
    pub fn set_desired_software_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.desired_software_set_id = input;
        self
    }
    /// <p>The ID of the software set to apply.</p>
    pub fn get_desired_software_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.desired_software_set_id
    }
    /// <p>The ID of the software set that is pending to be installed.</p>
    pub fn pending_software_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pending_software_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the software set that is pending to be installed.</p>
    pub fn set_pending_software_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pending_software_set_id = input;
        self
    }
    /// <p>The ID of the software set that is pending to be installed.</p>
    pub fn get_pending_software_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pending_software_set_id
    }
    /// <p>The version of the software set that is pending to be installed.</p>
    pub fn pending_software_set_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pending_software_set_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the software set that is pending to be installed.</p>
    pub fn set_pending_software_set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pending_software_set_version = input;
        self
    }
    /// <p>The version of the software set that is pending to be installed.</p>
    pub fn get_pending_software_set_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.pending_software_set_version
    }
    /// <p>Describes if the software currently installed on all devices in the environment is a supported version.</p>
    pub fn software_set_compliance_status(mut self, input: crate::types::EnvironmentSoftwareSetComplianceStatus) -> Self {
        self.software_set_compliance_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes if the software currently installed on all devices in the environment is a supported version.</p>
    pub fn set_software_set_compliance_status(mut self, input: ::std::option::Option<crate::types::EnvironmentSoftwareSetComplianceStatus>) -> Self {
        self.software_set_compliance_status = input;
        self
    }
    /// <p>Describes if the software currently installed on all devices in the environment is a supported version.</p>
    pub fn get_software_set_compliance_status(&self) -> &::std::option::Option<crate::types::EnvironmentSoftwareSetComplianceStatus> {
        &self.software_set_compliance_status
    }
    /// <p>The timestamp of when the environment was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the environment was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the environment was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the device was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the device was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the device was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key used to encrypt the environment.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key used to encrypt the environment.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key used to encrypt the environment.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>The tag keys and optional values for the resource.</p>
    pub fn tags(mut self, input: crate::types::EmbeddedTag) -> Self {
        self.tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tag keys and optional values for the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<crate::types::EmbeddedTag>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tag keys and optional values for the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<crate::types::EmbeddedTag> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`Environment`](crate::types::Environment).
    pub fn build(self) -> crate::types::Environment {
        crate::types::Environment {
            id: self.id,
            name: self.name,
            desktop_arn: self.desktop_arn,
            desktop_endpoint: self.desktop_endpoint,
            desktop_type: self.desktop_type,
            activation_code: self.activation_code,
            registered_devices_count: self.registered_devices_count,
            software_set_update_schedule: self.software_set_update_schedule,
            maintenance_window: self.maintenance_window,
            software_set_update_mode: self.software_set_update_mode,
            desired_software_set_id: self.desired_software_set_id,
            pending_software_set_id: self.pending_software_set_id,
            pending_software_set_version: self.pending_software_set_version,
            software_set_compliance_status: self.software_set_compliance_status,
            created_at: self.created_at,
            updated_at: self.updated_at,
            arn: self.arn,
            kms_key_arn: self.kms_key_arn,
            tags: self.tags,
        }
    }
}
impl ::std::fmt::Debug for EnvironmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("desktop_arn", &self.desktop_arn);
        formatter.field("desktop_endpoint", &"*** Sensitive Data Redacted ***");
        formatter.field("desktop_type", &self.desktop_type);
        formatter.field("activation_code", &self.activation_code);
        formatter.field("registered_devices_count", &self.registered_devices_count);
        formatter.field("software_set_update_schedule", &self.software_set_update_schedule);
        formatter.field("maintenance_window", &self.maintenance_window);
        formatter.field("software_set_update_mode", &self.software_set_update_mode);
        formatter.field("desired_software_set_id", &self.desired_software_set_id);
        formatter.field("pending_software_set_id", &self.pending_software_set_id);
        formatter.field("pending_software_set_version", &self.pending_software_set_version);
        formatter.field("software_set_compliance_status", &self.software_set_compliance_status);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("arn", &self.arn);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
