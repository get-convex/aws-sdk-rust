// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the maintenance window for a thin client device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MaintenanceWindow {
    /// <p>An option to select the default or custom maintenance window.</p>
    pub r#type: ::std::option::Option<crate::types::MaintenanceWindowType>,
    /// <p>The hour for the maintenance window start (<code>00</code>-<code>23</code>).</p>
    pub start_time_hour: ::std::option::Option<i32>,
    /// <p>The minutes past the hour for the maintenance window start (<code>00</code>-<code>59</code>).</p>
    pub start_time_minute: ::std::option::Option<i32>,
    /// <p>The hour for the maintenance window end (<code>00</code>-<code>23</code>).</p>
    pub end_time_hour: ::std::option::Option<i32>,
    /// <p>The minutes for the maintenance window end (<code>00</code>-<code>59</code>).</p>
    pub end_time_minute: ::std::option::Option<i32>,
    /// <p>The days of the week during which the maintenance window is open.</p>
    pub days_of_the_week: ::std::option::Option<::std::vec::Vec<crate::types::DayOfWeek>>,
    /// <p>The option to set the maintenance window during the device local time or Universal Coordinated Time (UTC).</p>
    pub apply_time_of: ::std::option::Option<crate::types::ApplyTimeOf>,
}
impl MaintenanceWindow {
    /// <p>An option to select the default or custom maintenance window.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::MaintenanceWindowType> {
        self.r#type.as_ref()
    }
    /// <p>The hour for the maintenance window start (<code>00</code>-<code>23</code>).</p>
    pub fn start_time_hour(&self) -> ::std::option::Option<i32> {
        self.start_time_hour
    }
    /// <p>The minutes past the hour for the maintenance window start (<code>00</code>-<code>59</code>).</p>
    pub fn start_time_minute(&self) -> ::std::option::Option<i32> {
        self.start_time_minute
    }
    /// <p>The hour for the maintenance window end (<code>00</code>-<code>23</code>).</p>
    pub fn end_time_hour(&self) -> ::std::option::Option<i32> {
        self.end_time_hour
    }
    /// <p>The minutes for the maintenance window end (<code>00</code>-<code>59</code>).</p>
    pub fn end_time_minute(&self) -> ::std::option::Option<i32> {
        self.end_time_minute
    }
    /// <p>The days of the week during which the maintenance window is open.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.days_of_the_week.is_none()`.
    pub fn days_of_the_week(&self) -> &[crate::types::DayOfWeek] {
        self.days_of_the_week.as_deref().unwrap_or_default()
    }
    /// <p>The option to set the maintenance window during the device local time or Universal Coordinated Time (UTC).</p>
    pub fn apply_time_of(&self) -> ::std::option::Option<&crate::types::ApplyTimeOf> {
        self.apply_time_of.as_ref()
    }
}
impl MaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`MaintenanceWindow`](crate::types::MaintenanceWindow).
    pub fn builder() -> crate::types::builders::MaintenanceWindowBuilder {
        crate::types::builders::MaintenanceWindowBuilder::default()
    }
}

/// A builder for [`MaintenanceWindow`](crate::types::MaintenanceWindow).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MaintenanceWindowBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::MaintenanceWindowType>,
    pub(crate) start_time_hour: ::std::option::Option<i32>,
    pub(crate) start_time_minute: ::std::option::Option<i32>,
    pub(crate) end_time_hour: ::std::option::Option<i32>,
    pub(crate) end_time_minute: ::std::option::Option<i32>,
    pub(crate) days_of_the_week: ::std::option::Option<::std::vec::Vec<crate::types::DayOfWeek>>,
    pub(crate) apply_time_of: ::std::option::Option<crate::types::ApplyTimeOf>,
}
impl MaintenanceWindowBuilder {
    /// <p>An option to select the default or custom maintenance window.</p>
    pub fn r#type(mut self, input: crate::types::MaintenanceWindowType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>An option to select the default or custom maintenance window.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MaintenanceWindowType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>An option to select the default or custom maintenance window.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MaintenanceWindowType> {
        &self.r#type
    }
    /// <p>The hour for the maintenance window start (<code>00</code>-<code>23</code>).</p>
    pub fn start_time_hour(mut self, input: i32) -> Self {
        self.start_time_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>The hour for the maintenance window start (<code>00</code>-<code>23</code>).</p>
    pub fn set_start_time_hour(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_time_hour = input;
        self
    }
    /// <p>The hour for the maintenance window start (<code>00</code>-<code>23</code>).</p>
    pub fn get_start_time_hour(&self) -> &::std::option::Option<i32> {
        &self.start_time_hour
    }
    /// <p>The minutes past the hour for the maintenance window start (<code>00</code>-<code>59</code>).</p>
    pub fn start_time_minute(mut self, input: i32) -> Self {
        self.start_time_minute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minutes past the hour for the maintenance window start (<code>00</code>-<code>59</code>).</p>
    pub fn set_start_time_minute(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_time_minute = input;
        self
    }
    /// <p>The minutes past the hour for the maintenance window start (<code>00</code>-<code>59</code>).</p>
    pub fn get_start_time_minute(&self) -> &::std::option::Option<i32> {
        &self.start_time_minute
    }
    /// <p>The hour for the maintenance window end (<code>00</code>-<code>23</code>).</p>
    pub fn end_time_hour(mut self, input: i32) -> Self {
        self.end_time_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>The hour for the maintenance window end (<code>00</code>-<code>23</code>).</p>
    pub fn set_end_time_hour(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_time_hour = input;
        self
    }
    /// <p>The hour for the maintenance window end (<code>00</code>-<code>23</code>).</p>
    pub fn get_end_time_hour(&self) -> &::std::option::Option<i32> {
        &self.end_time_hour
    }
    /// <p>The minutes for the maintenance window end (<code>00</code>-<code>59</code>).</p>
    pub fn end_time_minute(mut self, input: i32) -> Self {
        self.end_time_minute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minutes for the maintenance window end (<code>00</code>-<code>59</code>).</p>
    pub fn set_end_time_minute(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_time_minute = input;
        self
    }
    /// <p>The minutes for the maintenance window end (<code>00</code>-<code>59</code>).</p>
    pub fn get_end_time_minute(&self) -> &::std::option::Option<i32> {
        &self.end_time_minute
    }
    /// Appends an item to `days_of_the_week`.
    ///
    /// To override the contents of this collection use [`set_days_of_the_week`](Self::set_days_of_the_week).
    ///
    /// <p>The days of the week during which the maintenance window is open.</p>
    pub fn days_of_the_week(mut self, input: crate::types::DayOfWeek) -> Self {
        let mut v = self.days_of_the_week.unwrap_or_default();
        v.push(input);
        self.days_of_the_week = ::std::option::Option::Some(v);
        self
    }
    /// <p>The days of the week during which the maintenance window is open.</p>
    pub fn set_days_of_the_week(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DayOfWeek>>) -> Self {
        self.days_of_the_week = input;
        self
    }
    /// <p>The days of the week during which the maintenance window is open.</p>
    pub fn get_days_of_the_week(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DayOfWeek>> {
        &self.days_of_the_week
    }
    /// <p>The option to set the maintenance window during the device local time or Universal Coordinated Time (UTC).</p>
    pub fn apply_time_of(mut self, input: crate::types::ApplyTimeOf) -> Self {
        self.apply_time_of = ::std::option::Option::Some(input);
        self
    }
    /// <p>The option to set the maintenance window during the device local time or Universal Coordinated Time (UTC).</p>
    pub fn set_apply_time_of(mut self, input: ::std::option::Option<crate::types::ApplyTimeOf>) -> Self {
        self.apply_time_of = input;
        self
    }
    /// <p>The option to set the maintenance window during the device local time or Universal Coordinated Time (UTC).</p>
    pub fn get_apply_time_of(&self) -> &::std::option::Option<crate::types::ApplyTimeOf> {
        &self.apply_time_of
    }
    /// Consumes the builder and constructs a [`MaintenanceWindow`](crate::types::MaintenanceWindow).
    pub fn build(self) -> crate::types::MaintenanceWindow {
        crate::types::MaintenanceWindow {
            r#type: self.r#type,
            start_time_hour: self.start_time_hour,
            start_time_minute: self.start_time_minute,
            end_time_hour: self.end_time_hour,
            end_time_minute: self.end_time_minute,
            days_of_the_week: self.days_of_the_week,
            apply_time_of: self.apply_time_of,
        }
    }
}
