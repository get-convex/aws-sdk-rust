// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource and internal ID of a resource to tag.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EmbeddedTag {
    /// <p>The Amazon Resource Name (ARN) of a resource to tag.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The internal ID of a resource to tag.</p>
    pub internal_id: ::std::option::Option<::std::string::String>,
}
impl EmbeddedTag {
    /// <p>The Amazon Resource Name (ARN) of a resource to tag.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The internal ID of a resource to tag.</p>
    pub fn internal_id(&self) -> ::std::option::Option<&str> {
        self.internal_id.as_deref()
    }
}
impl ::std::fmt::Debug for EmbeddedTag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmbeddedTag");
        formatter.field("resource_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("internal_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EmbeddedTag {
    /// Creates a new builder-style object to manufacture [`EmbeddedTag`](crate::types::EmbeddedTag).
    pub fn builder() -> crate::types::builders::EmbeddedTagBuilder {
        crate::types::builders::EmbeddedTagBuilder::default()
    }
}

/// A builder for [`EmbeddedTag`](crate::types::EmbeddedTag).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EmbeddedTagBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) internal_id: ::std::option::Option<::std::string::String>,
}
impl EmbeddedTagBuilder {
    /// <p>The Amazon Resource Name (ARN) of a resource to tag.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a resource to tag.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a resource to tag.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The internal ID of a resource to tag.</p>
    pub fn internal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.internal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The internal ID of a resource to tag.</p>
    pub fn set_internal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.internal_id = input;
        self
    }
    /// <p>The internal ID of a resource to tag.</p>
    pub fn get_internal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.internal_id
    }
    /// Consumes the builder and constructs a [`EmbeddedTag`](crate::types::EmbeddedTag).
    pub fn build(self) -> crate::types::EmbeddedTag {
        crate::types::EmbeddedTag {
            resource_arn: self.resource_arn,
            internal_id: self.internal_id,
        }
    }
}
impl ::std::fmt::Debug for EmbeddedTagBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmbeddedTagBuilder");
        formatter.field("resource_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("internal_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
