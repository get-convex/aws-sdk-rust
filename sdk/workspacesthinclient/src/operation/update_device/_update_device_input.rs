// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateDeviceInput {
    /// <p>The ID of the device to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the device to update.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the software set to apply.</p>
    pub desired_software_set_id: ::std::option::Option<::std::string::String>,
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub software_set_update_schedule: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>,
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key to use for the update.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateDeviceInput {
    /// <p>The ID of the device to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the device to update.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the software set to apply.</p>
    pub fn desired_software_set_id(&self) -> ::std::option::Option<&str> {
        self.desired_software_set_id.as_deref()
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn software_set_update_schedule(&self) -> ::std::option::Option<&crate::types::SoftwareSetUpdateSchedule> {
        self.software_set_update_schedule.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key to use for the update.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateDeviceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDeviceInput");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("desired_software_set_id", &self.desired_software_set_id);
        formatter.field("software_set_update_schedule", &self.software_set_update_schedule);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.finish()
    }
}
impl UpdateDeviceInput {
    /// Creates a new builder-style object to manufacture [`UpdateDeviceInput`](crate::operation::update_device::UpdateDeviceInput).
    pub fn builder() -> crate::operation::update_device::builders::UpdateDeviceInputBuilder {
        crate::operation::update_device::builders::UpdateDeviceInputBuilder::default()
    }
}

/// A builder for [`UpdateDeviceInput`](crate::operation::update_device::UpdateDeviceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateDeviceInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) desired_software_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) software_set_update_schedule: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateDeviceInputBuilder {
    /// <p>The ID of the device to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the device to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the device to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the device to update.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the device to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the device to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the software set to apply.</p>
    pub fn desired_software_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.desired_software_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the software set to apply.</p>
    pub fn set_desired_software_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.desired_software_set_id = input;
        self
    }
    /// <p>The ID of the software set to apply.</p>
    pub fn get_desired_software_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.desired_software_set_id
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn software_set_update_schedule(mut self, input: crate::types::SoftwareSetUpdateSchedule) -> Self {
        self.software_set_update_schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn set_software_set_update_schedule(mut self, input: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>) -> Self {
        self.software_set_update_schedule = input;
        self
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn get_software_set_update_schedule(&self) -> &::std::option::Option<crate::types::SoftwareSetUpdateSchedule> {
        &self.software_set_update_schedule
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key to use for the update.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key to use for the update.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service key to use for the update.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// Consumes the builder and constructs a [`UpdateDeviceInput`](crate::operation::update_device::UpdateDeviceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_device::UpdateDeviceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_device::UpdateDeviceInput {
            id: self.id,
            name: self.name,
            desired_software_set_id: self.desired_software_set_id,
            software_set_update_schedule: self.software_set_update_schedule,
            kms_key_arn: self.kms_key_arn,
        })
    }
}
impl ::std::fmt::Debug for UpdateDeviceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDeviceInputBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("desired_software_set_id", &self.desired_software_set_id);
        formatter.field("software_set_update_schedule", &self.software_set_update_schedule);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.finish()
    }
}
