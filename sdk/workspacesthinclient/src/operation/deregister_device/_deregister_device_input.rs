// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeregisterDeviceInput {
    /// <p>The ID of the device to deregister.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The desired new status for the device.</p>
    pub target_device_status: ::std::option::Option<crate::types::TargetDeviceStatus>,
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl DeregisterDeviceInput {
    /// <p>The ID of the device to deregister.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The desired new status for the device.</p>
    pub fn target_device_status(&self) -> ::std::option::Option<&crate::types::TargetDeviceStatus> {
        self.target_device_status.as_ref()
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl DeregisterDeviceInput {
    /// Creates a new builder-style object to manufacture [`DeregisterDeviceInput`](crate::operation::deregister_device::DeregisterDeviceInput).
    pub fn builder() -> crate::operation::deregister_device::builders::DeregisterDeviceInputBuilder {
        crate::operation::deregister_device::builders::DeregisterDeviceInputBuilder::default()
    }
}

/// A builder for [`DeregisterDeviceInput`](crate::operation::deregister_device::DeregisterDeviceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeregisterDeviceInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) target_device_status: ::std::option::Option<crate::types::TargetDeviceStatus>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl DeregisterDeviceInputBuilder {
    /// <p>The ID of the device to deregister.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the device to deregister.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the device to deregister.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The desired new status for the device.</p>
    pub fn target_device_status(mut self, input: crate::types::TargetDeviceStatus) -> Self {
        self.target_device_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired new status for the device.</p>
    pub fn set_target_device_status(mut self, input: ::std::option::Option<crate::types::TargetDeviceStatus>) -> Self {
        self.target_device_status = input;
        self
    }
    /// <p>The desired new status for the device.</p>
    pub fn get_target_device_status(&self) -> &::std::option::Option<crate::types::TargetDeviceStatus> {
        &self.target_device_status
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`DeregisterDeviceInput`](crate::operation::deregister_device::DeregisterDeviceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::deregister_device::DeregisterDeviceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::deregister_device::DeregisterDeviceInput {
            id: self.id,
            target_device_status: self.target_device_status,
            client_token: self.client_token,
        })
    }
}
