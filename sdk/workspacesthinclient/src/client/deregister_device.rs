// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterDevice`](crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder::set_id):<br>required: **true**<br><p>The ID of the device to deregister.</p><br>
    ///   - [`target_device_status(TargetDeviceStatus)`](crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder::target_device_status) / [`set_target_device_status(Option<TargetDeviceStatus>)`](crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder::set_target_device_status):<br>required: **false**<br><p>The desired new status for the device.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder::set_client_token):<br>required: **false**<br><p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p> <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p> <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p><br>
    /// - On success, responds with [`DeregisterDeviceOutput`](crate::operation::deregister_device::DeregisterDeviceOutput)
    /// - On failure, responds with [`SdkError<DeregisterDeviceError>`](crate::operation::deregister_device::DeregisterDeviceError)
    pub fn deregister_device(&self) -> crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder {
        crate::operation::deregister_device::builders::DeregisterDeviceFluentBuilder::new(self.handle.clone())
    }
}
