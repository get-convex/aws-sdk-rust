// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteEnvironment`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::set_id):<br>required: **true**<br><p>The ID of the environment to delete.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::set_client_token):<br>required: **false**<br><p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value</a>.</p> <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p> <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p><br>
    /// - On success, responds with [`DeleteEnvironmentOutput`](crate::operation::delete_environment::DeleteEnvironmentOutput)
    /// - On failure, responds with [`SdkError<DeleteEnvironmentError>`](crate::operation::delete_environment::DeleteEnvironmentError)
    pub fn delete_environment(&self) -> crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder {
        crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::new(self.handle.clone())
    }
}
