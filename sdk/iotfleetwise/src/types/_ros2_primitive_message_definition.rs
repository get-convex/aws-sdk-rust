// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a ROS 2 compliant primitive type message of the complex data structure.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ros2PrimitiveMessageDefinition {
    /// <p>The primitive type (integer, floating point, boolean, etc.) for the ROS 2 primitive message definition.</p>
    pub primitive_type: crate::types::Ros2PrimitiveType,
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub offset: ::std::option::Option<f64>,
    /// <p>A multiplier used to decode the message.</p>
    pub scaling: ::std::option::Option<f64>,
    /// <p>An optional attribute specifying the upper bound for <code>STRING</code> and <code>WSTRING</code>.</p>
    pub upper_bound: ::std::option::Option<i64>,
}
impl Ros2PrimitiveMessageDefinition {
    /// <p>The primitive type (integer, floating point, boolean, etc.) for the ROS 2 primitive message definition.</p>
    pub fn primitive_type(&self) -> &crate::types::Ros2PrimitiveType {
        &self.primitive_type
    }
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub fn offset(&self) -> ::std::option::Option<f64> {
        self.offset
    }
    /// <p>A multiplier used to decode the message.</p>
    pub fn scaling(&self) -> ::std::option::Option<f64> {
        self.scaling
    }
    /// <p>An optional attribute specifying the upper bound for <code>STRING</code> and <code>WSTRING</code>.</p>
    pub fn upper_bound(&self) -> ::std::option::Option<i64> {
        self.upper_bound
    }
}
impl Ros2PrimitiveMessageDefinition {
    /// Creates a new builder-style object to manufacture [`Ros2PrimitiveMessageDefinition`](crate::types::Ros2PrimitiveMessageDefinition).
    pub fn builder() -> crate::types::builders::Ros2PrimitiveMessageDefinitionBuilder {
        crate::types::builders::Ros2PrimitiveMessageDefinitionBuilder::default()
    }
}

/// A builder for [`Ros2PrimitiveMessageDefinition`](crate::types::Ros2PrimitiveMessageDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Ros2PrimitiveMessageDefinitionBuilder {
    pub(crate) primitive_type: ::std::option::Option<crate::types::Ros2PrimitiveType>,
    pub(crate) offset: ::std::option::Option<f64>,
    pub(crate) scaling: ::std::option::Option<f64>,
    pub(crate) upper_bound: ::std::option::Option<i64>,
}
impl Ros2PrimitiveMessageDefinitionBuilder {
    /// <p>The primitive type (integer, floating point, boolean, etc.) for the ROS 2 primitive message definition.</p>
    /// This field is required.
    pub fn primitive_type(mut self, input: crate::types::Ros2PrimitiveType) -> Self {
        self.primitive_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The primitive type (integer, floating point, boolean, etc.) for the ROS 2 primitive message definition.</p>
    pub fn set_primitive_type(mut self, input: ::std::option::Option<crate::types::Ros2PrimitiveType>) -> Self {
        self.primitive_type = input;
        self
    }
    /// <p>The primitive type (integer, floating point, boolean, etc.) for the ROS 2 primitive message definition.</p>
    pub fn get_primitive_type(&self) -> &::std::option::Option<crate::types::Ros2PrimitiveType> {
        &self.primitive_type
    }
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub fn offset(mut self, input: f64) -> Self {
        self.offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub fn set_offset(mut self, input: ::std::option::Option<f64>) -> Self {
        self.offset = input;
        self
    }
    /// <p>The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.</p>
    pub fn get_offset(&self) -> &::std::option::Option<f64> {
        &self.offset
    }
    /// <p>A multiplier used to decode the message.</p>
    pub fn scaling(mut self, input: f64) -> Self {
        self.scaling = ::std::option::Option::Some(input);
        self
    }
    /// <p>A multiplier used to decode the message.</p>
    pub fn set_scaling(mut self, input: ::std::option::Option<f64>) -> Self {
        self.scaling = input;
        self
    }
    /// <p>A multiplier used to decode the message.</p>
    pub fn get_scaling(&self) -> &::std::option::Option<f64> {
        &self.scaling
    }
    /// <p>An optional attribute specifying the upper bound for <code>STRING</code> and <code>WSTRING</code>.</p>
    pub fn upper_bound(mut self, input: i64) -> Self {
        self.upper_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional attribute specifying the upper bound for <code>STRING</code> and <code>WSTRING</code>.</p>
    pub fn set_upper_bound(mut self, input: ::std::option::Option<i64>) -> Self {
        self.upper_bound = input;
        self
    }
    /// <p>An optional attribute specifying the upper bound for <code>STRING</code> and <code>WSTRING</code>.</p>
    pub fn get_upper_bound(&self) -> &::std::option::Option<i64> {
        &self.upper_bound
    }
    /// Consumes the builder and constructs a [`Ros2PrimitiveMessageDefinition`](crate::types::Ros2PrimitiveMessageDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`primitive_type`](crate::types::builders::Ros2PrimitiveMessageDefinitionBuilder::primitive_type)
    pub fn build(self) -> ::std::result::Result<crate::types::Ros2PrimitiveMessageDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Ros2PrimitiveMessageDefinition {
            primitive_type: self.primitive_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "primitive_type",
                    "primitive_type was not specified but it is required when building Ros2PrimitiveMessageDefinition",
                )
            })?,
            offset: self.offset,
            scaling: self.scaling,
            upper_bound: self.upper_bound,
        })
    }
}
