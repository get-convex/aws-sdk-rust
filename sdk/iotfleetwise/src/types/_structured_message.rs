// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structured message for the message signal. It can be defined with either a <code>primitiveMessageDefinition</code>, <code>structuredMessageListDefinition</code>, or <code>structuredMessageDefinition</code> recursively.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum StructuredMessage {
    /// <p>Represents a primitive type node of the complex data structure.</p>
    PrimitiveMessageDefinition(crate::types::PrimitiveMessageDefinition),
    /// <p>Represents a struct type node of the complex data structure.</p>
    StructuredMessageDefinition(::std::vec::Vec<crate::types::StructuredMessageFieldNameAndDataTypePair>),
    /// <p>Represents a list type node of the complex data structure.</p>
    StructuredMessageListDefinition(::std::boxed::Box<crate::types::StructuredMessageListDefinition>),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl StructuredMessage {
    /// Tries to convert the enum instance into [`PrimitiveMessageDefinition`](crate::types::StructuredMessage::PrimitiveMessageDefinition), extracting the inner [`PrimitiveMessageDefinition`](crate::types::PrimitiveMessageDefinition).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_primitive_message_definition(&self) -> ::std::result::Result<&crate::types::PrimitiveMessageDefinition, &Self> {
        if let StructuredMessage::PrimitiveMessageDefinition(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PrimitiveMessageDefinition`](crate::types::StructuredMessage::PrimitiveMessageDefinition).
    pub fn is_primitive_message_definition(&self) -> bool {
        self.as_primitive_message_definition().is_ok()
    }
    /// Tries to convert the enum instance into [`StructuredMessageDefinition`](crate::types::StructuredMessage::StructuredMessageDefinition), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_structured_message_definition(
        &self,
    ) -> ::std::result::Result<&::std::vec::Vec<crate::types::StructuredMessageFieldNameAndDataTypePair>, &Self> {
        if let StructuredMessage::StructuredMessageDefinition(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StructuredMessageDefinition`](crate::types::StructuredMessage::StructuredMessageDefinition).
    pub fn is_structured_message_definition(&self) -> bool {
        self.as_structured_message_definition().is_ok()
    }
    /// Tries to convert the enum instance into [`StructuredMessageListDefinition`](crate::types::StructuredMessage::StructuredMessageListDefinition), extracting the inner [`StructuredMessageListDefinition`](crate::types::StructuredMessageListDefinition).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_structured_message_list_definition(
        &self,
    ) -> ::std::result::Result<&::std::boxed::Box<crate::types::StructuredMessageListDefinition>, &Self> {
        if let StructuredMessage::StructuredMessageListDefinition(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StructuredMessageListDefinition`](crate::types::StructuredMessage::StructuredMessageListDefinition).
    pub fn is_structured_message_list_definition(&self) -> bool {
        self.as_structured_message_list_definition().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
