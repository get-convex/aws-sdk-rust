// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a list type node of the complex data structure.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StructuredMessageListDefinition {
    /// <p>The name of the structured message list definition.</p>
    pub name: ::std::string::String,
    /// <p>The member type of the structured message list definition.</p>
    pub member_type: ::std::option::Option<crate::types::StructuredMessage>,
    /// <p>The type of list of the structured message list definition.</p>
    pub list_type: crate::types::StructuredMessageListType,
    /// <p>The capacity of the structured message list definition when the list type is <code>FIXED_CAPACITY</code> or <code>DYNAMIC_BOUNDED_CAPACITY</code>.</p>
    pub capacity: i32,
}
impl StructuredMessageListDefinition {
    /// <p>The name of the structured message list definition.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The member type of the structured message list definition.</p>
    pub fn member_type(&self) -> ::std::option::Option<&crate::types::StructuredMessage> {
        self.member_type.as_ref()
    }
    /// <p>The type of list of the structured message list definition.</p>
    pub fn list_type(&self) -> &crate::types::StructuredMessageListType {
        &self.list_type
    }
    /// <p>The capacity of the structured message list definition when the list type is <code>FIXED_CAPACITY</code> or <code>DYNAMIC_BOUNDED_CAPACITY</code>.</p>
    pub fn capacity(&self) -> i32 {
        self.capacity
    }
}
impl StructuredMessageListDefinition {
    /// Creates a new builder-style object to manufacture [`StructuredMessageListDefinition`](crate::types::StructuredMessageListDefinition).
    pub fn builder() -> crate::types::builders::StructuredMessageListDefinitionBuilder {
        crate::types::builders::StructuredMessageListDefinitionBuilder::default()
    }
}

/// A builder for [`StructuredMessageListDefinition`](crate::types::StructuredMessageListDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StructuredMessageListDefinitionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) member_type: ::std::option::Option<crate::types::StructuredMessage>,
    pub(crate) list_type: ::std::option::Option<crate::types::StructuredMessageListType>,
    pub(crate) capacity: ::std::option::Option<i32>,
}
impl StructuredMessageListDefinitionBuilder {
    /// <p>The name of the structured message list definition.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the structured message list definition.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the structured message list definition.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The member type of the structured message list definition.</p>
    /// This field is required.
    pub fn member_type(mut self, input: crate::types::StructuredMessage) -> Self {
        self.member_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The member type of the structured message list definition.</p>
    pub fn set_member_type(mut self, input: ::std::option::Option<crate::types::StructuredMessage>) -> Self {
        self.member_type = input;
        self
    }
    /// <p>The member type of the structured message list definition.</p>
    pub fn get_member_type(&self) -> &::std::option::Option<crate::types::StructuredMessage> {
        &self.member_type
    }
    /// <p>The type of list of the structured message list definition.</p>
    /// This field is required.
    pub fn list_type(mut self, input: crate::types::StructuredMessageListType) -> Self {
        self.list_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of list of the structured message list definition.</p>
    pub fn set_list_type(mut self, input: ::std::option::Option<crate::types::StructuredMessageListType>) -> Self {
        self.list_type = input;
        self
    }
    /// <p>The type of list of the structured message list definition.</p>
    pub fn get_list_type(&self) -> &::std::option::Option<crate::types::StructuredMessageListType> {
        &self.list_type
    }
    /// <p>The capacity of the structured message list definition when the list type is <code>FIXED_CAPACITY</code> or <code>DYNAMIC_BOUNDED_CAPACITY</code>.</p>
    pub fn capacity(mut self, input: i32) -> Self {
        self.capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The capacity of the structured message list definition when the list type is <code>FIXED_CAPACITY</code> or <code>DYNAMIC_BOUNDED_CAPACITY</code>.</p>
    pub fn set_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.capacity = input;
        self
    }
    /// <p>The capacity of the structured message list definition when the list type is <code>FIXED_CAPACITY</code> or <code>DYNAMIC_BOUNDED_CAPACITY</code>.</p>
    pub fn get_capacity(&self) -> &::std::option::Option<i32> {
        &self.capacity
    }
    /// Consumes the builder and constructs a [`StructuredMessageListDefinition`](crate::types::StructuredMessageListDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::StructuredMessageListDefinitionBuilder::name)
    /// - [`list_type`](crate::types::builders::StructuredMessageListDefinitionBuilder::list_type)
    pub fn build(self) -> ::std::result::Result<crate::types::StructuredMessageListDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StructuredMessageListDefinition {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building StructuredMessageListDefinition",
                )
            })?,
            member_type: self.member_type,
            list_type: self.list_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "list_type",
                    "list_type was not specified but it is required when building StructuredMessageListDefinition",
                )
            })?,
            capacity: self.capacity.unwrap_or_default(),
        })
    }
}
