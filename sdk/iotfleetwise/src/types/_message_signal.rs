// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The decoding information for a specific message which support higher order data types.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageSignal {
    /// <p>The topic name for the message signal. It corresponds to topics in ROS 2.</p>
    pub topic_name: ::std::string::String,
    /// <p>The structured message for the message signal. It can be defined with either a <code>primitiveMessageDefinition</code>, <code>structuredMessageListDefinition</code>, or <code>structuredMessageDefinition</code> recursively.</p>
    pub structured_message: ::std::option::Option<crate::types::StructuredMessage>,
}
impl MessageSignal {
    /// <p>The topic name for the message signal. It corresponds to topics in ROS 2.</p>
    pub fn topic_name(&self) -> &str {
        use std::ops::Deref;
        self.topic_name.deref()
    }
    /// <p>The structured message for the message signal. It can be defined with either a <code>primitiveMessageDefinition</code>, <code>structuredMessageListDefinition</code>, or <code>structuredMessageDefinition</code> recursively.</p>
    pub fn structured_message(&self) -> ::std::option::Option<&crate::types::StructuredMessage> {
        self.structured_message.as_ref()
    }
}
impl MessageSignal {
    /// Creates a new builder-style object to manufacture [`MessageSignal`](crate::types::MessageSignal).
    pub fn builder() -> crate::types::builders::MessageSignalBuilder {
        crate::types::builders::MessageSignalBuilder::default()
    }
}

/// A builder for [`MessageSignal`](crate::types::MessageSignal).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MessageSignalBuilder {
    pub(crate) topic_name: ::std::option::Option<::std::string::String>,
    pub(crate) structured_message: ::std::option::Option<crate::types::StructuredMessage>,
}
impl MessageSignalBuilder {
    /// <p>The topic name for the message signal. It corresponds to topics in ROS 2.</p>
    /// This field is required.
    pub fn topic_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The topic name for the message signal. It corresponds to topics in ROS 2.</p>
    pub fn set_topic_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic_name = input;
        self
    }
    /// <p>The topic name for the message signal. It corresponds to topics in ROS 2.</p>
    pub fn get_topic_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic_name
    }
    /// <p>The structured message for the message signal. It can be defined with either a <code>primitiveMessageDefinition</code>, <code>structuredMessageListDefinition</code>, or <code>structuredMessageDefinition</code> recursively.</p>
    /// This field is required.
    pub fn structured_message(mut self, input: crate::types::StructuredMessage) -> Self {
        self.structured_message = ::std::option::Option::Some(input);
        self
    }
    /// <p>The structured message for the message signal. It can be defined with either a <code>primitiveMessageDefinition</code>, <code>structuredMessageListDefinition</code>, or <code>structuredMessageDefinition</code> recursively.</p>
    pub fn set_structured_message(mut self, input: ::std::option::Option<crate::types::StructuredMessage>) -> Self {
        self.structured_message = input;
        self
    }
    /// <p>The structured message for the message signal. It can be defined with either a <code>primitiveMessageDefinition</code>, <code>structuredMessageListDefinition</code>, or <code>structuredMessageDefinition</code> recursively.</p>
    pub fn get_structured_message(&self) -> &::std::option::Option<crate::types::StructuredMessage> {
        &self.structured_message
    }
    /// Consumes the builder and constructs a [`MessageSignal`](crate::types::MessageSignal).
    /// This method will fail if any of the following fields are not set:
    /// - [`topic_name`](crate::types::builders::MessageSignalBuilder::topic_name)
    pub fn build(self) -> ::std::result::Result<crate::types::MessageSignal, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MessageSignal {
            topic_name: self.topic_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "topic_name",
                    "topic_name was not specified but it is required when building MessageSignal",
                )
            })?,
            structured_message: self.structured_message,
        })
    }
}
