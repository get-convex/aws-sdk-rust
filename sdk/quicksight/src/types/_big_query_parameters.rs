// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters that are required to connect to a Google BigQuery data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BigQueryParameters {
    /// <p>The Google Cloud Platform project ID where your datasource was created.</p>
    pub project_id: ::std::string::String,
    /// <p>The storage location where you create a Google BigQuery data source.</p>
    pub data_set_region: ::std::option::Option<::std::string::String>,
}
impl BigQueryParameters {
    /// <p>The Google Cloud Platform project ID where your datasource was created.</p>
    pub fn project_id(&self) -> &str {
        use std::ops::Deref;
        self.project_id.deref()
    }
    /// <p>The storage location where you create a Google BigQuery data source.</p>
    pub fn data_set_region(&self) -> ::std::option::Option<&str> {
        self.data_set_region.as_deref()
    }
}
impl BigQueryParameters {
    /// Creates a new builder-style object to manufacture [`BigQueryParameters`](crate::types::BigQueryParameters).
    pub fn builder() -> crate::types::builders::BigQueryParametersBuilder {
        crate::types::builders::BigQueryParametersBuilder::default()
    }
}

/// A builder for [`BigQueryParameters`](crate::types::BigQueryParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BigQueryParametersBuilder {
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_set_region: ::std::option::Option<::std::string::String>,
}
impl BigQueryParametersBuilder {
    /// <p>The Google Cloud Platform project ID where your datasource was created.</p>
    /// This field is required.
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Google Cloud Platform project ID where your datasource was created.</p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p>The Google Cloud Platform project ID where your datasource was created.</p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// <p>The storage location where you create a Google BigQuery data source.</p>
    pub fn data_set_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage location where you create a Google BigQuery data source.</p>
    pub fn set_data_set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_region = input;
        self
    }
    /// <p>The storage location where you create a Google BigQuery data source.</p>
    pub fn get_data_set_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_region
    }
    /// Consumes the builder and constructs a [`BigQueryParameters`](crate::types::BigQueryParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`project_id`](crate::types::builders::BigQueryParametersBuilder::project_id)
    pub fn build(self) -> ::std::result::Result<crate::types::BigQueryParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BigQueryParameters {
            project_id: self.project_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_id",
                    "project_id was not specified but it is required when building BigQueryParameters",
                )
            })?,
            data_set_region: self.data_set_region,
        })
    }
}
