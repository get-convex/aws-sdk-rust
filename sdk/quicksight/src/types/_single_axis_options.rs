// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings of a chart's single axis configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SingleAxisOptions {
    /// <p>The Y axis options of a single axis configuration.</p>
    pub y_axis_options: ::std::option::Option<crate::types::YAxisOptions>,
}
impl SingleAxisOptions {
    /// <p>The Y axis options of a single axis configuration.</p>
    pub fn y_axis_options(&self) -> ::std::option::Option<&crate::types::YAxisOptions> {
        self.y_axis_options.as_ref()
    }
}
impl SingleAxisOptions {
    /// Creates a new builder-style object to manufacture [`SingleAxisOptions`](crate::types::SingleAxisOptions).
    pub fn builder() -> crate::types::builders::SingleAxisOptionsBuilder {
        crate::types::builders::SingleAxisOptionsBuilder::default()
    }
}

/// A builder for [`SingleAxisOptions`](crate::types::SingleAxisOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SingleAxisOptionsBuilder {
    pub(crate) y_axis_options: ::std::option::Option<crate::types::YAxisOptions>,
}
impl SingleAxisOptionsBuilder {
    /// <p>The Y axis options of a single axis configuration.</p>
    pub fn y_axis_options(mut self, input: crate::types::YAxisOptions) -> Self {
        self.y_axis_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Y axis options of a single axis configuration.</p>
    pub fn set_y_axis_options(mut self, input: ::std::option::Option<crate::types::YAxisOptions>) -> Self {
        self.y_axis_options = input;
        self
    }
    /// <p>The Y axis options of a single axis configuration.</p>
    pub fn get_y_axis_options(&self) -> &::std::option::Option<crate::types::YAxisOptions> {
        &self.y_axis_options
    }
    /// Consumes the builder and constructs a [`SingleAxisOptions`](crate::types::SingleAxisOptions).
    pub fn build(self) -> crate::types::SingleAxisOptions {
        crate::types::SingleAxisOptions {
            y_axis_options: self.y_axis_options,
        }
    }
}
