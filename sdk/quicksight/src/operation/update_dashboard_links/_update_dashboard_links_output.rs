// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDashboardLinksOutput {
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP status of the request.</p>
    pub status: i32,
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub dashboard_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.</p>
    pub link_entities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateDashboardLinksOutput {
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn dashboard_arn(&self) -> ::std::option::Option<&str> {
        self.dashboard_arn.as_deref()
    }
    /// <p>A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.link_entities.is_none()`.
    pub fn link_entities(&self) -> &[::std::string::String] {
        self.link_entities.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for UpdateDashboardLinksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDashboardLinksOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDashboardLinksOutput`](crate::operation::update_dashboard_links::UpdateDashboardLinksOutput).
    pub fn builder() -> crate::operation::update_dashboard_links::builders::UpdateDashboardLinksOutputBuilder {
        crate::operation::update_dashboard_links::builders::UpdateDashboardLinksOutputBuilder::default()
    }
}

/// A builder for [`UpdateDashboardLinksOutput`](crate::operation::update_dashboard_links::UpdateDashboardLinksOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDashboardLinksOutputBuilder {
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<i32>,
    pub(crate) dashboard_arn: ::std::option::Option<::std::string::String>,
    pub(crate) link_entities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateDashboardLinksOutputBuilder {
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn dashboard_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn set_dashboard_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn get_dashboard_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_arn
    }
    /// Appends an item to `link_entities`.
    ///
    /// To override the contents of this collection use [`set_link_entities`](Self::set_link_entities).
    ///
    /// <p>A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.</p>
    pub fn link_entities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.link_entities.unwrap_or_default();
        v.push(input.into());
        self.link_entities = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.</p>
    pub fn set_link_entities(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.link_entities = input;
        self
    }
    /// <p>A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.</p>
    pub fn get_link_entities(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.link_entities
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDashboardLinksOutput`](crate::operation::update_dashboard_links::UpdateDashboardLinksOutput).
    pub fn build(self) -> crate::operation::update_dashboard_links::UpdateDashboardLinksOutput {
        crate::operation::update_dashboard_links::UpdateDashboardLinksOutput {
            request_id: self.request_id,
            status: self.status.unwrap_or_default(),
            dashboard_arn: self.dashboard_arn,
            link_entities: self.link_entities,
            _request_id: self._request_id,
        }
    }
}
