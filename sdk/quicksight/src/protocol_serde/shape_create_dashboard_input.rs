// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dashboard_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_dashboard::CreateDashboardInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.dashboard_publish_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DashboardPublishOptions").start_object();
        crate::protocol_serde::shape_dashboard_publish_options::ser_dashboard_publish_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.definition {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Definition").start_object();
        crate::protocol_serde::shape_dashboard_version_definition::ser_dashboard_version_definition(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.folder_arns {
        let mut array_6 = object.key("FolderArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.link_entities {
        let mut array_9 = object.key("LinkEntities").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.link_sharing_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("LinkSharingConfiguration").start_object();
        crate::protocol_serde::shape_link_sharing_configuration::ser_link_sharing_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.name {
        object.key("Name").string(var_13.as_str());
    }
    if let Some(var_14) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Parameters").start_object();
        crate::protocol_serde::shape_parameters::ser_parameters(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.permissions {
        let mut array_17 = object.key("Permissions").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_resource_permission::ser_resource_permission(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.source_entity {
        #[allow(unused_mut)]
        let mut object_21 = object.key("SourceEntity").start_object();
        crate::protocol_serde::shape_dashboard_source_entity::ser_dashboard_source_entity(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.tags {
        let mut array_23 = object.key("Tags").start_array();
        for item_24 in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_25 = array_23.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.theme_arn {
        object.key("ThemeArn").string(var_26.as_str());
    }
    if let Some(var_27) = &input.validation_strategy {
        #[allow(unused_mut)]
        let mut object_28 = object.key("ValidationStrategy").start_object();
        crate::protocol_serde::shape_validation_strategy::ser_validation_strategy(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.version_description {
        object.key("VersionDescription").string(var_29.as_str());
    }
    Ok(())
}
