// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents the input of a ListScrapers operation.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListScrapersInput {
    /// A list of scraper filters.
    pub filters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListScrapers request.
    pub next_token: ::std::option::Option<::std::string::String>,
    /// Maximum results to return in response (default=100, maximum=1000).
    pub max_results: ::std::option::Option<i32>,
}
impl ListScrapersInput {
    /// A list of scraper filters.
    pub fn filters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.filters.as_ref()
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListScrapers request.
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListScrapersInput {
    /// Creates a new builder-style object to manufacture [`ListScrapersInput`](crate::operation::list_scrapers::ListScrapersInput).
    pub fn builder() -> crate::operation::list_scrapers::builders::ListScrapersInputBuilder {
        crate::operation::list_scrapers::builders::ListScrapersInputBuilder::default()
    }
}

/// A builder for [`ListScrapersInput`](crate::operation::list_scrapers::ListScrapersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListScrapersInputBuilder {
    pub(crate) filters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListScrapersInputBuilder {
    /// Adds a key-value pair to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// A list of scraper filters.
    pub fn filters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.filters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.filters = ::std::option::Option::Some(hash_map);
        self
    }
    /// A list of scraper filters.
    pub fn set_filters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// A list of scraper filters.
    pub fn get_filters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.filters
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListScrapers request.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListScrapers request.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Pagination token to request the next page in a paginated list. This token is obtained from the output of the previous ListScrapers request.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Maximum results to return in response (default=100, maximum=1000).
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListScrapersInput`](crate::operation::list_scrapers::ListScrapersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_scrapers::ListScrapersInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_scrapers::ListScrapersInput {
            filters: self.filters,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
