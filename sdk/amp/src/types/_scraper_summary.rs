// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents a summary of the properties of a scraper.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScraperSummary {
    /// Alias of this scraper.
    pub alias: ::std::option::Option<::std::string::String>,
    /// Unique string identifying this scraper.
    pub scraper_id: ::std::string::String,
    /// The Amazon Resource Name (ARN) of this scraper.
    pub arn: ::std::string::String,
    /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to dsicover, collect, and produce metrics on your behalf.
    pub role_arn: ::std::string::String,
    /// The status of this scraper.
    pub status: ::std::option::Option<crate::types::ScraperStatus>,
    /// The time when the scraper was created.
    pub created_at: ::aws_smithy_types::DateTime,
    /// The time when the scraper was last modified.
    pub last_modified_at: ::aws_smithy_types::DateTime,
    /// The tags of this scraper.
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// The reason for failure if any.
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// The source that the scraper is discovering and collecting metrics from.
    pub source: ::std::option::Option<crate::types::Source>,
    /// The destination that the scraper is producing metrics to.
    pub destination: ::std::option::Option<crate::types::Destination>,
}
impl ScraperSummary {
    /// Alias of this scraper.
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// Unique string identifying this scraper.
    pub fn scraper_id(&self) -> &str {
        use std::ops::Deref;
        self.scraper_id.deref()
    }
    /// The Amazon Resource Name (ARN) of this scraper.
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to dsicover, collect, and produce metrics on your behalf.
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// The status of this scraper.
    pub fn status(&self) -> ::std::option::Option<&crate::types::ScraperStatus> {
        self.status.as_ref()
    }
    /// The time when the scraper was created.
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// The time when the scraper was last modified.
    pub fn last_modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_at
    }
    /// The tags of this scraper.
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// The reason for failure if any.
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// The source that the scraper is discovering and collecting metrics from.
    pub fn source(&self) -> ::std::option::Option<&crate::types::Source> {
        self.source.as_ref()
    }
    /// The destination that the scraper is producing metrics to.
    pub fn destination(&self) -> ::std::option::Option<&crate::types::Destination> {
        self.destination.as_ref()
    }
}
impl ScraperSummary {
    /// Creates a new builder-style object to manufacture [`ScraperSummary`](crate::types::ScraperSummary).
    pub fn builder() -> crate::types::builders::ScraperSummaryBuilder {
        crate::types::builders::ScraperSummaryBuilder::default()
    }
}

/// A builder for [`ScraperSummary`](crate::types::ScraperSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScraperSummaryBuilder {
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) scraper_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ScraperStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::Source>,
    pub(crate) destination: ::std::option::Option<crate::types::Destination>,
}
impl ScraperSummaryBuilder {
    /// Alias of this scraper.
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// Alias of this scraper.
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// Alias of this scraper.
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// Unique string identifying this scraper.
    /// This field is required.
    pub fn scraper_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scraper_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Unique string identifying this scraper.
    pub fn set_scraper_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scraper_id = input;
        self
    }
    /// Unique string identifying this scraper.
    pub fn get_scraper_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scraper_id
    }
    /// The Amazon Resource Name (ARN) of this scraper.
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of this scraper.
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// The Amazon Resource Name (ARN) of this scraper.
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to dsicover, collect, and produce metrics on your behalf.
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to dsicover, collect, and produce metrics on your behalf.
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to dsicover, collect, and produce metrics on your behalf.
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// The status of this scraper.
    /// This field is required.
    pub fn status(mut self, input: crate::types::ScraperStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// The status of this scraper.
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ScraperStatus>) -> Self {
        self.status = input;
        self
    }
    /// The status of this scraper.
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ScraperStatus> {
        &self.status
    }
    /// The time when the scraper was created.
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// The time when the scraper was created.
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// The time when the scraper was created.
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// The time when the scraper was last modified.
    /// This field is required.
    pub fn last_modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_at = ::std::option::Option::Some(input);
        self
    }
    /// The time when the scraper was last modified.
    pub fn set_last_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_at = input;
        self
    }
    /// The time when the scraper was last modified.
    pub fn get_last_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// The tags of this scraper.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// The tags of this scraper.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// The tags of this scraper.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// The reason for failure if any.
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// The reason for failure if any.
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// The reason for failure if any.
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// The source that the scraper is discovering and collecting metrics from.
    /// This field is required.
    pub fn source(mut self, input: crate::types::Source) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// The source that the scraper is discovering and collecting metrics from.
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::Source>) -> Self {
        self.source = input;
        self
    }
    /// The source that the scraper is discovering and collecting metrics from.
    pub fn get_source(&self) -> &::std::option::Option<crate::types::Source> {
        &self.source
    }
    /// The destination that the scraper is producing metrics to.
    /// This field is required.
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// The destination that the scraper is producing metrics to.
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.destination = input;
        self
    }
    /// The destination that the scraper is producing metrics to.
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        &self.destination
    }
    /// Consumes the builder and constructs a [`ScraperSummary`](crate::types::ScraperSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`scraper_id`](crate::types::builders::ScraperSummaryBuilder::scraper_id)
    /// - [`arn`](crate::types::builders::ScraperSummaryBuilder::arn)
    /// - [`role_arn`](crate::types::builders::ScraperSummaryBuilder::role_arn)
    /// - [`created_at`](crate::types::builders::ScraperSummaryBuilder::created_at)
    /// - [`last_modified_at`](crate::types::builders::ScraperSummaryBuilder::last_modified_at)
    pub fn build(self) -> ::std::result::Result<crate::types::ScraperSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ScraperSummary {
            alias: self.alias,
            scraper_id: self.scraper_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scraper_id",
                    "scraper_id was not specified but it is required when building ScraperSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ScraperSummary",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building ScraperSummary",
                )
            })?,
            status: self.status,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building ScraperSummary",
                )
            })?,
            last_modified_at: self.last_modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_at",
                    "last_modified_at was not specified but it is required when building ScraperSummary",
                )
            })?,
            tags: self.tags,
            status_reason: self.status_reason,
            source: self.source,
            destination: self.destination,
        })
    }
}
