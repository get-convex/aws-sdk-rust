// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_scraper_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_scraper::CreateScraperInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.alias {
        object.key("alias").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.destination {
        #[allow(unused_mut)]
        let mut object_4 = object.key("destination").start_object();
        crate::protocol_serde::shape_destination::ser_destination(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.scrape_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("scrapeConfiguration").start_object();
        crate::protocol_serde::shape_scrape_configuration::ser_scrape_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.source {
        #[allow(unused_mut)]
        let mut object_8 = object.key("source").start_object();
        crate::protocol_serde::shape_source::ser_source(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
