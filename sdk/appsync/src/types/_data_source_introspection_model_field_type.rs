// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the type data for each field retrieved from the introspection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSourceIntrospectionModelFieldType {
    /// <p>Specifies the classification of data. For example, this could be set to values like <code>Scalar</code> or <code>NonNull</code> to indicate a fundamental property of the field.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Scalar</code>: Indicates the value is a primitive type (scalar).</p></li>
    /// <li>
    /// <p><code>NonNull</code>: Indicates the field cannot be <code>null</code>.</p></li>
    /// <li>
    /// <p><code>List</code>: Indicates the field contains a list.</p></li>
    /// </ul>
    pub kind: ::std::option::Option<::std::string::String>,
    /// <p>The name of the data type that represents the field. For example, <code>String</code> is a valid <code>name</code> value.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The <code>DataSourceIntrospectionModelFieldType</code> object data. The <code>type</code> is only present if <code>DataSourceIntrospectionModelFieldType.kind</code> is set to <code>NonNull</code> or <code>List</code>.</p>
    /// <p>The <code>type</code> typically contains its own <code>kind</code> and <code>name</code> fields to represent the actual type data. For instance, <code>type</code> could contain a <code>kind</code> value of <code>Scalar</code> with a <code>name</code> value of <code>String</code>. The values <code>Scalar</code> and <code>String</code> will be collectively stored in the <code>values</code> field.</p>
    pub r#type: ::std::option::Option<::std::boxed::Box<crate::types::DataSourceIntrospectionModelFieldType>>,
    /// <p>The values of the <code>type</code> field. This field represents the AppSync data type equivalent of the introspected field.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DataSourceIntrospectionModelFieldType {
    /// <p>Specifies the classification of data. For example, this could be set to values like <code>Scalar</code> or <code>NonNull</code> to indicate a fundamental property of the field.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Scalar</code>: Indicates the value is a primitive type (scalar).</p></li>
    /// <li>
    /// <p><code>NonNull</code>: Indicates the field cannot be <code>null</code>.</p></li>
    /// <li>
    /// <p><code>List</code>: Indicates the field contains a list.</p></li>
    /// </ul>
    pub fn kind(&self) -> ::std::option::Option<&str> {
        self.kind.as_deref()
    }
    /// <p>The name of the data type that represents the field. For example, <code>String</code> is a valid <code>name</code> value.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The <code>DataSourceIntrospectionModelFieldType</code> object data. The <code>type</code> is only present if <code>DataSourceIntrospectionModelFieldType.kind</code> is set to <code>NonNull</code> or <code>List</code>.</p>
    /// <p>The <code>type</code> typically contains its own <code>kind</code> and <code>name</code> fields to represent the actual type data. For instance, <code>type</code> could contain a <code>kind</code> value of <code>Scalar</code> with a <code>name</code> value of <code>String</code>. The values <code>Scalar</code> and <code>String</code> will be collectively stored in the <code>values</code> field.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::DataSourceIntrospectionModelFieldType> {
        self.r#type.as_deref()
    }
    /// <p>The values of the <code>type</code> field. This field represents the AppSync data type equivalent of the introspected field.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl DataSourceIntrospectionModelFieldType {
    /// Creates a new builder-style object to manufacture [`DataSourceIntrospectionModelFieldType`](crate::types::DataSourceIntrospectionModelFieldType).
    pub fn builder() -> crate::types::builders::DataSourceIntrospectionModelFieldTypeBuilder {
        crate::types::builders::DataSourceIntrospectionModelFieldTypeBuilder::default()
    }
}

/// A builder for [`DataSourceIntrospectionModelFieldType`](crate::types::DataSourceIntrospectionModelFieldType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataSourceIntrospectionModelFieldTypeBuilder {
    pub(crate) kind: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::boxed::Box<crate::types::DataSourceIntrospectionModelFieldType>>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DataSourceIntrospectionModelFieldTypeBuilder {
    /// <p>Specifies the classification of data. For example, this could be set to values like <code>Scalar</code> or <code>NonNull</code> to indicate a fundamental property of the field.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Scalar</code>: Indicates the value is a primitive type (scalar).</p></li>
    /// <li>
    /// <p><code>NonNull</code>: Indicates the field cannot be <code>null</code>.</p></li>
    /// <li>
    /// <p><code>List</code>: Indicates the field contains a list.</p></li>
    /// </ul>
    pub fn kind(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kind = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the classification of data. For example, this could be set to values like <code>Scalar</code> or <code>NonNull</code> to indicate a fundamental property of the field.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Scalar</code>: Indicates the value is a primitive type (scalar).</p></li>
    /// <li>
    /// <p><code>NonNull</code>: Indicates the field cannot be <code>null</code>.</p></li>
    /// <li>
    /// <p><code>List</code>: Indicates the field contains a list.</p></li>
    /// </ul>
    pub fn set_kind(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kind = input;
        self
    }
    /// <p>Specifies the classification of data. For example, this could be set to values like <code>Scalar</code> or <code>NonNull</code> to indicate a fundamental property of the field.</p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>Scalar</code>: Indicates the value is a primitive type (scalar).</p></li>
    /// <li>
    /// <p><code>NonNull</code>: Indicates the field cannot be <code>null</code>.</p></li>
    /// <li>
    /// <p><code>List</code>: Indicates the field contains a list.</p></li>
    /// </ul>
    pub fn get_kind(&self) -> &::std::option::Option<::std::string::String> {
        &self.kind
    }
    /// <p>The name of the data type that represents the field. For example, <code>String</code> is a valid <code>name</code> value.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data type that represents the field. For example, <code>String</code> is a valid <code>name</code> value.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data type that represents the field. For example, <code>String</code> is a valid <code>name</code> value.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The <code>DataSourceIntrospectionModelFieldType</code> object data. The <code>type</code> is only present if <code>DataSourceIntrospectionModelFieldType.kind</code> is set to <code>NonNull</code> or <code>List</code>.</p>
    /// <p>The <code>type</code> typically contains its own <code>kind</code> and <code>name</code> fields to represent the actual type data. For instance, <code>type</code> could contain a <code>kind</code> value of <code>Scalar</code> with a <code>name</code> value of <code>String</code>. The values <code>Scalar</code> and <code>String</code> will be collectively stored in the <code>values</code> field.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::boxed::Box<crate::types::DataSourceIntrospectionModelFieldType>>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>DataSourceIntrospectionModelFieldType</code> object data. The <code>type</code> is only present if <code>DataSourceIntrospectionModelFieldType.kind</code> is set to <code>NonNull</code> or <code>List</code>.</p>
    /// <p>The <code>type</code> typically contains its own <code>kind</code> and <code>name</code> fields to represent the actual type data. For instance, <code>type</code> could contain a <code>kind</code> value of <code>Scalar</code> with a <code>name</code> value of <code>String</code>. The values <code>Scalar</code> and <code>String</code> will be collectively stored in the <code>values</code> field.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::boxed::Box<crate::types::DataSourceIntrospectionModelFieldType>>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The <code>DataSourceIntrospectionModelFieldType</code> object data. The <code>type</code> is only present if <code>DataSourceIntrospectionModelFieldType.kind</code> is set to <code>NonNull</code> or <code>List</code>.</p>
    /// <p>The <code>type</code> typically contains its own <code>kind</code> and <code>name</code> fields to represent the actual type data. For instance, <code>type</code> could contain a <code>kind</code> value of <code>Scalar</code> with a <code>name</code> value of <code>String</code>. The values <code>Scalar</code> and <code>String</code> will be collectively stored in the <code>values</code> field.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::boxed::Box<crate::types::DataSourceIntrospectionModelFieldType>> {
        &self.r#type
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values of the <code>type</code> field. This field represents the AppSync data type equivalent of the introspected field.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values of the <code>type</code> field. This field represents the AppSync data type equivalent of the introspected field.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values of the <code>type</code> field. This field represents the AppSync data type equivalent of the introspected field.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`DataSourceIntrospectionModelFieldType`](crate::types::DataSourceIntrospectionModelFieldType).
    pub fn build(self) -> crate::types::DataSourceIntrospectionModelFieldType {
        crate::types::DataSourceIntrospectionModelFieldType {
            kind: self.kind,
            name: self.name,
            r#type: self.r#type,
            values: self.values,
        }
    }
}
