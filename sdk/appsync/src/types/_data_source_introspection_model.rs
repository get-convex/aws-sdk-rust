// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the introspected data that was retrieved from the data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSourceIntrospectionModel {
    /// <p>The name of the model. For example, this could be the name of a single table in a database.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The <code>DataSourceIntrospectionModelField</code> object data.</p>
    pub fields: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceIntrospectionModelField>>,
    /// <p>The primary key stored as a <code>DataSourceIntrospectionModelIndex</code> object.</p>
    pub primary_key: ::std::option::Option<crate::types::DataSourceIntrospectionModelIndex>,
    /// <p>The array of <code>DataSourceIntrospectionModelIndex</code> objects.</p>
    pub indexes: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceIntrospectionModelIndex>>,
    /// <p>Contains the output of the SDL that was generated from the introspected types. This is controlled by the <code>includeModelsSDL</code> parameter of the <code>GetDataSourceIntrospection</code> operation.</p>
    pub sdl: ::std::option::Option<::std::string::String>,
}
impl DataSourceIntrospectionModel {
    /// <p>The name of the model. For example, this could be the name of a single table in a database.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The <code>DataSourceIntrospectionModelField</code> object data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.fields.is_none()`.
    pub fn fields(&self) -> &[crate::types::DataSourceIntrospectionModelField] {
        self.fields.as_deref().unwrap_or_default()
    }
    /// <p>The primary key stored as a <code>DataSourceIntrospectionModelIndex</code> object.</p>
    pub fn primary_key(&self) -> ::std::option::Option<&crate::types::DataSourceIntrospectionModelIndex> {
        self.primary_key.as_ref()
    }
    /// <p>The array of <code>DataSourceIntrospectionModelIndex</code> objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.indexes.is_none()`.
    pub fn indexes(&self) -> &[crate::types::DataSourceIntrospectionModelIndex] {
        self.indexes.as_deref().unwrap_or_default()
    }
    /// <p>Contains the output of the SDL that was generated from the introspected types. This is controlled by the <code>includeModelsSDL</code> parameter of the <code>GetDataSourceIntrospection</code> operation.</p>
    pub fn sdl(&self) -> ::std::option::Option<&str> {
        self.sdl.as_deref()
    }
}
impl DataSourceIntrospectionModel {
    /// Creates a new builder-style object to manufacture [`DataSourceIntrospectionModel`](crate::types::DataSourceIntrospectionModel).
    pub fn builder() -> crate::types::builders::DataSourceIntrospectionModelBuilder {
        crate::types::builders::DataSourceIntrospectionModelBuilder::default()
    }
}

/// A builder for [`DataSourceIntrospectionModel`](crate::types::DataSourceIntrospectionModel).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataSourceIntrospectionModelBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceIntrospectionModelField>>,
    pub(crate) primary_key: ::std::option::Option<crate::types::DataSourceIntrospectionModelIndex>,
    pub(crate) indexes: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceIntrospectionModelIndex>>,
    pub(crate) sdl: ::std::option::Option<::std::string::String>,
}
impl DataSourceIntrospectionModelBuilder {
    /// <p>The name of the model. For example, this could be the name of a single table in a database.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the model. For example, this could be the name of a single table in a database.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the model. For example, this could be the name of a single table in a database.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>The <code>DataSourceIntrospectionModelField</code> object data.</p>
    pub fn fields(mut self, input: crate::types::DataSourceIntrospectionModelField) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The <code>DataSourceIntrospectionModelField</code> object data.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceIntrospectionModelField>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>The <code>DataSourceIntrospectionModelField</code> object data.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSourceIntrospectionModelField>> {
        &self.fields
    }
    /// <p>The primary key stored as a <code>DataSourceIntrospectionModelIndex</code> object.</p>
    pub fn primary_key(mut self, input: crate::types::DataSourceIntrospectionModelIndex) -> Self {
        self.primary_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The primary key stored as a <code>DataSourceIntrospectionModelIndex</code> object.</p>
    pub fn set_primary_key(mut self, input: ::std::option::Option<crate::types::DataSourceIntrospectionModelIndex>) -> Self {
        self.primary_key = input;
        self
    }
    /// <p>The primary key stored as a <code>DataSourceIntrospectionModelIndex</code> object.</p>
    pub fn get_primary_key(&self) -> &::std::option::Option<crate::types::DataSourceIntrospectionModelIndex> {
        &self.primary_key
    }
    /// Appends an item to `indexes`.
    ///
    /// To override the contents of this collection use [`set_indexes`](Self::set_indexes).
    ///
    /// <p>The array of <code>DataSourceIntrospectionModelIndex</code> objects.</p>
    pub fn indexes(mut self, input: crate::types::DataSourceIntrospectionModelIndex) -> Self {
        let mut v = self.indexes.unwrap_or_default();
        v.push(input);
        self.indexes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The array of <code>DataSourceIntrospectionModelIndex</code> objects.</p>
    pub fn set_indexes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceIntrospectionModelIndex>>) -> Self {
        self.indexes = input;
        self
    }
    /// <p>The array of <code>DataSourceIntrospectionModelIndex</code> objects.</p>
    pub fn get_indexes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSourceIntrospectionModelIndex>> {
        &self.indexes
    }
    /// <p>Contains the output of the SDL that was generated from the introspected types. This is controlled by the <code>includeModelsSDL</code> parameter of the <code>GetDataSourceIntrospection</code> operation.</p>
    pub fn sdl(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sdl = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the output of the SDL that was generated from the introspected types. This is controlled by the <code>includeModelsSDL</code> parameter of the <code>GetDataSourceIntrospection</code> operation.</p>
    pub fn set_sdl(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sdl = input;
        self
    }
    /// <p>Contains the output of the SDL that was generated from the introspected types. This is controlled by the <code>includeModelsSDL</code> parameter of the <code>GetDataSourceIntrospection</code> operation.</p>
    pub fn get_sdl(&self) -> &::std::option::Option<::std::string::String> {
        &self.sdl
    }
    /// Consumes the builder and constructs a [`DataSourceIntrospectionModel`](crate::types::DataSourceIntrospectionModel).
    pub fn build(self) -> crate::types::DataSourceIntrospectionModel {
        crate::types::DataSourceIntrospectionModel {
            name: self.name,
            fields: self.fields,
            primary_key: self.primary_key,
            indexes: self.indexes,
            sdl: self.sdl,
        }
    }
}
