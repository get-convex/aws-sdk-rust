// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataSourceIntrospectionInput {
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub introspection_id: ::std::option::Option<::std::string::String>,
    /// <p>A boolean flag that determines whether SDL should be generated for introspected types or not. If set to <code>true</code>, each model will contain an <code>sdl</code> property that contains the SDL for that type. The SDL only contains the type data and no additional metadata or directives.</p>
    pub include_models_sdl: ::std::option::Option<bool>,
    /// <p>Determines the number of types to be returned in a single response before paginating. This value is typically taken from <code>nextToken</code> value from the previous response.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of introspected types that will be returned in a single response.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl GetDataSourceIntrospectionInput {
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn introspection_id(&self) -> ::std::option::Option<&str> {
        self.introspection_id.as_deref()
    }
    /// <p>A boolean flag that determines whether SDL should be generated for introspected types or not. If set to <code>true</code>, each model will contain an <code>sdl</code> property that contains the SDL for that type. The SDL only contains the type data and no additional metadata or directives.</p>
    pub fn include_models_sdl(&self) -> ::std::option::Option<bool> {
        self.include_models_sdl
    }
    /// <p>Determines the number of types to be returned in a single response before paginating. This value is typically taken from <code>nextToken</code> value from the previous response.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of introspected types that will be returned in a single response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl GetDataSourceIntrospectionInput {
    /// Creates a new builder-style object to manufacture [`GetDataSourceIntrospectionInput`](crate::operation::get_data_source_introspection::GetDataSourceIntrospectionInput).
    pub fn builder() -> crate::operation::get_data_source_introspection::builders::GetDataSourceIntrospectionInputBuilder {
        crate::operation::get_data_source_introspection::builders::GetDataSourceIntrospectionInputBuilder::default()
    }
}

/// A builder for [`GetDataSourceIntrospectionInput`](crate::operation::get_data_source_introspection::GetDataSourceIntrospectionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDataSourceIntrospectionInputBuilder {
    pub(crate) introspection_id: ::std::option::Option<::std::string::String>,
    pub(crate) include_models_sdl: ::std::option::Option<bool>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl GetDataSourceIntrospectionInputBuilder {
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    /// This field is required.
    pub fn introspection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.introspection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn set_introspection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.introspection_id = input;
        self
    }
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn get_introspection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.introspection_id
    }
    /// <p>A boolean flag that determines whether SDL should be generated for introspected types or not. If set to <code>true</code>, each model will contain an <code>sdl</code> property that contains the SDL for that type. The SDL only contains the type data and no additional metadata or directives.</p>
    pub fn include_models_sdl(mut self, input: bool) -> Self {
        self.include_models_sdl = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean flag that determines whether SDL should be generated for introspected types or not. If set to <code>true</code>, each model will contain an <code>sdl</code> property that contains the SDL for that type. The SDL only contains the type data and no additional metadata or directives.</p>
    pub fn set_include_models_sdl(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_models_sdl = input;
        self
    }
    /// <p>A boolean flag that determines whether SDL should be generated for introspected types or not. If set to <code>true</code>, each model will contain an <code>sdl</code> property that contains the SDL for that type. The SDL only contains the type data and no additional metadata or directives.</p>
    pub fn get_include_models_sdl(&self) -> &::std::option::Option<bool> {
        &self.include_models_sdl
    }
    /// <p>Determines the number of types to be returned in a single response before paginating. This value is typically taken from <code>nextToken</code> value from the previous response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines the number of types to be returned in a single response before paginating. This value is typically taken from <code>nextToken</code> value from the previous response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Determines the number of types to be returned in a single response before paginating. This value is typically taken from <code>nextToken</code> value from the previous response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of introspected types that will be returned in a single response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of introspected types that will be returned in a single response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of introspected types that will be returned in a single response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`GetDataSourceIntrospectionInput`](crate::operation::get_data_source_introspection::GetDataSourceIntrospectionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_data_source_introspection::GetDataSourceIntrospectionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_data_source_introspection::GetDataSourceIntrospectionInput {
            introspection_id: self.introspection_id,
            include_models_sdl: self.include_models_sdl,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
