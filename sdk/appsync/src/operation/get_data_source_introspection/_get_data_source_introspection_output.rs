// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataSourceIntrospectionOutput {
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub introspection_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the introspection during retrieval. By default, when a new instrospection is being retrieved, the status will be set to <code>PROCESSING</code>. Once the operation has been completed, the status will change to <code>SUCCESS</code> or <code>FAILED</code> depending on how the data was parsed. A <code>FAILED</code> operation will return an error and its details as an <code>introspectionStatusDetail</code>.</p>
    pub introspection_status: ::std::option::Option<crate::types::DataSourceIntrospectionStatus>,
    /// <p>The error detail field. When a <code>FAILED</code> <code>introspectionStatus</code> is returned, the <code>introspectionStatusDetail</code> will also return the exact error that was generated during the operation.</p>
    pub introspection_status_detail: ::std::option::Option<::std::string::String>,
    /// <p>The <code>DataSourceIntrospectionResult</code> object data.</p>
    pub introspection_result: ::std::option::Option<crate::types::DataSourceIntrospectionResult>,
    _request_id: Option<String>,
}
impl GetDataSourceIntrospectionOutput {
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn introspection_id(&self) -> ::std::option::Option<&str> {
        self.introspection_id.as_deref()
    }
    /// <p>The status of the introspection during retrieval. By default, when a new instrospection is being retrieved, the status will be set to <code>PROCESSING</code>. Once the operation has been completed, the status will change to <code>SUCCESS</code> or <code>FAILED</code> depending on how the data was parsed. A <code>FAILED</code> operation will return an error and its details as an <code>introspectionStatusDetail</code>.</p>
    pub fn introspection_status(&self) -> ::std::option::Option<&crate::types::DataSourceIntrospectionStatus> {
        self.introspection_status.as_ref()
    }
    /// <p>The error detail field. When a <code>FAILED</code> <code>introspectionStatus</code> is returned, the <code>introspectionStatusDetail</code> will also return the exact error that was generated during the operation.</p>
    pub fn introspection_status_detail(&self) -> ::std::option::Option<&str> {
        self.introspection_status_detail.as_deref()
    }
    /// <p>The <code>DataSourceIntrospectionResult</code> object data.</p>
    pub fn introspection_result(&self) -> ::std::option::Option<&crate::types::DataSourceIntrospectionResult> {
        self.introspection_result.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetDataSourceIntrospectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataSourceIntrospectionOutput {
    /// Creates a new builder-style object to manufacture [`GetDataSourceIntrospectionOutput`](crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput).
    pub fn builder() -> crate::operation::get_data_source_introspection::builders::GetDataSourceIntrospectionOutputBuilder {
        crate::operation::get_data_source_introspection::builders::GetDataSourceIntrospectionOutputBuilder::default()
    }
}

/// A builder for [`GetDataSourceIntrospectionOutput`](crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDataSourceIntrospectionOutputBuilder {
    pub(crate) introspection_id: ::std::option::Option<::std::string::String>,
    pub(crate) introspection_status: ::std::option::Option<crate::types::DataSourceIntrospectionStatus>,
    pub(crate) introspection_status_detail: ::std::option::Option<::std::string::String>,
    pub(crate) introspection_result: ::std::option::Option<crate::types::DataSourceIntrospectionResult>,
    _request_id: Option<String>,
}
impl GetDataSourceIntrospectionOutputBuilder {
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn introspection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.introspection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn set_introspection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.introspection_id = input;
        self
    }
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn get_introspection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.introspection_id
    }
    /// <p>The status of the introspection during retrieval. By default, when a new instrospection is being retrieved, the status will be set to <code>PROCESSING</code>. Once the operation has been completed, the status will change to <code>SUCCESS</code> or <code>FAILED</code> depending on how the data was parsed. A <code>FAILED</code> operation will return an error and its details as an <code>introspectionStatusDetail</code>.</p>
    pub fn introspection_status(mut self, input: crate::types::DataSourceIntrospectionStatus) -> Self {
        self.introspection_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the introspection during retrieval. By default, when a new instrospection is being retrieved, the status will be set to <code>PROCESSING</code>. Once the operation has been completed, the status will change to <code>SUCCESS</code> or <code>FAILED</code> depending on how the data was parsed. A <code>FAILED</code> operation will return an error and its details as an <code>introspectionStatusDetail</code>.</p>
    pub fn set_introspection_status(mut self, input: ::std::option::Option<crate::types::DataSourceIntrospectionStatus>) -> Self {
        self.introspection_status = input;
        self
    }
    /// <p>The status of the introspection during retrieval. By default, when a new instrospection is being retrieved, the status will be set to <code>PROCESSING</code>. Once the operation has been completed, the status will change to <code>SUCCESS</code> or <code>FAILED</code> depending on how the data was parsed. A <code>FAILED</code> operation will return an error and its details as an <code>introspectionStatusDetail</code>.</p>
    pub fn get_introspection_status(&self) -> &::std::option::Option<crate::types::DataSourceIntrospectionStatus> {
        &self.introspection_status
    }
    /// <p>The error detail field. When a <code>FAILED</code> <code>introspectionStatus</code> is returned, the <code>introspectionStatusDetail</code> will also return the exact error that was generated during the operation.</p>
    pub fn introspection_status_detail(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.introspection_status_detail = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error detail field. When a <code>FAILED</code> <code>introspectionStatus</code> is returned, the <code>introspectionStatusDetail</code> will also return the exact error that was generated during the operation.</p>
    pub fn set_introspection_status_detail(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.introspection_status_detail = input;
        self
    }
    /// <p>The error detail field. When a <code>FAILED</code> <code>introspectionStatus</code> is returned, the <code>introspectionStatusDetail</code> will also return the exact error that was generated during the operation.</p>
    pub fn get_introspection_status_detail(&self) -> &::std::option::Option<::std::string::String> {
        &self.introspection_status_detail
    }
    /// <p>The <code>DataSourceIntrospectionResult</code> object data.</p>
    pub fn introspection_result(mut self, input: crate::types::DataSourceIntrospectionResult) -> Self {
        self.introspection_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>DataSourceIntrospectionResult</code> object data.</p>
    pub fn set_introspection_result(mut self, input: ::std::option::Option<crate::types::DataSourceIntrospectionResult>) -> Self {
        self.introspection_result = input;
        self
    }
    /// <p>The <code>DataSourceIntrospectionResult</code> object data.</p>
    pub fn get_introspection_result(&self) -> &::std::option::Option<crate::types::DataSourceIntrospectionResult> {
        &self.introspection_result
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataSourceIntrospectionOutput`](crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput).
    pub fn build(self) -> crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput {
        crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput {
            introspection_id: self.introspection_id,
            introspection_status: self.introspection_status,
            introspection_status_detail: self.introspection_status_detail,
            introspection_result: self.introspection_result,
            _request_id: self._request_id,
        }
    }
}
