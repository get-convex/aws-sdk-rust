// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A geolocation target that you select to index. Each geolocation target contains a <code>name</code> and <code>order</code> key-value pair that specifies the geolocation target fields.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeoLocationTarget {
    /// <p>The <code>name</code> of the geolocation target field. If the target field is part of a named shadow, you must select the named shadow using the <code>namedShadow</code> filter.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The <code>order</code> of the geolocation target field. This field is optional. The default value is <code>LatLon</code>.</p>
    pub order: ::std::option::Option<crate::types::TargetFieldOrder>,
}
impl GeoLocationTarget {
    /// <p>The <code>name</code> of the geolocation target field. If the target field is part of a named shadow, you must select the named shadow using the <code>namedShadow</code> filter.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The <code>order</code> of the geolocation target field. This field is optional. The default value is <code>LatLon</code>.</p>
    pub fn order(&self) -> ::std::option::Option<&crate::types::TargetFieldOrder> {
        self.order.as_ref()
    }
}
impl GeoLocationTarget {
    /// Creates a new builder-style object to manufacture [`GeoLocationTarget`](crate::types::GeoLocationTarget).
    pub fn builder() -> crate::types::builders::GeoLocationTargetBuilder {
        crate::types::builders::GeoLocationTargetBuilder::default()
    }
}

/// A builder for [`GeoLocationTarget`](crate::types::GeoLocationTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeoLocationTargetBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) order: ::std::option::Option<crate::types::TargetFieldOrder>,
}
impl GeoLocationTargetBuilder {
    /// <p>The <code>name</code> of the geolocation target field. If the target field is part of a named shadow, you must select the named shadow using the <code>namedShadow</code> filter.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>name</code> of the geolocation target field. If the target field is part of a named shadow, you must select the named shadow using the <code>namedShadow</code> filter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The <code>name</code> of the geolocation target field. If the target field is part of a named shadow, you must select the named shadow using the <code>namedShadow</code> filter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The <code>order</code> of the geolocation target field. This field is optional. The default value is <code>LatLon</code>.</p>
    pub fn order(mut self, input: crate::types::TargetFieldOrder) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>order</code> of the geolocation target field. This field is optional. The default value is <code>LatLon</code>.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::TargetFieldOrder>) -> Self {
        self.order = input;
        self
    }
    /// <p>The <code>order</code> of the geolocation target field. This field is optional. The default value is <code>LatLon</code>.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::TargetFieldOrder> {
        &self.order
    }
    /// Consumes the builder and constructs a [`GeoLocationTarget`](crate::types::GeoLocationTarget).
    pub fn build(self) -> crate::types::GeoLocationTarget {
        crate::types::GeoLocationTarget {
            name: self.name,
            order: self.order,
        }
    }
}
