// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides additional selections for named shadows and geolocation data.</p>
/// <p>To add named shadows to your fleet indexing configuration, set <code>namedShadowIndexingMode</code> to be ON and specify your shadow names in <code>namedShadowNames</code> filter.</p>
/// <p>To add geolocation data to your fleet indexing configuration:</p>
/// <ul>
/// <li>
/// <p>If you store geolocation data in a class/unnamed shadow, set <code>thingIndexingMode</code> to be <code>REGISTRY_AND_SHADOW</code> and specify your geolocation data in <code>geoLocations</code> filter.</p></li>
/// <li>
/// <p>If you store geolocation data in a named shadow, set <code>namedShadowIndexingMode</code> to be <code>ON</code>, add the shadow name in <code>namedShadowNames</code> filter, and specify your geolocation data in <code>geoLocations</code> filter. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-fleet-index.html">Managing fleet indexing</a>.</p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IndexingFilter {
    /// <p>The shadow names that you select to index. The default maximum number of shadow names for indexing is 10. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub named_shadow_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of geolocation targets that you select to index. The default maximum number of geolocation targets for indexing is <code>1</code>. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub geo_locations: ::std::option::Option<::std::vec::Vec<crate::types::GeoLocationTarget>>,
}
impl IndexingFilter {
    /// <p>The shadow names that you select to index. The default maximum number of shadow names for indexing is 10. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.named_shadow_names.is_none()`.
    pub fn named_shadow_names(&self) -> &[::std::string::String] {
        self.named_shadow_names.as_deref().unwrap_or_default()
    }
    /// <p>The list of geolocation targets that you select to index. The default maximum number of geolocation targets for indexing is <code>1</code>. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.geo_locations.is_none()`.
    pub fn geo_locations(&self) -> &[crate::types::GeoLocationTarget] {
        self.geo_locations.as_deref().unwrap_or_default()
    }
}
impl IndexingFilter {
    /// Creates a new builder-style object to manufacture [`IndexingFilter`](crate::types::IndexingFilter).
    pub fn builder() -> crate::types::builders::IndexingFilterBuilder {
        crate::types::builders::IndexingFilterBuilder::default()
    }
}

/// A builder for [`IndexingFilter`](crate::types::IndexingFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IndexingFilterBuilder {
    pub(crate) named_shadow_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) geo_locations: ::std::option::Option<::std::vec::Vec<crate::types::GeoLocationTarget>>,
}
impl IndexingFilterBuilder {
    /// Appends an item to `named_shadow_names`.
    ///
    /// To override the contents of this collection use [`set_named_shadow_names`](Self::set_named_shadow_names).
    ///
    /// <p>The shadow names that you select to index. The default maximum number of shadow names for indexing is 10. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn named_shadow_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.named_shadow_names.unwrap_or_default();
        v.push(input.into());
        self.named_shadow_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The shadow names that you select to index. The default maximum number of shadow names for indexing is 10. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_named_shadow_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.named_shadow_names = input;
        self
    }
    /// <p>The shadow names that you select to index. The default maximum number of shadow names for indexing is 10. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn get_named_shadow_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.named_shadow_names
    }
    /// Appends an item to `geo_locations`.
    ///
    /// To override the contents of this collection use [`set_geo_locations`](Self::set_geo_locations).
    ///
    /// <p>The list of geolocation targets that you select to index. The default maximum number of geolocation targets for indexing is <code>1</code>. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn geo_locations(mut self, input: crate::types::GeoLocationTarget) -> Self {
        let mut v = self.geo_locations.unwrap_or_default();
        v.push(input);
        self.geo_locations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of geolocation targets that you select to index. The default maximum number of geolocation targets for indexing is <code>1</code>. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_geo_locations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GeoLocationTarget>>) -> Self {
        self.geo_locations = input;
        self
    }
    /// <p>The list of geolocation targets that you select to index. The default maximum number of geolocation targets for indexing is <code>1</code>. To increase the limit, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot_device_management.html#fleet-indexing-limits">Amazon Web Services IoT Device Management Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn get_geo_locations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GeoLocationTarget>> {
        &self.geo_locations
    }
    /// Consumes the builder and constructs a [`IndexingFilter`](crate::types::IndexingFilter).
    pub fn build(self) -> crate::types::IndexingFilter {
        crate::types::IndexingFilter {
            named_shadow_names: self.named_shadow_names,
            geo_locations: self.geo_locations,
        }
    }
}
