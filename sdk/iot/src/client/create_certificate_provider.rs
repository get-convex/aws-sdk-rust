// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateCertificateProvider`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`certificate_provider_name(impl Into<String>)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::certificate_provider_name) / [`set_certificate_provider_name(Option<String>)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::set_certificate_provider_name):<br>required: **true**<br><p>The name of the certificate provider.</p><br>
    ///   - [`lambda_function_arn(impl Into<String>)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::lambda_function_arn) / [`set_lambda_function_arn(Option<String>)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::set_lambda_function_arn):<br>required: **true**<br><p>The ARN of the Lambda function that defines the authentication logic.</p><br>
    ///   - [`account_default_for_operations(CertificateProviderOperation)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::account_default_for_operations) / [`set_account_default_for_operations(Option<Vec::<CertificateProviderOperation>>)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::set_account_default_for_operations):<br>required: **true**<br><p>A list of the operations that the certificate provider will use to generate certificates. Valid value: <code>CreateCertificateFromCsr</code>.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::set_client_token):<br>required: **false**<br><p>A string that you can optionally pass in the <code>CreateCertificateProvider</code> request to make sure the request is idempotent.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::set_tags):<br>required: **false**<br><p>Metadata which can be used to manage the certificate provider.</p><br>
    /// - On success, responds with [`CreateCertificateProviderOutput`](crate::operation::create_certificate_provider::CreateCertificateProviderOutput) with field(s):
    ///   - [`certificate_provider_name(Option<String>)`](crate::operation::create_certificate_provider::CreateCertificateProviderOutput::certificate_provider_name): <p>The name of the certificate provider.</p>
    ///   - [`certificate_provider_arn(Option<String>)`](crate::operation::create_certificate_provider::CreateCertificateProviderOutput::certificate_provider_arn): <p>The ARN of the certificate provider.</p>
    /// - On failure, responds with [`SdkError<CreateCertificateProviderError>`](crate::operation::create_certificate_provider::CreateCertificateProviderError)
    pub fn create_certificate_provider(&self) -> crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder {
        crate::operation::create_certificate_provider::builders::CreateCertificateProviderFluentBuilder::new(self.handle.clone())
    }
}
