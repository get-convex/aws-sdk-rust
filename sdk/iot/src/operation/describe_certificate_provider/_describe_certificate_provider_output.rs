// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeCertificateProviderOutput {
    /// <p>The name of the certificate provider.</p>
    pub certificate_provider_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the certificate provider.</p>
    pub certificate_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Lambda function ARN that's associated with the certificate provider.</p>
    pub lambda_function_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of the operations that the certificate provider will use to generate certificates. Valid value: <code>CreateCertificateFromCsr</code>.</p>
    pub account_default_for_operations: ::std::option::Option<::std::vec::Vec<crate::types::CertificateProviderOperation>>,
    /// <p>The date-time string that indicates when the certificate provider was created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date-time string that indicates when the certificate provider was last updated.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeCertificateProviderOutput {
    /// <p>The name of the certificate provider.</p>
    pub fn certificate_provider_name(&self) -> ::std::option::Option<&str> {
        self.certificate_provider_name.as_deref()
    }
    /// <p>The ARN of the certificate provider.</p>
    pub fn certificate_provider_arn(&self) -> ::std::option::Option<&str> {
        self.certificate_provider_arn.as_deref()
    }
    /// <p>The Lambda function ARN that's associated with the certificate provider.</p>
    pub fn lambda_function_arn(&self) -> ::std::option::Option<&str> {
        self.lambda_function_arn.as_deref()
    }
    /// <p>A list of the operations that the certificate provider will use to generate certificates. Valid value: <code>CreateCertificateFromCsr</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_default_for_operations.is_none()`.
    pub fn account_default_for_operations(&self) -> &[crate::types::CertificateProviderOperation] {
        self.account_default_for_operations.as_deref().unwrap_or_default()
    }
    /// <p>The date-time string that indicates when the certificate provider was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date-time string that indicates when the certificate provider was last updated.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeCertificateProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeCertificateProviderOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCertificateProviderOutput`](crate::operation::describe_certificate_provider::DescribeCertificateProviderOutput).
    pub fn builder() -> crate::operation::describe_certificate_provider::builders::DescribeCertificateProviderOutputBuilder {
        crate::operation::describe_certificate_provider::builders::DescribeCertificateProviderOutputBuilder::default()
    }
}

/// A builder for [`DescribeCertificateProviderOutput`](crate::operation::describe_certificate_provider::DescribeCertificateProviderOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeCertificateProviderOutputBuilder {
    pub(crate) certificate_provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) lambda_function_arn: ::std::option::Option<::std::string::String>,
    pub(crate) account_default_for_operations: ::std::option::Option<::std::vec::Vec<crate::types::CertificateProviderOperation>>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeCertificateProviderOutputBuilder {
    /// <p>The name of the certificate provider.</p>
    pub fn certificate_provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the certificate provider.</p>
    pub fn set_certificate_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_provider_name = input;
        self
    }
    /// <p>The name of the certificate provider.</p>
    pub fn get_certificate_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_provider_name
    }
    /// <p>The ARN of the certificate provider.</p>
    pub fn certificate_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the certificate provider.</p>
    pub fn set_certificate_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_provider_arn = input;
        self
    }
    /// <p>The ARN of the certificate provider.</p>
    pub fn get_certificate_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_provider_arn
    }
    /// <p>The Lambda function ARN that's associated with the certificate provider.</p>
    pub fn lambda_function_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lambda_function_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Lambda function ARN that's associated with the certificate provider.</p>
    pub fn set_lambda_function_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lambda_function_arn = input;
        self
    }
    /// <p>The Lambda function ARN that's associated with the certificate provider.</p>
    pub fn get_lambda_function_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lambda_function_arn
    }
    /// Appends an item to `account_default_for_operations`.
    ///
    /// To override the contents of this collection use [`set_account_default_for_operations`](Self::set_account_default_for_operations).
    ///
    /// <p>A list of the operations that the certificate provider will use to generate certificates. Valid value: <code>CreateCertificateFromCsr</code>.</p>
    pub fn account_default_for_operations(mut self, input: crate::types::CertificateProviderOperation) -> Self {
        let mut v = self.account_default_for_operations.unwrap_or_default();
        v.push(input);
        self.account_default_for_operations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the operations that the certificate provider will use to generate certificates. Valid value: <code>CreateCertificateFromCsr</code>.</p>
    pub fn set_account_default_for_operations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CertificateProviderOperation>>,
    ) -> Self {
        self.account_default_for_operations = input;
        self
    }
    /// <p>A list of the operations that the certificate provider will use to generate certificates. Valid value: <code>CreateCertificateFromCsr</code>.</p>
    pub fn get_account_default_for_operations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CertificateProviderOperation>> {
        &self.account_default_for_operations
    }
    /// <p>The date-time string that indicates when the certificate provider was created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date-time string that indicates when the certificate provider was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date-time string that indicates when the certificate provider was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date-time string that indicates when the certificate provider was last updated.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date-time string that indicates when the certificate provider was last updated.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date-time string that indicates when the certificate provider was last updated.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeCertificateProviderOutput`](crate::operation::describe_certificate_provider::DescribeCertificateProviderOutput).
    pub fn build(self) -> crate::operation::describe_certificate_provider::DescribeCertificateProviderOutput {
        crate::operation::describe_certificate_provider::DescribeCertificateProviderOutput {
            certificate_provider_name: self.certificate_provider_name,
            certificate_provider_arn: self.certificate_provider_arn,
            lambda_function_arn: self.lambda_function_arn,
            account_default_for_operations: self.account_default_for_operations,
            creation_date: self.creation_date,
            last_modified_date: self.last_modified_date,
            _request_id: self._request_id,
        }
    }
}
