// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DetectProfileObjectTypeInput {
    /// <p>A string that is serialized from a JSON object.</p>
    pub objects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The unique name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
}
impl DetectProfileObjectTypeInput {
    /// <p>A string that is serialized from a JSON object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.objects.is_none()`.
    pub fn objects(&self) -> &[::std::string::String] {
        self.objects.as_deref().unwrap_or_default()
    }
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
}
impl ::std::fmt::Debug for DetectProfileObjectTypeInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DetectProfileObjectTypeInput");
        formatter.field("objects", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_name", &self.domain_name);
        formatter.finish()
    }
}
impl DetectProfileObjectTypeInput {
    /// Creates a new builder-style object to manufacture [`DetectProfileObjectTypeInput`](crate::operation::detect_profile_object_type::DetectProfileObjectTypeInput).
    pub fn builder() -> crate::operation::detect_profile_object_type::builders::DetectProfileObjectTypeInputBuilder {
        crate::operation::detect_profile_object_type::builders::DetectProfileObjectTypeInputBuilder::default()
    }
}

/// A builder for [`DetectProfileObjectTypeInput`](crate::operation::detect_profile_object_type::DetectProfileObjectTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DetectProfileObjectTypeInputBuilder {
    pub(crate) objects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
}
impl DetectProfileObjectTypeInputBuilder {
    /// Appends an item to `objects`.
    ///
    /// To override the contents of this collection use [`set_objects`](Self::set_objects).
    ///
    /// <p>A string that is serialized from a JSON object.</p>
    pub fn objects(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.objects.unwrap_or_default();
        v.push(input.into());
        self.objects = ::std::option::Option::Some(v);
        self
    }
    /// <p>A string that is serialized from a JSON object.</p>
    pub fn set_objects(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.objects = input;
        self
    }
    /// <p>A string that is serialized from a JSON object.</p>
    pub fn get_objects(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.objects
    }
    /// <p>The unique name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// Consumes the builder and constructs a [`DetectProfileObjectTypeInput`](crate::operation::detect_profile_object_type::DetectProfileObjectTypeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::detect_profile_object_type::DetectProfileObjectTypeInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::detect_profile_object_type::DetectProfileObjectTypeInput {
            objects: self.objects,
            domain_name: self.domain_name,
        })
    }
}
impl ::std::fmt::Debug for DetectProfileObjectTypeInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DetectProfileObjectTypeInputBuilder");
        formatter.field("objects", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_name", &self.domain_name);
        formatter.finish()
    }
}
