// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_quick_response_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_quick_response::CreateQuickResponseInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.channels {
        let mut array_2 = object.key("channels").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.content {
        #[allow(unused_mut)]
        let mut object_6 = object.key("content").start_object();
        crate::protocol_serde::shape_quick_response_data_provider::ser_quick_response_data_provider(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.content_type {
        object.key("contentType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.grouping_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("groupingConfiguration").start_object();
        crate::protocol_serde::shape_grouping_configuration::ser_grouping_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.is_active {
        object.key("isActive").boolean(*var_11);
    }
    if let Some(var_12) = &input.language {
        object.key("language").string(var_12.as_str());
    }
    if let Some(var_13) = &input.name {
        object.key("name").string(var_13.as_str());
    }
    if let Some(var_14) = &input.shortcut_key {
        object.key("shortcutKey").string(var_14.as_str());
    }
    if let Some(var_15) = &input.tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("tags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    Ok(())
}
