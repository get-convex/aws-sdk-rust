// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The quick response fields to filter the quick response query results by.</p>
/// <p>The following is the list of supported field names.</p>
/// <ul>
/// <li>
/// <p>name</p></li>
/// <li>
/// <p>description</p></li>
/// <li>
/// <p>shortcutKey</p></li>
/// <li>
/// <p>isActive</p></li>
/// <li>
/// <p>channels</p></li>
/// <li>
/// <p>language</p></li>
/// <li>
/// <p>contentType</p></li>
/// <li>
/// <p>createdTime</p></li>
/// <li>
/// <p>lastModifiedTime</p></li>
/// <li>
/// <p>lastModifiedBy</p></li>
/// <li>
/// <p>groupingConfiguration.criteria</p></li>
/// <li>
/// <p>groupingConfiguration.values</p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuickResponseFilterField {
    /// <p>The name of the attribute field to filter the quick responses by.</p>
    pub name: ::std::string::String,
    /// <p>The values of attribute field to filter the quick response by.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The operator to use for filtering.</p>
    pub operator: crate::types::QuickResponseFilterOperator,
    /// <p>Whether to treat null value as a match for the attribute field.</p>
    pub include_no_existence: ::std::option::Option<bool>,
}
impl QuickResponseFilterField {
    /// <p>The name of the attribute field to filter the quick responses by.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The values of attribute field to filter the quick response by.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
    /// <p>The operator to use for filtering.</p>
    pub fn operator(&self) -> &crate::types::QuickResponseFilterOperator {
        &self.operator
    }
    /// <p>Whether to treat null value as a match for the attribute field.</p>
    pub fn include_no_existence(&self) -> ::std::option::Option<bool> {
        self.include_no_existence
    }
}
impl QuickResponseFilterField {
    /// Creates a new builder-style object to manufacture [`QuickResponseFilterField`](crate::types::QuickResponseFilterField).
    pub fn builder() -> crate::types::builders::QuickResponseFilterFieldBuilder {
        crate::types::builders::QuickResponseFilterFieldBuilder::default()
    }
}

/// A builder for [`QuickResponseFilterField`](crate::types::QuickResponseFilterField).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QuickResponseFilterFieldBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) operator: ::std::option::Option<crate::types::QuickResponseFilterOperator>,
    pub(crate) include_no_existence: ::std::option::Option<bool>,
}
impl QuickResponseFilterFieldBuilder {
    /// <p>The name of the attribute field to filter the quick responses by.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute field to filter the quick responses by.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the attribute field to filter the quick responses by.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values of attribute field to filter the quick response by.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values of attribute field to filter the quick response by.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values of attribute field to filter the quick response by.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// <p>The operator to use for filtering.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::QuickResponseFilterOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operator to use for filtering.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::QuickResponseFilterOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The operator to use for filtering.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::QuickResponseFilterOperator> {
        &self.operator
    }
    /// <p>Whether to treat null value as a match for the attribute field.</p>
    pub fn include_no_existence(mut self, input: bool) -> Self {
        self.include_no_existence = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to treat null value as a match for the attribute field.</p>
    pub fn set_include_no_existence(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_no_existence = input;
        self
    }
    /// <p>Whether to treat null value as a match for the attribute field.</p>
    pub fn get_include_no_existence(&self) -> &::std::option::Option<bool> {
        &self.include_no_existence
    }
    /// Consumes the builder and constructs a [`QuickResponseFilterField`](crate::types::QuickResponseFilterField).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::QuickResponseFilterFieldBuilder::name)
    /// - [`operator`](crate::types::builders::QuickResponseFilterFieldBuilder::operator)
    pub fn build(self) -> ::std::result::Result<crate::types::QuickResponseFilterField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QuickResponseFilterField {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building QuickResponseFilterField",
                )
            })?,
            values: self.values,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building QuickResponseFilterField",
                )
            })?,
            include_no_existence: self.include_no_existence,
        })
    }
}
