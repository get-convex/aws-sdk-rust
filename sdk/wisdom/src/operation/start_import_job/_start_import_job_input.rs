// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartImportJobInput {
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Wisdom Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// <ul>
    /// <li>
    /// <p>For importing Wisdom quick responses, this should be a <code>QUICK_RESPONSES</code> type knowledge base.</p></li>
    /// </ul>
    pub knowledge_base_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the import job.</p>
    /// <ul>
    /// <li>
    /// <p>For importing quick response resource, set the value to <code>QUICK_RESPONSES</code>.</p></li>
    /// </ul>
    pub import_job_type: ::std::option::Option<crate::types::ImportJobType>,
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    pub upload_id: ::std::option::Option<::std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The metadata fields of the imported Wisdom resources.</p>
    pub metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The configuration information of the external source that the resource data are imported from.</p>
    pub external_source_configuration: ::std::option::Option<crate::types::ExternalSourceConfiguration>,
}
impl StartImportJobInput {
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Wisdom Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// <ul>
    /// <li>
    /// <p>For importing Wisdom quick responses, this should be a <code>QUICK_RESPONSES</code> type knowledge base.</p></li>
    /// </ul>
    pub fn knowledge_base_id(&self) -> ::std::option::Option<&str> {
        self.knowledge_base_id.as_deref()
    }
    /// <p>The type of the import job.</p>
    /// <ul>
    /// <li>
    /// <p>For importing quick response resource, set the value to <code>QUICK_RESPONSES</code>.</p></li>
    /// </ul>
    pub fn import_job_type(&self) -> ::std::option::Option<&crate::types::ImportJobType> {
        self.import_job_type.as_ref()
    }
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    pub fn upload_id(&self) -> ::std::option::Option<&str> {
        self.upload_id.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The metadata fields of the imported Wisdom resources.</p>
    pub fn metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.metadata.as_ref()
    }
    /// <p>The configuration information of the external source that the resource data are imported from.</p>
    pub fn external_source_configuration(&self) -> ::std::option::Option<&crate::types::ExternalSourceConfiguration> {
        self.external_source_configuration.as_ref()
    }
}
impl StartImportJobInput {
    /// Creates a new builder-style object to manufacture [`StartImportJobInput`](crate::operation::start_import_job::StartImportJobInput).
    pub fn builder() -> crate::operation::start_import_job::builders::StartImportJobInputBuilder {
        crate::operation::start_import_job::builders::StartImportJobInputBuilder::default()
    }
}

/// A builder for [`StartImportJobInput`](crate::operation::start_import_job::StartImportJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartImportJobInputBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) import_job_type: ::std::option::Option<crate::types::ImportJobType>,
    pub(crate) upload_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) external_source_configuration: ::std::option::Option<crate::types::ExternalSourceConfiguration>,
}
impl StartImportJobInputBuilder {
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Wisdom Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// <ul>
    /// <li>
    /// <p>For importing Wisdom quick responses, this should be a <code>QUICK_RESPONSES</code> type knowledge base.</p></li>
    /// </ul>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Wisdom Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// <ul>
    /// <li>
    /// <p>For importing Wisdom quick responses, this should be a <code>QUICK_RESPONSES</code> type knowledge base.</p></li>
    /// </ul>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. This should not be a QUICK_RESPONSES type knowledge base if you're storing Wisdom Content resource to it. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// <ul>
    /// <li>
    /// <p>For importing Wisdom quick responses, this should be a <code>QUICK_RESPONSES</code> type knowledge base.</p></li>
    /// </ul>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The type of the import job.</p>
    /// <ul>
    /// <li>
    /// <p>For importing quick response resource, set the value to <code>QUICK_RESPONSES</code>.</p></li>
    /// </ul>
    /// This field is required.
    pub fn import_job_type(mut self, input: crate::types::ImportJobType) -> Self {
        self.import_job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the import job.</p>
    /// <ul>
    /// <li>
    /// <p>For importing quick response resource, set the value to <code>QUICK_RESPONSES</code>.</p></li>
    /// </ul>
    pub fn set_import_job_type(mut self, input: ::std::option::Option<crate::types::ImportJobType>) -> Self {
        self.import_job_type = input;
        self
    }
    /// <p>The type of the import job.</p>
    /// <ul>
    /// <li>
    /// <p>For importing quick response resource, set the value to <code>QUICK_RESPONSES</code>.</p></li>
    /// </ul>
    pub fn get_import_job_type(&self) -> &::std::option::Option<crate::types::ImportJobType> {
        &self.import_job_type
    }
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    /// This field is required.
    pub fn upload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    pub fn set_upload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id = input;
        self
    }
    /// <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
    pub fn get_upload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>The metadata fields of the imported Wisdom resources.</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The metadata fields of the imported Wisdom resources.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata fields of the imported Wisdom resources.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.metadata
    }
    /// <p>The configuration information of the external source that the resource data are imported from.</p>
    pub fn external_source_configuration(mut self, input: crate::types::ExternalSourceConfiguration) -> Self {
        self.external_source_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information of the external source that the resource data are imported from.</p>
    pub fn set_external_source_configuration(mut self, input: ::std::option::Option<crate::types::ExternalSourceConfiguration>) -> Self {
        self.external_source_configuration = input;
        self
    }
    /// <p>The configuration information of the external source that the resource data are imported from.</p>
    pub fn get_external_source_configuration(&self) -> &::std::option::Option<crate::types::ExternalSourceConfiguration> {
        &self.external_source_configuration
    }
    /// Consumes the builder and constructs a [`StartImportJobInput`](crate::operation::start_import_job::StartImportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_import_job::StartImportJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_import_job::StartImportJobInput {
            knowledge_base_id: self.knowledge_base_id,
            import_job_type: self.import_job_type,
            upload_id: self.upload_id,
            client_token: self.client_token,
            metadata: self.metadata,
            external_source_configuration: self.external_source_configuration,
        })
    }
}
